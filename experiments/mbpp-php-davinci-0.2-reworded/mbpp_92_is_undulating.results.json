{
  "name": "mbpp_92_is_undulating",
  "language": "php",
  "prompt": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($n[$i] != $n[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\necho is_undulating(123321);\necho is_undulating(123322);\necho is_undulating(1234321);\necho is_undulating(123454321);\necho is_undulating(12345654321);\necho is_undulating(1234567654321);\necho is_undulating(123456787654321);\necho is_undulating(12345678987654321);\necho is_undulating(12345678910987654321);\necho is_undulating(123456789101110987654321);\necho is_undulating(1234567891011121110987654321);\necho is_undulating(12345678910111213121110987654321);\necho is_undulating(123456789101112131413121110987654321);\necho is_undulating(1234567891011121314151413121110987654321);\necho is_undulating(12345678910111213141516151413121110987654321);\necho is_undulating(123456789101112131415161716151413121110987654321);\necho is_undulating(1234567891011121314151617181716151413121110987654321);\necho is_undulating(12345678910111213141516171819201716151413121110987654321);\necho is_undulating(12345678910111213141516171819202119201716151413121110987654321);\necho is_undulating(1234567891011121314151617181920212121192021192017161514\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp_luqvauw.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $str = (string)$n;\n    $len = strlen($str);\n    $i = 0;\n    $flag = 0;\n    while ($i < $len - 1) {\n        if ($str[$i] == $str[$i + 1]) {\n            $flag = 1;\n            break;\n        }\n        $i++;\n    }\n    if ($flag == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if (($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0 && $n[$i + 2] % 2 == 0) || ($n[$i] % 2 != 0 && $n[$i + 1] % 2 != 0 && $n[$i + 2] % 2 != 0)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph3__5nb_.php:19\nStack trace:\n#0 /tmp/tmph3__5nb_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmph3__5nb_.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    $is_undulating = true;\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        }\n    }\n    return $is_undulating;\n}\n\n$n = 1234;\nif (is_undulating($n)) {\n    echo \"$n is an undulating number\";\n} else {\n    echo \"$n is not an undulating number\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "1234 is not an undulating number",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0 && $n[$i + 2] % 2 == 0) {\n            return false;\n        }\n        if ($n[$i] % 2 != 0 && $n[$i + 1] % 2 != 0 && $n[$i + 2] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n$n = 12345678;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "12345678 is undulating",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $n = str_split($n);\n    $n = array_map('intval', $n);\n    $n = array_map('abs', $n);\n    $n = array_map('strval', $n);\n    $n = implode('', $n);\n    $n = str_split($n);\n    $n = array_map('intval', $n);\n    $n = array_map('abs', $n);\n    $n = array_map('strval', $n);\n    $n = implode('', $n);\n    $n = str_split($n);\n    $n = array_map('intval', $n);\n    $n = array_map('abs', $n);\n    $n = array_map('strval', $n);\n    $n = implode('', $n);\n    $n = str_split($n);\n    $n = array_map('intval', $n);\n    $n = array_map('abs', $n);\n    $n = array_map('strval', $n);\n    $n = implode('', $n);\n    $n = str_split($n);\n    $n = array_map('intval', $n);\n    $n = array_map('abs', $n);\n    $n = array_map('strval', $n);\n    $n = implode('', $n);\n    $n = str_split($n);\n    $n = array_map('intval', $n);\n    $n = array_map('abs', $n);\n    $n = array_map('strval', $n);\n    $n = implode('', $n);\n    $n = str_split($n);\n    $n = array_map('intval', $n);\n    $n = array_map('abs', $n);\n    $n = array_map('strval', $n);\n    $n = implode('', $n);\n    $n = str_split($n);\n    $n = array_map('intval', $n);\n    $n = array_\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwlcwx0kc.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $str = (string)$n;\n    $len = strlen($str);\n    $flag = true;\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($str[$i] % 2 == 0 && $str[$i + 1] % 2 == 0) {\n            $flag = false;\n            break;\n        }\n        if ($str[$i] % 2 != 0 && $str[$i + 1] % 2 != 0) {\n            $flag = false;\n            break;\n        }\n    }\n    return $flag;\n}\n\n$n = 123579;\nif (is_undulating($n)) {\n    echo \"The given number is undulating\";\n} else {\n    echo \"The given number is not undulating\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "The given number is not undulating",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    $i = 0;\n    $j = 1;\n    $k = 2;\n    while ($k < $len) {\n        if ($n[$i] != $n[$j] && $n[$j] != $n[$k] && $n[$i] != $n[$k]) {\n            $i += 3;\n            $j += 3;\n            $k += 3;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo06fuuu4.php:26\nStack trace:\n#0 /tmp/tmpo06fuuu4.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpo06fuuu4.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = 1;\n    $k = 2;\n    while ($k < $len) {\n        if ($n[$i] % 2 == 0 && $n[$j] % 2 == 0 && $n[$k] % 2 == 0) {\n            return false;\n        }\n        if ($n[$i] % 2 != 0 && $n[$j] % 2 != 0 && $n[$k] % 2 != 0) {\n            return false;\n        }\n        $i++;\n        $j++;\n        $k++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $str = (string)$n;\n    $len = strlen($str);\n    $flag = 0;\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($str[$i] % 2 == 0 && $str[$i + 1] % 2 == 0) {\n            $flag = 1;\n            break;\n        }\n        if ($str[$i] % 2 != 0 && $str[$i + 1] % 2 != 0) {\n            $flag = 1;\n            break;\n        }\n    }\n    if ($flag == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$n = 123579;\nif (is_undulating($n)) {\n    echo \"The given number is undulating.\";\n} else {\n    echo \"The given number is not undulating.\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "The given number is not undulating.",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($n[$i] != $n[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n  $s = strval($n);\n  $l = strlen($s);\n  for ($i = 0; $i < $l - 1; $i++) {\n    if (($s[$i] % 2 == 0 && $s[$i + 1] % 2 == 0) || ($s[$i] % 2 == 1 && $s[$i + 1] % 2 == 1)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = 1;\n    $k = 2;\n    while ($k < $len) {\n        if ($n[$i] != $n[$j] && $n[$j] != $n[$k] && $n[$i] != $n[$k]) {\n            return true;\n        }\n        $i++;\n        $j++;\n        $k++;\n    }\n    return false;\n}\n\n$n = 121454;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "121454 is undulating\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7a5oou9x.php:31\nStack trace:\n#0 /tmp/tmp7a5oou9x.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7a5oou9x.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $str = (string)$n;\n    $len = strlen($str);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($str[$i] == $str[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\n$n = 1234;\nif (is_undulating($n)) {\n    echo \"The number $n is undulating\";\n} else {\n    echo \"The number $n is not undulating\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "The number 1234 is undulating",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $len && $j >= 0) {\n        if ($n[$i] != $n[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\n$n = 1234321;\nif (is_undulating($n)) {\n    echo \"The number $n is undulating\";\n} else {\n    echo \"The number $n is not undulating\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "The number 1234321 is undulating\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcaqrybkz.php:30\nStack trace:\n#0 /tmp/tmpcaqrybkz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcaqrybkz.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $n = str_split($n);\n    $i = 0;\n    $j = 1;\n    $k = 2;\n    while ($k < count($n)) {\n        if ($n[$i] % 2 == 0 && $n[$j] % 2 == 0 && $n[$k] % 2 == 0) {\n            return false;\n        }\n        if ($n[$i] % 2 != 0 && $n[$j] % 2 != 0 && $n[$k] % 2 != 0) {\n            return false;\n        }\n        $i++;\n        $j++;\n        $k++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppa3_e_2h.php:25\nStack trace:\n#0 /tmp/tmppa3_e_2h.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppa3_e_2h.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\n$n = 1234;\nif (is_undulating($n)) {\n    echo \"Undulating\";\n} else {\n    echo \"Not undulating\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "Undulating",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $str = (string)$n;\n    $len = strlen($str);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($str[$i] % 2 == 0 && $str[$i + 1] % 2 == 0 && $str[$i + 2] % 2 == 0) {\n            return false;\n        }\n        if ($str[$i] % 2 == 1 && $str[$i + 1] % 2 == 1 && $str[$i + 2] % 2 == 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n  $n = (string)$n;\n  $len = strlen($n);\n  for ($i = 0; $i < $len - 1; $i++) {\n    if ($i % 2 == 0) {\n      if ($n[$i] > $n[$i + 1]) {\n        return false;\n      }\n    } else {\n      if ($n[$i] < $n[$i + 1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $str = (string)$n;\n    $len = strlen($str);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($str[$i] % 2 == 0 && $str[$i + 1] % 2 == 0) {\n            return false;\n        }\n        if ($str[$i] % 2 != 0 && $str[$i + 1] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxuiw30c6.php:25\nStack trace:\n#0 /tmp/tmpxuiw30c6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxuiw30c6.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($n[$i] == $n[$j]) {\n            $i++;\n            $j--;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaom73lea.php:25\nStack trace:\n#0 /tmp/tmpaom73lea.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpaom73lea.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = 1;\n    $k = 2;\n    while($k < $len) {\n        if(($n[$i] < $n[$j] && $n[$j] > $n[$k]) || ($n[$i] > $n[$j] && $n[$j] < $n[$k])) {\n            $i = $j;\n            $j = $k;\n            $k++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0 && $n[$i + 2] % 2 == 0) {\n            return false;\n        }\n        if ($n[$i] % 2 == 1 && $n[$i + 1] % 2 == 1 && $n[$i + 2] % 2 == 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $is_undulating = true;\n    while ($i < $len - 1) {\n        if ($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0) {\n            $is_undulating = false;\n            break;\n        }\n        if ($n[$i] % 2 != 0 && $n[$i + 1] % 2 != 0) {\n            $is_undulating = false;\n            break;\n        }\n        $i++;\n    }\n    return $is_undulating;\n}\n\necho is_undulating(12145445);\necho is_undulating(2468642);\necho is_undulating(135797531);\necho is_undulating(2468024680);\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    $i = 0;\n    $j = 1;\n    while ($j < $len) {\n        if ($n[$i] == $n[$j]) {\n            return false;\n        }\n        $i += 2;\n        $j += 2;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3kyjyq4b.php:24\nStack trace:\n#0 /tmp/tmp3kyjyq4b.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp3kyjyq4b.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i+1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] < $n[$i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nWarning: Uninitialized string offset 7 in /tmp/tmp_on4zlyf.php on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_on4zlyf.php:25\nStack trace:\n#0 /tmp/tmp_on4zlyf.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_on4zlyf.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0 && $n[$i + 2] % 2 == 0) {\n            return false;\n        }\n        if ($n[$i] % 2 != 0 && $n[$i + 1] % 2 != 0 && $n[$i + 2] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    $i = 0;\n    $is_undulating = true;\n    while ($i < $len - 1) {\n        if ($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0) {\n            $is_undulating = false;\n            break;\n        }\n        if ($n[$i] % 2 != 0 && $n[$i + 1] % 2 != 0) {\n            $is_undulating = false;\n            break;\n        }\n        $i++;\n    }\n    return $is_undulating;\n}\n\n$n = 123579;\nvar_dump(is_undulating($n));\n\n$n = 12357;\nvar_dump(is_undulating($n));\n\n$n = 123578;\nvar_dump(is_undulating($n));\n\n$n = 1235789;\nvar_dump(is_undulating($n));\n\n$n = 12357891;\nvar_dump(is_undulating($n));\n\n$n = 123578912;\nvar_dump(is_undulating($n));\n\n$n = 1235789123;\nvar_dump(is_undulating($n));\n\n$n = 12357891234;\nvar_dump(is_undulating($n));\n\n$n = 123578912345;\nvar_dump(is_undulating($n));\n\n$n = 1235789123456;\nvar_dump(is_undulating($n));\n\n$n = 12357891234567;\nvar_dump(is_undulating($n));\n\n$n = 123578912345678;\nvar_dump(is_undulating($n));\n\n$n = 1235789123456789;\nvar_dump(is_undulating($n));\n\n$n = 12357891234567890;\nvar_dump(is_undulating($n));\n\n$n = 123578912345678901;\nvar_dump(is_undulating($n));\n\n$n = 12357891234567\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpz6wfdr82.php on line 68\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $s = strval($n);\n    $len = strlen($s);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($s[$i] >= $s[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($s[$i] <= $s[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $s = (string)$n;\n    $len = strlen($s);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($s[$i] == $s[$i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n  $n = (string)$n;\n  $len = strlen($n);\n  for ($i = 0; $i < $len - 1; $i++) {\n    if ($i % 2 == 0) {\n      if ($n[$i] >= $n[$i + 1]) {\n        return false;\n      }\n    } else {\n      if ($n[$i] <= $n[$i + 1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = 1;\n    while ($i < $len - 1 && $j < $len) {\n        if ($n[$i] != $n[$j]) {\n            $i++;\n            $j++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\n$n = 121454;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "121454 is undulating",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $digits = str_split($n);\n    $len = count($digits);\n    $i = 0;\n    $is_undulating = true;\n    while ($i < $len - 1) {\n        if ($digits[$i] == $digits[$i + 1]) {\n            $is_undulating = false;\n            break;\n        }\n        $i++;\n    }\n    return $is_undulating;\n}\n\n$n = 1234;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "1234 is undulating",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $len = strlen($n);\n    $flag = false;\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                $flag = true;\n            } else {\n                $flag = false;\n                break;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                $flag = true;\n            } else {\n                $flag = false;\n                break;\n            }\n        }\n    }\n    return $flag;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4nx14v1m.php:32\nStack trace:\n#0 /tmp/tmp4nx14v1m.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4nx14v1m.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n  $n = str_split($n);\n  $i = 0;\n  $j = count($n) - 1;\n  while ($i < $j) {\n    if ($n[$i] != $n[$j]) {\n      return false;\n    }\n    $i++;\n    $j--;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpucy3dk24.php:23\nStack trace:\n#0 /tmp/tmpucy3dk24.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpucy3dk24.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n  $n = (string)$n;\n  $len = strlen($n);\n  for ($i = 0; $i < $len - 1; $i++) {\n    if ($i % 2 == 0) {\n      if ($n[$i] >= $n[$i + 1]) {\n        return false;\n      }\n    } else {\n      if ($n[$i] <= $n[$i + 1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\necho is_undulating(1234) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(1223) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(122334) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(122333) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12233334) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12233344) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(122333444) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(1223334444) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12233344444) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(122333444444) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(1223334444444) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12233344444444) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(122333444444444) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(1223334444444444) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12233344444444444) ? 'true' : 'false';\necho \"\\\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Test\", expecting \",\" or \";\" in /tmp/tmpslhxy4ro.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\necho is_undulating(1234) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(1234321) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12344321) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(123454321) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(1234567654321) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(1234654321) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12347654321) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(123487654321) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(1234987654321) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12349876543210) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12349876543210) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12349876543210) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12349876543210) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12349876543210) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12349876543210) ? 'true' : 'false';\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "false\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $n = str_split($n);\n    $len = count($n);\n    $i = 0;\n    $j = 1;\n    while ($i < $len - 1) {\n        if ($n[$i] % 2 == 0 && $n[$j] % 2 == 0) {\n            return false;\n        }\n        if ($n[$i] % 2 != 0 && $n[$j] % 2 != 0) {\n            return false;\n        }\n        $i += 2;\n        $j += 2;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($n[$i] == $n[$i + 1] || $n[$i + 1] == $n[$i + 2] || $n[$i] == $n[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnz_nfbq6.php:19\nStack trace:\n#0 /tmp/tmpnz_nfbq6.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpnz_nfbq6.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($n[$i] != $n[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\n$n = 1234321;\nif (is_undulating($n)) {\n    echo \"The number $n is undulating\";\n} else {\n    echo \"The number $n is not undulating\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "The number 1234321 is undulating\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqj3ub1v1.php:30\nStack trace:\n#0 /tmp/tmpqj3ub1v1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqj3ub1v1.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $str = (string)$n;\n    $len = strlen($str);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($str[$i] != $str[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4xkn6mm.php:24\nStack trace:\n#0 /tmp/tmpp4xkn6mm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpp4xkn6mm.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($n[$i] != $n[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb396h81b.php:24\nStack trace:\n#0 /tmp/tmpb396h81b.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpb396h81b.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($n[$i] == $n[$j]) {\n            $i++;\n            $j--;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpug6e38v1.php:25\nStack trace:\n#0 /tmp/tmpug6e38v1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpug6e38v1.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n\t$n = (string)$n;\n\t$len = strlen($n);\n\t$i = 0;\n\twhile ($i < $len - 1) {\n\t\tif ($n[$i] != $n[$i + 1]) {\n\t\t\t$i++;\n\t\t\tif ($i == $len - 1) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n$n = 12345;\nif (is_undulating($n)) {\n\techo \"Yes\";\n} else {\n\techo \"No\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "Yes",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0) {\n            return false;\n        }\n        if ($n[$i] % 2 != 0 && $n[$i + 1] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if (($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0) || ($n[$i] % 2 != 0 && $n[$i + 1] % 2 != 0)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $s = strval($n);\n    $len = strlen($s);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($s[$i] == $s[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n  $n = (string)$n;\n  $len = strlen($n);\n  $i = 0;\n  while ($i < $len - 1) {\n    if ($n[$i] == $n[$i + 1]) {\n      return false;\n    }\n    $i++;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($n[$i] != $n[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcz_58qr9.php:24\nStack trace:\n#0 /tmp/tmpcz_58qr9.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcz_58qr9.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($n[$i] != $n[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb396h81b.php:24\nStack trace:\n#0 /tmp/tmpb396h81b.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpb396h81b.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $len = strlen($n);\n    $i = 0;\n    $flag = 0;\n    while($i < $len - 1) {\n        if($n[$i] == $n[$i + 1]) {\n            $flag = 1;\n            break;\n        }\n        $i++;\n    }\n    if($flag == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n$n = 1234;\nif(is_undulating($n)) {\n    echo \"Yes\";\n}\nelse {\n    echo \"No\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "Yes",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $flag = 0;\n    while($i < $len - 1) {\n        if($n[$i] == $n[$i + 1]) {\n            $flag = 1;\n            break;\n        }\n        $i++;\n    }\n    if($flag == 1) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n\n$n = 12345;\nif(is_undulating($n)) {\n    echo \"Undulating number\";\n}\nelse {\n    echo \"Not an undulating number\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "Undulating number",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $is_undulating = true;\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        }\n    }\n    return $is_undulating;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $s = (string)$n;\n    $len = strlen($s);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($s[$i] % 2 == 0 && $s[$i + 1] % 2 == 0) {\n            return false;\n        }\n        if ($s[$i] % 2 == 1 && $s[$i + 1] % 2 == 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\necho is_undulating(12145445) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12145435) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12145434) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12145433) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12145432) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12145431) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12145430) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12145429) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12145428) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12145427) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12145426) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12145425) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12145424) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12145423) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12145422) ? 'true' : 'false';\necho \"\\n\";\necho is_undulating(12145421) ?\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmptsz3pkel.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\necho is_undulating(1234) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(121454) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(145) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(1551) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(12345) ? \"true\" : \"false\";\necho \"\\n\";\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "false\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for($i = 0; $i < $len - 1; $i++) {\n        if($i % 2 == 0) {\n            if($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $str = (string) $n;\n    $len = strlen($str);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($str[$i] == $str[$i + 2]) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0 && $n[$i + 2] % 2 == 0) {\n            return false;\n        }\n        if ($n[$i] % 2 != 0 && $n[$i + 1] % 2 != 0 && $n[$i + 2] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($n[$i] != $n[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb396h81b.php:24\nStack trace:\n#0 /tmp/tmpb396h81b.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpb396h81b.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm64r3o6j.php:25\nStack trace:\n#0 /tmp/tmpm64r3o6j.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpm64r3o6j.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n) - 2; $i++) {\n        if ($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0 && $n[$i + 2] % 2 == 0) {\n            return false;\n        }\n        if ($n[$i] % 2 == 1 && $n[$i + 1] % 2 == 1 && $n[$i + 2] % 2 == 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0) {\n            return false;\n        }\n        if ($n[$i] % 2 != 0 && $n[$i + 1] % 2 != 0) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($n[$i] == $n[$j]) {\n            $i++;\n            $j--;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\n$n = 1234321;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "1234321 is undulating\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk7wlca_h.php:31\nStack trace:\n#0 /tmp/tmpk7wlca_h.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpk7wlca_h.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$n = 1234;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\necho \"\\n\";\n\n$n = 12354;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\necho \"\\n\";\n\n$n = 12345;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\necho \"\\n\";\n\n$n = 12354;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\necho \"\\n\";\n\n$n = 1235;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\necho \"\\n\";\n\n$n = 1235;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\necho \"\\n\";\n\n$n = 1235;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\necho \"\\n\";\n\n$n = 1235;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "1234 is not undulating\n12354 is not undulating\n12345 is not undulating\n12354 is not undulating\n1235 is not undulating\n1235 is not undulating\n1235 is not undulating\n1235 is not undulating",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrxh5cap.php:25\nStack trace:\n#0 /tmp/tmpjrxh5cap.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjrxh5cap.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $digits = str_split($n);\n    $is_undulating = true;\n    for ($i = 0; $i < count($digits) - 2; $i++) {\n        if ($digits[$i] % 2 == 0 && $digits[$i + 1] % 2 == 0 && $digits[$i + 2] % 2 == 0) {\n            $is_undulating = false;\n            break;\n        }\n        if ($digits[$i] % 2 != 0 && $digits[$i + 1] % 2 != 0 && $digits[$i + 2] % 2 != 0) {\n            $is_undulating = false;\n            break;\n        }\n    }\n    return $is_undulating;\n}\n\n$n = 1234;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "1234 is undulating",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $n = str_split($n);\n    $i = 0;\n    $j = count($n) - 1;\n    while ($i < $j) {\n        if ($n[$i] != $n[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\n$n = 1234321;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "1234321 is undulating\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg8yk6q3x.php:30\nStack trace:\n#0 /tmp/tmpg8yk6q3x.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpg8yk6q3x.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($n[$i] != $n[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb396h81b.php:24\nStack trace:\n#0 /tmp/tmpb396h81b.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpb396h81b.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $is_undulating = true;\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        }\n    }\n    return $is_undulating;\n}\n\n$n = 1234;\necho is_undulating($n);\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n) - 2; $i++) {\n        if ($n[$i] != $n[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp59chbvse.php:25\nStack trace:\n#0 /tmp/tmp59chbvse.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp59chbvse.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $str = (string)$n;\n    $len = strlen($str);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($str[$i] == $str[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$n = 1234;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\necho \"\\n\";\n\n$n = 12354;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\necho \"\\n\";\n\n$n = 123445;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\necho \"\\n\";\n\n$n = 12344567;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\necho \"\\n\";\n\n$n = 1234456789;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\necho \"\\n\";\n\n$n = 123445678910;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\necho \"\\n\";\n\n$n = 12344567891011;\nif (is_undulating($n)) {\n    echo \"$n is undulating\";\n} else {\n    echo \"$n is not undulating\";\n}\necho \"\\n\";\n\n$n = 1234456789101112;\nif (is_undulating($n)) {\n    echo \"$n is\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Test\", expecting \",\" or \";\" in /tmp/tmpv6boj1xd.php on line 84\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n) - 2; $i++) {\n        if ($n[$i] != $n[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxuiw30c6.php:25\nStack trace:\n#0 /tmp/tmpxuiw30c6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxuiw30c6.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n  $n = (string)$n;\n  $len = strlen($n);\n  $i = 0;\n  $j = $len - 1;\n  while ($i < $j) {\n    if ($n[$i] != $n[$j]) {\n      return false;\n    }\n    $i++;\n    $j--;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbvyyany.php:24\nStack trace:\n#0 /tmp/tmpfbvyyany.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpfbvyyany.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $flag = true;\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                $flag = false;\n                break;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                $flag = false;\n                break;\n            }\n        }\n    }\n    return $flag;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $str = (string)$n;\n    $len = strlen($str);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($str[$i] >= $str[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($str[$i] <= $str[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm64r3o6j.php:25\nStack trace:\n#0 /tmp/tmpm64r3o6j.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpm64r3o6j.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n  $n = (string)$n;\n  $len = strlen($n);\n  $i = 0;\n  while ($i < $len - 1) {\n    if ($n[$i] == $n[$i + 1]) {\n      return false;\n    }\n    $i++;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\necho is_undulating(12145445);\necho is_undulating(121212);\necho is_undulating(1212121);\necho is_undulating(121454);\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "111",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if (($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0) || ($n[$i] % 2 == 1 && $n[$i + 1] % 2 == 1)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        $a = $n[$i];\n        $b = $n[$i + 1];\n        if ($a % 2 == 0 && $b % 2 == 0) {\n            return false;\n        }\n        if ($a % 2 == 1 && $b % 2 == 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    $is_undulating = true;\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        }\n    }\n    return $is_undulating;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0 && $n[$i + 2] % 2 == 0) {\n            return false;\n        }\n        if ($n[$i] % 2 != 0 && $n[$i + 1] % 2 != 0 && $n[$i + 2] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nWarning: Uninitialized string offset 7 in /tmp/tmpl9cg2sgt.php on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl9cg2sgt.php:25\nStack trace:\n#0 /tmp/tmpl9cg2sgt.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpl9cg2sgt.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if (($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0 && $n[$i + 2] % 2 == 0) || ($n[$i] % 2 == 1 && $n[$i + 1] % 2 == 1 && $n[$i + 2] % 2 == 1)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxuiw30c6.php:25\nStack trace:\n#0 /tmp/tmpxuiw30c6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxuiw30c6.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $digits = str_split($n);\n    $len = count($digits);\n    $i = 0;\n    $is_undulating = true;\n    while ($i < $len - 1) {\n        if ($digits[$i] % 2 == 0 && $digits[$i + 1] % 2 == 0) {\n            $is_undulating = false;\n            break;\n        }\n        if ($digits[$i] % 2 != 0 && $digits[$i + 1] % 2 != 0) {\n            $is_undulating = false;\n            break;\n        }\n        $i++;\n    }\n    return $is_undulating;\n}\n\necho is_undulating(12345) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(1234) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(123456789) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(12349876) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(121426) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(1212) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(121212) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(12121212) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(1212121212) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(121212121212) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(12121212121212) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(1212121212121212) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(121212121212121212) ? \"true\" : \"false\";\necho \"\\n\";\necho is_undulating(1212121212121212\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmplpkp1gmx.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = 1;\n    while ($j < $len) {\n        if ($n[$i] == $n[$j]) {\n            return false;\n        }\n        $i += 2;\n        $j += 2;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp361yjzrt.php:24\nStack trace:\n#0 /tmp/tmp361yjzrt.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp361yjzrt.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n  $n = strval($n);\n  $i = 0;\n  $j = strlen($n) - 1;\n  while ($i < $j) {\n    if ($n[$i] != $n[$j]) {\n      return false;\n    }\n    $i++;\n    $j--;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5unvj_6b.php:23\nStack trace:\n#0 /tmp/tmp5unvj_6b.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp5unvj_6b.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n  $n = (string)$n;\n  $len = strlen($n);\n  $i = 0;\n  while ($i < $len - 1) {\n    if ($n[$i] == $n[$i + 1]) {\n      return false;\n    }\n    $i++;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $flag = true;\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                $flag = false;\n                break;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                $flag = false;\n                break;\n            }\n        }\n    }\n    return $flag;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($n[$i] != $n[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $str = (string)$n;\n    $len = strlen($str);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($str[$i] % 2 == 0 && $str[$i + 1] % 2 == 0) {\n            return false;\n        }\n        if ($str[$i] % 2 != 0 && $str[$i + 1] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $s = (string)$n;\n    $len = strlen($s);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($s[$i] >= $s[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($s[$i] <= $s[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    $is_undulating = true;\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        }\n    }\n    return $is_undulating;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    $is_undulating = true;\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        }\n    }\n    return $is_undulating;\n}\n\n$n = 1234;\nif (is_undulating($n)) {\n    echo \"The number $n is undulating.\";\n} else {\n    echo \"The number $n is not undulating.\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "The number 1234 is not undulating.",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $len && $j >= 0) {\n        if ($n[$i] != $n[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpercfp9wh.php:24\nStack trace:\n#0 /tmp/tmpercfp9wh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpercfp9wh.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($n[$i] == $n[$i + 1] || $n[$i + 1] == $n[$i + 2] || $n[$i] == $n[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnz_nfbq6.php:19\nStack trace:\n#0 /tmp/tmpnz_nfbq6.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpnz_nfbq6.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $len = strlen($n);\n    $i = 0;\n    $is_undulating = true;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            $is_undulating = false;\n            break;\n        }\n        $i++;\n    }\n    return $is_undulating;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while($i < $len - 1) {\n        if($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($n[$i] != $n[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\n$n = 1234321;\nif (is_undulating($n)) {\n    echo \"Undulating\";\n} else {\n    echo \"Not Undulating\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "Undulating\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmcbws_un.php:30\nStack trace:\n#0 /tmp/tmpmcbws_un.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmcbws_un.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0) {\n            return false;\n        }\n        if ($n[$i] % 2 == 1 && $n[$i + 1] % 2 == 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$n = 1234;\nif (is_undulating($n)) {\n    echo \"The number $n is undulating.\";\n} else {\n    echo \"The number $n is not undulating.\";\n}\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "The number 1234 is not undulating.",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($n[$i] != $n[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb396h81b.php:24\nStack trace:\n#0 /tmp/tmpb396h81b.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpb396h81b.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $is_undulating = true;\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        }\n    }\n    return $is_undulating;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0) {\n            return false;\n        }\n        if ($n[$i] % 2 != 0 && $n[$i + 1] % 2 != 0) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm64r3o6j.php:25\nStack trace:\n#0 /tmp/tmpm64r3o6j.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpm64r3o6j.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = strval($n);\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] == $n[$i + 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($n[$i] != $n[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb396h81b.php:24\nStack trace:\n#0 /tmp/tmpb396h81b.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpb396h81b.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $s = (string)$n;\n    $len = strlen($s);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($s[$i] <= $s[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($s[$i] >= $s[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52zlu3by.php:25\nStack trace:\n#0 /tmp/tmp52zlu3by.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp52zlu3by.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $s = strval($n);\n    $len = strlen($s);\n    $flag = true;\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($s[$i] == $s[$i + 1]) {\n            $flag = false;\n            break;\n        }\n    }\n    return $flag;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for($i = 0; $i < $len - 2; $i++) {\n        if($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0 && $n[$i + 2] % 2 == 0) {\n            return false;\n        }\n        if($n[$i] % 2 != 0 && $n[$i + 1] % 2 != 0 && $n[$i + 2] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0 && $n[$i + 2] % 2 == 0) {\n            return false;\n        }\n        if ($n[$i] % 2 != 0 && $n[$i + 1] % 2 != 0 && $n[$i + 2] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    $j = 1;\n    $k = 2;\n    while ($k < $len) {\n        if ($n[$i] % 2 == 0 && $n[$j] % 2 == 0 && $n[$k] % 2 == 0) {\n            return true;\n        }\n        if ($n[$i] % 2 != 0 && $n[$j] % 2 != 0 && $n[$k] % 2 != 0) {\n            return true;\n        }\n        $i++;\n        $j++;\n        $k++;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfstq3frr.php:28\nStack trace:\n#0 /tmp/tmpfstq3frr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfstq3frr.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = str_split($n);\n    $i = 0;\n    $j = count($n) - 1;\n    while ($i < $j) {\n        if ($n[$i] != $n[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dztma4x.php:23\nStack trace:\n#0 /tmp/tmp2dztma4x.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2dztma4x.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($n[$i] % 2 == 0 && $n[$i + 1] % 2 == 0) {\n            return false;\n        }\n        if ($n[$i] % 2 == 1 && $n[$i + 1] % 2 == 1) {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $len && $j >= 0) {\n        if ($n[$i] != $n[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7z3tuinz.php:24\nStack trace:\n#0 /tmp/tmp7z3tuinz.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp7z3tuinz.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $s = strval($n);\n    $l = strlen($s);\n    for ($i = 0; $i < $l - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($s[$i] > $s[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($s[$i] < $s[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n  $str = (string)$n;\n  $len = strlen($str);\n  $i = 0;\n  $j = $len - 1;\n  while ($i < $j) {\n    if ($str[$i] != $str[$j]) {\n      return false;\n    }\n    $i++;\n    $j--;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxgpokiv.php:24\nStack trace:\n#0 /tmp/tmpqxgpokiv.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpqxgpokiv.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string) $n;\n    $len = strlen($n);\n    $is_undulating = true;\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] > $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        } else {\n            if ($n[$i] < $n[$i + 1]) {\n                $is_undulating = false;\n                break;\n            }\n        }\n    }\n    return $is_undulating;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n  $n = (string) $n;\n  $len = strlen($n);\n  $is_undulating = true;\n  for ($i = 0; $i < $len - 2; $i++) {\n    $a = $n[$i];\n    $b = $n[$i + 1];\n    $c = $n[$i + 2];\n    if ($a == $b || $b == $c || $a == $c) {\n      $is_undulating = false;\n      break;\n    }\n  }\n  return $is_undulating;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5szh1oef.php:24\nStack trace:\n#0 /tmp/tmp5szh1oef.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5szh1oef.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n    $n = (string)$n;\n    $len = strlen($n);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($i % 2 == 0) {\n            if ($n[$i] >= $n[$i + 1]) {\n                return false;\n            }\n        } else {\n            if ($n[$i] <= $n[$i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}