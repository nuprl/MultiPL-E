{
  "name": "mbpp_429_and_tuples",
  "language": "php",
  "prompt": "<?php\n// Write a function to extract the elementwise and arrays from the given two arrays.\nfunction and_tuples($test_tup1, $test_tup2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return and_tuples(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 4, 6, 9), array(5, 2, 3, 3)) !== array(0, 0, 2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4), array(5, 6, 7, 8)) !== array(1, 2, 3, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 9, 11, 12), array(7, 13, 14, 17)) !== array(0, 9, 10, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $result = array();\n    for ($i = 0; $i < sizeof($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(5, 4, 3, 2, 1);\nprint_r(and_tuples($test_tup1, $test_tup2));",
    "    $result = array();\n    for ($i = 0; $i < count($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(1, 2, 3, 4, 5);\nprint_r(and_tuples($test_tup1, $test_tup2));",
    "    $result = array();\n    for ($i = 0; $i < count($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(2, 3, 4, 5, 6);\n$result = and_tuples($test_tup1, $test_tup2);\nprint_r($result);",
    "    $result = array();\n    for ($i = 0; $i < count($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(1, 2, 3, 4, 5);\nprint_r(and_tuples($test_tup1, $test_tup2));",
    "    $result = array();\n    $len = count($test_tup1);\n    for ($i = 0; $i < $len; $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(2, 3, 4, 5, 6);\nprint_r(and_tuples($test_tup1, $test_tup2));",
    "    $result = array();\n    for ($i = 0; $i < count($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(5, 6, 7, 8, 9);\nprint_r(and_tuples($test_tup1, $test_tup2));",
    "    $result = array();\n    for ($i = 0; $i < count($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(1, 2, 3, 4, 5);\nprint_r(and_tuples($test_tup1, $test_tup2));",
    "    $result = array();\n    for($i = 0; $i < count($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(5, 6, 7, 8, 9);\nprint_r(and_tuples($test_tup1, $test_tup2));",
    "    $result = array();\n    for ($i = 0; $i < sizeof($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(1, 2, 3, 4, 5);\nprint_r(and_tuples($test_tup1, $test_tup2));",
    "    $result = array();\n    for ($i = 0; $i < count($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(5, 6, 7, 8, 9);\n$result = and_tuples($test_tup1, $test_tup2);\nprint_r($result);",
    "    $result = array();\n    for ($i = 0; $i < count($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(6, 7, 8, 9, 10);\n$result = and_tuples($test_tup1, $test_tup2);\nprint_r($result);",
    "    $result = array();\n    for ($i = 0; $i < sizeof($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n$test_tup1 = array(1, 2, 3);\n$test_tup2 = array(4, 5, 6);\nprint_r(and_tuples($test_tup1, $test_tup2));",
    "    $result = array();\n    for ($i = 0; $i < count($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(6, 7, 8, 9, 10);\n$result = and_tuples($test_tup1, $test_tup2);\nprint_r($result);",
    "    $result = array();\n    for ($i = 0; $i < count($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n$test_tup1 = array(1, 2, 3, 4, 5, 6);\n$test_tup2 = array(2, 4, 6, 8, 10, 12);\nprint_r(and_tuples($test_tup1, $test_tup2));",
    "    $result = array();\n    for ($i = 0; $i < count($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(6, 7, 8, 9, 10);\nprint_r(and_tuples($test_tup1, $test_tup2));\n",
    "    $result = array();\n    for($i = 0; $i < count($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(6, 7, 8, 9, 10);\nprint_r(and_tuples($test_tup1, $test_tup2));",
    "    $result = array();\n    for ($i = 0; $i < count($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(2, 3, 4, 5, 6);\nprint_r(and_tuples($test_tup1, $test_tup2));",
    "    $result = array();\n    for ($i = 0; $i < count($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(2, 4, 6, 8, 10);\nprint_r(and_tuples($test_tup1, $test_tup2));",
    "    $result = array();\n    for($i = 0; $i < count($test_tup1); $i++) {\n        $result[$i] = $test_tup1[$i] & $test_tup2[$i];\n    }\n    return $result;\n}\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(1, 2, 3, 4, 5);\nprint_r(and_tuples($test_tup1, $test_tup2));",
    "    $result = array();\n    for ($i = 0; $i < count($test_tup1); $i++) {\n        if ($test_tup1[$i] == $test_tup2[$i]) {\n            array_push($result, $test_tup1[$i]);\n        }\n    }\n    return $result;\n}\n\n$test_tup1 = array(1, 2, 3, 4, 5);\n$test_tup2 = array(1, 2, 3, 4, 5);\nprint_r(and_tuples($test_tup1, $test_tup2));"
  ]
}