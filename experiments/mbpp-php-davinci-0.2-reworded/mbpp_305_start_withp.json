{
  "name": "mbpp_305_start_withp",
  "language": "php",
  "prompt": "<?php\n// Write a function to return two words from an array of words starting with letter 'p'.\nfunction start_withp($words) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return start_withp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"Python PHP\", \"Java JavaScript\", \"c c++\")) !== array(\"Python\", \"PHP\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Python Programming\", \"Java Programming\")) !== array(\"Python\", \"Programming\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Pqrst Pqr\", \"qrstuv\")) !== array(\"Pqrst\", \"Pqr\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "\t$result = array();\n\tforeach ($words as $word) {\n\t\tif (strpos($word, 'p') === 0) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$words = array('pizza', 'pepper', 'potato', 'apple', 'orange', 'pineapple');\nprint_r(start_withp($words));",
    "  $result = array();\n  foreach ($words as $word) {\n    if (strtolower($word[0]) == 'p') {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\n$words = array('Pizza', 'Pasta', 'Pudding', 'Pineapple', 'Pork', 'Prawn');\nprint_r(start_withp($words));",
    "    $result = array();\n    foreach ($words as $word) {\n        if (strpos($word, 'p') === 0) {\n            $result[] = $word;\n            if (count($result) == 2) {\n                break;\n            }\n        }\n    }\n    return $result;\n}\n\n$words = array('pear', 'apple', 'peach', 'plum', 'pineapple', 'pumpkin', 'pomegranate');\nprint_r(start_withp($words));",
    "\t$result = array();\n\tforeach ($words as $word) {\n\t\tif (strpos($word, 'p') === 0) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$words = array('pizza', 'apple', 'pear', 'banana', 'pancake');\n$result = start_withp($words);\nprint_r($result);",
    "  $pwords = array();\n  foreach ($words as $word) {\n    if (preg_match('/^p/', $word)) {\n      $pwords[] = $word;\n    }\n  }\n  return $pwords;\n}\n\n$words = array('pear', 'apple', 'peach', 'orange', 'pineapple', 'plum');\nprint_r(start_withp($words));",
    "    $result = [];\n    foreach ($words as $word) {\n        if (strpos($word, 'p') === 0) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n$words = ['pear', 'apple', 'pineapple', 'orange', 'papaya'];\nprint_r(start_withp($words));\n",
    "    $pwords = array();\n    foreach ($words as $word) {\n        if (substr($word, 0, 1) == 'p') {\n            $pwords[] = $word;\n        }\n    }\n    return $pwords;\n}\n\n$words = array('pizza', 'apple', 'pear', 'banana', 'pineapple');\n$pwords = start_withp($words);\nprint_r($pwords);",
    "    $result = array();\n    foreach ($words as $word) {\n        if (strtolower(substr($word, 0, 1)) == 'p') {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n$words = array('PHP', 'Javascript', 'Python', 'Java', 'C', 'C++');\n$result = start_withp($words);\nprint_r($result);",
    "    $p_words = [];\n    foreach ($words as $word) {\n        if (substr($word, 0, 1) == 'p') {\n            $p_words[] = $word;\n        }\n    }\n    return $p_words;\n}\n\n$words = ['pizza', 'pasta', 'pepperoni', 'potato', 'pork', 'prawns', 'pastry', 'pudding', 'pumpkin', 'peas'];\n\nprint_r(start_withp($words));",
    "    $result = array();\n    foreach ($words as $word) {\n        if (strtolower(substr($word, 0, 1)) == 'p') {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n$words = array('PHP', 'HTML', 'CSS', 'JavaScript', 'jQuery', 'AJAX', 'XML', 'JSON');\n$result = start_withp($words);\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $pwords = array();\n    foreach ($words as $word) {\n        if (substr($word, 0, 1) == 'p') {\n            $pwords[] = $word;\n        }\n    }\n    return $pwords;\n}\n\n$words = array('pizza', 'apple', 'pear', 'banana', 'pancake', 'potato');\n$pwords = start_withp($words);\nprint_r($pwords);",
    "\t$result = array();\n\tforeach ($words as $word) {\n\t\tif (strpos($word, 'p') === 0) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$words = array('pear', 'apple', 'peach', 'pineapple', 'plum', 'papaya');\n$result = start_withp($words);\nprint_r($result);\n",
    "    $result = array();\n    foreach ($words as $word) {\n        if (strtolower($word[0]) == 'p') {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n$words = array('PHP', 'HTML', 'CSS', 'JavaScript', 'Python', 'Ruby', 'C', 'C++');\n$result = start_withp($words);\nprint_r($result);",
    "  $result = array();\n  foreach ($words as $word) {\n    if (preg_match('/^p/', $word)) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\n$words = array('pizza', 'apple', 'pear', 'peach', 'plum', 'pineapple');\nprint_r(start_withp($words));",
    "    $pwords = [];\n    foreach ($words as $word) {\n        if (strtolower($word[0]) == 'p') {\n            $pwords[] = $word;\n        }\n    }\n    return $pwords;\n}\n\n$words = ['PHP', 'Exercises', 'Backend'];\nprint_r(start_withp($words));",
    "  $result = array();\n  foreach ($words as $word) {\n    if (strpos($word, 'p') === 0) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\n$words = array('pizza', 'pasta', 'pancake', 'potato', 'pudding', 'pie', 'pork', 'pepper', 'pumpkin', 'pear');\nprint_r(start_withp($words));",
    "  $result = array();\n  foreach ($words as $word) {\n    if (preg_match('/^p/', $word)) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n$words = array('pear', 'apple', 'orange', 'pineapple', 'plum');\nprint_r(start_withp($words));\n",
    "    $result = array();\n    foreach ($words as $word) {\n        if (strpos($word, 'p') === 0) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n$words = array('pizza', 'pasta', 'parmesan', 'parsley', 'paprika', 'pepper', 'pepperoni', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley', 'parsnip', 'parsley",
    "  $result = [];\n  foreach ($words as $word) {\n    if (strpos($word, 'p') === 0) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\n$words = ['pizza', 'apple', 'pear', 'peach', 'pineapple'];\nprint_r(start_withp($words));\n",
    "    $result = [];\n    foreach ($words as $word) {\n        if (strtolower($word[0]) == 'p') {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n$words = ['pizza', 'apple', 'pear', 'peach', 'pineapple', 'pomegranate'];\nprint_r(start_withp($words));\n"
  ]
}