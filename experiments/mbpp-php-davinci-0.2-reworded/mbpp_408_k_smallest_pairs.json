{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "php",
  "prompt": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count == 0) {\n        return $result;\n    }\n    $minHeap = new SplMinHeap();\n    $minHeap->insert([$nums1[0] + $nums2[0], 0, 0]);\n    while ($k > 0 && !$minHeap->isEmpty()) {\n        $k--;\n        $node = $minHeap->extract();\n        $result[] = [$nums1[$node[1]], $nums2[$node[2]]];\n        if ($node[1] + 1 < count($nums1)) {\n            $minHeap->insert([$nums1[$node[1] + 1] + $nums2[$node[2]], $node[1] + 1, $node[2]]);\n        }\n        if ($node[1] == 0 && $node[2] + 1 < count($nums2)) {\n            $minHeap->insert([$nums1[$node[1]] + $nums2[$node[2] + 1], $node[1], $node[2] + 1]);\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    $queue = new SplPriorityQueue();\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $queue->insert([$nums1[$i], $nums2[$j]], -($nums1[$i] + $nums2[$j]));\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1) * count($nums2);\n    if ($k >= $count) {\n        foreach ($nums1 as $num1) {\n            foreach ($nums2 as $num2) {\n                $result[] = [$num1, $num2];\n            }\n        }\n        return $result;\n    }\n    $queue = new SplPriorityQueue();\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $queue->insert([$num1, $num2], -($num1 + $num2));\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n",
    "    $result = [];\n    $count = 0;\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[$count] = [$nums1[$i], $nums2[$j]];\n            $count++;\n        }\n    }\n    $result = array_map(function ($item) {\n        return $item[0] + $item[1];\n    }, $result);\n    array_multisort($result, SORT_ASC, $result);\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count == 0) {\n        return $result;\n    }\n    $count = $count > $k ? $k : $count;\n    $queue = new SplPriorityQueue();\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $queue->insert([$nums1[$i], $nums2[$j]], $nums1[$i] + $nums2[$j]);\n        }\n    }\n    for ($i = 0; $i < $count; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = 0;\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b){\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pairs[] = [$n1, $n2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = [];\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min && !in_array([$j, $l], $min_index)) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = [$j, $l];\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index[0]], $nums2[$min_index[1]]];\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $length1 = count($nums1);\n    $length2 = count($nums2);\n    if ($length1 == 0 || $length2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $length1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $length1; $i++) {\n            if ($index[$i] < $length2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $i = 0;\n    $j = 0;\n    while ($i < $len1 && $j < $len2 && count($result) < $k) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($i == $len1 - 1) {\n            $j++;\n        } elseif ($j == $len2 - 1) {\n            $i++;\n        } elseif ($nums1[$i + 1] + $nums2[$j] < $nums1[$i] + $nums2[$j + 1]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1,2,4,5,6];\n$nums2 = [3,5,7,9];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    $queue = new SplPriorityQueue();\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $queue->insert([$nums1[$i], $nums2[$j]], -($nums1[$i] + $nums2[$j]));\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $pairs[$i];\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\n\n$nums1 = [1,1,2];\n$nums2 = [1,2,3];\n$k = 2;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\n\n$nums1 = [1,2];\n$nums2 = [3];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $i = 0;\n    $j = 0;\n    while ($i < $len1 && $j < $len2 && count($result) < $k) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($j == $len2 - 1) {\n            $i++;\n            $j = 0;\n        } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n",
    "    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));",
    "    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $size1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));",
    "    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));"
  ]
}