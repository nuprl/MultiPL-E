{
  "name": "mbpp_141_pancake_sort",
  "language": "php",
  "prompt": "<?php\n// Write a function to sort an array of elements.\nfunction pancake_sort($nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return pancake_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15, 79, 25, 38, 69)) !== array(15, 25, 38, 69, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(98, 12, 54, 36, 85)) !== array(12, 36, 54, 85, 98)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 42, 32, 12, 23)) !== array(12, 23, 32, 41, 42)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $len = count($nums);\n    for ($i = $len - 1; $i > 0; $i--) {\n        $max = $nums[0];\n        $max_index = 0;\n        for ($j = 1; $j <= $i; $j++) {\n            if ($nums[$j] > $max) {\n                $max = $nums[$j];\n                $max_index = $j;\n            }\n        }\n        if ($max_index != $i) {\n            if ($max_index != 0) {\n                $nums = flip($nums, $max_index);\n            }\n            $nums = flip($nums, $i);\n        }\n    }\n    return $nums;\n}\n",
    "    $size = count($nums);\n    for ($i = $size; $i > 1; $i--) {\n        $max_index = find_max_index($nums, $i);\n        if ($max_index != $i - 1) {\n            flip($nums, $max_index);\n            flip($nums, $i - 1);\n        }\n    }\n    return $nums;\n}\n",
    "    $n = count($nums);\n    for ($i = $n - 1; $i > 0; $i--) {\n        $max_index = 0;\n        for ($j = 0; $j <= $i; $j++) {\n            if ($nums[$j] > $nums[$max_index]) {\n                $max_index = $j;\n            }\n        }\n        flip($nums, $max_index);\n        flip($nums, $i);\n    }\n    return $nums;\n}\n",
    "    $n = count($nums);\n    for ($i = $n - 1; $i > 0; $i--) {\n        $max_index = 0;\n        for ($j = 1; $j <= $i; $j++) {\n            if ($nums[$j] > $nums[$max_index]) {\n                $max_index = $j;\n            }\n        }\n        flip($nums, $max_index);\n        flip($nums, $i);\n    }\n    return $nums;\n}\n",
    "    $n = count($nums);\n    for ($i = $n; $i > 1; $i--) {\n        $max_index = 0;\n        for ($j = 0; $j < $i; $j++) {\n            if ($nums[$j] > $nums[$max_index]) {\n                $max_index = $j;\n            }\n        }\n        flip($nums, $max_index);\n        flip($nums, $i - 1);\n    }\n    return $nums;\n}\n",
    "    $len = count($nums);\n    for ($i = $len - 1; $i > 0; $i--) {\n        $max = $i;\n        for ($j = 0; $j < $i; $j++) {\n            if ($nums[$j] > $nums[$max]) {\n                $max = $j;\n            }\n        }\n        if ($max != $i) {\n            flip($nums, $max);\n            flip($nums, $i);\n        }\n    }\n    return $nums;\n}\n",
    "    $n = count($nums);\n    for ($i = $n; $i > 1; $i--) {\n        $max_idx = 0;\n        for ($j = 1; $j < $i; $j++) {\n            if ($nums[$j] > $nums[$max_idx]) {\n                $max_idx = $j;\n            }\n        }\n        if ($max_idx != $i - 1) {\n            flip($nums, $max_idx);\n            flip($nums, $i - 1);\n        }\n    }\n    return $nums;\n}\n",
    "    $n = count($nums);\n    for ($i = $n - 1; $i > 0; $i--) {\n        $max_index = find_max($nums, $i);\n        if ($max_index != $i) {\n            flip($nums, $max_index);\n            flip($nums, $i);\n        }\n    }\n    return $nums;\n}\n",
    "    $len = count($nums);\n    for ($i = $len - 1; $i >= 0; $i--) {\n        $max_index = $i;\n        for ($j = 0; $j <= $i; $j++) {\n            if ($nums[$j] > $nums[$max_index]) {\n                $max_index = $j;\n            }\n        }\n        if ($max_index != $i) {\n            pancake_flip($nums, $max_index);\n            pancake_flip($nums, $i);\n        }\n    }\n    return $nums;\n}\n",
    "    $n = count($nums);\n    for ($i = $n - 1; $i > 0; $i--) {\n        $max_index = 0;\n        for ($j = 1; $j <= $i; $j++) {\n            if ($nums[$j] > $nums[$max_index]) {\n                $max_index = $j;\n            }\n        }\n        flip($nums, $max_index);\n        flip($nums, $i);\n    }\n    return $nums;\n}\n",
    "    $size = count($nums);\n    for ($i = $size; $i > 1; $i--) {\n        $max_index = 0;\n        for ($j = 0; $j < $i; $j++) {\n            if ($nums[$j] > $nums[$max_index]) {\n                $max_index = $j;\n            }\n        }\n        flip($nums, $max_index);\n        flip($nums, $i - 1);\n    }\n    return $nums;\n}\n",
    "    $size = count($nums);\n    for ($i = $size; $i > 1; $i--) {\n        $max_index = 0;\n        for ($j = 0; $j < $i; $j++) {\n            if ($nums[$j] > $nums[$max_index]) {\n                $max_index = $j;\n            }\n        }\n        flip($nums, $max_index);\n        flip($nums, $i - 1);\n    }\n    return $nums;\n}\n",
    "    $len = count($nums);\n    for ($i = $len - 1; $i > 0; $i--) {\n        $max = $nums[0];\n        $max_index = 0;\n        for ($j = 1; $j <= $i; $j++) {\n            if ($nums[$j] > $max) {\n                $max = $nums[$j];\n                $max_index = $j;\n            }\n        }\n        if ($max_index != $i) {\n            flip($nums, $max_index);\n            flip($nums, $i);\n        }\n    }\n    return $nums;\n}\n",
    "    $size = count($nums);\n    for ($i = $size; $i > 1; $i--) {\n        $max_index = find_max($nums, $i);\n        if ($max_index != $i - 1) {\n            flip($nums, $max_index);\n            flip($nums, $i - 1);\n        }\n    }\n    return $nums;\n}\n",
    "    $n = count($nums);\n    for ($i = $n - 1; $i > 0; $i--) {\n        $max_index = 0;\n        for ($j = 1; $j <= $i; $j++) {\n            if ($nums[$j] > $nums[$max_index]) {\n                $max_index = $j;\n            }\n        }\n        if ($max_index != $i) {\n            flip($nums, $max_index);\n            flip($nums, $i);\n        }\n    }\n    return $nums;\n}\n",
    "    $len = count($nums);\n    for ($i = $len - 1; $i > 0; $i--) {\n        $max_index = 0;\n        for ($j = 1; $j <= $i; $j++) {\n            if ($nums[$j] > $nums[$max_index]) {\n                $max_index = $j;\n            }\n        }\n        if ($max_index != $i) {\n            flip($nums, $max_index);\n            flip($nums, $i);\n        }\n    }\n    return $nums;\n}\n",
    "    $n = count($nums);\n    for ($i = $n; $i > 1; $i--) {\n        $max_index = find_max_index($nums, $i);\n        if ($max_index != $i - 1) {\n            flip($nums, $max_index);\n            flip($nums, $i - 1);\n        }\n    }\n    return $nums;\n}\n",
    "    $len = count($nums);\n    for ($i = $len; $i > 1; $i--) {\n        $max = $nums[0];\n        $max_index = 0;\n        for ($j = 1; $j < $i; $j++) {\n            if ($nums[$j] > $max) {\n                $max = $nums[$j];\n                $max_index = $j;\n            }\n        }\n        if ($max_index != $i - 1) {\n            if ($max_index != 0) {\n                $nums = flip($nums, $max_index);\n            }\n            $nums = flip($nums, $i - 1);\n        }\n    }\n    return $nums;\n}\n",
    "    $len = count($nums);\n    for ($i = 0; $i < $len; $i++) {\n        $max = $i;\n        for ($j = $i + 1; $j < $len; $j++) {\n            if ($nums[$j] > $nums[$max]) {\n                $max = $j;\n            }\n        }\n        if ($max != $i) {\n            $nums = flip($nums, $max);\n            $nums = flip($nums, $i);\n        }\n    }\n    return $nums;\n}\n",
    "    $len = count($nums);\n    for ($i = 0; $i < $len; $i++) {\n        $max = $nums[0];\n        $max_index = 0;\n        for ($j = 1; $j < $len - $i; $j++) {\n            if ($nums[$j] > $max) {\n                $max = $nums[$j];\n                $max_index = $j;\n            }\n        }\n        if ($max_index != $len - $i - 1) {\n            if ($max_index != 0) {\n                $nums = flip($nums, $max_index);\n            }\n            $nums = flip($nums, $len - $i - 1);\n        }\n    }\n    return $nums;\n}\n"
  ]
}