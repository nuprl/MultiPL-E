{
  "name": "mbpp_135_hexagonal_num",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the nth hexagonal number.\nfunction hexagonal_num($n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return hexagonal_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 190) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 45) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 91) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    return $n * (2 * $n - 1);\n}\n",
    "    return $n * (2 * $n - 1);\n}\n",
    "    return $n * (2 * $n - 1);\n}\n",
    "    return $n * (2 * $n - 1);\n}\n",
    "    return $n * (2 * $n - 1);\n}\n",
    "    return $n * (2 * $n - 1);\n}\n",
    "    return $n * (2 * $n - 1);\n}\n",
    "    return $n * (2 * $n - 1);\n}\n",
    "\treturn $n * (2 * $n - 1);\n}\n",
    "    return $n * (2 * $n - 1);\n}\n",
    "    return $n * (2 * $n - 1);\n}\n",
    "  return $n * (2 * $n - 1);\n}\n",
    "  return $n * (2 * $n - 1);\n}\n",
    "    return $n * (2 * $n - 1);\n}\n",
    "    return $n * (2 * $n - 1);\n}\n",
    "  return $n * (2 * $n - 1);\n}\n",
    "    return $n * (2 * $n - 1);\n}\n",
    "    return $n * (2 * $n - 1);\n}\n",
    "  return $n * (2 * $n - 1);\n}\n",
    "    return $n * (2 * $n - 1);\n}\n"
  ]
}