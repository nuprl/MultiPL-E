{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "php",
  "prompt": "<?php\n// Write a phpthon function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square($N) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return next_Perfect_Square(...$args);\n}\n\nfunction test(): void {\n    if (candidate(35) !== 36) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== 16) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\necho next_Perfect_Square(15);",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\n$N = 5;\necho next_Perfect_Square($N);",
    "    $sqrt = sqrt($N);\n    $floor = floor($sqrt);\n    if ($floor == $sqrt) {\n        return ($N + $floor + 1) * ($floor + 1);\n    } else {\n        return ($floor + 1) * ($floor + 1);\n    }\n}\n\necho next_Perfect_Square(15);",
    "    $i = 1;\n    while ($i * $i <= $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\n$N = 10;\necho next_Perfect_Square($N);",
    "    $sqrt = sqrt($N);\n    $next_Perfect_Square = ceil($sqrt) + 1;\n    return $next_Perfect_Square * $next_Perfect_Square;\n}\n\n$N = 5;\necho next_Perfect_Square($N);",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\necho next_Perfect_Square(25);",
    "    $sqrt = sqrt($N);\n    $next_perfect_square = ceil($sqrt) + 1;\n    return $next_perfect_square * $next_perfect_square;\n}\n\necho next_Perfect_Square(25);",
    "    $sqrt = sqrt($N);\n    $floor = floor($sqrt);\n    if($floor == $sqrt) {\n        return ($N+1)*($N+1);\n    }\n    else {\n        return ($floor+1)*($floor+1);\n    }\n}\n\n$N = 4;\necho next_Perfect_Square($N);",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\n$N = intval(fgets(STDIN));\necho next_Perfect_Square($N);",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\necho next_Perfect_Square(5);\necho \"\\n\";\necho next_Perfect_Square(6);\necho \"\\n\";\necho next_Perfect_Square(7);\necho \"\\n\";\necho next_Perfect_Square(8);\necho \"\\n\";\necho next_Perfect_Square(9);\necho \"\\n\";\necho next_Perfect_Square(10);\necho \"\\n\";\necho next_Perfect_Square(11);\necho \"\\n\";\necho next_Perfect_Square(12);\necho \"\\n\";\necho next_Perfect_Square(13);\necho \"\\n\";\necho next_Perfect_Square(14);\necho \"\\n\";\necho next_Perfect_Square(15);\necho \"\\n\";\necho next_Perfect_Square(16);\necho \"\\n\";\necho next_Perfect_Square(17);\necho \"\\n\";\necho next_Perfect_Square(18);\necho \"\\n\";\necho next_Perfect_Square(19);\necho \"\\n\";\necho next_Perfect_Square(20);\necho \"\\n\";\necho next_Perfect_Square(21);\necho \"\\n\";\necho next_Perfect_Square(22);\necho \"\\n\";\necho next_Perfect_Square(23);\necho \"\\n\";\necho next_Perfect_Square(24);\necho \"\\n\";\necho next_Perfect_Square(25);\necho \"\\n\";\necho next_Perfect_Square(26);\necho \"\\n\";\necho next_Perfect_Square(27);\necho \"\\n\";\necho next_Perfect_Square(28);\necho \"\\n\";\necho next_Perfect_Square(29);\necho \"\\n\";\necho next_Perfect_Square(30);\necho \"\\n\";\necho next_Perfect_Square(31);\necho \"\\n\";\necho next_Perfect_Square(32);\necho \"\\n\";\necho next_Perfect_Square(33);\necho \"\\n\";\necho next_Perfect_Square(34);\necho \"\\n\";\necho next_Perfect_Square(35);\necho \"\\n\";\necho next_Perfect_Square",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\necho next_Perfect_Square(25);",
    "    $sqrt = sqrt($N);\n    if (is_int($sqrt)) {\n        return ($sqrt + 1) * ($sqrt + 1);\n    } else {\n        return ($sqrt + 1) * ($sqrt + 1);\n    }\n}\n\necho next_Perfect_Square(5);",
    "    $i = 1;\n    while ($i * $i <= $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\n$N = 5;\necho next_Perfect_Square($N);",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\necho next_Perfect_Square(10);",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n",
    "    $i = 1;\n    while ($i * $i < $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n",
    "    $i = 1;\n    while ($i * $i <= $N) {\n        $i++;\n    }\n    return $i * $i;\n}\n\n$N = intval(fgets(STDIN));\necho next_Perfect_Square($N);",
    "    $sqrt = sqrt($N);\n    $floor = floor($sqrt);\n    if($floor == $sqrt) {\n        return ($floor + 1) * ($floor + 1);\n    } else {\n        return -1;\n    }\n}\n\n$N = 121;\necho next_Perfect_Square($N);",
    "    $next_perfect_square = $N;\n    while (true) {\n        $sqrt = sqrt($next_perfect_square);\n        if (floor($sqrt) == $sqrt) {\n            return $next_perfect_square;\n        }\n        $next_perfect_square++;\n    }\n}\n\n$N = 5;\necho next_Perfect_Square($N);",
    "    $sqrt = sqrt($N);\n    $floor = floor($sqrt);\n    if ($floor == $sqrt) {\n        return ($N + $floor + 1) * ($floor + 1);\n    } else {\n        return ($floor + 1) * ($floor + 1);\n    }\n}\n\n$N = 5;\necho \"The next perfect square greater than $N is \" . next_Perfect_Square($N);"
  ]
}