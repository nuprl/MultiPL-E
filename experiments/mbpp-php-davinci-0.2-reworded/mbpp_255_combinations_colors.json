{
  "name": "mbpp_255_combinations_colors",
  "language": "php",
  "prompt": "<?php\n// Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.\nfunction combinations_colors($l, $n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return combinations_colors(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"Red\", \"Green\", \"Blue\"), 1) !== array(array(\"Red\"), array(\"Green\"), array(\"Blue\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Red\", \"Green\", \"Blue\"), 2) !== array(array(\"Red\", \"Red\"), array(\"Red\", \"Green\"), array(\"Red\", \"Blue\"), array(\"Green\", \"Green\"), array(\"Green\", \"Blue\"), array(\"Blue\", \"Blue\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Red\", \"Green\", \"Blue\"), 3) !== array(array(\"Red\", \"Red\", \"Red\"), array(\"Red\", \"Red\", \"Green\"), array(\"Red\", \"Red\", \"Blue\"), array(\"Red\", \"Green\", \"Green\"), array(\"Red\", \"Green\", \"Blue\"), array(\"Red\", \"Blue\", \"Blue\"), array(\"Green\", \"Green\", \"Green\"), array(\"Green\", \"Green\", \"Blue\"), array(\"Green\", \"Blue\", \"Blue\"), array(\"Blue\", \"Blue\", \"Blue\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$l = array('red', 'green', 'blue');\n$n = 2;\n$result = combinations_colors($l, $n);\nprint_r($result);",
    "    if ($n == 0) {\n        return array(array());\n    }\n    $result = array();\n    foreach ($l as $e) {\n        $temp = combinations_colors($l, $n - 1);\n        foreach ($temp as $t) {\n            $t[] = $e;\n            $result[] = $t;\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$combos = combinations_colors($colors, 2);\nprint_r($combos);\n",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n    else {\n        foreach ($l as $i) {\n            $temp = combinations_colors(array_diff($l, array($i)), $n - 1);\n            foreach ($temp as $t) {\n                $result[] = array_merge(array($i), array($t));\n            }\n        }\n        return $result;\n    }\n}\n\n$colors = array(\"Red\", \"Green\", \"Blue\");\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge([$e], $c));\n        }\n    }\n    return $result;\n}\n\n$l = ['red', 'blue', 'green'];\n$n = 2;\nprint_r(combinations_colors($l, $n));\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $t) {\n            $result[] = array_merge(array($e), $t);\n        }\n    }\n    return $result;\n}\n\n$l = array('red', 'green', 'blue');\n$n = 2;\n$result = combinations_colors($l, $n);\nprint_r($result);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\nprint_r(combinations_colors(array('red', 'blue', 'green'), 2));\n",
    "\t$result = array();\n\tif ($n == 1) {\n\t\tforeach ($l as $value) {\n\t\t\t$result[] = array($value);\n\t\t}\n\t} else {\n\t\t$sub_result = combinations_colors($l, $n-1);\n\t\tforeach ($sub_result as $value) {\n\t\t\tforeach ($l as $color) {\n\t\t\t\t$result[] = array_merge(array($color), $value);\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\n$colors = array(\"red\", \"green\", \"blue\");\n$result = combinations_colors($colors, 3);\n\nforeach ($result as $value) {\n\techo implode(\", \", $value) . \"<br>\";\n}",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_unshift($c, $e);\n            $result[] = $c;\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$n = 2;\n$result = combinations_colors($colors, $n);\nprint_r($result);",
    "    $result = [];\n    $combinations = [];\n\n    for ($i = 0; $i < count($l); $i++) {\n        $combinations[$i] = [];\n    }\n\n    for ($i = 0; $i < count($l); $i++) {\n        $combinations[0][$i] = $l[$i];\n    }\n\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 0; $j < count($l); $j++) {\n            for ($k = 0; $k < count($l); $k++) {\n                $combinations[$i][$j * count($l) + $k] = $combinations[$i - 1][$j] . $l[$k];\n            }\n        }\n    }\n\n    for ($i = 0; $i < $n; $i++) {\n        $result[$i] = [];\n        for ($j = 0; $j < count($l) ** $n; $j++) {\n            $result[$i][$j] = $combinations[$i][$j];\n        }\n    }\n\n    return $result;\n}\n\n$l = ['r', 'g', 'b'];\n$n = 3;\n\nprint_r(combinations_colors($l, $n));",
    "  $result = [];\n  $combinations = [];\n  combinations_helper($l, $n, $result, $combinations);\n  return $combinations;\n}\n",
    "\t$result = array();\n\t$result[] = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$temp = array();\n\t\tforeach ($result as $j) {\n\t\t\tforeach ($l as $k) {\n\t\t\t\t$temp[] = array_merge($j, array($k));\n\t\t\t}\n\t\t}\n\t\t$result = $temp;\n\t}\n\treturn $result;\n}\n\n$l = array('red', 'blue', 'green');\n$n = 2;\n$result = combinations_colors($l, $n);\nforeach ($result as $r) {\n\techo implode(',', $r) . \"\\n\";\n}",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $combos = combinations_colors($l, $n - 1);\n        foreach ($combos as $combo) {\n            array_push($result, array_merge(array($e), $combo));\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$combos = combinations_colors($colors, 2);\nprint_r($combos);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$l = array('red', 'blue', 'green');\n$n = 2;\nprint_r(combinations_colors($l, $n));\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow');\n$combinations = combinations_colors($colors, 2);\n\nforeach ($combinations as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}\n",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge([$e], $c));\n        }\n    }\n    return $result;\n}\n\n$colors = ['red', 'blue', 'green'];\n$n = 2;\n$result = combinations_colors($colors, $n);\nprint_r($result);\n",
    "\t$combinations = [];\n\t$combination = [];\n\tcombinations($l, $n, $combinations, $combination);\n\treturn $combinations;\n}\n",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n    else {\n        foreach ($l as $i) {\n            $temp = combinations_colors(array_diff($l, array($i)), $n - 1);\n            foreach ($temp as $t) {\n                $result[] = array_merge(array($i), array($t));\n            }\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\", \"yellow\", \"orange\");\n$combinations = combinations_colors($colors, 3);\n\nforeach ($combinations as $combination) {\n    echo implode(\", \", $combination) . \"<br>\";\n}",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $combos = [];\n    foreach ($l as $color) {\n        foreach (combinations_colors($l, $n - 1) as $combo) {\n            $combo[] = $color;\n            $combos[] = $combo;\n        }\n    }\n    return $combos;\n}\n\n$colors = ['red', 'blue', 'green'];\n$combos = combinations_colors($colors, 2);\nprint_r($combos);\n",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n    else {\n        foreach ($l as $i) {\n            $temp = combinations_colors($l, $n - 1);\n            foreach ($temp as $t) {\n                $result[] = array_merge(array($i), array($t));\n            }\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$result = combinations_colors($colors, 2);\nprint_r($result);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            $result[] = array_merge(array($e), $c);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue', 'yellow', 'orange');\n$combinations = combinations_colors($colors, 3);\nforeach ($combinations as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}",
    "    if ($n == 0) {\n        return array(array());\n    }\n    $result = array();\n    foreach ($l as $e) {\n        $sub_result = combinations_colors($l, $n - 1);\n        foreach ($sub_result as $sub_e) {\n            $result[] = array_merge(array($e), $sub_e);\n        }\n    }\n    return $result;\n}\n\n$l = array('red', 'blue', 'green');\n$n = 2;\n$result = combinations_colors($l, $n);\nprint_r($result);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_combinations = combinations_colors($l, $n - 1);\n        foreach ($sub_combinations as $sub_combination) {\n            $result[] = array_merge(array($e), $sub_combination);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "    $result = array();\n    $result[] = array();\n    while (count($result[0]) < $n) {\n        $temp = array();\n        foreach($result as $combination) {\n            foreach($l as $element) {\n                $temp[] = array_merge($combination, array($element));\n            }\n        }\n        $result = $temp;\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow', 'orange');\n$result = combinations_colors($colors, 3);\nforeach($result as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow');\n$result = combinations_colors($colors, 2);\n\nforeach ($result as $combination) {\n    echo '<div style=\"background-color: ' . $combination[0] . '; color: ' . $combination[1] . '\">' . $combination[0] . ' ' . $combination[1] . '</div>';\n}",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            $result[] = array_merge(array($e), $c);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow');\n$result = combinations_colors($colors, 2);\nforeach ($result as $r) {\n    echo implode(', ', $r) . \"\\n\";\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $combos = combinations_colors($l, $n - 1);\n        foreach ($combos as $c) {\n            array_push($c, $e);\n            array_push($result, $c);\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$combos = combinations_colors($colors, 2);\nprint_r($combos);",
    "    $result = [];\n    $combinations = [];\n    combinations_colors_helper($l, $n, $combinations, $result);\n    return $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_unshift($c, $e);\n            $result[] = $c;\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$n = 2;\n\n$combinations = combinations_colors($colors, $n);\n\nforeach ($combinations as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}\n",
    "\t$result = array();\n\tif ($n == 1) {\n\t\tforeach ($l as $value) {\n\t\t\t$result[] = array($value);\n\t\t}\n\t} else {\n\t\tforeach ($l as $value) {\n\t\t\t$temp = combinations_colors($l, $n-1);\n\t\t\tforeach ($temp as $t) {\n\t\t\t\t$result[] = array_merge(array($value), $t);\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow');\n$result = combinations_colors($colors, 3);\nprint_r($result);\n",
    "  $result = array();\n  if ($n == 0) {\n    return array(array());\n  }\n  foreach ($l as $e) {\n    $sub_combinations = combinations_colors($l, $n - 1);\n    foreach ($sub_combinations as $sub_combination) {\n      $result[] = array_merge(array($e), $sub_combination);\n    }\n  }\n  return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);\n",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n    else {\n        $prev = combinations_colors($l, $n - 1);\n        foreach ($prev as $p) {\n            foreach ($l as $e) {\n                $result[] = array_merge(array($e), $p);\n            }\n        }\n        return $result;\n    }\n}\n\n$colors = array('red', 'blue', 'green');\n$combinations = combinations_colors($colors, 3);\nprint_r($combinations);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $r) {\n            array_unshift($r, $e);\n            $result[] = $r;\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow', 'orange');\n$combinations = combinations_colors($colors, 3);\necho '<pre>';\nprint_r($combinations);\necho '</pre>';",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    for ($i = 0; $i < count($l); $i++) {\n        $sub_result = combinations_colors(array_slice($l, $i), $n - 1);\n        foreach ($sub_result as $sub_array) {\n            $result[] = array_merge([$l[$i]], $sub_array);\n        }\n    }\n    return $result;\n}\n\n$colors = ['red', 'blue', 'green'];\n$result = combinations_colors($colors, 2);\nprint_r($result);\n",
    "\t$combinations = array();\n\t$combinations_helper($l, $n, array(), $combinations);\n\treturn $combinations;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$result = combinations_colors($colors, 2);\n\nforeach ($result as $r) {\n    echo implode(', ', $r) . \"<br>\";\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);\n",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n    else {\n        foreach ($l as $i) {\n            $temp = combinations_colors($l, $n - 1);\n            foreach ($temp as $t) {\n                $result[] = array_merge(array($i), array($t));\n            }\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow', 'orange');\n$result = combinations_colors($colors, 3);\n\nforeach ($result as $r) {\n    echo implode(', ', $r) . '<br>';\n}",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_combinations = combinations_colors($l, $n - 1);\n        foreach ($sub_combinations as $sub_combination) {\n            $result[] = array_merge(array($e), $sub_combination);\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"green\", \"blue\");\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$n = 2;\n$result = combinations_colors($colors, $n);\nprint_r($result);",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n    else {\n        foreach ($l as $i) {\n            foreach (combinations_colors($l, $n - 1) as $j) {\n                $result[] = array_merge(array($i), (array) $j);\n            }\n        }\n        return $result;\n    }\n}\n\n$colors = array(\"red\", \"green\", \"blue\");\n$combinations = combinations_colors($colors, 3);\n\nforeach ($combinations as $combination) {\n    echo implode(\" \", $combination) . \"\\n\";\n}",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $color) {\n        $sub_combos = combinations_colors($l, $n - 1);\n        foreach ($sub_combos as $sub_combo) {\n            array_push($sub_combo, $color);\n            array_push($result, $sub_combo);\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"yellow\");\n$combos = combinations_colors($colors, 2);\nprint_r($combos);",
    "    $combinations = array();\n    $combination = array();\n    $r = count($l);\n    $p = array();\n    for ($i = 0; $i < $n; $i++) {\n        $p[$i] = 0;\n    }\n    $i = 1;\n    while ($i < $n) {\n        if ($p[$i] < $r) {\n            $p[$i]++;\n            $combination[$i] = $l[$p[$i] - 1];\n            $i++;\n        } else {\n            $p[$i - 1]++;\n            $i--;\n        }\n        if ($i == 0) {\n            $combinations[] = $combination;\n            $p[0]++;\n            $i = 1;\n        }\n    }\n    return $combinations;\n}\n\n$colors = array('red', 'blue', 'green');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "    $combinations = [];\n    $combination = array_fill(0, $n, null);\n    $r = 0;\n    $index = 0;\n    while ($r >= 0) {\n        if ($index <= ($l - 1)) {\n            $combination[$r] = $index;\n            $index++;\n            $r++;\n        } else {\n            $index = $combination[$r - 1] + 1;\n            $r--;\n        }\n        if ($r == $n) {\n            array_push($combinations, $combination);\n            $index = $combination[$r - 1] + 1;\n            $r--;\n        }\n    }\n    return $combinations;\n}\n\n$colors = ['red', 'blue', 'green'];\n$combinations = combinations_colors(count($colors), 2);\nforeach ($combinations as $combination) {\n    $combination_colors = [];\n    foreach ($combination as $index) {\n        array_push($combination_colors, $colors[$index]);\n    }\n    echo implode(', ', $combination_colors) . PHP_EOL;\n}",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $tmp = combinations_colors($l, $n - 1);\n        foreach ($tmp as $t) {\n            $t[] = $e;\n            $result[] = $t;\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$result = combinations_colors($colors, 2);\nprint_r($result);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub = combinations_colors($l, $n - 1);\n        foreach ($sub as $s) {\n            array_push($result, array_merge(array($e), $s));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$result = combinations_colors($colors, 2);\nprint_r($result);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_result = combinations_colors($l, $n - 1);\n        foreach ($sub_result as $sub_e) {\n            $result[] = array_merge(array($e), $sub_e);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n    else {\n        foreach ($l as $i) {\n            $temp = combinations_colors($l, $n - 1);\n            foreach ($temp as $t) {\n                $result[] = array_merge(array($i), array($t));\n            }\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"green\", \"blue\");\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "    $result = array();\n    if ($n == 0) {\n        $result[] = array();\n    } else {\n        foreach ($l as $e) {\n            foreach (combinations_colors($l, $n - 1) as $c) {\n                $result[] = array_merge(array($e), $c);\n            }\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"green\", \"blue\");\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_result = combinations_colors($l, $n - 1);\n        foreach ($sub_result as $sub_e) {\n            $result[] = array_merge(array($e), $sub_e);\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "    $result = [];\n    if ($n == 1) {\n        foreach ($l as $e) {\n            $result[] = [$e];\n        }\n    } else {\n        $sub_combinations = combinations_colors($l, $n - 1);\n        foreach ($sub_combinations as $sub_combination) {\n            foreach ($l as $e) {\n                $result[] = array_merge($sub_combination, [$e]);\n            }\n        }\n    }\n    return $result;\n}\n\n$colors = ['red', 'green', 'blue'];\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);\n",
    "    $result = [];\n    $combinations = [];\n    $combinations_helper($l, $n, 0, $combinations, $result);\n    return $result;\n}\n",
    "\t$result = array();\n\tif ($n == 1) {\n\t\tforeach ($l as $e) {\n\t\t\t$result[] = array($e);\n\t\t}\n\t} else {\n\t\t$sub_combinations = combinations_colors($l, $n - 1);\n\t\tforeach ($sub_combinations as $sub_combination) {\n\t\t\tforeach ($l as $e) {\n\t\t\t\t$result[] = array_merge(array($e), $sub_combination);\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            $result[] = array_merge([$e], $c);\n        }\n    }\n    return $result;\n}\n\n$l = ['red', 'green', 'blue'];\n$n = 2;\n$result = combinations_colors($l, $n);\nprint_r($result);\n",
    "\t$result = array();\n\t$combinations = array();\n\t$combinations_helper($l, $n, 0, $combinations, $result);\n\treturn $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);\n",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n    else {\n        foreach ($l as $i) {\n            $temp = combinations_colors($l, $n - 1);\n            foreach ($temp as $t) {\n                $result[] = array_merge(array($i), array($t));\n            }\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n    else {\n        foreach ($l as $i) {\n            $temp = combinations_colors($l, $n - 1);\n            foreach ($temp as $t) {\n                $result[] = array_merge(array($i), array($t));\n            }\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\", \"yellow\");\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);\n",
    "    $result = array();\n    if ($n == 0) {\n        $result[] = array();\n    } else {\n        foreach ($l as $e) {\n            foreach (combinations_colors($l, $n - 1) as $c) {\n                $result[] = array_merge(array($e), $c);\n            }\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $combos = combinations_colors($l, $n - 1);\n        foreach ($combos as $combo) {\n            array_push($combo, $e);\n            array_push($result, $combo);\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$result = combinations_colors($colors, 2);\nprint_r($result);\n",
    "    $result = array();\n    $result[] = array();\n    for ($i = 0; $i < $n; $i++) {\n        foreach ($result as $combination) {\n            foreach ($l as $element) {\n                $result[] = array_merge(array($element), $combination);\n            }\n        }\n    }\n    return $result;\n}\n\n$l = array(\"red\", \"blue\", \"green\");\n$n = 2;\n$result = combinations_colors($l, $n);\nprint_r($result);",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge([$e], $c));\n        }\n    }\n    return $result;\n}\n",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n    else {\n        foreach ($l as $i) {\n            $temp = combinations_colors($l, $n - 1);\n            foreach ($temp as $t) {\n                $result[] = array_merge(array($i), array($t));\n            }\n        }\n        return $result;\n    }\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$result = combinations_colors($colors, 2);\nprint_r($result);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $subresult = combinations_colors($l, $n - 1);\n        foreach ($subresult as $sub) {\n            array_push($sub, $e);\n            array_push($result, $sub);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow');\n$result = combinations_colors($colors, 3);\nprint_r($result);",
    "    $result = array(array());\n    for ($i = 0; $i < $n; $i++) {\n        foreach ($result as $combination) {\n            foreach ($l as $element) {\n                $result[] = array_merge(array($element), $combination);\n            }\n        }\n    }\n    return $result;\n}\n",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge([$e], $c));\n        }\n    }\n    return $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"green\", \"blue\");\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "\t$result = [];\n\t$combinations = [];\n\t$combinations_helper($l, $n, $result, $combinations);\n\treturn $combinations;\n}\n",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            $result[] = array_merge([$e], $c);\n        }\n    }\n    return $result;\n}\n\n$l = ['red', 'blue', 'green'];\n$n = 2;\nprint_r(combinations_colors($l, $n));\n",
    "\t$result = [];\n\t$combos = [];\n\t$combos_helper($l, $n, $result, $combos);\n\treturn $combos;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            $result[] = array_merge(array($e), $c);\n        }\n    }\n    return $result;\n}\n",
    "    $result = [];\n    if ($n == 1) {\n        foreach ($l as $e) {\n            $result[] = [$e];\n        }\n        return $result;\n    }\n    foreach ($l as $e) {\n        $sub_combinations = combinations_colors($l, $n - 1);\n        foreach ($sub_combinations as $sub_combination) {\n            $result[] = array_merge([$e], $sub_combination);\n        }\n    }\n    return $result;\n}\n\n$colors = ['red', 'blue', 'green'];\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_result = combinations_colors($l, $n - 1);\n        foreach ($sub_result as $sub_e) {\n            $result[] = array_merge(array($e), $sub_e);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "  $result = [];\n  $combinations = [];\n  $combinations_helper($l, $n, $combinations, $result);\n  return $result;\n}\n",
    "\t$result = [];\n\t$combination = [];\n\tcombinations_colors_helper($l, $n, $combination, $result);\n\treturn $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$combinations = combinations_colors($colors, 2);\n\nforeach ($combinations as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_combinations = combinations_colors($l, $n - 1);\n        foreach ($sub_combinations as $sub_combination) {\n            array_push($sub_combination, $e);\n            array_push($result, $sub_combination);\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$combinations = combinations_colors($colors, 2);\nforeach ($combinations as $combination) {\n    echo implode(\", \", $combination) . \"\\n\";\n}",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            $result[] = array_merge(array($e), $c);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow');\n$result = combinations_colors($colors, 3);\nprint_r($result);",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            $result[] = array_merge([$e], $c);\n        }\n    }\n    return $result;\n}\n",
    "    $result = [];\n    $combinations = [];\n    $combinations_helper($l, $n, $result, $combinations);\n    return $combinations;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "    $result = array(array());\n    for ($i = 0; $i < $n; $i++) {\n        foreach ($result as $combination) {\n            foreach ($l as $element) {\n                $result[] = array_merge(array($element), $combination);\n            }\n        }\n    }\n    return $result;\n}\n",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n    else {\n        foreach ($l as $i) {\n            $temp = combinations_colors($l, $n - 1);\n            foreach ($temp as $t) {\n                $result[] = array_merge(array($i), array($t));\n            }\n        }\n        return $result;\n    }\n}\n\n$l = array(\"red\", \"green\", \"blue\");\n$n = 3;\n$result = combinations_colors($l, $n);\nprint_r($result);",
    "\t$result = array();\n\t$combinations = array();\n\t$combination = array();\n\t\n\tcombinations_colors_helper($l, $n, 0, $combination, $combinations);\n\t\n\tforeach ($combinations as $combination) {\n\t\t$result[] = $combination;\n\t}\n\t\n\treturn $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $color) {\n        $sub_combinations = combinations_colors($l, $n - 1);\n        foreach ($sub_combinations as $sub_combination) {\n            $result[] = array_merge(array($color), $sub_combination);\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "\t$result = array();\n\t$combinations = array();\n\t$combinations_helper($l, $n, $combinations, $result);\n\treturn $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $combos = combinations_colors($l, $n - 1);\n        foreach ($combos as $combo) {\n            array_push($combo, $e);\n            array_push($result, $combo);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$combos = combinations_colors($colors, 2);\nprint_r($combos);\n",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n    else {\n        foreach ($l as $i) {\n            $temp = combinations_colors(array_diff($l, array($i)), $n - 1);\n            foreach ($temp as $t) {\n                $result[] = array_merge(array($i), array($t));\n            }\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\", \"yellow\", \"purple\", \"orange\", \"black\", \"white\");\n$combos = combinations_colors($colors, 3);\n\nforeach ($combos as $c) {\n    echo implode(\", \", $c) . \"<br>\";\n}",
    "    $result = [];\n    $combinations = [];\n    $combinations_helper($l, $n, $combinations, $result);\n    return $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "\t$combinations = [];\n\t$combination = [];\n\tcombinations_helper($l, $n, $combinations, $combination);\n\treturn $combinations;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $color) {\n        foreach (combinations_colors($l, $n - 1) as $p) {\n            array_unshift($p, $color);\n            $result[] = $p;\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$result = combinations_colors($colors, 2);\nprint_r($result);\n",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n    else {\n        foreach ($l as $i) {\n            $temp = combinations_colors($l, $n - 1);\n            foreach ($temp as $t) {\n                $result[] = array_merge(array($i), array($t));\n            }\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow');\n$combinations = combinations_colors($colors, 3);\n\nforeach ($combinations as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_combinations = combinations_colors($l, $n - 1);\n        foreach ($sub_combinations as $sub_combination) {\n            array_push($sub_combination, $e);\n            array_push($result, $sub_combination);\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\", \"yellow\");\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            $result[] = array_merge([$e], $c);\n        }\n    }\n    return $result;\n}\n",
    "    $result = array();\n    $result[] = array();\n    for ($i = 0; $i < $n; $i++) {\n        $temp = array();\n        foreach ($result as $r) {\n            foreach ($l as $e) {\n                $temp[] = array_merge($r, array($e));\n            }\n        }\n        $result = $temp;\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$result = combinations_colors($colors, 2);\nprint_r($result);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n",
    "\tif ($n == 0) {\n\t\treturn [[]];\n\t}\n\t$result = [];\n\tforeach ($l as $e) {\n\t\tforeach (combinations_colors($l, $n - 1) as $c) {\n\t\t\tarray_push($result, array_merge([$e], $c));\n\t\t}\n\t}\n\treturn $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n-1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);\n",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            $result[] = array_merge([$e], $c);\n        }\n    }\n    return $result;\n}\n\n$l = ['red', 'green', 'blue'];\n$n = 2;\n\nprint_r(combinations_colors($l, $n));",
    "\t$result = [];\n\t$combinations = [];\n\t$combinations_helper($l, $n, $result, $combinations);\n\treturn $combinations;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"green\", \"blue\");\n$combinations = combinations_colors($colors, 2);\n\nforeach ($combinations as $combination) {\n    echo implode(\" \", $combination) . \"\\n\";\n}",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\", \"yellow\");\n$combinations = combinations_colors($colors, 3);\n\nforeach ($combinations as $combination) {\n    echo implode(\", \", $combination) . \"\\n\";\n}",
    "\t$result = [];\n\t$combination = [];\n\t$i = 0;\n\twhile ($i < $n) {\n\t\t$combination[$i] = 0;\n\t\t$i++;\n\t}\n\t$i = 0;\n\twhile ($i < $n) {\n\t\t$result[$i] = $l[$combination[$i]];\n\t\t$i++;\n\t}\n\t$i = 0;\n\twhile ($i < $n) {\n\t\tif ($combination[$i] < count($l) - 1) {\n\t\t\t$combination[$i]++;\n\t\t\t$i = 0;\n\t\t\twhile ($i < $n) {\n\t\t\t\t$result[$i] = $l[$combination[$i]];\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$i = 0;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$l = ['red', 'green', 'blue'];\n$n = 2;\nprint_r(combinations_colors($l, $n));\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_result = combinations_colors($l, $n - 1);\n        foreach ($sub_result as $sub_e) {\n            $sub_e[] = $e;\n            $result[] = $sub_e;\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$result = combinations_colors($colors, 2);\nprint_r($result);\n",
    "\t$result = array();\n\tif ($n == 1) {\n\t\treturn $l;\n\t}\n\tforeach ($l as $value) {\n\t\t$sub_combinations = combinations_colors($l, $n - 1);\n\t\tforeach ($sub_combinations as $sub_combination) {\n\t\t\tarray_push($result, array_merge(array($value), $sub_combination));\n\t\t}\n\t}\n\treturn $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow', 'orange');\n$combinations = combinations_colors($colors, 3);\nforeach ($combinations as $combination) {\n\techo implode(', ', $combination) . \"\\n\";\n}",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $combos = combinations_colors($l, $n - 1);\n        foreach ($combos as $combo) {\n            array_push($combo, $e);\n            array_push($result, $combo);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$combos = combinations_colors($colors, 2);\nprint_r($combos);\n",
    "    $combinations = [];\n    $combination = [];\n    $i = 0;\n    while ($i < $n) {\n        $combination[$i] = 0;\n        $i++;\n    }\n    while ($combination[$n - 1] < $l) {\n        $combinations[] = $combination;\n        $combination[0]++;\n        $i = 0;\n        while ($i < $n - 1 && $combination[$i] == $l) {\n            $combination[$i] = 0;\n            $i++;\n            $combination[$i]++;\n        }\n    }\n    return $combinations;\n}\n\n$colors = ['red', 'blue', 'green'];\n$combinations = combinations_colors(count($colors), 2);\nforeach ($combinations as $combination) {\n    $combination_colors = [];\n    foreach ($combination as $index) {\n        $combination_colors[] = $colors[$index];\n    }\n    echo implode(', ', $combination_colors) . \"\\n\";\n}",
    "    $result = array();\n    $result[] = array();\n    for ($i = 0; $i < $n; $i++) {\n        $temp = array();\n        foreach ($result as $r) {\n            foreach ($l as $e) {\n                $temp[] = array_merge($r, array($e));\n            }\n        }\n        $result = $temp;\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$n = 2;\n$result = combinations_colors($colors, $n);\nprint_r($result);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $combos = combinations_colors($l, $n - 1);\n        foreach ($combos as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$l = array('red', 'blue', 'green');\n$n = 2;\n$result = combinations_colors($l, $n);\n\nprint_r($result);\n",
    "\t$result = array();\n\t$combinations = array();\n\t$combinations_helper($l, $n, 0, $combinations, $result);\n\treturn $result;\n}\n",
    "    $result = array();\n    $result[] = array();\n    for ($i = 0; $i < count($l); $i++) {\n        $result[] = array($l[$i]);\n    }\n    for ($i = 2; $i <= $n; $i++) {\n        $new_result = array();\n        foreach ($result as $old_comb) {\n            foreach ($l as $color) {\n                $new_comb = $old_comb;\n                $new_comb[] = $color;\n                $new_result[] = $new_comb;\n            }\n        }\n        $result = $new_result;\n    }\n    return $result;\n}\n\n$l = array('red', 'blue', 'green');\n$n = 2;\n$result = combinations_colors($l, $n);\nprint_r($result);\n",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge([$e], $c));\n        }\n    }\n    return $result;\n}\n\n$l = ['red', 'blue', 'green'];\n$n = 2;\n$result = combinations_colors($l, $n);\nprint_r($result);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\", \"yellow\");\n$combinations = combinations_colors($colors, 3);\n\nforeach ($combinations as $c) {\n    echo implode(\", \", $c) . \"\\n\";\n}",
    "    if ($n == 0) {\n        return [[]];\n    }\n    if (count($l) == 0) {\n        return [];\n    }\n    $x = $l[0];\n    $xs = array_slice($l, 1);\n    $combos = combinations_colors($xs, $n - 1);\n    foreach ($combos as $combo) {\n        array_unshift($combo, $x);\n    }\n    return array_merge(combinations_colors($xs, $n), $combos);\n}\n\n$colors = ['red', 'blue', 'green'];\n$combos = combinations_colors($colors, 2);\nprint_r($combos);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$n = 2;\n$result = combinations_colors($colors, $n);\nprint_r($result);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            $result[] = array_merge(array($e), $c);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow', 'orange', 'purple');\n$combinations = combinations_colors($colors, 3);\n\nforeach ($combinations as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_unshift($c, $e);\n            $result[] = $c;\n        }\n    }\n    return $result;\n}\n",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $color) {\n        foreach (combinations_colors($l, $n - 1) as $combination) {\n            $result[] = array_merge([$color], $combination);\n        }\n    }\n    return $result;\n}\n",
    "    $result = [];\n    function combinations($l, $n, $prefix = []) {\n        global $result;\n        if ($n == 0) {\n            array_push($result, $prefix);\n        } else {\n            for ($i = 0; $i < count($l); $i++) {\n                $new_prefix = $prefix;\n                array_push($new_prefix, $l[$i]);\n                combinations($l, $n - 1, $new_prefix);\n            }\n        }\n    }\n    combinations($l, $n);\n    return $result;\n}\n\n$l = ['red', 'blue', 'green'];\n$n = 2;\nprint_r(combinations_colors($l, $n));\n",
    "  $result = [];\n  $combinations = [];\n  $combinations_helper($l, $n, $combinations, $result);\n  return $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $subresult = combinations_colors($l, $n - 1);\n        foreach ($subresult as $sub) {\n            $result[] = array_merge(array($e), $sub);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$result = combinations_colors($colors, 3);\nprint_r($result);\n",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            $result[] = array_merge([$e], $c);\n        }\n    }\n    return $result;\n}\n",
    "    $combinations = array();\n    $combination = array();\n    $i = 0;\n    while ($i < $n) {\n        if (count($combination) == $n) {\n            array_push($combinations, $combination);\n            $combination = array();\n            $i = 0;\n        }\n        array_push($combination, $l[$i]);\n        $i++;\n    }\n    array_push($combinations, $combination);\n    return $combinations;\n}\n$l = array(\"red\", \"blue\", \"green\");\n$n = 2;\n$combinations = combinations_colors($l, $n);\nprint_r($combinations);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_combinations = combinations_colors($l, $n - 1);\n        foreach ($sub_combinations as $sub_combination) {\n            $result[] = array_merge(array($e), $sub_combination);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $subresult = combinations_colors($l, $n - 1);\n        foreach ($subresult as $sub) {\n            $result[] = array_merge(array($e), $sub);\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "    $result = array();\n    $result[0] = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[0][$i] = $l[0];\n    }\n    for ($i = 1; $i < count($l); $i++) {\n        $result[$i] = array();\n        for ($j = 0; $j < $n; $j++) {\n            $result[$i][$j] = $l[$i];\n        }\n    }\n    return $result;\n}\n\n$l = array('red', 'blue', 'green');\n$n = 2;\n$result = combinations_colors($l, $n);\nprint_r($result);",
    "\t$result = [];\n\t$combinations = [];\n\t$combinations_helper($l, $n, 0, $combinations, $result);\n\treturn $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$result = combinations_colors($colors, 2);\necho '<pre>';\nprint_r($result);\necho '</pre>';",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow');\n$n = 2;\n\n$combinations = combinations_colors($colors, $n);\n\nforeach ($combinations as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub = combinations_colors($l, $n - 1);\n        foreach ($sub as $s) {\n            $result[] = array_merge(array($e), $s);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "    $result = [];\n    if ($n == 1) {\n        foreach ($l as $e) {\n            $result[] = [$e];\n        }\n    } else {\n        $sub_combinations = combinations_colors($l, $n - 1);\n        foreach ($sub_combinations as $sub_combination) {\n            foreach ($l as $e) {\n                $result[] = array_merge($sub_combination, [$e]);\n            }\n        }\n    }\n    return $result;\n}\n\n$colors = ['red', 'green', 'blue'];\n$combinations = combinations_colors($colors, 2);\n\nforeach ($combinations as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $combos = combinations_colors($l, $n - 1);\n        foreach ($combos as $combo) {\n            array_push($combo, $e);\n            array_push($result, $combo);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$combos = combinations_colors($colors, 2);\nprint_r($combos);\n",
    "\t$result = array();\n\tif ($n == 0) {\n\t\treturn array(array());\n\t}\n\tforeach ($l as $e) {\n\t\t$sub_result = combinations_colors($l, $n - 1);\n\t\tforeach ($sub_result as $sub_e) {\n\t\t\t$result[] = array_merge(array($e), $sub_e);\n\t\t}\n\t}\n\treturn $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$result = combinations_colors($colors, 2);\nprint_r($result);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);\n",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n\n    foreach ($l as $element) {\n        $sub_combinations = combinations_colors(array_diff($l, array($element)), $n - 1);\n        foreach ($sub_combinations as $sub_combination) {\n            $result[] = array_merge(array($element), $sub_combination);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow');\n$combinations = combinations_colors($colors, 2);\n\nforeach ($combinations as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_result = combinations_colors($l, $n-1);\n        foreach ($sub_result as $sub_e) {\n            $result[] = array_merge(array($e), $sub_e);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_result = combinations_colors($l, $n - 1);\n        foreach ($sub_result as $sub_e) {\n            $result[] = array_merge(array($e), $sub_e);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "\tif ($n == 0) {\n\t\treturn array(array());\n\t}\n\t$result = array();\n\tforeach ($l as $e) {\n\t\t$sub_result = combinations_colors($l, $n - 1);\n\t\tforeach ($sub_result as $sub_e) {\n\t\t\t$result[] = array_merge(array($e), $sub_e);\n\t\t}\n\t}\n\treturn $result;\n}\n\n$l = array(\"red\", \"green\", \"blue\");\n$n = 2;\nprint_r(combinations_colors($l, $n));\n",
    "    $combinations = [];\n    $combination = [];\n    $i = 0;\n    while (true) {\n        if ($i >= $n) {\n            $combinations[] = $combination;\n            $i--;\n        }\n        if ($i < 0) {\n            break;\n        }\n        if (isset($combination[$i])) {\n            $combination[$i]++;\n        } else {\n            $combination[$i] = 0;\n        }\n        if ($combination[$i] >= count($l)) {\n            unset($combination[$i]);\n            $i--;\n        } else {\n            $i++;\n        }\n    }\n    return $combinations;\n}\n\n$l = ['red', 'green', 'blue'];\n$n = 2;\n$combinations = combinations_colors($l, $n);\nforeach ($combinations as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}",
    "\t$result = array();\n\t$combinations = array();\n\tcombinations_helper($l, $n, $result, $combinations);\n\treturn $combinations;\n}\n",
    "  $result = array();\n  $result[] = array();\n  for ($i = 0; $i < $n; $i++) {\n    $temp = array();\n    foreach ($result as $j) {\n      foreach ($l as $k) {\n        $temp[] = array_merge($j, array($k));\n      }\n    }\n    $result = $temp;\n  }\n  return $result;\n}\n",
    "\t$result = array();\n\t$result[] = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$current_size = count($result);\n\t\tfor ($j = 0; $j < $current_size; $j++) {\n\t\t\tfor ($k = 0; $k < $l; $k++) {\n\t\t\t\t$temp = $result[$j];\n\t\t\t\t$temp[] = $k;\n\t\t\t\t$result[] = $temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\n$l = 3;\n$n = 2;\n$result = combinations_colors($l, $n);\nprint_r($result);",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n    else {\n        foreach ($l as $i) {\n            $temp = combinations_colors($l, $n - 1);\n            foreach ($temp as $t) {\n                $result[] = array_merge(array($i), array($t));\n            }\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$combinations = combinations_colors($colors, 2);\n\nforeach ($combinations as $combination) {\n    echo implode(', ', $combination) . '<br>';\n}",
    "\t$result = [];\n\t$combinations = [];\n\t$combinations_helper($l, $n, $result, $combinations);\n\treturn $combinations;\n}\n",
    "    if ($n == 1) {\n        return $l;\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            $result[] = array_merge([$e], $c);\n        }\n    }\n    return $result;\n}\n\n$l = ['red', 'blue', 'green'];\n$n = 2;\nprint_r(combinations_colors($l, $n));\n",
    "  $result = [];\n  $combination = [];\n  $combinations_helper($l, $n, $combination, $result);\n  return $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_result = combinations_colors($l, $n - 1);\n        foreach ($sub_result as $sub_e) {\n            $result[] = array_merge(array($e), $sub_e);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$result = combinations_colors($colors, 2);\nprint_r($result);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $combos = combinations_colors($l, $n - 1);\n        foreach ($combos as $c) {\n            array_push($c, $e);\n            array_push($result, $c);\n        }\n    }\n    return $result;\n}\n\n$l = array('red', 'blue', 'green');\n$n = 2;\n\n$result = combinations_colors($l, $n);\n\nforeach ($result as $r) {\n    echo implode(', ', $r) . \"\\n\";\n}",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_combinations = combinations_colors($l, $n - 1);\n        foreach ($sub_combinations as $sub_combination) {\n            array_push($sub_combination, $e);\n            array_push($result, $sub_combination);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$combinations = combinations_colors($colors, 2);\nforeach ($combinations as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}",
    "\tif ($n == 0) {\n\t\treturn array(array());\n\t}\n\t$result = array();\n\tforeach ($l as $e) {\n\t\t$sub_result = combinations_colors($l, $n - 1);\n\t\tforeach ($sub_result as $sub_e) {\n\t\t\t$result[] = array_merge(array($e), $sub_e);\n\t\t}\n\t}\n\treturn $result;\n}\n\n$l = array('red', 'blue', 'green', 'yellow');\n$n = 2;\n$result = combinations_colors($l, $n);\nprint_r($result);\n",
    "    $result = [];\n    if ($n == 1) {\n        foreach ($l as $e) {\n            $result[] = [$e];\n        }\n    } else {\n        foreach ($l as $e) {\n            foreach (combinations_colors($l, $n - 1) as $c) {\n                $result[] = array_merge([$e], $c);\n            }\n        }\n    }\n    return $result;\n}\n\n$l = ['red', 'green', 'blue'];\n$n = 2;\n\nprint_r(combinations_colors($l, $n));",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_combinations = combinations_colors($l, $n - 1);\n        foreach ($sub_combinations as $sub_combination) {\n            $result[] = array_merge(array($e), $sub_combination);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green', 'yellow');\n$combinations = combinations_colors($colors, 3);\nforeach ($combinations as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge([$e], $c));\n        }\n    }\n    return $result;\n}\n\nprint_r(combinations_colors(['red', 'blue', 'green'], 2));\n",
    "  $combinations = [];\n  $combination = [];\n  $i = 0;\n  $j = 0;\n  while ($i < $n) {\n    if ($j < count($l)) {\n      $combination[$i] = $l[$j];\n      $j++;\n    } else {\n      $j = 0;\n      $combination[$i] = $l[$j];\n      $j++;\n    }\n    $i++;\n  }\n  $combinations[] = $combination;\n  $i = 0;\n  while ($i < $n) {\n    if ($combination[$i] == $l[count($l) - 1]) {\n      $combination[$i] = $l[0];\n      $i++;\n    } else {\n      $j = 0;\n      while ($combination[$i] != $l[$j]) {\n        $j++;\n      }\n      $combination[$i] = $l[$j + 1];\n      $i = 0;\n    }\n    $combinations[] = $combination;\n  }\n  return $combinations;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "\t$result = array();\n\t$result[] = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$temp = array();\n\t\tforeach ($result as $a) {\n\t\t\tforeach ($l as $e) {\n\t\t\t\t$temp[] = array_merge($a, array($e));\n\t\t\t}\n\t\t}\n\t\t$result = $temp;\n\t}\n\treturn $result;\n}\n",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge([$e], $c));\n        }\n    }\n    return $result;\n}\n",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge([$e], $c));\n        }\n    }\n    return $result;\n}\n\n$colors = ['red', 'green', 'blue'];\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);\n",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    for ($i = 0; $i < count($l); $i++) {\n        $sub_result = combinations_colors(array_slice($l, $i), $n - 1);\n        foreach ($sub_result as $sub_array) {\n            array_push($sub_array, $l[$i]);\n            array_push($result, $sub_array);\n        }\n    }\n    return $result;\n}\n",
    "    $result = array();\n    $result[] = array();\n    for ($i = 0; $i < $n; $i++) {\n        $temp = array();\n        foreach ($result as $r) {\n            foreach ($l as $e) {\n                $temp[] = array_merge($r, array($e));\n            }\n        }\n        $result = $temp;\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$combinations = combinations_colors($colors, 2);\nforeach ($combinations as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}\n",
    "    $result = array();\n    if ($n == 1) {\n        return $l;\n    }\n    foreach ($l as $i) {\n        foreach (combinations_colors($l, $n - 1) as $j) {\n            $result[] = array_merge(array($i), (array) $j);\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\", \"yellow\");\n$combinations = combinations_colors($colors, 3);\n\nforeach ($combinations as $combination) {\n    echo implode(\", \", $combination) . \"<br>\";\n}",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $combos = combinations_colors($l, $n - 1);\n        foreach ($combos as $c) {\n            array_push($c, $e);\n            array_push($result, $c);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$combos = combinations_colors($colors, 2);\nprint_r($combos);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_result = combinations_colors($l, $n - 1);\n        foreach ($sub_result as $sub_e) {\n            $sub_e[] = $e;\n            $result[] = $sub_e;\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "    if ($n == 0) {\n        return [[]];\n    }\n    $result = [];\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge([$e], $c));\n        }\n    }\n    return $result;\n}\n",
    "  $result = array();\n  if ($n == 0) {\n    return array(array());\n  }\n  foreach ($l as $e) {\n    $sub_result = combinations_colors($l, $n - 1);\n    foreach ($sub_result as $sub_e) {\n      $sub_e[] = $e;\n      $result[] = $sub_e;\n    }\n  }\n  return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$result = combinations_colors($colors, 2);\nprint_r($result);\n",
    "    if ($n == 0) {\n        return array(array());\n    }\n    $result = array();\n    foreach ($l as $e) {\n        $sub_result = combinations_colors($l, $n - 1);\n        foreach ($sub_result as $sub_e) {\n            $result[] = array_merge(array($e), $sub_e);\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"green\", \"blue\");\n$result = combinations_colors($colors, 2);\nprint_r($result);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$n = 2;\n$result = combinations_colors($colors, $n);\nprint_r($result);",
    "  $result = [];\n  $combinations = [];\n  $combinations_helper($l, $n, $result, $combinations);\n  return $combinations;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$combinations = combinations_colors($colors, 2);\n\nforeach ($combinations as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_combos = combinations_colors($l, $n - 1);\n        foreach ($sub_combos as $sub_combo) {\n            $result[] = array_merge(array($e), $sub_combo);\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$combos = combinations_colors($colors, 2);\nprint_r($combos);",
    "\t$result = [];\n\t$combinations_helper($l, $n, [], $result);\n\treturn $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        $result[] = array();\n    } else {\n        foreach ($l as $e) {\n            foreach (combinations_colors($l, $n - 1) as $c) {\n                $result[] = array_merge(array($e), $c);\n            }\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"green\", \"blue\");\n$combinations = combinations_colors($colors, 2);\n\nforeach ($combinations as $combination) {\n    echo implode(\" \", $combination) . \"\\n\";\n}",
    "\t$result = [];\n\t$combinations = [];\n\t$combinations_helper($l, $n, $result, $combinations);\n\treturn $combinations;\n}\n",
    "\t$result = array();\n\t$combinations = array();\n\t$combinations_helper($l, $n, $combinations, $result);\n\treturn $result;\n}",
    "    $result = array();\n    if ($n == 0) {\n        $result[] = array();\n    } else {\n        foreach ($l as $e) {\n            foreach (combinations_colors($l, $n - 1) as $c) {\n                $result[] = array_merge(array($e), $c);\n            }\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$result = combinations_colors($colors, 2);\n\nforeach ($result as $combination) {\n    echo implode(', ', $combination) . \"\\n\";\n}",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$n = 2;\n$result = combinations_colors($colors, $n);\nprint_r($result);\n",
    "\t$result = array();\n\t$combinations = array();\n\t$combinations_helper($l, $n, 0, $combinations, $result);\n\treturn $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $sub_result = combinations_colors($l, $n - 1);\n        foreach ($sub_result as $sub_e) {\n            $result[] = array_merge(array($e), $sub_e);\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'green', 'blue');\n$result = combinations_colors($colors, 2);\nprint_r($result);\n",
    "\t$result = array();\n\t$result[] = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$temp = array();\n\t\tforeach ($result as $j) {\n\t\t\tforeach ($l as $k) {\n\t\t\t\t$temp[] = array_merge($j, array($k));\n\t\t\t}\n\t\t}\n\t\t$result = $temp;\n\t}\n\treturn $result;\n}\n\n$l = array('red', 'blue', 'green');\n$n = 2;\n$result = combinations_colors($l, $n);\nprint_r($result);\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            $result[] = array_merge(array($e), $c);\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$n = 2;\n$combinations = combinations_colors($colors, $n);\nprint_r($combinations);",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $combos = combinations_colors($l, $n - 1);\n        foreach ($combos as $c) {\n            array_push($result, array_merge(array($e), $c));\n        }\n    }\n    return $result;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        foreach (combinations_colors($l, $n - 1) as $c) {\n            array_unshift($c, $e);\n            $result[] = $c;\n        }\n    }\n    return $result;\n}\n\n$colors = array('red', 'blue', 'green');\n$combinations = combinations_colors($colors, 2);\nprint_r($combinations);",
    "  $result = [];\n  $combinations = [];\n  combinations_helper($l, $n, $result, $combinations);\n  return $combinations;\n}\n",
    "    $result = array();\n    if ($n == 0) {\n        return array(array());\n    }\n    foreach ($l as $e) {\n        $combos = combinations_colors($l, $n - 1);\n        foreach ($combos as $c) {\n            array_push($c, $e);\n            array_push($result, $c);\n        }\n    }\n    return $result;\n}\n\n$colors = array(\"red\", \"blue\", \"green\");\n$combos = combinations_colors($colors, 2);\nprint_r($combos);\n",
    "    $result = array(array());\n    for ($i = 0; $i < $n; $i++) {\n        foreach ($result as $combination) {\n            foreach ($l as $color) {\n                $result[] = array_merge($combination, array($color));\n            }\n        }\n    }\n    return $result;\n}\n\n$l = array('red', 'green', 'blue');\n$n = 2;\n$result = combinations_colors($l, $n);\nprint_r($result);\n"
  ]
}