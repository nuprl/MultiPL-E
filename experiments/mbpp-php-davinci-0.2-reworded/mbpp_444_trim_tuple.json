{
  "name": "mbpp_444_trim_tuple",
  "language": "php",
  "prompt": "<?php\n// Write a function to trim each array by k in the given array array.\nfunction trim_tuple($test_list, $K) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return trim_tuple(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 3, 2, 1, 4), array(3, 4, 9, 2, 1), array(9, 1, 2, 3, 5), array(4, 8, 2, 1, 7)), 2) !== \"[(2,), (9,), (2,), (2,)]\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 3, 2, 1, 4), array(3, 4, 9, 2, 1), array(9, 1, 2, 3, 5), array(4, 8, 2, 1, 7)), 1) !== \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 4, 9), array(11, 8, 12, 4), array(4, 1, 7, 8), array(3, 6, 9, 7)), 1) !== \"[(8, 4), (8, 12), (1, 7), (6, 9)]\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = array_slice($tuple, 0, $K);\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(2, 3, 4, 5, 6),\n    array(3, 4, 5, 6, 7),\n    array(4, 5, 6, 7, 8),\n    array(5, 6, 7, 8, 9)\n);\n$K = 3;\n\nprint_r(trim_tuple($test_list, $K));",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = array_map(function($x) use ($K) {\n            return $x - $K;\n        }, $tuple);\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(4, 5, 1),\n    array(2, 3, 4),\n    array(4, 5, 6),\n);\n$K = 2;\nprint_r(trim_tuple($test_list, $K));\n",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = array_slice($tuple, $K);\n    }\n    return $result;\n}\n$test_list = array(\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n    array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n);\n$K = 3;\nprint_r(trim_tuple($test_list, $K));",
    "    foreach ($test_list as $key => $value) {\n        $test_list[$key] = array_slice($value, 0, $K);\n    }\n    return $test_list;\n}\n",
    "    $result = array();\n    foreach ($test_list as $test) {\n        $result[] = trim_array($test, $K);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = trim_array($tuple, $K);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = array_slice($tuple, 0, $K);\n    }\n    return $result;\n}\n\n$test_list = array(array(1, 2, 3, 4, 5), array(6, 7, 8, 9, 10), array(11, 12, 13, 14, 15));\n$K = 3;\nprint_r(trim_tuple($test_list, $K));",
    "    $result = array();\n    foreach ($test_list as $test_tuple) {\n        $result[] = array_slice($test_tuple, $K);\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5, 6),\n    array(7, 8, 9, 10, 11, 12),\n    array(13, 14, 15, 16, 17, 18),\n    array(19, 20, 21, 22, 23, 24),\n    array(25, 26, 27, 28, 29, 30),\n    array(31, 32, 33, 34, 35, 36)\n);\n$K = 2;\n\nprint_r(trim_tuple($test_list, $K));",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = array_slice($tuple, 0, $K);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = trim_array($tuple, $K);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = array_slice($tuple, 0, $K);\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(6, 7, 8, 9, 10),\n    array(11, 12, 13, 14, 15),\n    array(16, 17, 18, 19, 20)\n);\n$K = 3;\nprint_r(trim_tuple($test_list, $K));\n",
    "    $result = array();\n    foreach ($test_list as $test_tuple) {\n        $result[] = array_map(function($x) use ($K) {\n            return $x - $K;\n        }, $test_tuple);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = array_slice($tuple, 0, $K);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = array_slice($tuple, 0, $K);\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(6, 7, 8, 9, 10),\n    array(11, 12, 13, 14, 15),\n    array(16, 17, 18, 19, 20),\n);\n$K = 3;\nprint_r(trim_tuple($test_list, $K));",
    "    $result = [];\n    foreach ($test_list as $tuple) {\n        $result[] = array_slice($tuple, $K);\n    }\n    return $result;\n}\n\n$test_list = [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]];\n$K = 2;\n\nprint_r(trim_tuple($test_list, $K));",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = trim_array($tuple, $K);\n    }\n    return $result;\n}\n",
    "    $result = [];\n    foreach ($test_list as $key => $value) {\n        $result[$key] = array_slice($value, 0, $K);\n    }\n    return $result;\n}\n\n$test_list = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]];\n$K = 3;\n\nprint_r(trim_tuple($test_list, $K));",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = array_slice($tuple, 0, $K);\n    }\n    return $result;\n}\n\n$test_list = array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6));\n$K = 4;\nprint_r(trim_tuple($test_list, $K));\n",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = array_slice($tuple, 0, $K);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach ($test_list as $tuple) {\n        $result[] = array_slice($tuple, 0, $K);\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5, 6),\n    array(1, 2, 3, 4, 5),\n    array(1, 2, 3, 4),\n    array(1, 2, 3),\n    array(1, 2),\n    array(1),\n);\n$K = 3;\nprint_r(trim_tuple($test_list, $K));\n"
  ]
}