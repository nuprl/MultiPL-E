{
  "name": "mbpp_12_sort_matrix",
  "language": "php",
  "prompt": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $row_sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum += $M[$i][$j];\n        }\n        $row_sum[$i] = $sum;\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($row_sum[$i] > $row_sum[$j]) {\n                $temp = $row_sum[$i];\n                $row_sum[$i] = $row_sum[$j];\n                $row_sum[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $tmp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $tmp;\n                $tmp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $tmp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum_row = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum_row[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum_row[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum_row[$i] > $sum_row[$j]) {\n                $temp = $sum_row[$i];\n                $sum_row[$i] = $sum_row[$j];\n                $sum_row[$j] = $temp;\n                for ($k = 0; $k < $cols; $k++) {\n                    $temp = $M[$i][$k];\n                    $M[$i][$k] = $M[$j][$k];\n                    $M[$j][$k] = $temp;\n                }\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3),\n           array(4, 5, 6),\n           array(7, 8, 9));\n\necho \"<pre>\";\nprint_r(sort_matrix($M));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n</pre>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $row_sums = [];\n    foreach ($M as $row) {\n        $row_sums[] = array_sum($row);\n    }\n    array_multisort($row_sums, $M);\n    return $M;\n}\n\n$M = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sums[$i] > $sums[$j]) {\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n                $temp = $sums[$i];\n                $sums[$i] = $sums[$j];\n                $sums[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . ' ';\n    }\n    echo '<br>';\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    $sorted_sums = $sums;\n    sort($sorted_sums);\n    $sorted_M = $M;\n    for ($i = 0; $i < $rows; $i++) {\n        $index = array_search($sorted_sums[$i], $sums);\n        $sorted_M[$i] = $M[$index];\n    }\n    return $sorted_M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$sorted_M = sort_matrix($M);\nfor ($i = 0; $i < count($sorted_M); $i++) {\n    for ($j = 0; $j < count($sorted_M[0]); $j++) {\n        echo $sorted_M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510459,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[$i]); $j++) {\n        echo $M[$i][$j] . ' ';\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510459,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                for ($k = 0; $k < $cols; $k++) {\n                    $temp = $M[$i][$k];\n                    $M[$i][$k] = $M[$j][$k];\n                    $M[$j][$k] = $temp;\n                }\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510459,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $key => $row) {\n        $sums[$key] = array_sum($row);\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510459,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum += $M[$i][$j];\n        }\n        $sums[$i] = $sum;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sums[$i] > $sums[$j]) {\n                $temp = $sums[$i];\n                $sums[$i] = $sums[$j];\n                $sums[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . ' ';\n    }\n    echo '<br>';\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $row) {\n        $sums[] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum_row = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum += $M[$i][$j];\n        }\n        $sum_row[$i] = $sum;\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum_row[$i] > $sum_row[$j]) {\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n                $temp = $sum_row[$i];\n                $sum_row[$i] = $sum_row[$j];\n                $sum_row[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3, 4),\n    array(5, 6, 7, 8),\n    array(9, 10, 11, 12),\n    array(13, 14, 15, 16),\n);\n\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 4 <br>5 6 7 8 <br>9 10 11 12 <br>13 14 15 16 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "\nWarning: Undefined variable $sum in /tmp/tmppyt17oto.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmppyt17oto.php on line 9\n\nWarning: Undefined array key 1 in /tmp/tmppyt17oto.php on line 9\n\nWarning: Undefined array key 2 in /tmp/tmppyt17oto.php on line 9\n1 2 3 <br>4 5 6 <br>7 8 9 <br>\nWarning: Undefined variable $sum in /tmp/tmppyt17oto.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmppyt17oto.php on line 9\n\nWarning: Undefined array key 1 in /tmp/tmppyt17oto.php on line 9\n\nWarning: Undefined array key 2 in /tmp/tmppyt17oto.php on line 9\n\nWarning: Undefined variable $sum in /tmp/tmppyt17oto.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmppyt17oto.php on line 9\n\nWarning: Undefined array key 1 in /tmp/tmppyt17oto.php on line 9\n\nWarning: Undefined array key 2 in /tmp/tmppyt17oto.php on line 9\n\nWarning: Undefined variable $sum in /tmp/tmppyt17oto.php on line 9\n\nWarning: Undefined array key 0 in /tmp/tmppyt17oto.php on line 9\n\nWarning: Undefined array key 1 in /tmp/tmppyt17oto.php on lin",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = array_sum($M[$i]);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                for ($k = 0; $k < $m; $k++) {\n                    $temp = $M[$i][$k];\n                    $M[$i][$k] = $M[$j][$k];\n                    $M[$j][$k] = $temp;\n                }\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . ' ';\n    }\n    echo '<br>';\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    $n = count($M);\n    for ($i = 0; $i < $n; $i++) {\n        $sum[$i] = array_sum($M[$i]);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $row_sum = [];\n    for ($i = 0; $i < count($M); $i++) {\n        $row_sum[$i] = array_sum($M[$i]);\n    }\n    array_multisort($row_sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $row) {\n        $sums[] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum += $M[$i][$j];\n        }\n        $sums[$i] = $sum;\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n - 1; $j++) {\n            if ($sum[$j] > $sum[$j + 1]) {\n                $temp = $sum[$j];\n                $sum[$j] = $sum[$j + 1];\n                $sum[$j + 1] = $temp;\n                for ($k = 0; $k < $m; $k++) {\n                    $temp = $M[$j][$k];\n                    $M[$j][$k] = $M[$j + 1][$k];\n                    $M[$j + 1][$k] = $temp;\n                }\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\necho \"<pre>\";\nprint_r(sort_matrix($M));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n</pre>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[$i]); $j++) {\n        echo $M[$i][$j] . ' ';\n    }\n    echo '<br>';\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $k => $v) {\n        $sum[$k] = array_sum($v);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510459,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                for ($k = 0; $k < $cols; $k++) {\n                    $temp = $M[$i][$k];\n                    $M[$i][$k] = $M[$j][$k];\n                    $M[$j][$k] = $temp;\n                }\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sums[$i] > $sums[$j]) {\n                $tmp = $sums[$i];\n                $sums[$i] = $sums[$j];\n                $sums[$j] = $tmp;\n                $tmp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $tmp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . ' ';\n    }\n    echo '<br>';\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n\t$sums = array();\n\tforeach ($M as $i => $row) {\n\t\t$sums[$i] = array_sum($row);\n\t}\n\tarray_multisort($sums, $M);\n\treturn $M;\n}\n\n$M = array(\n\tarray(1, 2, 3),\n\tarray(4, 5, 6),\n\tarray(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum += $M[$i][$j];\n        }\n        $sums[$i] = $sum;\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\necho \"<pre>\";\nprint_r($M);\necho \"</pre>\";\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n</pre>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = array_sum($M[$i]);\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sums[$i] > $sums[$j]) {\n                $tmp = $sums[$i];\n                $sums[$i] = $sums[$j];\n                $sums[$j] = $tmp;\n                $tmp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $tmp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    $n = count($M);\n    for ($i = 0; $i < $n; $i++) {\n        $sum[$i] = array_sum($M[$i]);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = [];\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array_map(function($row) {\n        return array_sum($row);\n    }, $M);\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\necho \"<pre>\";\nprint_r($M);\necho \"</pre>\";\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n</pre>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = array_sum($M[$i]);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n - 1; $j++) {\n            if ($sum[$j] > $sum[$j + 1]) {\n                $temp = $sum[$j];\n                $sum[$j] = $sum[$j + 1];\n                $sum[$j + 1] = $temp;\n                for ($k = 0; $k < $m; $k++) {\n                    $temp = $M[$j][$k];\n                    $M[$j][$k] = $M[$j + 1][$k];\n                    $M[$j + 1][$k] = $temp;\n                }\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum += $M[$i][$j];\n        }\n        $sums[$i] = $sum;\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array_map('array_sum', $M);\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    for ($i = 0; $i < count($M); $i++) {\n        $sum[$i] = array_sum($M[$i]);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n\t$n = count($M);\n\t$m = count($M[0]);\n\t$sums = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$sums[$i] = 0;\n\t\tfor ($j = 0; $j < $m; $j++) {\n\t\t\t$sums[$i] += $M[$i][$j];\n\t\t}\n\t}\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tfor ($j = $i + 1; $j < $n; $j++) {\n\t\t\tif ($sums[$i] > $sums[$j]) {\n\t\t\t\t$temp = $sums[$i];\n\t\t\t\t$sums[$i] = $sums[$j];\n\t\t\t\t$sums[$j] = $temp;\n\t\t\t\t$temp = $M[$i];\n\t\t\t\t$M[$i] = $M[$j];\n\t\t\t\t$M[$j] = $temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn $M;\n}\n\n$M = array(\n\tarray(1, 2, 3),\n\tarray(4, 5, 6),\n\tarray(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n\tfor ($j = 0; $j < count($M[$i]); $j++) {\n\t\techo $M[$i][$j] . \" \";\n\t}\n\techo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n\t$rows = count($M);\n\t$cols = count($M[0]);\n\t$sums = array();\n\tfor ($i = 0; $i < $rows; $i++) {\n\t\t$sums[$i] = 0;\n\t\tfor ($j = 0; $j < $cols; $j++) {\n\t\t\t$sums[$i] += $M[$i][$j];\n\t\t}\n\t}\n\tarray_multisort($sums, $M);\n\treturn $M;\n}\n\n$M = array(\n\tarray(1, 2, 3),\n\tarray(4, 5, 6),\n\tarray(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                for ($k = 0; $k < $cols; $k++) {\n                    $temp = $M[$i][$k];\n                    $M[$i][$k] = $M[$j][$k];\n                    $M[$j][$k] = $temp;\n                }\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = array_sum($M[$i]);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $arr = array();\n    $n = count($M);\n    for ($i = 0; $i < $n; $i++) {\n        $arr[$i] = array_sum($M[$i]);\n    }\n    array_multisort($arr, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\necho '<pre>';\nprint_r(sort_matrix($M));\necho '</pre>';\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n</pre>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n  $rows = count($M);\n  $cols = count($M[0]);\n  $sums = [];\n  for ($i = 0; $i < $rows; $i++) {\n    $sums[$i] = 0;\n    for ($j = 0; $j < $cols; $j++) {\n      $sums[$i] += $M[$i][$j];\n    }\n  }\n  array_multisort($sums, $M);\n  return $M;\n}\n\n$M = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n  for ($j = 0; $j < count($M[0]); $j++) {\n    echo $M[$i][$j] . ' ';\n  }\n  echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $k => $v) {\n        $sum[$k] = array_sum($v);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    for ($i = 0; $i < count($M); $i++) {\n        $sum[$i] = array_sum($M[$i]);\n    }\n    array_multisort($sum, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sums[$i] > $sums[$j]) {\n                $tmp = $sums[$i];\n                $sums[$i] = $sums[$j];\n                $sums[$j] = $tmp;\n                for ($k = 0; $k < $m; $k++) {\n                    $tmp = $M[$i][$k];\n                    $M[$i][$k] = $M[$j][$k];\n                    $M[$j][$k] = $tmp;\n                }\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . ' ';\n    }\n    echo '<br>';\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if (array_sum($M[$i]) > array_sum($M[$j])) {\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510459,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . ' ';\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(10, 11, 12)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n    [3] => Array\n        (\n            [0] => 10\n            [1] => 11\n            [2] => 12\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum += $M[$i][$j];\n        }\n        $sums[$i] = $sum;\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n\t$rows = count($M);\n\t$cols = count($M[0]);\n\t$row_sum = array();\n\tfor ($i = 0; $i < $rows; $i++) {\n\t\t$row_sum[$i] = 0;\n\t\tfor ($j = 0; $j < $cols; $j++) {\n\t\t\t$row_sum[$i] += $M[$i][$j];\n\t\t}\n\t}\n\tfor ($i = 0; $i < $rows; $i++) {\n\t\tfor ($j = $i + 1; $j < $rows; $j++) {\n\t\t\tif ($row_sum[$i] > $row_sum[$j]) {\n\t\t\t\t$temp = $row_sum[$i];\n\t\t\t\t$row_sum[$i] = $row_sum[$j];\n\t\t\t\t$row_sum[$j] = $temp;\n\t\t\t\tfor ($k = 0; $k < $cols; $k++) {\n\t\t\t\t\t$temp = $M[$i][$k];\n\t\t\t\t\t$M[$i][$k] = $M[$j][$k];\n\t\t\t\t\t$M[$j][$k] = $temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $M;\n}\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n\tfor ($j = 0; $j < count($M[0]); $j++) {\n\t\techo $M[$i][$j] . \" \";\n\t}\n\techo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                for ($k = 0; $k < $cols; $k++) {\n                    $temp = $M[$i][$k];\n                    $M[$i][$k] = $M[$j][$k];\n                    $M[$j][$k] = $temp;\n                }\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sums[$i] > $sums[$j]) {\n                $tmp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $tmp;\n                $tmp = $sums[$i];\n                $sums[$i] = $sums[$j];\n                $sums[$j] = $tmp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[$i]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $row_sum = array();\n    $row_count = count($M);\n    $col_count = count($M[0]);\n    for ($i = 0; $i < $row_count; $i++) {\n        $row_sum[$i] = 0;\n        for ($j = 0; $j < $col_count; $j++) {\n            $row_sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = $i + 1; $j < $row_count; $j++) {\n            if ($row_sum[$i] > $row_sum[$j]) {\n                $temp = $row_sum[$i];\n                $row_sum[$i] = $row_sum[$j];\n                $row_sum[$j] = $temp;\n                for ($k = 0; $k < $col_count; $k++) {\n                    $temp = $M[$i][$k];\n                    $M[$i][$k] = $M[$j][$k];\n                    $M[$j][$k] = $temp;\n                }\n            }\n        }\n    }\n    return $M;\n}\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$result = sort_matrix($M);\nfor ($i = 0; $i < count($result); $i++) {\n    for ($j = 0; $j < count($result[0]); $j++) {\n        echo $result[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\necho '<pre>';\nprint_r(sort_matrix($M));\necho '</pre>';\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n</pre>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $tmp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $tmp;\n                $tmp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $tmp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = [];\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $row_sum = array();\n    foreach ($M as $row => $cols) {\n        $row_sum[$row] = array_sum($cols);\n    }\n    array_multisort($row_sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1,2,3),\n    array(4,5,6),\n    array(7,8,9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sums[$i] > $sums[$j]) {\n                $temp = $sums[$i];\n                $sums[$i] = $sums[$j];\n                $sums[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = [];\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = array_sum($M[$i]);\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = [];\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n\t$n = count($M);\n\t$m = count($M[0]);\n\t$sum = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$sum[$i] = 0;\n\t\tfor ($j = 0; $j < $m; $j++) {\n\t\t\t$sum[$i] += $M[$i][$j];\n\t\t}\n\t}\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tfor ($j = $i + 1; $j < $n; $j++) {\n\t\t\tif ($sum[$i] > $sum[$j]) {\n\t\t\t\t$temp = $sum[$i];\n\t\t\t\t$sum[$i] = $sum[$j];\n\t\t\t\t$sum[$j] = $temp;\n\t\t\t\t$temp = $M[$i];\n\t\t\t\t$M[$i] = $M[$j];\n\t\t\t\t$M[$j] = $temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn $M;\n}\n\n$M = array(\n\tarray(1, 2, 3),\n\tarray(4, 5, 6),\n\tarray(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n\tfor ($j = 0; $j < count($M[0]); $j++) {\n\t\techo $M[$i][$j] . \" \";\n\t}\n\techo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n\t$rows = count($M);\n\t$cols = count($M[0]);\n\t$sums = array();\n\tfor ($i = 0; $i < $rows; $i++) {\n\t\t$sums[$i] = 0;\n\t\tfor ($j = 0; $j < $cols; $j++) {\n\t\t\t$sums[$i] += $M[$i][$j];\n\t\t}\n\t}\n\tarray_multisort($sums, $M);\n\treturn $M;\n}\n\n$M = array(\n\tarray(1, 2, 3),\n\tarray(4, 5, 6),\n\tarray(7, 8, 9),\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n\tfor ($j = 0; $j < count($M[0]); $j++) {\n\t\techo $M[$i][$j] . ' ';\n\t}\n\techo PHP_EOL;\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array_fill(0, $n, 0);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sums[$i] > $sums[$j]) {\n                $temp = $sums[$i];\n                $sums[$i] = $sums[$j];\n                $sums[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array_fill(0, $rows, 0);\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . ' ';\n    }\n    echo '<br>';\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sums[$i] > $sums[$j]) {\n                $temp = $sums[$i];\n                $sums[$i] = $sums[$j];\n                $sums[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if (array_sum($M[$i]) > array_sum($M[$j])) {\n                $t = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $t;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = array_sum($M[$i]);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $N = count($M);\n    $M_sum = array();\n    for ($i = 0; $i < $N; $i++) {\n        $M_sum[$i] = array_sum($M[$i]);\n    }\n    array_multisort($M_sum, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nforeach ($M as $row) {\n    foreach ($row as $col) {\n        echo $col . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows - 1; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array_map(function($row) {\n        return array_sum($row);\n    }, $M);\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sums[$i] > $sums[$j]) {\n                $tmp = $sums[$i];\n                $sums[$i] = $sums[$j];\n                $sums[$j] = $tmp;\n                $tmp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $tmp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . ' ';\n    }\n    echo '<br>';\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . ' ';\n    }\n    echo '<br>';\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sums[$i] > $sums[$j]) {\n                $temp = $sums[$i];\n                $sums[$i] = $sums[$j];\n                $sums[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . ' ';\n    }\n    echo '<br>';\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    $n = count($M);\n    for ($i = 0; $i < $n; $i++) {\n        $sum[$i] = array_sum($M[$i]);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510459,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n\t$rows = count($M);\n\t$cols = count($M[0]);\n\t$sums = array();\n\tfor ($i = 0; $i < $rows; $i++) {\n\t\t$sums[$i] = 0;\n\t\tfor ($j = 0; $j < $cols; $j++) {\n\t\t\t$sums[$i] += $M[$i][$j];\n\t\t}\n\t}\n\t$sorted = array();\n\tfor ($i = 0; $i < $rows; $i++) {\n\t\t$min = min($sums);\n\t\t$min_index = array_search($min, $sums);\n\t\t$sorted[] = $M[$min_index];\n\t\tunset($sums[$min_index]);\n\t}\n\treturn $sorted;\n}\n\n$M = array(\n\tarray(1, 2, 3),\n\tarray(4, 5, 6),\n\tarray(7, 8, 9)\n);\n$sorted = sort_matrix($M);\nprint_r($sorted);\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $row) {\n        $sums[] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n\t$n = count($M);\n\t$m = count($M[0]);\n\t$sum = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$sum[$i] = 0;\n\t\tfor ($j = 0; $j < $m; $j++) {\n\t\t\t$sum[$i] += $M[$i][$j];\n\t\t}\n\t}\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tfor ($j = 0; $j < $n - 1; $j++) {\n\t\t\tif ($sum[$j] > $sum[$j + 1]) {\n\t\t\t\t$tmp = $sum[$j];\n\t\t\t\t$sum[$j] = $sum[$j + 1];\n\t\t\t\t$sum[$j + 1] = $tmp;\n\t\t\t\tfor ($k = 0; $k < $m; $k++) {\n\t\t\t\t\t$tmp = $M[$j][$k];\n\t\t\t\t\t$M[$j][$k] = $M[$j + 1][$k];\n\t\t\t\t\t$M[$j + 1][$k] = $tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $M;\n}\n\n$M = array(\n\tarray(1, 2, 3),\n\tarray(4, 5, 6),\n\tarray(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n\tfor ($j = 0; $j < count($M[0]); $j++) {\n\t\techo $M[$i][$j] . \" \";\n\t}\n\techo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                for ($k = 0; $k < $cols; $k++) {\n                    $temp = $M[$i][$k];\n                    $M[$i][$k] = $M[$j][$k];\n                    $M[$j][$k] = $temp;\n                }\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $row_sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum += $M[$i][$j];\n        }\n        $row_sum[$i] = $sum;\n    }\n    array_multisort($row_sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $row) {\n        $sums[] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n - 1; $j++) {\n            if ($sums[$j] > $sums[$j + 1]) {\n                $tmp = $sums[$j];\n                $sums[$j] = $sums[$j + 1];\n                $sums[$j + 1] = $tmp;\n                $tmp = $M[$j];\n                $M[$j] = $M[$j + 1];\n                $M[$j + 1] = $tmp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $row_sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum += $M[$i][$j];\n        }\n        $row_sum[$i] = $sum;\n    }\n    array_multisort($row_sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $columns = count($M[0]);\n    $sums = [];\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $columns; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$M = sort_matrix($M);\nprint_r($M);\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = [];\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $rows - 1; $j++) {\n            if ($sum[$j] > $sum[$j + 1]) {\n                $temp = $M[$j];\n                $M[$j] = $M[$j + 1];\n                $M[$j + 1] = $temp;\n                $temp = $sum[$j];\n                $sum[$j] = $sum[$j + 1];\n                $sum[$j + 1] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho \"<pre>\";\nprint_r(sort_matrix($M));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n</pre>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(10, 11, 12)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>10 11 12 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = array_sum($M[$i]);\n    }\n    array_multisort($sums, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $row_sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $row_sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $row_sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($row_sum[$i] > $row_sum[$j]) {\n                $temp = $row_sum[$i];\n                $row_sum[$i] = $row_sum[$j];\n                $row_sum[$j] = $temp;\n                for ($k = 0; $k < $cols; $k++) {\n                    $temp = $M[$i][$k];\n                    $M[$i][$k] = $M[$j][$k];\n                    $M[$j][$k] = $temp;\n                }\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $tmp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $tmp;\n                $tmp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $tmp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . ' ';\n    }\n    echo '<br>';\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = [];\n    foreach ($M as $row) {\n        $sums[] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    for ($i = 0; $i < count($M); $i++) {\n        $sum[$i] = array_sum($M[$i]);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[$i]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sum, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    $sorted = false;\n    while (!$sorted) {\n        $sorted = true;\n        for ($i = 0; $i < $n - 1; $i++) {\n            if ($sums[$i] > $sums[$i + 1]) {\n                $sorted = false;\n                $temp = $sums[$i];\n                $sums[$i] = $sums[$i + 1];\n                $sums[$i + 1] = $temp;\n                for ($j = 0; $j < $m; $j++) {\n                    $temp = $M[$i][$j];\n                    $M[$i][$j] = $M[$i + 1][$j];\n                    $M[$i + 1][$j] = $temp;\n                }\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[$i]); $j++) {\n        echo $M[$i][$j] . ' ';\n    }\n    echo '<br>';\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[$i]); $j++) {\n        echo $M[$i][$j] . ' ';\n    }\n    echo '<br>';\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = array_sum($M[$i]);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = [];\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $tmp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $tmp;\n                $tmp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $tmp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                $temp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $row) {\n        $sums[] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n - 1; $j++) {\n            if ($sums[$j] > $sums[$j + 1]) {\n                $temp = $sums[$j];\n                $sums[$j] = $sums[$j + 1];\n                $sums[$j + 1] = $temp;\n                $temp = $M[$j];\n                $M[$j] = $M[$j + 1];\n                $M[$j + 1] = $temp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\necho '<pre>';\nprint_r(sort_matrix($M));\necho '</pre>';\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n</pre>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 \n4 5 6 \n7 8 9 \n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sums = array();\n    foreach ($M as $i => $row) {\n        $sums[$i] = array_sum($row);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\n\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510458,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $sum = array();\n    foreach ($M as $key => $row) {\n        $sum[$key] = array_sum($row);\n    }\n    array_multisort($sum, SORT_ASC, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $n = count($M);\n    $m = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $n; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($sums[$i] > $sums[$j]) {\n                $tmp = $sums[$i];\n                $sums[$i] = $sums[$j];\n                $sums[$j] = $tmp;\n                $tmp = $M[$i];\n                $M[$i] = $M[$j];\n                $M[$j] = $tmp;\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = array_sum($M[$i]);\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n$M = sort_matrix($M);\n\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[$i]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = [];\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sum = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sum[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sum[$i] += $M[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = $i + 1; $j < $rows; $j++) {\n            if ($sum[$i] > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] = $sum[$j];\n                $sum[$j] = $temp;\n                for ($k = 0; $k < $cols; $k++) {\n                    $temp = $M[$i][$k];\n                    $M[$i][$k] = $M[$j][$k];\n                    $M[$j][$k] = $temp;\n                }\n            }\n        }\n    }\n    return $M;\n}\n\n$M = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9));\n$M = sort_matrix($M);\nfor ($i = 0; $i < count($M); $i++) {\n    for ($j = 0; $j < count($M[0]); $j++) {\n        echo $M[$i][$j] . \" \";\n    }\n    echo \"<br>\";\n}\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "1 2 3 <br>4 5 6 <br>7 8 9 <br>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n    $rows = count($M);\n    $cols = count($M[0]);\n    $sums = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $sums[$i] = 0;\n        for ($j = 0; $j < $cols; $j++) {\n            $sums[$i] += $M[$i][$j];\n        }\n    }\n    array_multisort($sums, $M);\n    return $M;\n}\n\n$M = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(sort_matrix($M));\nfunction candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123497,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 8\n            [2] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}