{
  "name": "mbpp_99_decimal_to_binary",
  "language": "php",
  "prompt": "<?php\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary($n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(8) !== \"1000\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== \"10010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== \"111\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $bin = '';\n    while ($n > 0) {\n        $bin = ($n % 2) . $bin;\n        $n = floor($n / 2);\n    }\n    return $bin;\n}\n",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = (int) ($n / 2);\n    }\n    return $binary;\n}\n",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = floor($n / 2);\n    }\n    return $binary;\n}\n",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = floor($n / 2);\n    }\n    return $binary;\n}\n",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = floor($n / 2);\n    }\n    return $binary;\n}\n",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = floor($n / 2);\n    }\n    return $binary;\n}\n",
    "  $binary = \"\";\n  while ($n > 0) {\n    $binary = ($n % 2) . $binary;\n    $n = floor($n / 2);\n  }\n  return $binary;\n}\n",
    "  $binary = '';\n  while ($n > 0) {\n    $binary = ($n % 2) . $binary;\n    $n = floor($n / 2);\n  }\n  return $binary;\n}\n",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = floor($n / 2);\n    }\n    return $binary;\n}\n",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = floor($n / 2);\n    }\n    return $binary;\n}\n",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = floor($n / 2);\n    }\n    return $binary;\n}\n",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = floor($n / 2);\n    }\n    return $binary;\n}\n",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = floor($n / 2);\n    }\n    return $binary;\n}\n",
    "  $binary = '';\n  while($n > 0) {\n    $binary = ($n % 2) . $binary;\n    $n = floor($n / 2);\n  }\n  return $binary;\n}\n\necho decimal_to_binary(10) . \"\\n\";\necho decimal_to_binary(1) . \"\\n\";\necho decimal_to_binary(2) . \"\\n\";\necho decimal_to_binary(3) . \"\\n\";\necho decimal_to_binary(4) . \"\\n\";\necho decimal_to_binary(5) . \"\\n\";\necho decimal_to_binary(6) . \"\\n\";\necho decimal_to_binary(7) . \"\\n\";\necho decimal_to_binary(8) . \"\\n\";\necho decimal_to_binary(9) . \"\\n\";\necho decimal_to_binary(10) . \"\\n\";\necho decimal_to_binary(11) . \"\\n\";\necho decimal_to_binary(12) . \"\\n\";\necho decimal_to_binary(13) . \"\\n\";\necho decimal_to_binary(14) . \"\\n\";\necho decimal_to_binary(15) . \"\\n\";\necho decimal_to_binary(16) . \"\\n\";\necho decimal_to_binary(17) . \"\\n\";\necho decimal_to_binary(18) . \"\\n\";\necho decimal_to_binary(19) . \"\\n\";\necho decimal_to_binary(20) . \"\\n\";\necho decimal_to_binary(21) . \"\\n\";\necho decimal_to_binary(22) . \"\\n\";\necho decimal_to_binary(23) . \"\\n\";\necho decimal_to_binary(24) . \"\\n\";\necho decimal_to_binary(25) . \"\\n\";\necho decimal_to_binary(26) . \"\\n\";\necho decimal_to_binary(27) . \"\\n\";\necho decimal_to_binary(28) . \"\\n\";\necho decimal_to_binary(29) . \"\\n\";\necho decimal_to_binary(30) . \"\\n\";\necho decimal_to_binary(31) . \"\\n\";\necho decimal_to_binary(32) .",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = floor($n / 2);\n    }\n    return $binary;\n}\n",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = floor($n / 2);\n    }\n    return $binary;\n}\n",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = floor($n / 2);\n    }\n    return $binary;\n}\n",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = floor($n / 2);\n    }\n    return $binary;\n}\n",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = floor($n / 2);\n    }\n    return $binary;\n}\n",
    "    $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = floor($n / 2);\n    }\n    return $binary;\n}\n"
  ]
}