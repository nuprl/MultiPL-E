{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "php",
  "prompt": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $n = count($input);\n    $i = 0;\n    while ($i < $k) {\n        $temp = $input[$i];\n        $input[$i] = $input[$n - $k + $i];\n        $input[$n - $k + $i] = $temp;\n        $i = $i + 1;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 7\n    [2] => 8\n    [3] => 9\n    [4] => 10\n    [5] => 1\n    [6] => 2\n    [7] => 3\n    [8] => 4\n    [9] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6mfo_la2.php:24\nStack trace:\n#0 /tmp/tmp6mfo_la2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6mfo_la2.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input: \" . implode(\", \", $input) . \"\\n\";\necho \"Output: \" . implode(\", \", $output) . \"\\n\";\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Input: 1, 2, 3, 4, 5, 6\nOutput: 3, 2, 1, 4, 5, 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $len = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $len; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyw4j8uee.php:24\nStack trace:\n#0 /tmp/tmpyw4j8uee.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpyw4j8uee.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = [];\n    for ($i = 0; $i < $k; $i++) {\n        $output[] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = [1, 2, 3, 4, 5, 6, 7];\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $length = count($input);\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < $length; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $size = sizeof($input);\n    $output = array();\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $size; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqgrqkwf9.php:24\nStack trace:\n#0 /tmp/tmpqgrqkwf9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqgrqkwf9.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $length = count($input);\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < $length; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for($i=0; $i<$k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i=$k; $i<count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = count($input) - 1; $i > $k; $i--) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 9\n    [6] => 8\n    [7] => 7\n    [8] => 6\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmuia8t77.php:23\nStack trace:\n#0 /tmp/tmpmuia8t77.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmuia8t77.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $count = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $count; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input Array : \";\necho implode(', ', $input);\necho \"\\n\";\necho \"Output Array : \";\necho implode(', ', $output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Input Array : 1, 2, 3, 4, 5, 6, 7, 8, 9\nOutput Array : 4, 3, 2, 1, 5, 6, 7, 8, 9\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2trye53j.php:28\nStack trace:\n#0 /tmp/tmp2trye53j.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2trye53j.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $count = count($input);\n    for($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for($i = $k + 1; $i < $count; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsk84uo4b.php:24\nStack trace:\n#0 /tmp/tmpsk84uo4b.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsk84uo4b.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input Array: \";\nprint_r($input);\necho \"Output Array: \";\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Input Array: Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\nOutput Array: Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $n = count($input);\n    $i = 0;\n    $j = $k;\n    while ($i < $j) {\n        $temp = $input[$i];\n        $input[$i] = $input[$j];\n        $input[$j] = $temp;\n        $i++;\n        $j--;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$result = reverse_Array_Upto_K($input, $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4m310i6h.php:26\nStack trace:\n#0 /tmp/tmp4m310i6h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4m310i6h.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $count = count($input);\n    for ($i = 0; $i < $k; $i++) {\n        $temp = $input[$i];\n        $input[$i] = $input[$count - $i - 1];\n        $input[$count - $i - 1] = $temp;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5, 6);\n$k = 3;\n$result = reverse_Array_Upto_K($input, $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwiwdhy2.php:22\nStack trace:\n#0 /tmp/tmpgwiwdhy2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpgwiwdhy2.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for($i = $k; $i >= 0; $i--) {\n        array_push($output, $input[$i]);\n    }\n    for($i = $k + 1; $i < count($input); $i++) {\n        array_push($output, $input[$i]);\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmu7xfs59.php:23\nStack trace:\n#0 /tmp/tmpmu7xfs59.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmu7xfs59.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $len = count($input);\n    for($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < $len; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input: \";\nprint_r($input);\necho \"<br>\";\necho \"Output: \";\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input: Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n<br>Output: Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $count = count($input);\n    for ($i = 0; $i < $count; $i++) {\n        if ($i < $k) {\n            $output[$i] = $input[$k - $i - 1];\n        } else {\n            $output[$i] = $input[$i];\n        }\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $length = count($input);\n    for($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < $length; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $len = count($input);\n    $i = 0;\n    $j = $k;\n    while ($i < $j) {\n        $temp = $input[$i];\n        $input[$i] = $input[$j];\n        $input[$j] = $temp;\n        $i++;\n        $j--;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzuwiuye6.php:26\nStack trace:\n#0 /tmp/tmpzuwiuye6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzuwiuye6.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = $k; $i >= 0; $i--) {\n        array_push($output, $input[$i]);\n    }\n    for ($i = $k + 1; $i < count($input); $i++) {\n        array_push($output, $input[$i]);\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4768myi.php:23\nStack trace:\n#0 /tmp/tmpp4768myi.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpp4768myi.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $length = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $length; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_442ceq9.php:24\nStack trace:\n#0 /tmp/tmp_442ceq9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_442ceq9.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $count = count($input);\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < $count; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input Array : \";\nprint_r($input);\necho \"\\n\";\necho \"Output Array : \";\nprint_r($output);\necho \"\\n\";\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input Array : Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n\nOutput Array : Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $count = count($input);\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < $count; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\nprint_r(reverse_Array_Upto_K($input, $k));\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $i = 0;\n    $j = $k;\n    while ($i < $k) {\n        $output[$i] = $input[$j];\n        $i++;\n        $j--;\n    }\n    $j = count($input) - 1;\n    while ($i < count($input)) {\n        $output[$i] = $input[$j];\n        $i++;\n        $j--;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 9\n    [5] => 8\n    [6] => 7\n    [7] => 6\n    [8] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdh02o7ch.php:30\nStack trace:\n#0 /tmp/tmpdh02o7ch.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdh02o7ch.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $len = count($input);\n    if ($k > $len) {\n        return \"Invalid K\";\n    }\n    $i = 0;\n    $j = $k;\n    while ($i < $j) {\n        $temp = $input[$i];\n        $input[$i] = $input[$j];\n        $input[$j] = $temp;\n        $i++;\n        $j--;\n    }\n    return $input;\n}\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\nprint_r(reverse_Array_Upto_K($input, $k));\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe2n0opvc.php:27\nStack trace:\n#0 /tmp/tmpe2n0opvc.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpe2n0opvc.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $n = count($input);\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < $n; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = $k; $i >= 0; $i--) {\n        array_push($output, $input[$i]);\n    }\n    for ($i = $k + 1; $i < count($input); $i++) {\n        array_push($output, $input[$i]);\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4768myi.php:23\nStack trace:\n#0 /tmp/tmpp4768myi.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpp4768myi.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $j = 0;\n    for ($i = $k; $i >= 0; $i--) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    for ($i = $k + 1; $i < count($input); $i++) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo08my_f.php:26\nStack trace:\n#0 /tmp/tmpqo08my_f.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqo08my_f.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyunyjahu.php:20\nStack trace:\n#0 /tmp/tmpyunyjahu.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpyunyjahu.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $len = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $len; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input Array : \";\nprint_r($input);\necho \"\\n\";\necho \"Output Array : \";\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input Array : Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nOutput Array : Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprf953dyq.php:28\nStack trace:\n#0 /tmp/tmprf953dyq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprf953dyq.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $n = count($input);\n    for ($i = 0; $i < $k; $i++) {\n        $temp = $input[$i];\n        $input[$i] = $input[$n - $k + $i];\n        $input[$n - $k + $i] = $temp;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 7\n    [2] => 8\n    [3] => 9\n    [4] => 10\n    [5] => 1\n    [6] => 2\n    [7] => 3\n    [8] => 4\n    [9] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5hf8x1a.php:22\nStack trace:\n#0 /tmp/tmpy5hf8x1a.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpy5hf8x1a.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $count = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $count; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input : \";\nprint_r($input);\necho \"Output : \";\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input : Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\nOutput : Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_yxc43s.php:27\nStack trace:\n#0 /tmp/tmp6_yxc43s.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6_yxc43s.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $len = count($input);\n    $i = 0;\n    $j = $k;\n    while ($i < $j) {\n        $temp = $input[$i];\n        $input[$i] = $input[$j];\n        $input[$j] = $temp;\n        $i++;\n        $j--;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$result = reverse_Array_Upto_K($input, $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yp_sqg0.php:26\nStack trace:\n#0 /tmp/tmp_yp_sqg0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_yp_sqg0.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $i = 0;\n    $j = $k;\n    while ($i < $k) {\n        $output[$i] = $input[$j];\n        $i++;\n        $j--;\n    }\n    $j = count($input) - 1;\n    while ($i < count($input)) {\n        $output[$i] = $input[$j];\n        $i++;\n        $j--;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 10\n    [4] => 9\n    [5] => 8\n    [6] => 7\n    [7] => 6\n    [8] => 5\n    [9] => 4\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2p4b9vj8.php:30\nStack trace:\n#0 /tmp/tmp2p4b9vj8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2p4b9vj8.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $i = 0;\n    while ($i < $k) {\n        $output[$i] = $input[$k - $i - 1];\n        $i++;\n    }\n    while ($i < count($input)) {\n        $output[$i] = $input[$i];\n        $i++;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input Array: \";\nprint_r($input);\necho \"<br>\";\necho \"Output Array: \";\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input Array: Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n<br>Output Array: Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $i = 0;\n    $j = 0;\n    while($i < $k) {\n        $output[$i] = $input[$k - $i - 1];\n        $i++;\n    }\n    while($i < count($input)) {\n        $output[$i] = $input[$i];\n        $i++;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $len = count($input);\n    for ($i = 0; $i < $k; $i++) {\n        $temp = $input[$i];\n        $input[$i] = $input[$len - $i - 1];\n        $input[$len - $i - 1] = $temp;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 3\n    [7] => 2\n    [8] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bn68m7z.php:22\nStack trace:\n#0 /tmp/tmp_bn68m7z.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_bn68m7z.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $count = count($input);\n    for($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for($i = $k + 1; $i < $count; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2kaey68.php:23\nStack trace:\n#0 /tmp/tmpp2kaey68.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpp2kaey68.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $count = count($input);\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < $count; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $len = count($input);\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < $len; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $count = count($input);\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < $count; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $j = 0;\n    for ($i = $k; $i >= 0; $i--) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    for ($i = $k + 1; $i < count($input); $i++) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input Array : \";\nprint_r($input);\necho \"<br>\";\necho \"Output Array : \";\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input Array : Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n<br>Output Array : Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5zfnrlms.php:30\nStack trace:\n#0 /tmp/tmp5zfnrlms.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp5zfnrlms.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $n = count($input);\n    for ($i = 0; $i < $k; $i++) {\n        $temp = $input[$i];\n        $input[$i] = $input[$n - $k + $i];\n        $input[$n - $k + $i] = $temp;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 6\n    [2] => 7\n    [3] => 8\n    [4] => 1\n    [5] => 2\n    [6] => 3\n    [7] => 4\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjl9253_5.php:22\nStack trace:\n#0 /tmp/tmpjl9253_5.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpjl9253_5.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $j = 0;\n    for ($i = $k; $i >= 0; $i--) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    for ($i = $k + 1; $i < count($input); $i++) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp135zwazx.php:26\nStack trace:\n#0 /tmp/tmp135zwazx.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp135zwazx.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $len = count($input);\n    for ($i = 0; $i < $k; $i++) {\n        $temp = $input[$i];\n        $input[$i] = $input[$len - $i - 1];\n        $input[$len - $i - 1] = $temp;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5);\n$k = 3;\nprint_r(reverse_Array_Upto_K($input, $k));\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5gj5_kon.php:21\nStack trace:\n#0 /tmp/tmp5gj5_kon.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp5gj5_kon.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $j = 0;\n    for($i = $k; $i >= 0; $i--) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    for($i = $k + 1; $i < count($input); $i++) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2m1ypl6f.php:26\nStack trace:\n#0 /tmp/tmp2m1ypl6f.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2m1ypl6f.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input Array: \";\nprint_r($input);\necho \"<br>\";\necho \"Output Array: \";\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input Array: Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n<br>Output Array: Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $n = count($input);\n    $temp = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $temp = $input[$i];\n        $input[$i] = $input[$n - $k + $i];\n        $input[$n - $k + $i] = $temp;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 7\n    [1] => 8\n    [2] => 9\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 1\n    [7] => 2\n    [8] => 3\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdz5amf9.php:23\nStack trace:\n#0 /tmp/tmpkdz5amf9.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpkdz5amf9.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $count = 0;\n    $j = 0;\n    for ($i = $k; $i >= 0; $i--) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    for ($i = $k + 1; $i < count($input); $i++) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzeyln5ni.php:27\nStack trace:\n#0 /tmp/tmpzeyln5ni.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzeyln5ni.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $result = array();\n    $i = 0;\n    while ($i < $k) {\n        $result[] = $input[$k - $i - 1];\n        $i++;\n    }\n    while ($i < count($input)) {\n        $result[] = $input[$i];\n        $i++;\n    }\n    return $result;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$result = reverse_Array_Upto_K($input, $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = [];\n    for ($i = 0; $i < $k; $i++) {\n        $output[] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $count = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $count; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6__p12k.php:23\nStack trace:\n#0 /tmp/tmpi6__p12k.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpi6__p12k.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $count = count($input);\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < $count; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < count($input); $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1kuupmkt.php:23\nStack trace:\n#0 /tmp/tmp1kuupmkt.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp1kuupmkt.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $result = array();\n    for ($i = $k - 1; $i >= 0; $i--) {\n        array_push($result, $input[$i]);\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        array_push($result, $input[$i]);\n    }\n    return $result;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$result = reverse_Array_Upto_K($input, $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n\t$output = array();\n\tfor ($i = $k; $i >= 0; $i--) {\n\t\tarray_push($output, $input[$i]);\n\t}\n\tfor ($i = $k + 1; $i < count($input); $i++) {\n\t\tarray_push($output, $input[$i]);\n\t}\n\treturn $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyik2_06q.php:23\nStack trace:\n#0 /tmp/tmpyik2_06q.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpyik2_06q.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $i = 0;\n    $j = $k;\n    while ($i < $k) {\n        $output[$i] = $input[$j];\n        $i++;\n        $j--;\n    }\n    $j = count($input) - 1;\n    while ($i < count($input)) {\n        $output[$i] = $input[$j];\n        $i++;\n        $j--;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 9\n    [5] => 8\n    [6] => 7\n    [7] => 6\n    [8] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdh02o7ch.php:30\nStack trace:\n#0 /tmp/tmpdh02o7ch.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdh02o7ch.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $i = 0;\n    while ($i < $k) {\n        array_unshift($output, $input[$i]);\n        $i++;\n    }\n    while ($i < count($input)) {\n        array_push($output, $input[$i]);\n        $i++;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $count = count($input);\n    $output = array();\n    for($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < $count; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $n = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $n; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfmrfcut0.php:24\nStack trace:\n#0 /tmp/tmpfmrfcut0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfmrfcut0.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $i = 0;\n    while ($i < $k) {\n        $output[] = $input[$i];\n        $i++;\n    }\n    $i = count($input) - 1;\n    while ($i >= $k) {\n        $output[] = $input[$i];\n        $i--;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 9\n    [4] => 8\n    [5] => 7\n    [6] => 6\n    [7] => 5\n    [8] => 4\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxlkreg0.php:27\nStack trace:\n#0 /tmp/tmpcxlkreg0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpcxlkreg0.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $len = count($input);\n    $i = 0;\n    $j = $k;\n    while ($i < $j) {\n        $temp = $input[$i];\n        $input[$i] = $input[$j];\n        $input[$j] = $temp;\n        $i++;\n        $j--;\n    }\n    return $input;\n}\n$input = array(1, 2, 3, 4, 5, 6);\n$k = 2;\n$result = reverse_Array_Upto_K($input, $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp40bqz1se.php:25\nStack trace:\n#0 /tmp/tmp40bqz1se.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp40bqz1se.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $count = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $output[$count - $i - 1] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $count; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztenlnl4.php:24\nStack trace:\n#0 /tmp/tmpztenlnl4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpztenlnl4.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = $k; $i >= 0; $i--) {\n        array_push($output, $input[$i]);\n    }\n    for ($i = $k + 1; $i < count($input); $i++) {\n        array_push($output, $input[$i]);\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4768myi.php:23\nStack trace:\n#0 /tmp/tmpp4768myi.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpp4768myi.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $result = array();\n    for($i = 0; $i < $k; $i++) {\n        $result[] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < count($input); $i++) {\n        $result[] = $input[$i];\n    }\n    return $result;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$result = reverse_Array_Upto_K($input, $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = $k; $i >= 0; $i--) {\n        array_push($output, $input[$i]);\n    }\n    for ($i = $k + 1; $i < sizeof($input); $i++) {\n        array_push($output, $input[$i]);\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjb5sjarr.php:23\nStack trace:\n#0 /tmp/tmpjb5sjarr.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpjb5sjarr.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = $k; $i >= 0; $i--) {\n        array_push($output, $input[$i]);\n    }\n    for ($i = $k + 1; $i < count($input); $i++) {\n        array_push($output, $input[$i]);\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4768myi.php:23\nStack trace:\n#0 /tmp/tmpp4768myi.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpp4768myi.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = [];\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $n = count($input);\n    $i = 0;\n    while ($i < $k) {\n        $temp = $input[$i];\n        $input[$i] = $input[$n - $i - 1];\n        $input[$n - $i - 1] = $temp;\n        $i++;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n    [5] => 5\n    [6] => 4\n    [7] => 3\n    [8] => 2\n    [9] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpak2ww1lx.php:24\nStack trace:\n#0 /tmp/tmpak2ww1lx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpak2ww1lx.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $result = array();\n    $count = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $result[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $count; $i++) {\n        $result[] = $input[$i];\n    }\n    return $result;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$result = reverse_Array_Upto_K($input, $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4etl0e3.php:24\nStack trace:\n#0 /tmp/tmpw4etl0e3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpw4etl0e3.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $count = count($input);\n    $output = array();\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $count; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6);\n$k = 2;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopbw2bqh.php:24\nStack trace:\n#0 /tmp/tmpopbw2bqh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpopbw2bqh.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaiqfqrne.php:20\nStack trace:\n#0 /tmp/tmpaiqfqrne.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpaiqfqrne.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        array_push($output, $input[$i]);\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        array_unshift($output, $input[$i]);\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 1\n    [6] => 2\n    [7] => 3\n    [8] => 4\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqk6vo2kq.php:23\nStack trace:\n#0 /tmp/tmpqk6vo2kq.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpqk6vo2kq.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = [];\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input Array: \";\nprint_r($input);\necho \"Output Array: \";\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input Array: Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\nOutput Array: Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $i = 0;\n    while ($i < $k) {\n        $output[] = $input[$k - 1 - $i];\n        $i++;\n    }\n    while ($i < count($input)) {\n        $output[] = $input[$i];\n        $i++;\n    }\n    return $output;\n}\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $j = 0;\n    for ($i = $k; $i >= 0; $i--) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    for ($i = $k + 1; $i < count($input); $i++) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprv43y_rr.php:26\nStack trace:\n#0 /tmp/tmprv43y_rr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprv43y_rr.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input Array : \";\nprint_r($input);\necho \"<br>\";\necho \"Output Array : \";\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input Array : Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n<br>Output Array : Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $count = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $count; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpouf364s8.php:24\nStack trace:\n#0 /tmp/tmpouf364s8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpouf364s8.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for($i = $k + 1; $i < count($input); $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_912o68.php:23\nStack trace:\n#0 /tmp/tmp0_912o68.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0_912o68.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $len = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $len; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input Array : \";\necho implode(',', $input);\necho \"\\n\";\necho \"Output Array : \";\necho implode(',', $output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input Array : 1,2,3,4,5,6,7,8,9\nOutput Array : 4,3,2,1,5,6,7,8,9\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpro6aw_yb.php:28\nStack trace:\n#0 /tmp/tmpro6aw_yb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpro6aw_yb.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $result = array();\n    $i = 0;\n    while ($i < $k) {\n        $result[$i] = $input[$k - $i - 1];\n        $i++;\n    }\n    while ($i < count($input)) {\n        $result[$i] = $input[$i];\n        $i++;\n    }\n    return $result;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$result = reverse_Array_Upto_K($input, $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5);\n$k = 3;\nprint_r(reverse_Array_Upto_K($input, $k));\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = [];\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $length = count($input);\n    if ($k > $length) {\n        return \"Invalid\";\n    }\n    $start = 0;\n    $end = $k - 1;\n    while ($start < $end) {\n        $temp = $input[$start];\n        $input[$start] = $input[$end];\n        $input[$end] = $temp;\n        $start++;\n        $end--;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$result = reverse_Array_Upto_K($input, $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $count = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $count; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpouf364s8.php:24\nStack trace:\n#0 /tmp/tmpouf364s8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpouf364s8.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n\t$output = array();\n\t$len = count($input);\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$output[$i] = $input[$k - $i - 1];\n\t}\n\tfor ($i = $k; $i < $len; $i++) {\n\t\t$output[$i] = $input[$i];\n\t}\n\treturn $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input: \";\nprint_r($input);\necho \"Output: \";\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input: Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\nOutput: Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[] = $input[$i];\n    }\n    $output = array_reverse($output);\n    for ($i = $k; $i < count($input); $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $j = 0;\n    for ($i = $k; $i >= 0; $i--) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    for ($i = $k + 1; $i < count($input); $i++) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo08my_f.php:26\nStack trace:\n#0 /tmp/tmpqo08my_f.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqo08my_f.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $len = count($input);\n    $i = 0;\n    while($i < $k) {\n        $temp = $input[$i];\n        $input[$i] = $input[$len - $i - 1];\n        $input[$len - $i - 1] = $temp;\n        $i++;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$result = reverse_Array_Upto_K($input, $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpau0aj9_5.php:24\nStack trace:\n#0 /tmp/tmpau0aj9_5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpau0aj9_5.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $result = array();\n    for ($i = $k; $i >= 0; $i--) {\n        $result[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < count($input); $i++) {\n        $result[] = $input[$i];\n    }\n    return $result;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$result = reverse_Array_Upto_K($input, $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe8lz70n8.php:23\nStack trace:\n#0 /tmp/tmpe8lz70n8.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpe8lz70n8.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $len = count($input);\n    $i = 0;\n    $j = $k;\n    while ($i < $j) {\n        $temp = $input[$i];\n        $input[$i] = $input[$j];\n        $input[$j] = $temp;\n        $i++;\n        $j--;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input array : \";\nprint_r($input);\necho \"Output array : \";\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input array : Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\nOutput array : Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90dt_8h8.php:29\nStack trace:\n#0 /tmp/tmp90dt_8h8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp90dt_8h8.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n\t$output = array();\n\tfor($i = 0; $i < $k; $i++) {\n\t\t$output[$i] = $input[$k - $i - 1];\n\t}\n\tfor($i = $k; $i < count($input); $i++) {\n\t\t$output[$i] = $input[$i];\n\t}\n\treturn $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $len = count($input);\n    for ($i = 0; $i < $k; $i++) {\n        $temp = $input[$i];\n        $input[$i] = $input[$len - $i - 1];\n        $input[$len - $i - 1] = $temp;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input : \";\nprint_r($input);\necho \"\\nOutput : \";\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input : Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nOutput : Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4] => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5w_xxsvp.php:25\nStack trace:\n#0 /tmp/tmp5w_xxsvp.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5w_xxsvp.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input: \";\nprint_r($input);\necho \"<br>\";\necho \"Output: \";\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input: Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n<br>Output: Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $count = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $count; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmi6un2jw.php:24\nStack trace:\n#0 /tmp/tmpmi6un2jw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmi6un2jw.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $size = count($input);\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < $size; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $j = 0;\n    for ($i = $k; $i >= 0; $i--) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    for ($i = $k + 1; $i < count($input); $i++) {\n        $output[$j] = $input[$i];\n        $j++;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp135zwazx.php:26\nStack trace:\n#0 /tmp/tmp135zwazx.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp135zwazx.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n        $result[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $result[$i] = $input[$i];\n    }\n    return $result;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$result = reverse_Array_Upto_K($input, $k);\necho \"Input Array : \";\nprint_r($input);\necho \"<br>\";\necho \"Output Array : \";\nprint_r($result);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input Array : Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n<br>Output Array : Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $length = count($input);\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < $length; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $len = count($input);\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < $len; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = [];\n    for ($i = 0; $i < $k; $i++) {\n        $output[] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$k = 4;\n\nprint_r(reverse_Array_Upto_K($input, $k));\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $i = 0;\n    while ($i < $k) {\n        $output[$i] = $input[$k - $i - 1];\n        $i++;\n    }\n    while ($i < count($input)) {\n        $output[$i] = $input[$i];\n        $i++;\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $len = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $len; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwlaxhye.php:24\nStack trace:\n#0 /tmp/tmpqwlaxhye.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqwlaxhye.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $n = count($input);\n    for ($i = 0; $i < $k; $i++) {\n        $temp = $input[$i];\n        $input[$i] = $input[$n - $k + $i];\n        $input[$n - $k + $i] = $temp;\n    }\n    return $input;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 7\n    [2] => 8\n    [3] => 9\n    [4] => 5\n    [5] => 1\n    [6] => 2\n    [7] => 3\n    [8] => 4\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpljf8klv1.php:22\nStack trace:\n#0 /tmp/tmpljf8klv1.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpljf8klv1.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $n = count($input);\n    for ($i = 0; $i < $k; $i++) {\n        $temp = $input[$i];\n        $input[$i] = $input[$n - $k + $i];\n        $input[$n - $k + $i] = $temp;\n    }\n    return $input;\n}\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input Array : \";\necho implode(', ', $input);\necho \"\\n\";\necho \"Output Array : \";\necho implode(', ', $output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input Array : 1, 2, 3, 4, 5, 6, 7, 8, 9\nOutput Array : 7, 8, 9, 4, 5, 6, 1, 2, 3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphsrn4_dz.php:25\nStack trace:\n#0 /tmp/tmphsrn4_dz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphsrn4_dz.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = $k; $i >= 0; $i--) {\n        array_push($output, $input[$i]);\n    }\n    for ($i = count($input) - 1; $i > $k; $i--) {\n        array_push($output, $input[$i]);\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 9\n    [7] => 8\n    [8] => 7\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqa3960g.php:23\nStack trace:\n#0 /tmp/tmpcqa3960g.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcqa3960g.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $k = $k - 1;\n    for ($i = 0; $i <= $k; $i++) {\n        $output[$i] = $input[$k - $i];\n    }\n    for ($i = $k + 1; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $length = count($input);\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < $length; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $count = count($input);\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$i];\n    }\n    for ($i = $k; $i < $count; $i++) {\n        $output[$i] = $input[$count - $i + $k - 1];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 9\n    [5] => 8\n    [6] => 7\n    [7] => 6\n    [8] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqeqywhyy.php:24\nStack trace:\n#0 /tmp/tmpqeqywhyy.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqeqywhyy.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $n = count($input);\n    $i = 0;\n    $j = $k;\n    while ($i < $j) {\n        $temp = $input[$i];\n        $input[$i] = $input[$j];\n        $input[$j] = $temp;\n        $i++;\n        $j--;\n    }\n    return $input;\n}\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 3;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpow0v0hib.php:25\nStack trace:\n#0 /tmp/tmpow0v0hib.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpow0v0hib.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $count = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $count; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsecstz_e.php:24\nStack trace:\n#0 /tmp/tmpsecstz_e.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsecstz_e.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $length = count($input);\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < $length; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $length = count($input);\n    for($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < $length; $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input : \";\nprint_r($input);\necho \"\\nOutput : \";\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input : Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n\nOutput : Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $len = count($input);\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = $k + 1; $i < $len; $i++) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy1b8bzae.php:24\nStack trace:\n#0 /tmp/tmpy1b8bzae.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpy1b8bzae.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $len = count($input);\n    for ($i = 0; $i < $k; $i++) {\n        $temp = $input[$i];\n        $input[$i] = $input[$len - $k + $i];\n        $input[$len - $k + $i] = $temp;\n    }\n    return $input;\n}\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 7\n    [2] => 8\n    [3] => 9\n    [4] => 10\n    [5] => 1\n    [6] => 2\n    [7] => 3\n    [8] => 4\n    [9] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ehzigae.php:21\nStack trace:\n#0 /tmp/tmp2ehzigae.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp2ehzigae.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\necho \"Input Array: \";\nprint_r($input);\necho \"<br>\";\necho \"Output Array: \";\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Input Array: Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n<br>Output Array: Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    $len = count($input);\n    for($i = 0; $i < $len; $i++) {\n        if($i < $k) {\n            $output[$i] = $input[$k - $i - 1];\n        } else {\n            $output[$i] = $input[$i];\n        }\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123606,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = 0; $i < $k; $i++) {\n        $output[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < count($input); $i++) {\n        $output[$i] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 5;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $array_length = count($input);\n    $new_array = array();\n    for ($i = 0; $i < $k; $i++) {\n        $new_array[$i] = $input[$k - $i - 1];\n    }\n    for ($i = $k; $i < $array_length; $i++) {\n        $new_array[$i] = $input[$i];\n    }\n    return $new_array;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123607,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n    $output = array();\n    for ($i = $k; $i >= 0; $i--) {\n        $output[] = $input[$i];\n    }\n    for ($i = count($input) - 1; $i > $k; $i--) {\n        $output[] = $input[$i];\n    }\n    return $output;\n}\n\n$input = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$k = 4;\n$output = reverse_Array_Upto_K($input, $k);\nprint_r($output);\nfunction candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 9\n    [6] => 8\n    [7] => 7\n    [8] => 6\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmuia8t77.php:23\nStack trace:\n#0 /tmp/tmpmuia8t77.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmuia8t77.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}