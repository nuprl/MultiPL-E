{
  "name": "mbpp_611_max_of_nth",
  "language": "php",
  "prompt": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $max = $test_list[0][$N];\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);",
    "    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);",
    "    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\necho max_of_nth($test_list, 1);",
    "    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);",
    "    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);",
    "    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n",
    "    $max = 0;\n    foreach($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\n\necho max_of_nth($test_list, $N);",
    "    $max = $test_list[0][$N];\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);",
    "    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);",
    "    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4),\n    array(5, 6, 7, 8),\n    array(9, 10, 11, 12),\n    array(13, 14, 15, 16),\n);\n\necho max_of_nth($test_list, 2);\n",
    "    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\necho max_of_nth($test_list, 1);",
    "    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 2);\n",
    "    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);",
    "    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 16],\n];\n\necho max_of_nth($test_list, 2);\n",
    "    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);",
    "    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);",
    "    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);",
    "    $max = 0;\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);",
    "\t$max = 0;\n\tforeach ($test_list as $row) {\n\t\tif ($row[$N] > $max) {\n\t\t\t$max = $row[$N];\n\t\t}\n\t}\n\treturn $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);",
    "    $max = $test_list[0][$N];\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);"
  ]
}