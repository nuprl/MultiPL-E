{
  "name": "mbpp_641_is_nonagonal",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the nth nonagonal number.\nfunction is_nonagonal($n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return is_nonagonal(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 325) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== 750) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== 1089) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "\t$n = (sqrt(1 + 8 * $n) - 1) / 2;\n\treturn $n == floor($n);\n}\n",
    "    $n = (sqrt(1 + 8 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $x = (sqrt(1 + 8 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $i = 1;\n    while ($n > 0) {\n        $n -= $i;\n        $i++;\n    }\n    return $n == 0;\n}\n",
    "    $num = 0;\n    $i = 1;\n    while ($num < $n) {\n        $num += $i;\n        $i++;\n    }\n    if ($num == $n) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "  $i = 1;\n  while ($n > 0) {\n    $n -= $i;\n    $i++;\n  }\n  return $n == 0;\n}\n",
    "    $n = (sqrt(1 + 8 * $n) - 1) / 2;\n    return $n == intval($n);\n}\n",
    "    $i = 1;\n    while ($n > 0) {\n        $n -= $i;\n        $i++;\n    }\n    return $n == 0;\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 8 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 8 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "    $n = (sqrt(1 + 8 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $n = $n * 2;\n    $x = (sqrt($n) + 1) / 2;\n    return $x == floor($x);\n}\n",
    "\t$x = (sqrt(8 * $n + 1) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "    $n = abs($n);\n    $n1 = (sqrt(8 * $n + 1) - 1) / 2;\n    return $n1 == (int) $n1;\n}\n",
    "\t$x = (sqrt(1 + 8 * $n) - 1) / 2;\n\treturn is_int($x);\n}\n",
    "    $x = (sqrt(8 * $n + 1) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "\t$n = (sqrt(1 + 8 * $n) - 1) / 2;\n\treturn $n == floor($n);\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 8 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "    $n = $n * 2;\n    $root = sqrt($n);\n    return $root == floor($root);\n}\n",
    "    $n = (sqrt(1 + 8 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n"
  ]
}