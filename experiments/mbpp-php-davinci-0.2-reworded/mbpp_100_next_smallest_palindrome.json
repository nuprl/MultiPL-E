{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfunction next_smallest_palindrome($num) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return next_smallest_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(99) !== 101) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1221) !== 1331) { throw new Exception(\"Test failed!\"); }\n    if (candidate(120) !== 121) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "\t$num = (string) $num;\n\t$len = strlen($num);\n\t$mid = floor($len / 2);\n\t$left = substr($num, 0, $mid);\n\t$right = strrev($left);\n\tif ($len % 2 == 1) {\n\t\t$mid_char = substr($num, $mid, 1);\n\t\t$right = $mid_char . $right;\n\t}\n\tif ($right >= $left) {\n\t\t$left = str_pad((string) (intval($left) + 1), $mid, '0', STR_PAD_LEFT);\n\t\t$right = strrev($left);\n\t}\n\t$result = $left . $right;\n\treturn intval($result);\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(6789) . \"\\n\";\necho next_smallest_palindrome(12321) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(1233",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    $next_palindrome = $left . ($len % 2 ? $num[$mid] : '') . $right;\n    if ($num == $next_palindrome) {\n        $left = strrev((string)((int)$left + 1));\n        $right = strrev($left);\n        $next_palindrome = $left . ($len % 2 ? $num[$mid] : '') . $right;\n    }\n    return (int)$next_palindrome;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if($len % 2 == 1) {\n        $mid = substr($num, $mid, 1);\n    }\n    $next_palindrome = $left . $mid . $right;\n    if($next_palindrome > $num) {\n        return $next_palindrome;\n    }\n    if($mid != 9) {\n        $mid = $mid + 1;\n        $next_palindrome = $left . $mid . $right;\n        return $next_palindrome;\n    }\n    $left = $left + 1;\n    $right = strrev($left);\n    $next_palindrome = $left . $right;\n    return $next_palindrome;\n}\n\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(1243);\necho \"\\n\";\necho next_smallest_palindrome(1331);\necho \"\\n\";\necho next_smallest_palindrome(99);\necho \"\\n\";\necho next_smallest_palindrome(999);\necho \"\\n\";\necho next_smallest_palindrome(12345);\necho \"\\n\";\necho next_smallest_palindrome(123456);\necho \"\\n\";\necho next_smallest_palindrome(1234567);\necho \"\\n\";\necho next_smallest_palindrome(12345678);\necho \"\\n\";\necho next_smallest_palindrome(123456789);\necho \"\\n\";\necho next_smallest_palindrome(1234567890);\necho \"\\n\";\necho next_smallest_palindrome(12345678901);\necho \"\\n\";\necho next_smallest_palindrome(123456789012);\necho \"\\n\";\necho next_smallest_palindrome(1234567890123);\necho \"\\n\";\necho next_small",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $right = $mid_char . $right;\n    }\n    if ($right > substr($num, $mid)) {\n        return $left . $right;\n    }\n    $left = (int) $left;\n    $left++;\n    $left = (string) $left;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = $mid_char . $right;\n    }\n    return $left . $right;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(12345678987654321) . \"\\n\";",
    "  $num_str = strval($num);\n  $num_len = strlen($num_str);\n  $num_arr = str_split($num_str);\n  $is_odd = $num_len % 2;\n  $mid = floor($num_len / 2);\n  $left = array_slice($num_arr, 0, $mid);\n  $right = array_slice($num_arr, $mid + $is_odd);\n  $left_rev = array_reverse($left);\n  if ($left_rev > $right) {\n    $num_arr = array_merge($left, array($num_arr[$mid]), $left_rev);\n    return intval(implode($num_arr));\n  } else {\n    $left_int = intval(implode($left));\n    $left_int++;\n    $left_str = strval($left_int);\n    $left_len = strlen($left_str);\n    $left_arr = str_split($left_str);\n    $left_rev = array_reverse($left_arr);\n    $num_arr = array_merge($left_arr, array($num_arr[$mid]), $left_rev);\n    return intval(implode($num_arr));\n  }\n}\n\necho next_smallest_palindrome(123) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(1234567) . PHP_EOL;\necho next_smallest_palindrome(12345678) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;\necho next_smallest_palindrome(1234567890) . PHP_EOL;\necho next_smallest_palindrome(12345678901) . PHP_EOL;\necho next_smallest_palindrome(123456789012) . PHP_EOL;\necho next_smallest_palindrome(1234567",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left = strrev($left);\n    if ($left < $right) {\n        $left = (string)((int)$left + 1);\n        $left = str_pad($left, $half, '0', STR_PAD_LEFT);\n        $left = strrev($left);\n    }\n    return (int)($left . $right);\n}\n\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(1235321) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567899) . \"\\n\";\necho next_smallest_palindrome(12345678999) . \"\\n\";\necho next_smallest_palindrome(123456789999) . \"\\n\";\necho next_smallest_palindrome(1234567899999) . \"\\n\";\necho next_smallest_palindrome(12345678999999) . \"\\n\";\necho next_smallest_palindrome(123456789999999) . \"\\n\";\necho next_smallest_palindrome(1234567899999999) . \"\\n\";\necho next_smallest_palindrome(12345678999999999) . \"\\n\";\necho next_smallest_palindrome(123456789999999999) . \"\\n\";\necho next_smallest_palindrome(1234567899999999999) . \"\\n\";\necho next_smallest_palindrome(12345678999999999999) . \"\\n\";\necho next_smallest_palindrome(123456789999",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $new = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($new > $num) {\n        return $new;\n    }\n    $left = strrev((string) ($left + 1));\n    $new = $left . ($len % 2 ? 0 : '') . $left;\n    return $new;\n}\n",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $mid_num++;\n        $right = substr($right, 1);\n    } else {\n        $mid_num = '';\n    }\n    if ($left . $mid_num . $right <= $num) {\n        $left++;\n        $right = strrev($left);\n        if ($len % 2 == 1) {\n            $right = substr($right, 1);\n        }\n    }\n    return (int)($left . $mid_num . $right);\n}\n",
    "  $num = (string) $num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + ($len % 2));\n  $left_rev = strrev($left);\n  if ($left_rev > $right) {\n    return $left . $left_rev;\n  }\n  $left = (int) $left;\n  $left++;\n  $left = (string) $left;\n  $left_rev = strrev($left);\n  return $left . $left_rev;\n}\n",
    "  $num++;\n  while (true) {\n    if (is_palindrome($num)) {\n      return $num;\n    }\n    $num++;\n  }\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left.$mid_char.$right;\n    } else {\n        $palin = $left.$right;\n    }\n    if ($palin > $num) {\n        return $palin;\n    }\n    $k = ($len % 2 == 1) ? $mid - 1 : $mid;\n    $carry = 1;\n    while ($k >= 0) {\n        $sum = (int)$left[$k] + $carry;\n        $carry = $sum / 10;\n        $left[$k] = $sum % 10;\n        $k--;\n    }\n    if ($carry == 1) {\n        $left = '1'.$left;\n        $left[strlen($left) - 1] = 0;\n    }\n    $right = strrev($left);\n    $palin = $left.$right;\n    return $palin;\n}\n\necho next_smallest_palindrome(1);\necho next_smallest_palindrome(2);\necho next_smallest_palindrome(3);\necho next_smallest_palindrome(9);\necho next_smallest_palindrome(11);\necho next_smallest_palindrome(99);\necho next_smallest_palindrome(101);\necho next_smallest_palindrome(111);\necho next_smallest_palindrome(121);\necho next_smallest_palindrome(202);\necho next_smallest_palindrome(252);\necho next_smallest_palindrome(303);\necho next_smallest_palindrome(505);\necho next_smallest_palindrome(1234);\necho next_smallest_palindrome(1234321);\necho next_smallest_palindrome(123454321);\necho next_small",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $left = substr($num, 0, floor($len/2));\n    $right = substr($num, ceil($len/2));\n    $left = strrev($left);\n    if ($left < $right) {\n        $left = (string)((int)$left + 1);\n        $left = strrev($left);\n        $right = $left;\n    }\n    return (int)($left.$right);\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num . $right;\n    }\n    if ($right > substr($num, $mid)) {\n        return $left . $right;\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = $mid_num . $right;\n    }\n    return $left . $right;\n}\n",
    "  $num++;\n  while (!is_palindrome($num)) {\n    $num++;\n  }\n  return $num;\n}\n",
    "    $num++;\n    while (true) {\n        if ($num == strrev($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n\necho next_smallest_palindrome(99);\necho \"\\n\";\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(99999);\necho \"\\n\";\necho next_smallest_palindrome(1);\necho \"\\n\";\necho next_smallest_palindrome(0);\necho \"\\n\";\necho next_smallest_palindrome(9);\necho \"\\n\";\necho next_smallest_palindrome(10);\necho \"\\n\";\necho next_smallest_palindrome(11);\necho \"\\n\";\necho next_smallest_palindrome(12);\necho \"\\n\";\necho next_smallest_palindrome(99);\necho \"\\n\";\necho next_smallest_palindrome(101);\necho \"\\n\";\necho next_smallest_palindrome(111);\necho \"\\n\";\necho next_smallest_palindrome(121);\necho \"\\n\";\necho next_smallest_palindrome(131);\necho \"\\n\";\necho next_smallest_palindrome(141);\necho \"\\n\";\necho next_smallest_palindrome(151);\necho \"\\n\";\necho next_smallest_palindrome(161);\necho \"\\n\";\necho next_smallest_palindrome(171);\necho \"\\n\";\necho next_smallest_palindrome(181);\necho \"\\n\";\necho next_smallest_palindrome(191);\necho \"\\n\";\necho next_smallest_palindrome(202);\necho \"\\n\";\necho next_smallest_palindrome(212);\necho \"\\n\";\necho next_smallest_palindrome(222);\necho \"\\n\";\necho next_smallest_palindrome(232);\necho \"\\n\";\necho next_smallest_palindrome(242);\necho \"\\n\";\necho next_smallest_palindrome(252);\necho \"\\",
    "    $num = strval($num);\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? substr($num, $half, 1) : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = strval(intval($left) + 1);\n    $right = strrev($left);\n    return $left . ($len % 2 ? substr($num, $half, 1) : '') . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = (int)($len / 2);\n    $first_half = substr($num, 0, $half);\n    $second_half = substr($num, $half + ($len % 2));\n    $second_half = strrev($first_half);\n    $new_num = $first_half . $second_half;\n    if ($new_num > $num) {\n        return $new_num;\n    }\n    $first_half = (int)$first_half;\n    $first_half++;\n    $first_half = (string)$first_half;\n    $second_half = strrev($first_half);\n    $new_num = $first_half . $second_half;\n    return $new_num;\n}\n\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1221) . PHP_EOL;\necho next_smallest_palindrome(1233) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(1234321) . PHP_EOL;\necho next_smallest_palindrome(123454321) . PHP_EOL;",
    "    $num_str = (string)$num;\n    $len = strlen($num_str);\n    $half = floor($len / 2);\n    $left = substr($num_str, 0, $half);\n    $right = substr($num_str, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num_str = $left . ($len % 2 ? $num_str[$half] : '') . $left_rev;\n    } else {\n        $left = (string)((int)$left + 1);\n        $left_rev = strrev($left);\n        $num_str = $left . ($len % 2 ? $num_str[$half] : '') . $left_rev;\n    }\n    return (int)$num_str;\n}\n\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1234321) . PHP_EOL;\necho next_smallest_palindrome(123454321) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;\necho next_smallest_palindrome(1234567899) . PHP_EOL;",
    "  $num++;\n  while (!is_palindrome($num)) {\n    $num++;\n  }\n  return $num;\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = (int) ($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = substr($num, $mid + ($len % 2));\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    if ($left_rev > $right) {\n        $right = $left_rev;\n    } else {\n        $left = strrev(($left_rev + 1));\n        $right = $left;\n    }\n    return (int) ($left . $right);\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(1234567899) . \"\\n\";\necho next_smallest_palindrome(1234567898) . \"\\n\";\necho next_smallest_palindrome(1234567890) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(12345678) . \"\\n\";\necho next_smallest_palindrome(1234567) . \"\\n\";\necho next_smallest_palindrome(123456) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(12) . \"\\n\";\necho next_smallest_palindrome(1) . \"\\n\";\necho next_smallest_palindrome(0) . \"\\n\";\necho next_",
    "    $num = strval($num);\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left.$mid_char.$right;\n    } else {\n        $palin = $left.$right;\n    }\n    if ($palin > $num) {\n        return intval($palin);\n    }\n    $k = pow(10, $mid) - 1;\n    $left = strval(intval($left) + 1);\n    $left = str_pad($left, $mid, '0', STR_PAD_LEFT);\n    $palin = $left.$right;\n    return intval($palin);\n}\n\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(1234321);\necho \"\\n\";\necho next_smallest_palindrome(12345);\necho \"\\n\";\necho next_smallest_palindrome(99);\necho \"\\n\";\necho next_smallest_palindrome(990000);\necho \"\\n\";\necho next_smallest_palindrome(9999);\necho \"\\n\";\necho next_smallest_palindrome(990099);\necho \"\\n\";\necho next_smallest_palindrome(99000099);\necho \"\\n\";\necho next_smallest_palindrome(99000001);\necho \"\\n\";\necho next_smallest_palindrome(990000001);\necho \"\\n\";\necho next_smallest_palindrome(99000000001);\necho \"\\n\";\necho next_smallest_palindrome(990000000001);\necho \"\\n\";\necho next_smallest_palindrome(9900000000001);\necho \"\\n\";\necho next_smallest_palindrome(99000000000001);\necho \"\\n\";\necho next_smallest_palindrome(990000000000001);\necho \"\\n\";\necho next",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n    } else {\n        $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n        $num = (int) $num + 1;\n        $num = (string) $num;\n        $half = floor(strlen($num) / 2);\n        $left = substr($num, 0, $half);\n        $right = substr($num, $half + (strlen($num) % 2));\n        $left_rev = strrev($left);\n        $num = $left . (strlen($num) % 2 ? $num[$half] : '') . $left_rev;\n    }\n    return (int) $num;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $len % 2 ? $half + 1 : $half);\n  $left = strrev($left);\n  if ($left > $right) {\n    $num = substr($num, 0, $half) . $left;\n    return (int)$num;\n  }\n  $left = (int)$left;\n  $left++;\n  $left = (string)$left;\n  $left = strrev($left);\n  $num = substr($num, 0, $half) . $left;\n  return (int)$num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = substr($right, 1);\n    }\n    if ($left . $mid_num . $right > $num) {\n        return $left . $mid_num . $right;\n    }\n    $carry = 1;\n    for ($i = $mid - 1; $i >= 0; $i--) {\n        $sum = $left[$i] + $carry;\n        $left[$i] = $sum % 10;\n        $carry = floor($sum / 10);\n    }\n    if ($carry == 1) {\n        $left = '1' . $left;\n        $mid++;\n    }\n    $right = substr(strrev($left), 1);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    return $left . $mid_num . $right;\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1331) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(99999) . \"\\n\";\necho next_smallest_palindrome(999999) . \"\\n\";\necho next_smallest_palindrome(9999999) . \"\\n\";\necho next_smallest_palindrome(99999999) . \"\\n\";\necho next_smallest_palindrome(999999999) . \"\\n\";\necho next_smallest_palindrome(99999999",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    $right = substr($right, 0, $len - $mid);\n    $next = $left . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    if ($left[0] != 9) {\n        $left = (int)$left + 1;\n        $left = (string)$left;\n        $right = strrev($left);\n        $right = substr($right, 0, $len - $mid);\n        $next = $left . $right;\n        return $next;\n    }\n    $left = str_repeat('0', $mid) . '1';\n    $right = strrev($left);\n    $right = substr($right, 0, $len - $mid);\n    $next = $left . $right;\n    return $next;\n}\n\necho next_smallest_palindrome(123) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1233) . PHP_EOL;\necho next_smallest_palindrome(1221) . PHP_EOL;\necho next_smallest_palindrome(1231) . PHP_EOL;\necho next_smallest_palindrome(1222) . PHP_EOL;\necho next_smallest_palindrome(1232) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1243) . PHP_EOL;\necho next_smallest_palindrome(1244) . PHP_EOL;\necho next_smallest_palindrome(1245) . PHP_EOL;\necho next_smallest_palindrome(1255) . PHP_EOL;\necho next_smallest_palindrome(1265) . PHP_EOL;\necho",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $left = (string)((int)$left + 1);\n    $right = strrev($left);\n    return (int)$left . $right;\n}\n\n$num = 12345;\necho next_smallest_palindrome($num);",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    $next = $left.$right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    return $left.$right;\n}\n",
    "    $num_str = (string)$num;\n    $len = strlen($num_str);\n    $half = floor($len/2);\n    $left = substr($num_str, 0, $half);\n    $right = substr($num_str, $len - $half);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $right = $left_rev;\n    } else {\n        $left = strrev(++$left_rev);\n        $right = $left_rev;\n    }\n    return (int)$left . $right;\n}\n\n$num = 1234;\necho next_smallest_palindrome($num);",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left . $mid_char . $right;\n    } else {\n        $palin = $left . $right;\n    }\n    if ($palin > $num) {\n        return (int)$palin;\n    }\n    $k = ($len % 2 == 1) ? $mid - 1 : $mid;\n    $carry = 1;\n    while ($k >= 0 && $carry > 0) {\n        $sum = (int)$left[$k] + $carry;\n        $carry = floor($sum / 10);\n        $left[$k] = $sum % 10;\n        $k--;\n    }\n    if ($carry > 0) {\n        $left = '1' . $left;\n    }\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $palin = $left . $mid_char . $right;\n    } else {\n        $palin = $left . $right;\n    }\n    return (int)$palin;\n}\n\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1243) . PHP_EOL;\necho next_smallest_palindrome(1331) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(999) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(123421) . PHP_EOL;\necho next_smallest_palindrome(1234321) . PHP_EOL;\necho next_smallest_palindrome(123454321) . PHP_EOL;",
    "    $num_str = strval($num);\n    $len = strlen($num_str);\n    $mid = floor($len / 2);\n    $left = substr($num_str, 0, $mid);\n    $right = substr($num_str, $mid + $len % 2);\n    if ($left == strrev($right)) {\n        return $num;\n    }\n    $left_num = intval($left);\n    $right_num = intval($right);\n    if ($left_num < $right_num) {\n        $left = strval($left_num + 1);\n        $right = strrev($left);\n    } else {\n        $right = strval($right_num + 1);\n        $left = strrev($right);\n    }\n    return intval($left . substr($num_str, $mid, $len % 2) . $right);\n}\n\n$num = 1234;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 12345;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 12321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 123454321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 1234554321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 1234654321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 1234754321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 1234854321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 1234954321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 1235054321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 1235154321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + $len % 2);\n  $left_rev = strrev($left);\n  if ($left_rev > $right) {\n    $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n  } else {\n    $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n    $num = strrev((string)($num + 1));\n    $num = substr($num, 0, $half) . ($len % 2 ? $num[$half] : '') . substr($num, $half + $len % 2);\n  }\n  return (int)$num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        return (int)$left . $left_rev;\n    }\n    $left_rev = strrev(strval(intval($left) + 1));\n    return (int)$left_rev . $left_rev;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_element = $num[$mid];\n        $right = $mid_element . $right;\n    }\n    if ($right > $left) {\n        return (int)$left . $right;\n    }\n    $carry = 1;\n    for ($i = $mid - 1; $i >= 0; $i--) {\n        $sum = $left[$i] + $carry;\n        $left[$i] = $sum % 10;\n        $carry = floor($sum / 10);\n    }\n    if ($carry == 1) {\n        $left = \"1\" . $left;\n    }\n    $right = strrev($left);\n    return (int)$left . $right;\n}\n\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(1213) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(12) . \"\\n\";\necho next_smallest_palindrome(1) . \"\\n\";\necho next_smallest_palindrome(99999) . \"\\n\";\necho next_smallest_palindrome(999999) . \"\\n\";\necho next_smallest_palindrome(9999999) . \"\\n\";\necho next_smallest_palindrome(99999999) . \"\\n\";\necho next_smallest_palindrome(999999999) . \"\\n\";\necho next_smallest_palindrome(9999999999) . \"\\n\";\necho next_smallest_palindrome(99999999999) . \"\\n\";\necho next_smallest_palindrome(999999999999) . \"\\n\";",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $right = strrev($left);\n    $next = $left.$right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = str_pad((string)((int)$left + 1), $half, '0', STR_PAD_LEFT);\n    $right = strrev($left);\n    return $left.$right;\n}\n\necho next_smallest_palindrome(1234);\necho next_smallest_palindrome(99);\necho next_smallest_palindrome(1221);\necho next_smallest_palindrome(1233);\necho next_smallest_palindrome(1234);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(123456);\necho next_smallest_palindrome(1234567);\necho next_smallest_palindrome(12345678);\necho next_smallest_palindrome(123456789);\necho next_smallest_palindrome(1234567890);\necho next_smallest_palindrome(12345678901);\necho next_smallest_palindrome(123456789012);\necho next_smallest_palindrome(1234567890123);\necho next_smallest_palindrome(12345678901234);\necho next_smallest_palindrome(123456789012345);\necho next_smallest_palindrome(1234567890123456);\necho next_smallest_palindrome(12345678901234567);\necho next_smallest_palindrome(123456789012345678);\necho next_smallest_palindrome(1234567890123456789);\necho next_smallest_palindrome(12345678901234567890);\necho next_smallest_",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = (int)floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left) . ($len % 2 ? $num[$half] : '');\n    if ($right > $num) {\n        return (int)$right;\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $left = str_pad($left, $half, '0', STR_PAD_LEFT);\n    $right = strrev($left) . ($len % 2 ? $num[$half] : '');\n    return (int)$right;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left = (string)intval($left);\n    $right = (string)intval($right);\n    $left_len = strlen($left);\n    $right_len = strlen($right);\n    $left_half = substr($left, 0, floor($left_len / 2));\n    $right_half = substr($right, 0, floor($right_len / 2));\n    if ($left_half > $right_half) {\n        $right = strrev($left_half);\n        $right .= ($len % 2) ? substr($left, floor($left_len / 2), 1) : '';\n        $right .= strrev($right_half);\n        return intval($left . $right);\n    } else {\n        $left = strrev($left_half);\n        $left .= ($len % 2) ? substr($left, floor($left_len / 2), 1) : '';\n        $left .= strrev($right_half);\n        $left = (string)intval($left);\n        $left_len = strlen($left);\n        $left_half = substr($left, 0, floor($left_len / 2));\n        $right_half = substr($right, 0, floor($right_len / 2));\n        if ($left_half > $right_half) {\n            $right = strrev($left_half);\n            $right .= ($len % 2) ? substr($left, floor($left_len / 2), 1) : '';\n            $right .= strrev($right_half);\n            return intval($left . $right);\n        } else {\n            $left_half = (string)intval($left_half) + 1;\n            $left_half = strrev($left_half);\n            $left_half .= ($len % 2) ? substr($left, floor($left_len / 2), 1) : '';\n            $",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + ($len % 2));\n  $left_rev = strrev($left);\n  if ($left_rev > $right) {\n    $left = strrev(($left + 1));\n    $right = $left_rev;\n  } else {\n    $right = $left_rev;\n  }\n  return (int)$left . $right;\n}\n\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(99999) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(1234321) . PHP_EOL;\necho next_smallest_palindrome(123454321) . PHP_EOL;\necho next_smallest_palindrome(12345678987654321) . PHP_EOL;",
    "    $num++;\n    while (true) {\n        if ($num == strrev($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n\necho next_smallest_palindrome(10) . PHP_EOL;\necho next_smallest_palindrome(11) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(100) . PHP_EOL;\necho next_smallest_palindrome(101) . PHP_EOL;\necho next_smallest_palindrome(123) . PHP_EOL;\necho next_smallest_palindrome(999) . PHP_EOL;\necho next_smallest_palindrome(1000) . PHP_EOL;\necho next_smallest_palindrome(1001) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(9999) . PHP_EOL;\necho next_smallest_palindrome(10000) . PHP_EOL;\necho next_smallest_palindrome(10001) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(99999) . PHP_EOL;\necho next_smallest_palindrome(100000) . PHP_EOL;\necho next_smallest_palindrome(100001) . PHP_EOL;\necho next_smallest_palindrome(123456) . PHP_EOL;\necho next_smallest_palindrome(999999) . PHP_EOL;\necho next_smallest_palindrome(1000000) . PHP_EOL;\necho next_smallest_palindrome(1000001) . PHP_EOL;\necho next_smallest_palindrome(1234567) . PHP_EOL;\necho next_smallest_palindrome(9999999) . PHP_EOL;\necho next_smallest_palindrome(10000000) . PHP_E",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return (int) $next;\n    }\n    $left = strrev((int) $left + 1);\n    $right = strrev($left);\n    return (int) $left . ($len % 2 ? $num[$half] : '') . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $i = 0;\n    $j = $len - 1;\n    $mid = (int)($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = substr($num, $mid + ($len % 2));\n    $left_len = strlen($left);\n    $right_len = strlen($right);\n    $left_arr = str_split($left);\n    $right_arr = str_split($right);\n    $left_arr_rev = array_reverse($left_arr);\n    $right_arr_rev = array_reverse($right_arr);\n    $left_rev = implode('', $left_arr_rev);\n    $right_rev = implode('', $right_arr_rev);\n    if ($left_rev > $right) {\n        $result = $left_rev . ($len % 2 ? $num[$mid] : '') . $right_rev;\n    } else {\n        $left_arr = str_split($left);\n        $left_arr_rev = array_reverse($left_arr);\n        $left_rev = implode('', $left_arr_rev);\n        $left_arr = str_split($left);\n        $left_arr_rev = array_reverse($left_arr);\n        $left_rev = implode('', $left_arr_rev);\n        $left_arr = str_split($left);\n        $left_arr_rev = array_reverse($left_arr);\n        $left_rev = implode('', $left_arr_rev);\n        $left_arr = str_split($left);\n        $left_arr_rev = array_reverse($left_arr);\n        $left_rev = implode('', $left_arr_rev);\n        $left_arr = str_split($left);\n        $left_arr_rev = array_reverse($left_arr);\n        $left_rev = implode('', $left_arr_rev);\n        $left_arr = str_split($left);\n        $left_arr_rev = array",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + ($len % 2));\n  $left = strrev($left);\n  $right = strrev($right);\n  if ($left > $right) {\n    $num = substr($num, 0, $half + ($len % 2)) . $left;\n  } else {\n    $num = substr($num, 0, $half + ($len % 2));\n    $num = (int)$num + 1;\n    $num = (string)$num;\n    $num = substr($num, 0, $half + ($len % 2)) . strrev($num);\n  }\n  return (int)$num;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\"; // 12421\necho next_smallest_palindrome(99) . \"\\n\"; // 101\necho next_smallest_palindrome(6789) . \"\\n\"; // 6996\necho next_smallest_palindrome(1234) . \"\\n\"; // 1331\necho next_smallest_palindrome(1221) . \"\\n\"; // 1331\necho next_smallest_palindrome(1231) . \"\\n\"; // 1331\necho next_smallest_palindrome(1233) . \"\\n\"; // 1331\necho next_smallest_palindrome(1234) . \"\\n\"; // 1331\necho next_smallest_palindrome(1235) . \"\\n\"; // 1331\necho next_smallest_palindrome(1236) . \"\\n\"; // 1331\necho next_smallest_palindrome(1237) . \"\\n\"; // 1331\necho next_smallest_palindrome(1238) . \"\\n\"; // 1331\necho next_smallest_palindrome(1239) . \"\\n\"; // 1331\necho next_smallest_palindrome(1240) . \"\\n\"; // 1331\necho next_smallest_palindrome(1241) . \"\\",
    "    $num_str = strval($num);\n    $len = strlen($num_str);\n    $half_len = floor($len / 2);\n    $left = substr($num_str, 0, $half_len);\n    $right = substr($num_str, $half_len + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $right = $left_rev;\n    } else {\n        $left = strval(intval($left) + 1);\n        $left_rev = strrev($left);\n        $right = $left_rev;\n    }\n    return intval($left . $right);\n}\n",
    "    $num_str = (string)$num;\n    $num_len = strlen($num_str);\n    $left_half = substr($num_str, 0, $num_len/2);\n    $right_half = substr($num_str, $num_len/2 + $num_len%2);\n    $left_half_rev = strrev($left_half);\n    if ($left_half_rev > $right_half) {\n        return $left_half . $left_half_rev;\n    }\n    $left_half_int = (int)$left_half;\n    $left_half_int++;\n    $left_half = (string)$left_half_int;\n    $left_half_rev = strrev($left_half);\n    return $left_half . $left_half_rev;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    if ($len == 1) {\n        return $num;\n    }\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    $right = substr($right, 0, $len - $mid);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $mid_num = (int)$mid_num;\n        $mid_num++;\n        $mid_num = (string)$mid_num;\n        $num = $left . $mid_num . $right;\n    } else {\n        $num = $left . $right;\n    }\n    return $num;\n}\n",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "  $num = (string) $num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + ($len % 2));\n  $left_rev = strrev($left);\n  if ($left_rev > $right) {\n    return $left . $left_rev;\n  }\n  $left = (int) $left;\n  $left++;\n  $left = (string) $left;\n  $left_rev = strrev($left);\n  return $left . $left_rev;\n}\n\necho next_smallest_palindrome(12345); // 12421\necho \"\\n\";\necho next_smallest_palindrome(99); // 101\necho \"\\n\";\necho next_smallest_palindrome(6789); // 6996\necho \"\\n\";\necho next_smallest_palindrome(123454321); // 123464321\necho \"\\n\";\necho next_smallest_palindrome(1234); // 1331\necho \"\\n\";\necho next_smallest_palindrome(99); // 101\necho \"\\n\";\necho next_smallest_palindrome(6789); // 6996\necho \"\\n\";\necho next_smallest_palindrome(123454321); // 123464321\necho \"\\n\";\necho next_smallest_palindrome(1234); // 1331\necho \"\\n\";\necho next_smallest_palindrome(1234); // 1331\necho \"\\n\";\necho next_smallest_palindrome(1234); // 1331\necho \"\\n\";\necho next_smallest_palindrome(1234); // 1331\necho \"\\n\";\necho next_smallest_palindrome(1234); // 1331\necho \"\\n\";\necho next_smallest_palindrome(1234); // 1331\necho \"\\n\";\necho next_smallest_palindrome(1234); // 1331\necho \"\\n\";\necho next_smallest_palindrome(1234); // 1331\necho \"\\n\";\necho",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $left = substr($num, 0, $mid);\n        $right = strrev($left);\n    }\n    if ($num <= $left . $mid_num . $right) {\n        if ($mid_num != '9') {\n            $mid_num = $mid_num + 1;\n            return $left . $mid_num . $right;\n        } else {\n            $left = $left + 1;\n            $right = strrev($left);\n            return $left . $right;\n        }\n    } else {\n        return $left . $mid_num . $right;\n    }\n}\n\necho next_smallest_palindrome(123);\necho next_smallest_palindrome(1234);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(12345);\necho next_smallest",
    "    if ($num < 0) {\n        return false;\n    }\n    $num_str = (string)$num;\n    $len = strlen($num_str);\n    $mid = floor($len / 2);\n    $left = substr($num_str, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num_str[$mid];\n        $mid_num++;\n        if ($mid_num > 9) {\n            $mid_num = 0;\n            $left = next_palindrome($left);\n        }\n        $right = strrev($left);\n        return (int)$left . $mid_num . $right;\n    }\n    $left = next_palindrome($left);\n    $right = strrev($left);\n    return (int)$left . $right;\n}\n",
    "    $num++;\n    while (strrev($num) != $num) {\n        $num++;\n    }\n    return $num;\n}\n\necho next_smallest_palindrome(99);\necho \"\\n\";\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(1221);\necho \"\\n\";\necho next_smallest_palindrome(12345);\necho \"\\n\";\necho next_smallest_palindrome(9900);\necho \"\\n\";\necho next_smallest_palindrome(990000);\necho \"\\n\";\necho next_smallest_palindrome(99000001);\necho \"\\n\";\necho next_smallest_palindrome(990000001);\necho \"\\n\";\necho next_smallest_palindrome(9900000001);\necho \"\\n\";\necho next_smallest_palindrome(99000000001);\necho \"\\n\";\necho next_smallest_palindrome(990000000001);\necho \"\\n\";\necho next_smallest_palindrome(9900000000001);\necho \"\\n\";\necho next_smallest_palindrome(99000000000001);\necho \"\\n\";\necho next_smallest_palindrome(990000000000001);\necho \"\\n\";\necho next_smallest_palindrome(9900000000000001);\necho \"\\n\";\necho next_smallest_palindrome(99000000000000001);\necho \"\\n\";\necho next_smallest_palindrome(9900000000000000001);\necho \"\\n\";\necho next_smallest_palindrome(99000000000000000001);\necho \"\\n\";\necho next_smallest_palindrome(990000000000000000001);\necho \"\\n\";\necho next_smallest_palindrome(9900000000000000000001);\necho \"\\n\";\necho next_smallest_palindrome(99000000000000000000001);\necho \"\\n\";\necho next_smallest_palindrome(990000000000000000000001);\necho \"\\n\";\necho next_smallest_palindrome(9900000000000000000000001);\necho \"\\n\";\necho next_smallest_palindrome(99000000000000000000000001);\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $odd = $len % 2;\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + $odd);\n  $left_rev = strrev($left);\n  if ($left_rev > $right) {\n    $right = $left_rev;\n  } else {\n    $left = strrev(++$left);\n    $right = $left;\n  }\n  return (int)($left . substr($right, $odd));\n}\n\necho next_smallest_palindrome(99) . \"\\n\"; // 101\necho next_smallest_palindrome(1234) . \"\\n\"; // 1331\necho next_smallest_palindrome(1234321) . \"\\n\"; // 1241321\necho next_smallest_palindrome(1234567899) . \"\\n\"; // 1234666741\necho next_smallest_palindrome(1234666741) . \"\\n\"; // 1234666741\necho next_smallest_palindrome(1234567898) . \"\\n\"; // 1234666741\necho next_smallest_palindrome(1234567890) . \"\\n\"; // 1234666741\necho next_smallest_palindrome(1234567880) . \"\\n\"; // 1234666741\necho next_smallest_palindrome(1234567870) . \"\\n\"; // 1234666741\necho next_smallest_palindrome(1234567860) . \"\\n\"; // 1234666741\necho next_smallest_palindrome(1234567850) . \"\\n\"; // 1234666741\necho next_smallest_palindrome(1234567840) . \"\\n\"; // 1234666741\necho next_smallest_palindrome(1234567830) . \"\\n\"; // 1234666741\necho next_smallest_palindrome(1234567820) . \"\\n\"; // 1234666741\necho next_smallest_palindrome",
    "  $num = (string) $num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + ($len % 2));\n  $left = (string) (intval($left) + 1);\n  $left_len = strlen($left);\n  $right = strrev($left);\n  if ($left_len < $half) {\n    $left = str_pad($left, $half, '0', STR_PAD_LEFT);\n    $right = str_pad($right, $half, '0', STR_PAD_LEFT);\n  }\n  return intval($left . $right);\n}\n\n$input1 = '999';\n$input2 = '1234';\n$input3 = '1221';\n$input4 = '1999';\n\necho next_smallest_palindrome($input1) . PHP_EOL;\necho next_smallest_palindrome($input2) . PHP_EOL;\necho next_smallest_palindrome($input3) . PHP_EOL;\necho next_smallest_palindrome($input4) . PHP_EOL;",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $right = strrev($left);\n    $new_num = $left.$right;\n    if ($new_num > $num) {\n        return $new_num;\n    }\n    $left = strrev((string)($left + 1));\n    $right = substr($left, 0, $half);\n    $new_num = $left.$right;\n    return $new_num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    $right = substr($right, 0, $len - $mid);\n    $next = $left . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    if ($len % 2 == 0) {\n        $left = substr($num, 0, $mid - 1);\n        $right = strrev($left);\n        $right = substr($right, 0, $len - $mid + 1);\n        $next = $left . $right;\n        if ($next > $num) {\n            return $next;\n        }\n    }\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    $right = substr($right, 0, $len - $mid);\n    $next = $left . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = substr($num, 0, $mid - 1);\n    $right = strrev($left);\n    $right = substr($right, 0, $len - $mid + 1);\n    $next = $left . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    return $next;\n}\n",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid = substr($num, $mid, 1);\n    }\n    if ($len == 1) {\n        return $num + 1;\n    }\n    if ($left . $mid . $right > $num) {\n        return $left . $mid . $right;\n    }\n    if ($mid != 9) {\n        $mid = $mid + 1;\n        return $left . $mid . $right;\n    }\n    $left = $left + 1;\n    $right = strrev($left);\n    return $left . $right;\n}\n\necho next_smallest_palindrome(1) . PHP_EOL;\necho next_smallest_palindrome(9) . PHP_EOL;\necho next_smallest_palindrome(10) . PHP_EOL;\necho next_smallest_palindrome(11) . PHP_EOL;\necho next_smallest_palindrome(12) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(100) . PHP_EOL;\necho next_smallest_palindrome(101) . PHP_EOL;\necho next_smallest_palindrome(111) . PHP_EOL;\necho next_smallest_palindrome(121) . PHP_EOL;\necho next_smallest_palindrome(999) . PHP_EOL;\necho next_smallest_palindrome(1000) . PHP_EOL;\necho next_smallest_palindrome(1001) . PHP_EOL;\necho next_smallest_palindrome(1111) . PHP_EOL;\necho next_smallest_palindrome(1221) . PHP_EOL;\necho next_smallest_palindrome(9999) . PHP_EOL;\necho next_smallest",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $right = strrev($left);\n    if ($num < $left . $right) {\n        return $left . $right;\n    }\n    $left = str_split($left);\n    $carry = 1;\n    for ($i = $half - 1; $i >= 0; $i--) {\n        $left[$i] += $carry;\n        if ($left[$i] > 9) {\n            $left[$i] = 0;\n            $carry = 1;\n        } else {\n            $carry = 0;\n        }\n    }\n    if ($carry) {\n        array_unshift($left, 1);\n    }\n    $left = implode('', $left);\n    $right = strrev($left);\n    return $left . $right;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        return $left . substr($left_rev, $len % 2);\n    }\n    $left = (int)$left + 1;\n    return $left . strrev($left);\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $left = substr($num, 0, floor($len / 2));\n    $right = strrev($left);\n    $mid = ($len % 2) ? $num[floor($len / 2)] : '';\n    $num = $left . $mid . $right;\n    if ($num > $num) {\n        return $num;\n    }\n    $left = str_split($left);\n    $carry = 1;\n    for ($i = count($left) - 1; $i >= 0; $i--) {\n        $left[$i] += $carry;\n        if ($left[$i] > 9) {\n            $left[$i] = 0;\n            $carry = 1;\n        } else {\n            $carry = 0;\n        }\n    }\n    if ($carry) {\n        array_unshift($left, 1);\n    }\n    $left = implode('', $left);\n    $right = strrev($left);\n    $mid = ($len % 2) ? $num[floor($len / 2)] : '';\n    return $left . $mid . $right;\n}\n\n$num = 1234;\necho next_smallest_palindrome($num);\necho PHP_EOL;\n\n$num = 1234321;\necho next_smallest_palindrome($num);\necho PHP_EOL;\n\n$num = 12345;\necho next_smallest_palindrome($num);\necho PHP_EOL;\n\n$num = 123456;\necho next_smallest_palindrome($num);\necho PHP_EOL;\n\n$num = 123454321;\necho next_smallest_palindrome($num);\necho PHP_EOL;\n\n$num = 1234567899;\necho next_smallest_palindrome($num);\necho PHP_EOL;\n\n$num = 99999;\necho next_smallest_palindrome($num);\necho PHP_EOL;\n\n$num = 999999;\necho next_smallest_palindrome($num);\necho PHP_",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        return $left . $left_rev;\n    }\n    $left_int = (int) $left;\n    $left_int++;\n    $left = (string) $left_int;\n    $left_rev = strrev($left);\n    return $left . $left_rev;\n}\n\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123421) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(12343321) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(12345654321) . \"\\n\";\necho next_smallest_palindrome(1234567654321) . \"\\n\";\necho next_smallest_palindrome(123456787654321) . \"\\n\";\necho next_smallest_palindrome(12345678987654321) . \"\\n\";",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "  $num++;\n  while(!is_palindrome($num)) {\n    $num++;\n  }\n  return $num;\n}\n",
    "  $num = (string) $num;\n  $len = strlen($num);\n  $mid = floor($len / 2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $mid_char = $num[$mid];\n    $palin = $left . $mid_char . $right;\n  } else {\n    $palin = $left . $right;\n  }\n  if ($palin > $num) {\n    return $palin;\n  }\n  $k = ($len % 2 == 1) ? $mid - 1 : $mid;\n  $carry = 1;\n  while ($k >= 0 && $carry > 0) {\n    $sum = (int) $left[$k] + $carry;\n    $carry = floor($sum / 10);\n    $left[$k] = $sum % 10;\n    $k--;\n  }\n  if ($carry > 0) {\n    $left = '1' . $left;\n  }\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $palin = $left . $mid_char . $right;\n  } else {\n    $palin = $left . $right;\n  }\n  return $palin;\n}\n\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(1213) . PHP_EOL;\necho next_smallest_palindrome(1221) . PHP_EOL;\necho next_smallest_palindrome(1233) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1235) . PHP_EOL;\necho next_smallest_palindrome(1236) . PHP_EOL;\necho next_smallest_palindrome(1237) . PHP_EOL;\necho next_smallest_palind",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num . $right;\n    }\n    if ($right > substr($num, $mid)) {\n        return $left . $right;\n    }\n    $left = $left + 1;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = $mid_num . $right;\n    }\n    return $left . $right;\n}\n",
    "    $num_str = strval($num);\n    $num_len = strlen($num_str);\n    $mid_index = floor($num_len / 2);\n    $left_half = substr($num_str, 0, $mid_index);\n    $right_half = strrev($left_half);\n    if ($num_len % 2 == 1) {\n        $mid_char = substr($num_str, $mid_index, 1);\n        $right_half = $mid_char . $right_half;\n    }\n    $candidate = intval($left_half . $right_half);\n    if ($candidate > $num) {\n        return $candidate;\n    }\n    $left_half_int = intval($left_half);\n    $left_half_int++;\n    $left_half = strval($left_half_int);\n    $right_half = strrev($left_half);\n    if ($num_len % 2 == 1) {\n        $right_half = $mid_char . $right_half;\n    }\n    return intval($left_half . $right_half);\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = strrev(($left + 1));\n    $right = strrev($left);\n    return $left . ($len % 2 ? '0' : '') . $right;\n}\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + $len % 2);\n  $left_rev = strrev($left);\n  $right_rev = strrev($right);\n  if ($left_rev > $right) {\n    $right = $left_rev;\n  } else if ($left_rev < $right) {\n    $left = strrev(strval(intval($left_rev) + 1));\n    $right = $left;\n  } else {\n    $left = strrev(strval(intval($left_rev) + 1));\n    $right = $left;\n  }\n  return intval($left . $right);\n}\n\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(99999) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567899) . \"\\n\";\necho next_smallest_palindrome(12345678901) . \"\\n\";\necho next_smallest_palindrome(1234567890123) . \"\\n\";\necho next_smallest_palindrome(123456789012345) . \"\\n\";\necho next_smallest_palindrome(1234567890123456789) . \"\\n\";\necho next_smallest_palindrome(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    $right = substr($right, 0, $mid);\n    if ($len % 2 == 1) {\n        $mid = substr($num, $mid, 1);\n    }\n    $palindrome = $left . $mid . $right;\n    if ($palindrome > $num) {\n        return $palindrome;\n    }\n    $left = str_split($left);\n    $i = $mid = count($left) - 1;\n    $carry = 1;\n    while ($i >= 0 && $carry > 0) {\n        $sum = $left[$i] + $carry;\n        $left[$i] = $sum % 10;\n        $carry = floor($sum / 10);\n        $i--;\n    }\n    if ($carry > 0) {\n        array_unshift($left, $carry);\n        $mid++;\n    }\n    $right = array_reverse($left);\n    $right = array_slice($right, 0, $mid);\n    $palindrome = implode('', $left) . $mid . implode('', $right);\n    return $palindrome;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123322) . \"\\n\";\necho next_smallest_palindrome(123323) . \"\\n\";\necho next_smallest_palindrome(123324) . \"\\n\";\necho next_smallest_palindrome(123325) . \"\\n\";\necho next_smallest_palindrome(123326) . \"\\n\";\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $right = $left_rev;\n    } else {\n        $left = strrev(strval(intval($left_rev) + 1));\n        $right = $left;\n    }\n    return intval($left . $right);\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $left = substr($num, 0, floor($len/2));\n    $right = substr($num, ceil($len/2));\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    if ($len % 2 == 0) {\n        if ($left_rev > $right) {\n            $right = $left_rev;\n        } else {\n            $left = strrev(strval(intval($left_rev) + 1));\n            $right = $left_rev;\n        }\n    } else {\n        if ($left_rev > $right_rev) {\n            $right = $left_rev;\n        } else {\n            $left = strrev(strval(intval($left_rev) + 1));\n            $right = $left_rev;\n        }\n    }\n    return intval($left.$right);\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $num = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($num > $num) {\n        return $num;\n    }\n    $left = strrev((string)((int)$left + 1));\n    $num = $left . ($len % 2 ? $num[$half] : '') . $right;\n    return $num;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(123499999) . \"\\n\";\necho next_smallest_palindrome(123400000) . \"\\n\";\necho next_smallest_palindrome(123400001) . \"\\n\";\necho next_smallest_palindrome(123400011) . \"\\n\";\necho next_smallest_palindrome(123400111) . \"\\n\";\necho next_smallest_palindrome(123401111) . \"\\n\";\necho next_smallest_palindrome(123402221) . \"\\n\";\necho next_smallest_palindrome(123402222) . \"\\n\";\necho next_smallest_palindrome(123402223) . \"\\n\";\necho next_smallest_palindrome(123402224) . \"\\n\";\necho next_smallest_palindrome(123402225) . \"\\n\";\necho next_smallest_palindrome(123402226) . \"\\n\";\necho next_smallest_palindrome(123402227) . \"\\n\";\necho next_",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $is_odd = $len % 2;\n    $mid = (int)floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = substr($num, $mid + $is_odd);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . ($is_odd ? $num[$mid] : '') . $left_rev;\n        return (int)$num;\n    }\n    $left = (string)((int)$left + 1);\n    $left_len = strlen($left);\n    $left_rev = strrev($left);\n    $left_rev = substr($left_rev, $left_len - $mid);\n    $num = $left . ($is_odd ? $num[$mid] : '') . $left_rev;\n    return (int)$num;\n}\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $len % 2 ? $half + 1 : $half);\n  $right = strrev($left);\n  $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n  if ($next > $num) {\n    return (int)$next;\n  }\n  $left = strrev((string)((int)$left + 1));\n  $right = strrev($left);\n  return (int)($left . ($len % 2 ? $num[$half] : '') . $right);\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . $left_rev;\n    } else {\n        $num = $left . strrev(++$left);\n    }\n    return (int)$num;\n}\n\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234567) . \"\\n\";\necho next_smallest_palindrome(12345678) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567890) . \"\\n\";",
    "    $num_str = (string)$num;\n    $len = strlen($num_str);\n    $mid = floor($len / 2);\n    $left = substr($num_str, 0, $mid);\n    $right = substr($num_str, $mid + $len % 2);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $right = $left_rev;\n    } else {\n        $left = strrev(strval(intval($left_rev) + 1));\n        $right = $left;\n    }\n    return intval($left . $right);\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234567) . \"\\n\";\necho next_smallest_palindrome(12345678) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";",
    "    $num++;\n    while (strrev($num) != $num) {\n        $num++;\n    }\n    return $num;\n}\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len/2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + $len%2);\n  $right = strrev($left);\n  $new_num = $left.$right;\n  if ($new_num > $num) {\n    return $new_num;\n  }\n  if ($len%2 == 1) {\n    $mid = $left[$half];\n    if ($mid != 9) {\n      $mid++;\n      $new_num = $left.$mid.$right;\n      return $new_num;\n    }\n    $mid = 0;\n    $left[$half] = 0;\n    $right[$half] = 0;\n  }\n  for ($i = $half - 1; $i >= 0; $i--) {\n    if ($left[$i] != 9) {\n      $left[$i]++;\n      break;\n    }\n    $left[$i] = 0;\n    $right[$i] = 0;\n  }\n  if ($left[0] == 0) {\n    $left = '1'.$left;\n    $right = $right.'1';\n  }\n  $new_num = $left.$mid.$right;\n  return $new_num;\n}\n\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(99999) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234567) . \"\\n\";\necho next_smallest_palindrome(12345678) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567890) . \"\\n\";\necho next_smallest_palindrome(12345678901) . \"\\n\";\necho next_small",
    "  $num = (string) $num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + $len % 2);\n  $left_rev = strrev($left);\n  $right_rev = strrev($right);\n  if ($left_rev > $right) {\n    $left = $left_rev;\n    $right = $left_rev;\n  } else {\n    $left = strrev(strval(intval($left_rev) + 1));\n    $right = $left;\n  }\n  return intval($left . $right);\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234567) . \"\\n\";\necho next_smallest_palindrome(12345678) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567890) . \"\\n\";\necho next_smallest_palindrome(12345678901) . \"\\n\";\necho next_smallest_palindrome(123456789012) . \"\\n\";\necho next_smallest_palindrome(1234567890123) . \"\\n\";\necho next_smallest_palindrome(12345678901234) . \"\\n\";\necho next_smallest_palindrome(123456789012345) . \"\\n\";\necho next_smallest_palindrome(1234567890123456) . \"\\n\";\necho next_smallest_palindrome(12345678901234567) . \"\\n\";\necho next_smallest_palindrome(123456789012345678) . \"\\n\";\necho next_smallest_palindrome(1234567890123456789) . \"\\n\";\necho next_smallest",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = strrev(str_pad(strrev($left) + 1, $half, '0', STR_PAD_LEFT));\n    return $left . ($len % 2 ? $num[$half] : '') . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_element = $num[$mid];\n        $right = $mid_element . $right;\n    }\n    if ($right > substr($num, $mid)) {\n        return $left . $right;\n    }\n    $left = (int)$left;\n    $left += 1;\n    $left = (string)$left;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = $mid_element . $right;\n    }\n    return $left . $right;\n}\n\necho next_smallest_palindrome(1234);\necho next_smallest_palindrome(1234321);\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(99);\necho next_smallest_palindrome(990000);\necho next_smallest_palindrome(9999);\necho next_smallest_palindrome(9988);\necho next_smallest_palindrome(998877);\necho next_smallest_palindrome(99887766);\necho next_smallest_palindrome(9988776655);\necho next_smallest_palindrome(998877665544);\necho next_smallest_palindrome(99887766554433);\necho next_smallest_palindrome(9988776655443322);\necho next_smallest_palindrome(998877665544332211);\necho next_smallest_palindrome(99887766554433221100);\necho next_smallest_palindrome(9988776655443322110000);\necho next_smallest_palindrome(998877665544332211000000);\necho next_smallest_palindrome(99887766554433221100000000);\necho",
    "    $num_str = (string) $num;\n    $num_len = strlen($num_str);\n    $half_len = (int) ($num_len / 2);\n    $left_half = substr($num_str, 0, $half_len);\n    $right_half = substr($num_str, $half_len);\n    $left_half_rev = strrev($left_half);\n    $right_half_rev = strrev($right_half);\n    $left_half_int = (int) $left_half;\n    $right_half_int = (int) $right_half;\n    $left_half_rev_int = (int) $left_half_rev;\n    $right_half_rev_int = (int) $right_half_rev;\n    if ($left_half_int > $right_half_rev_int) {\n        $right_half_rev_int = $left_half_int;\n    } else if ($left_half_int < $right_half_rev_int) {\n        $left_half_int++;\n        $right_half_rev_int = $left_half_int;\n    } else {\n        $left_half_int++;\n        $right_half_rev_int = $left_half_int;\n    }\n    $left_half = (string) $left_half_int;\n    $right_half_rev = (string) $right_half_rev_int;\n    $left_half_len = strlen($left_half);\n    $right_half_rev_len = strlen($right_half_rev);\n    if ($left_half_len < $half_len) {\n        $left_half = str_pad($left_half, $half_len, '0', STR_PAD_LEFT);\n    }\n    if ($right_half_rev_len < $half_len) {\n        $right_half_rev = str_pad($right_half_rev, $half_len, '0', STR_PAD_LEFT);\n    }\n    $next_smallest_palindrome = $left_half . strrev($",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    $left_rev_int = (int)$left_rev;\n    $right_rev_int = (int)$right_rev;\n    if ($left_rev_int > $right_rev_int) {\n        $right = $left_rev;\n    } else {\n        $left = strrev(++$left_rev);\n        $right = $left;\n    }\n    return (int)($left . $right);\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(12343321) . \"\\n\";\necho next_smallest_palindrome(12343421) . \"\\n\";\necho next_smallest_palindrome(12343521) . \"\\n\";\necho next_smallest_palindrome(12343621) . \"\\n\";\necho next_smallest_palindrome(12343721) . \"\\n\";\necho next_smallest_palindrome(12343821) . \"\\n\";\necho next_smallest_palindrome(12343921) . \"\\n\";\necho next_smallest_palindrome(1234421) . \"\\n\";\necho next_smallest_palindrome(1234521) . \"\\n\";\necho next_smallest_palindrome(1234621) . \"\\n\";\necho next_smallest_palindrome(1234721) . \"\\n\";\necho next_smallest_palindrome(1234821) . \"\\n\";\necho next_smallest_palindrome(",
    "  $num = strval($num);\n  $len = strlen($num);\n  $mid = floor($len / 2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $mid_num = $num[$mid];\n    $left = $left . $mid_num;\n  }\n  $left_num = intval($left);\n  $right_num = intval($right);\n  if ($left_num < $right_num) {\n    $left_num++;\n    $left = strval($left_num);\n    $right = strrev($left);\n  } else {\n    $left_num = intval($left);\n    $right_num = intval($right);\n    if ($left_num == $right_num) {\n      $left_num++;\n      $left = strval($left_num);\n      $right = strrev($left);\n    }\n  }\n  $result = $left . $right;\n  return intval($result);\n}\n\necho next_smallest_palindrome(123);\necho \"\\n\";\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(12345);\necho \"\\n\";\necho next_smallest_palindrome(123454321);\necho \"\\n\";\necho next_smallest_palindrome(1234321);\necho \"\\n\";\necho next_smallest_palindrome(123321);\necho \"\\n\";\necho next_smallest_palindrome(123322);\necho \"\\n\";\necho next_smallest_palindrome(123323);\necho \"\\n\";\necho next_smallest_palindrome(123324);\necho \"\\n\";\necho next_smallest_palindrome(123325);\necho \"\\n\";\necho next_smallest_palindrome(123326);\necho \"\\n\";\necho next_smallest_palindrome(123327);\necho \"\\n\";\necho next_smallest_palindrome(1233",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left = (string) (int) $left;\n    $right = (string) (int) $right;\n    $left_len = strlen($left);\n    $right_len = strlen($right);\n    if ($left_len > $right_len) {\n        $right = str_pad($right, $left_len, '0', STR_PAD_LEFT);\n    } elseif ($right_len > $left_len) {\n        $left = str_pad($left, $right_len, '0', STR_PAD_LEFT);\n    }\n    $left = strrev($left);\n    $palindrome = $left . $right;\n    if ($palindrome <= $num) {\n        $left = (int) $left;\n        $left++;\n        $left = (string) $left;\n        $left = str_pad($left, $left_len, '0', STR_PAD_LEFT);\n        $left = strrev($left);\n        $palindrome = $left . $right;\n    }\n    return (int) $palindrome;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n    } else {\n        $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n        $num = (int)$num + 1;\n        $num = (string)$num;\n        $len = strlen($num);\n        $half = floor($len / 2);\n        $left = substr($num, 0, $half);\n        $right = substr($num, $half + $len % 2);\n        $left_rev = strrev($left);\n        $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n    }\n    return (int)$num;\n}\n\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(1221) . PHP_EOL;\necho next_smallest_palindrome(1233) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(123454321) . PHP_EOL;\necho next_smallest_palindrome(123454322) . PHP_EOL;\necho next_smallest_palindrome(123454323) . PHP_EOL;\necho next_smallest_palindrome(123454324) . PHP_EOL;\necho next_smallest_palindrome(123454325) . PHP_EOL;\necho next_",
    "    $num++;\n    while (true) {\n        if (is_palindrome($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n",
    "    $num_str = strval($num);\n    $num_len = strlen($num_str);\n    $num_half = floor($num_len / 2);\n    $num_half_str = substr($num_str, 0, $num_half);\n    $num_half_rev_str = strrev($num_half_str);\n    $num_half_rev_int = intval($num_half_rev_str);\n    $num_half_int = intval($num_half_str);\n    $num_half_rev_int_str = strval($num_half_rev_int);\n    $num_half_int_str = strval($num_half_int);\n    $num_half_rev_int_str_len = strlen($num_half_rev_int_str);\n    $num_half_int_str_len = strlen($num_half_int_str);\n    $num_half_rev_int_str_len_diff = $num_half - $num_half_rev_int_str_len;\n    $num_half_int_str_len_diff = $num_half - $num_half_int_str_len;\n    $num_half_rev_int_str_len_diff_str = str_repeat('0', $num_half_rev_int_str_len_diff);\n    $num_half_int_str_len_diff_str = str_repeat('0', $num_half_int_str_len_diff);\n    $num_half_rev_int_str_len_diff_str_rev = strrev($num_half_rev_int_str_len_diff_str);\n    $num_half_int_str_len_diff_str_rev = strrev($num_half_int_str_len_diff_str);\n    $num_half_rev_int_str_len_diff_str_rev_int = intval($num_half_rev_int_str_len_diff_str_rev);\n    $num_half_int_str_len_diff_str_rev_int = intval($num_half_int_str",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $right = strrev($left);\n    $result = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($result > $num) {\n        return $result;\n    }\n    $left = strrev((string) (intval($left) + 1));\n    $right = strrev($left);\n    $result = $left . ($len % 2 ? $num[$half] : '') . $right;\n    return $result;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $right = strrev($left);\n    if ($right < $left) {\n        $left = (string)((int)$left + 1);\n        $right = strrev($left);\n    }\n    return (int)$left . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    $right = str_pad($right, $len, '0', STR_PAD_LEFT);\n    $next = $left.$right;\n    if ($next > $num) {\n        return $next;\n    }\n    if ($len % 2 == 1) {\n        $mid = $left[$mid] + 1;\n        $left = substr($left, 0, -1);\n    } else {\n        $mid = 1;\n    }\n    $left = $left.$mid;\n    $left = str_pad($left, $mid, '0', STR_PAD_LEFT);\n    $right = strrev($left);\n    $next = $left.$right;\n    return $next;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $palindrome = $num;\n    $left = substr($palindrome, 0, $half);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = substr($palindrome, $half + 1);\n    }\n    $palindrome = $left . $num[$half] . $right;\n    if ($palindrome > $num) {\n        return $palindrome;\n    }\n    $left = str_split($left);\n    $right = str_split($right);\n    $carry = 1;\n    for ($i = $half - 1; $i >= 0; $i--) {\n        $sum = $left[$i] + $carry;\n        $left[$i] = $sum % 10;\n        $carry = floor($sum / 10);\n    }\n    if ($carry == 1) {\n        array_unshift($left, 1);\n        $half++;\n    }\n    $left = implode('', $left);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    return $left . $num[$half] . $right;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123431) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567899) . \"\\n\";\necho next_smallest_palindrome(12345678901) . \"\\n\";\necho next_smallest_palindrome(123",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len/2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + ($len % 2));\n  $right = strrev($left);\n  $next = $left.$right;\n  if ($next > $num) {\n    return $next;\n  }\n  if ($len % 2 == 1) {\n    $mid = $left[$half];\n    $left = substr($left, 0, $half);\n    $right = substr($right, 0, $half);\n    $mid = (int)$mid + 1;\n    $left = (int)$left;\n    $right = (int)$right;\n    if ($mid == 10) {\n      $mid = 0;\n      $left += 1;\n    }\n    $left = (string)$left;\n    $right = (string)$right;\n    $mid = (string)$mid;\n    $left = strrev($left);\n    $right = strrev($right);\n    $next = $left.$mid.$right;\n    return $next;\n  } else {\n    $left = (int)$left;\n    $right = (int)$right;\n    $left += 1;\n    $left = (string)$left;\n    $right = (string)$right;\n    $left = strrev($left);\n    $right = strrev($right);\n    $next = $left.$right;\n    return $next;\n  }\n}\n\necho next_smallest_palindrome(11) . PHP_EOL;\necho next_smallest_palindrome(12) . PHP_EOL;\necho next_smallest_palindrome(13) . PHP_EOL;\necho next_smallest_palindrome(14) . PHP_EOL;\necho next_smallest_palindrome(15) . PHP_EOL;\necho next_smallest_palindrome(16) . PHP_EOL;\necho next_smallest_palindrome(17) . PHP_",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num . $right;\n    }\n    if ($right >= $left) {\n        $left = str_pad(strval(intval($left) + 1), $mid, '0', STR_PAD_LEFT);\n        $right = strrev($left);\n    }\n    return intval($left . $right);\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234567) . \"\\n\";\necho next_smallest_palindrome(12345678) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567890) . \"\\n\";\necho next_smallest_palindrome(12345678901) . \"\\n\";\necho next_smallest_palindrome(123456789012) . \"\\n\";\necho next_smallest_palindrome(1234567890123) . \"\\n\";\necho next_smallest_palindrome(12345678901234) . \"\\n\";\necho next_smallest_palindrome(123456789012345) . \"\\n\";\necho next_smallest_palindrome(1234567890123456) . \"\\n\";\necho next_smallest_palindrome(12345678901234567) . \"\\n\";\necho next_smallest_palindrome(123456789012345678) . \"\\n\";\necho next_smallest_palindrome(1234567890123456789) . \"\\n\";\necho next_smallest_palind",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = strrev(($left + 1));\n    $right = strrev($left);\n    return $left . ($len % 2 ? $num[$half] : '') . $right;\n}\n",
    "  $num = (string) $num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + ($len % 2));\n  $left_rev = strrev($left);\n  $right_rev = strrev($right);\n  if ($left_rev > $right) {\n    $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n  } else {\n    $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n    $num = (string) (intval($num) + 1);\n    $half = floor(strlen($num) / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + (strlen($num) % 2));\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n  }\n  return intval($num);\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567890) . \"\\n\";\necho next_smallest_palindrome(12345678901) . \"\\n\";\necho next_smallest_palindrome(123456789012) . \"\\n\";\necho next_smallest_palindrome(1234567890123) . \"\\n\";\necho next_smallest_palindrome(12345678901234) . \"\\n\";\necho next_smallest_palindrome(123456789012345) . \"\\n\";\necho next_smallest_palindrome(1234567890123",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = substr($right, 1);\n    } else {\n        $mid_num = '';\n    }\n    if ($left . $mid_num . $right > $num) {\n        return $left . $mid_num . $right;\n    }\n    $carry = 1;\n    for ($i = $mid - 1; $i >= 0; $i--) {\n        $sum = $left[$i] + $carry;\n        $left[$i] = $sum % 10;\n        $carry = floor($sum / 10);\n    }\n    if ($carry == 1) {\n        $left = '1' . $left;\n        $mid++;\n    }\n    return $left . $mid_num . substr($left, 0, $len - $mid);\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = (int)floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $right = $left_rev;\n    } else {\n        $left = strrev(++$left_rev);\n        $right = $left_rev;\n    }\n    return (int)$left . $right;\n}\n",
    "    $num_str = (string)$num;\n    $len = strlen($num_str);\n    $mid = floor($len / 2);\n    $left_half = substr($num_str, 0, $mid);\n    $right_half = strrev($left_half);\n    $next_palindrome = $left_half . ($len % 2 == 1 ? $num_str[$mid] : '') . $right_half;\n    if ($next_palindrome > $num) {\n        return $next_palindrome;\n    }\n    $left_half = strrev((string)($num + 1));\n    $right_half = strrev($left_half);\n    return $left_half . $right_half;\n}\n\necho next_smallest_palindrome(123) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(1234567) . PHP_EOL;\necho next_smallest_palindrome(12345678) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left.$mid_char.$right;\n    } else {\n        $palin = $left.$right;\n    }\n    if ($palin > $num) {\n        return $palin;\n    }\n    $k = ($len % 2 == 1) ? $mid - 1 : $mid;\n    $carry = 1;\n    while ($k >= 0 && $carry > 0) {\n        $sum = (int)$left[$k] + $carry;\n        $carry = floor($sum/10);\n        $left[$k] = $sum % 10;\n        $k--;\n    }\n    if ($carry > 0) {\n        $left = '1'.$left;\n    }\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $palin = $left.$mid_char.$right;\n    } else {\n        $palin = $left.$right;\n    }\n    return $palin;\n}\n\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1234321) . PHP_EOL;\necho next_smallest_palindrome(123321) . PHP_EOL;\necho next_smallest_palindrome(123322) . PHP_EOL;\necho next_smallest_palindrome(123323) . PHP_EOL;\necho next_smallest_palindrome(123324) . PHP_EOL;\necho next_smallest_palindrome(123325) . PHP_EOL;\necho next_smallest_palindrome",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    if ($left_rev > $right) {\n        return $left . $right_rev;\n    } else {\n        $left = (string)((int)$left + 1);\n        $left_rev = strrev($left);\n        return $left . $left_rev;\n    }\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 === 0 ? $half : $half + 1);\n    $right = strrev($left);\n    $next_palindrome = $left . $right;\n    if ($next_palindrome > $num) {\n        return (int) $next_palindrome;\n    }\n    $left = (int) $left;\n    $left++;\n    $left = (string) $left;\n    $right = strrev($left);\n    return (int) ($left . $right);\n}\n",
    "    $num_str = (string)$num;\n    $len = strlen($num_str);\n    $mid = floor($len/2);\n    $left = substr($num_str, 0, $mid);\n    $right = substr($num_str, $mid + $len % 2);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num_str = $left . ($len % 2 ? $num_str[$mid] : '') . $left_rev;\n    } else {\n        $left = (string)($num + 1);\n        $left_rev = strrev($left);\n        $num_str = $left . ($len % 2 ? $num_str[$mid] : '') . $left_rev;\n    }\n    return (int)$num_str;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left . $mid_char . $right;\n    } else {\n        $palin = $left . $right;\n    }\n    if ($palin > $num) {\n        return $palin;\n    }\n    $k = ($len % 2 == 1) ? $mid - 1 : $mid;\n    $carry = 1;\n    while ($k >= 0 && $carry > 0) {\n        $sum = (int)$left[$k] + $carry;\n        $carry = floor($sum / 10);\n        $left[$k] = $sum % 10;\n        $k--;\n    }\n    if ($carry > 0) {\n        $left = '1' . $left;\n    }\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left . $mid_char . $right;\n    } else {\n        $palin = $left . $right;\n    }\n    return $palin;\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1233) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234)",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next_palindrome = $left.$num[$half].$right;\n    if ($next_palindrome > $num) {\n        return $next_palindrome;\n    }\n    $left = str_split($left);\n    $carry = 1;\n    for ($i = $half - 1; $i >= 0; $i--) {\n        $left[$i] += $carry;\n        if ($left[$i] == 10) {\n            $left[$i] = 0;\n            $carry = 1;\n        } else {\n            $carry = 0;\n            break;\n        }\n    }\n    $left = implode('', $left);\n    if ($carry) {\n        $left = '1'.$left;\n    }\n    $right = strrev($left);\n    $next_palindrome = $left.$right;\n    return $next_palindrome;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 == 0 ? $half : $half + 1);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . substr($left_rev, $len % 2);\n    } else {\n        $left = strrev(strval(intval($left) + 1));\n        $num = $left . substr($left, $len % 2);\n    }\n    return intval($num);\n}\n\necho next_smallest_palindrome(123) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(1234567) . PHP_EOL;\necho next_smallest_palindrome(12345678) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;\necho next_smallest_palindrome(1234567890) . PHP_EOL;\necho next_smallest_palindrome(12345678901) . PHP_EOL;\necho next_smallest_palindrome(123456789012) . PHP_EOL;\necho next_smallest_palindrome(1234567890123) . PHP_EOL;\necho next_smallest_palindrome(12345678901234) . PHP_EOL;\necho next_smallest_palindrome(123456789012345) . PHP_EOL;\necho next_smallest_palindrome(1234567890123456) . PHP_EOL;\necho next_smallest_palindrome(12345678901234567) . PHP_EOL;\necho next_smallest_palindrome(123456789012345678) . PHP_EOL;\necho next",
    "    $num++;\n    while (strrev($num) != $num) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num . $right;\n    }\n    if ($right > substr($num, $mid)) {\n        return $left . $right;\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = $mid_num . $right;\n    }\n    return $left . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num.$right;\n    }\n    if ($right >= $left) {\n        $left = str_pad((string)((int)$left + 1), $mid, '0', STR_PAD_LEFT);\n        $right = strrev($left);\n    }\n    return (int)$left.$right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = (int)($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $right = strrev($left);\n    $new = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($new > $num) {\n        return $new;\n    }\n    $left = strrev((string)((int)$left + 1));\n    $right = strrev($left);\n    $new = $left . ($len % 2 ? $num[$half] : '') . $right;\n    return $new;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234567899) . \"\\n\";\necho next_smallest_palindrome(123432) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(12343210) . \"\\n\";\necho next_smallest_palindrome(12343211) . \"\\n\";\necho next_smallest_palindrome(12343212) . \"\\n\";\necho next_smallest_palindrome(12343213) . \"\\n\";\necho next_smallest_palindrome(12343214) . \"\\n\";\necho next_smallest_palindrome(12343215) . \"\\n\";\necho next_smallest_palindrome(12343216) . \"\\n\";\necho next_smallest_palindrome(12343217) . \"\\n\";\necho next_smallest_palindrome(12343218) . \"\\n\";\necho next_smallest_palindrome(12343219) . \"\\n\";\necho next_smallest_palindrome(12343220) . \"\\",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($num[$i] != $num[$j]) {\n            $num[$i] = $num[$j] = max($num[$i], $num[$j]);\n        }\n        $i++;\n        $j--;\n    }\n    if ($num == $num_copy) {\n        $num = increment($num);\n    }\n    return $num;\n}\n",
    "    if ($num < 0) {\n        return -1;\n    }\n    $num_str = (string) $num;\n    $len = strlen($num_str);\n    $mid = floor($len / 2);\n    $left_half = substr($num_str, 0, $mid);\n    $right_half = strrev($left_half);\n    if ($len % 2 == 1) {\n        $mid_element = $num_str[$mid];\n        $right_half = $mid_element . $right_half;\n    }\n    if ($right_half > $left_half) {\n        return (int) ($left_half . $right_half);\n    }\n    $left_half = (string) ((int) $left_half + 1);\n    $right_half = strrev($left_half);\n    if ($len % 2 == 1) {\n        $right_half = $mid_element . $right_half;\n    }\n    return (int) ($left_half . $right_half);\n}\n\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(99999) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(123321) . PHP_EOL;\necho next_smallest_palindrome(123421) . PHP_EOL;\necho next_smallest_palindrome(1234321) . PHP_EOL;\necho next_smallest_palindrome(123454321) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;\necho next_smallest_palindrome(12345678987654321) . PHP_EOL;\necho next_smallest_palindrome(123456789876543210) . PHP_EOL;",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid = substr($num, $mid, 1);\n    }\n    $next = $left . $mid . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    if ($mid != 9) {\n        $mid = $mid + 1;\n        $next = $left . $mid . $right;\n        return $next;\n    }\n    $left = $left + 1;\n    $left = str_pad($left, $mid, 0, STR_PAD_LEFT);\n    $right = strrev($left);\n    return $left . $right;\n}\n\n$num = 1234;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 1234321;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 999;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 545;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 2;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 180;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 181;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 9;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 10;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 11;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 12;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 101;\necho next_smallest_palindrome($num);\necho \"\\n\";\n$num = 99",
    "    $num_str = (string)$num;\n    $len = strlen($num_str);\n    $mid = floor($len / 2);\n    $left = substr($num_str, 0, $mid);\n    $right = substr($num_str, $mid + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $right = $left_rev;\n    } else {\n        $left = strrev(strval(intval($left_rev) + 1));\n        $right = $left;\n    }\n    return intval($left . $right);\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    $right = substr($right, 0, $len - $mid);\n    $new_num = $left . $right;\n    if ($new_num > $num) {\n        return $new_num;\n    }\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        if ($mid_num != 9) {\n            $mid_num++;\n            $new_num = $left . $mid_num . $right;\n            return $new_num;\n        }\n        $mid_num = 0;\n        $left = strrev($left);\n        $carry = 1;\n        for ($i = 0; $i < $mid; $i++) {\n            $sum = $left[$i] + $carry;\n            $left[$i] = $sum % 10;\n            $carry = floor($sum / 10);\n        }\n        $left = strrev($left);\n        $new_num = $left . $mid_num . $right;\n        return $new_num;\n    }\n    $left = strrev($left);\n    $carry = 1;\n    for ($i = 0; $i < $mid; $i++) {\n        $sum = $left[$i] + $carry;\n        $left[$i] = $sum % 10;\n        $carry = floor($sum / 10);\n    }\n    $left = strrev($left);\n    $new_num = $left . $right;\n    return $new_num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid = substr($num, $mid, 1);\n    }\n    $next = $left . $mid . $right;\n    if ($next > $num) {\n        return (int)$next;\n    }\n    if ($mid != 9) {\n        $mid = (int)$mid + 1;\n        $next = $left . $mid . $right;\n        return (int)$next;\n    }\n    $left = (int)$left + 1;\n    $right = strrev($left);\n    $next = $left . $right;\n    return (int)$next;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num_str = strval($num);\n    $len = strlen($num_str);\n    $mid = floor($len / 2);\n    $left = substr($num_str, 0, $mid);\n    $right = substr($num_str, $mid + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $right = $left_rev;\n    } else {\n        $left = strval(intval($left) + 1);\n        $left_rev = strrev($left);\n        $right = $left_rev;\n    }\n    return intval($left . $right);\n}\n\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(12321) . PHP_EOL;\necho next_smallest_palindrome(123321) . PHP_EOL;\necho next_smallest_palindrome(1234321) . PHP_EOL;\necho next_smallest_palindrome(123454321) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;\necho next_smallest_palindrome(12345678987654321) . PHP_EOL;",
    "    $num_str = strval($num);\n    $len = strlen($num_str);\n    $mid = floor($len / 2);\n    $left = substr($num_str, 0, $mid);\n    $right = substr($num_str, $mid + $len % 2);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        return intval($left . $left_rev);\n    }\n    $left_int = intval($left);\n    $left_int++;\n    $left = strval($left_int);\n    $left_rev = strrev($left);\n    return intval($left . $left_rev);\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123421) . \"\\n\";\necho next_smallest_palindrome(123431) . \"\\n\";\necho next_smallest_palindrome(123432) . \"\\n\";\necho next_smallest_palindrome(123433) . \"\\n\";\necho next_smallest_palindrome(123434) . \"\\n\";\necho next_smallest_palindrome(123435) . \"\\n\";\necho next_smallest_palindrome(123436) . \"\\n\";\necho next_smallest_palindrome(123437) . \"\\n\";\necho next_smallest_palindrome(123438) . \"\\n\";\necho next_smallest_palindrome(123439) . \"\\n\";\necho next_smallest_palindrome(123441) . \"\\n\";\necho next_smallest_palindrome(123442) . \"\\n\";\necho next_smallest_pal",
    "    $num++;\n    while (strrev($num) != $num) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num++;\n    while (true) {\n        if ($num == strrev($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n\necho next_smallest_palindrome(123) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(1234567) . PHP_EOL;\necho next_smallest_palindrome(12345678) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;\necho next_smallest_palindrome(1234567890) . PHP_EOL;\necho next_smallest_palindrome(12345678901) . PHP_EOL;\necho next_smallest_palindrome(123456789012) . PHP_EOL;\necho next_smallest_palindrome(1234567890123) . PHP_EOL;\necho next_smallest_palindrome(12345678901234) . PHP_EOL;\necho next_smallest_palindrome(123456789012345) . PHP_EOL;\necho next_smallest_palindrome(1234567890123456) . PHP_EOL;\necho next_smallest_palindrome(12345678901234567) . PHP_EOL;\necho next_smallest_palindrome(123456789012345678) . PHP_EOL;\necho next_smallest_palindrome(1234567890123456789) . PHP_EOL;\necho next_smallest_palindrome(12345678901234567890) . PHP_EOL;\necho next_smallest_palindrome(123456789012345678901) . PHP_EOL;\necho next_smallest_palindrome(1234567890123456789012) . PHP_EOL;\necho next_smallest_palindrome(1234567890123",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        return $left . $left_rev;\n    }\n    $left = (int) $left;\n    $left++;\n    $left = (string) $left;\n    $left_rev = strrev($left);\n    return $left . $left_rev;\n}\n",
    "\t$num = (string)$num;\n\t$len = strlen($num);\n\t$half = floor($len/2);\n\t$left = substr($num, 0, $half);\n\t$right = substr($num, $len-$half);\n\t$left_rev = strrev($left);\n\tif ($left_rev > $right) {\n\t\t$right = $left_rev;\n\t} else {\n\t\t$left = strrev(strval(intval($left_rev)+1));\n\t\t$right = $left;\n\t}\n\treturn intval($left.$right);\n}\n\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1234321) . PHP_EOL;\necho next_smallest_palindrome(123454321) . PHP_EOL;\necho next_smallest_palindrome(12345678987654321) . PHP_EOL;",
    "    $num_str = (string)$num;\n    $len = strlen($num_str);\n    $half_len = floor($len / 2);\n    $left = substr($num_str, 0, $half_len);\n    $right = substr($num_str, $half_len + ($len % 2));\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    $left_rev_int = (int)$left_rev;\n    $right_rev_int = (int)$right_rev;\n    if ($left_rev_int > $right_rev_int) {\n        $right = $left_rev;\n    } else {\n        $left_int = (int)$left;\n        $left = (string)($left_int + 1);\n        $left_rev = strrev($left);\n        $right = $left_rev;\n    }\n    $palindrome = $left . $right;\n    return (int)$palindrome;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $mid_num++;\n    }\n    if ($left . $mid_num . $right > $num) {\n        return $left . $mid_num . $right;\n    }\n    $left++;\n    $left = str_pad($left, $mid, '0', STR_PAD_LEFT);\n    $right = strrev($left);\n    return $left . $mid_num . $right;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "\t$num = (string)$num;\n\t$num_length = strlen($num);\n\t$num_half = floor($num_length / 2);\n\t$num_left = substr($num, 0, $num_half);\n\t$num_right = strrev($num_left);\n\tif ($num_length % 2 == 1) {\n\t\t$num_right = substr($num_right, 1);\n\t}\n\t$num_left_int = (int)$num_left;\n\t$num_right_int = (int)$num_right;\n\tif ($num_left_int == $num_right_int) {\n\t\t$num_left_int++;\n\t\t$num_right_int = (string)$num_left_int;\n\t\t$num_right_int = strrev($num_right_int);\n\t\tif ($num_length % 2 == 1) {\n\t\t\t$num_right_int = substr($num_right_int, 1);\n\t\t}\n\t\t$num_right_int = (int)$num_right_int;\n\t}\n\treturn (int)($num_left_int . $num_right_int);\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(12321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123421) . \"\\n\";\necho next_smallest_palindrome(123412) . \"\\n\";\necho next_smallest_palindrome(123432) . \"\\n\";\necho next_smallest_palindrome(123433) . \"\\n\";\necho next_smallest_palindrome(123434) . \"\\n\";\necho next_smallest_palindrome(123435) . \"\\n\";\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left.$mid_char.$right;\n    } else {\n        $palin = $left.$right;\n    }\n    if ($palin > $num) {\n        return (int)$palin;\n    }\n    if ($mid_char != 9) {\n        $mid_char = $mid_char + 1;\n        $palin = $left.$mid_char.$right;\n        return (int)$palin;\n    }\n    $palin = $left.\"0\".$right;\n    $carry = 1;\n    $left = str_split($left);\n    for ($i = $mid - 1; $i >= 0; $i--) {\n        $sum = $left[$i] + $carry;\n        $left[$i] = $sum % 10;\n        $carry = floor($sum / 10);\n    }\n    if ($carry == 1) {\n        array_unshift($left, 1);\n    }\n    $left = implode($left);\n    $palin = $left.\"0\".strrev($left);\n    return (int)$palin;\n}\n\n$num = 1234;\necho next_smallest_palindrome($num);",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num . $right;\n    }\n    if ($right >= $left) {\n        $left = (int) $left;\n        $left++;\n        $left = (string) $left;\n        $right = strrev($left);\n        if ($len % 2 == 1) {\n            $mid_num = $num[$mid];\n            $right = $mid_num . $right;\n        }\n    }\n    return (int) ($left . $right);\n}\n",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "  $num_str = strval($num);\n  $num_len = strlen($num_str);\n  $half_len = floor($num_len / 2);\n  $left_half = substr($num_str, 0, $half_len);\n  $right_half = substr($num_str, $half_len + ($num_len % 2));\n  $left_half_rev = strrev($left_half);\n  if ($left_half_rev > $right_half) {\n    return intval($left_half . $left_half_rev);\n  }\n  $left_half_int = intval($left_half);\n  $left_half_int++;\n  $left_half = strval($left_half_int);\n  $left_half_rev = strrev($left_half);\n  return intval($left_half . $left_half_rev);\n}\n\necho next_smallest_palindrome(123) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(1234567) . PHP_EOL;\necho next_smallest_palindrome(12345678) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;\necho next_smallest_palindrome(1234567890) . PHP_EOL;\necho next_smallest_palindrome(12345678901) . PHP_EOL;\necho next_smallest_palindrome(123456789012) . PHP_EOL;\necho next_smallest_palindrome(1234567890123) . PHP_EOL;\necho next_smallest_palindrome(12345678901234) . PHP_EOL;\necho next_smallest_palindrome(123456789012345) . PHP_EOL;\necho next_smallest_palindrome(1234567890123456) . PHP_EOL;\necho next_smallest_pal",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $right = strrev($left);\n    $new_num = $left . substr($num, $half, $len % 2) . $right;\n    if ($new_num > $num) {\n        return $new_num;\n    }\n    if ($len % 2 == 1) {\n        $mid = $left[$half - 1];\n        $mid++;\n        $left[$half - 1] = $mid;\n    } else {\n        $left[$half - 1]++;\n        $left[$half]++;\n    }\n    $left = (int) $left;\n    $left++;\n    $left = (string) $left;\n    $right = strrev($left);\n    return $left . $right;\n}\n",
    "    $palindrome = $num;\n    while (!is_palindrome($palindrome)) {\n        $palindrome++;\n    }\n    return $palindrome;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        return $left . $left_rev;\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $left_rev = strrev($left);\n    return $left . $left_rev;\n}\n",
    "    $num_str = (string)$num;\n    $len = strlen($num_str);\n    $half_len = floor($len / 2);\n    $left_half = substr($num_str, 0, $half_len);\n    $right_half = substr($num_str, $half_len + ($len % 2));\n    $left_half_rev = strrev($left_half);\n    $right_half_rev = strrev($right_half);\n    if ($left_half_rev < $right_half) {\n        $left_half = strrev(++$left_half_rev);\n    } elseif ($left_half_rev > $right_half) {\n        $left_half = strrev($left_half_rev);\n    } else {\n        $left_half = strrev(++$left_half_rev);\n    }\n    return (int)$left_half . $right_half;\n}\n\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(12321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123322) . \"\\n\";\necho next_smallest_palindrome(123323) . \"\\n\";\necho next_smallest_palindrome(123324) . \"\\n\";\necho next_smallest_palindrome(123325) . \"\\n\";\necho next_smallest_palindrome(123326) . \"\\n\";\necho next_smallest_palindrome(123327) . \"\\n\";\necho next_smallest_palindrome(123328) . \"\\n\";\necho next_smallest_palindrome(123329) . \"\\n\";\necho next_smallest_palindrome(123330) . \"\\n\";\necho next_smallest_palindrome(123331) . \"\\n\";\necho next_small",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    if ($len % 2 && $left[$half - 1] != 9) {\n        $left[$half - 1]++;\n        return $left . 0 . strrev($left);\n    }\n    if ($len % 2) {\n        $left[$half - 1] = 0;\n    }\n    $left = (int)$left + 1;\n    $left = (string)$left;\n    $right = strrev($left);\n    return $left . ($len % 2 ? 0 : '') . $right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num . $right;\n    }\n    if ($right > $left) {\n        $left = $right;\n    } else {\n        $left = increment($left);\n        $right = strrev($left);\n    }\n    return (int)($left . $right);\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = (int)($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    $left = strrev(($left + 1));\n    $next = $left . ($len % 2 ? $num[$half] : '') . $right;\n    return $next;\n}\n\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(12345678987654321) . \"\\n\";",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $mid = floor($len/2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $mid_char = $num[$mid];\n    $palin = $left.$mid_char.$right;\n  } else {\n    $palin = $left.$right;\n  }\n  if ($palin > $num) {\n    return (int)$palin;\n  }\n  $k = 1;\n  while ($left) {\n    $left = (int)$left;\n    $left += $k;\n    $left = (string)$left;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n      $palin = $left.$mid_char.$right;\n    } else {\n      $palin = $left.$right;\n    }\n    if ($palin > $num) {\n      return (int)$palin;\n    }\n    $k = 1;\n  }\n  return -1;\n}\n\necho next_smallest_palindrome(123) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(1234567) . PHP_EOL;\necho next_smallest_palindrome(12345678) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;\necho next_smallest_palindrome(1234567890) . PHP_EOL;\necho next_smallest_palindrome(12345678901) . PHP_EOL;\necho next_smallest_palindrome(123456789012) . PHP_EOL;\necho next_smallest_palindrome(1234567890123) . PHP_EOL;\necho next_smallest_palindrome(12345678901234",
    "    $num++;\n    while (true) {\n        if (is_palindrome($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $len % 2 ? $half + 1 : $half);\n  $left = (string)((int)$left + 1);\n  $right = strrev($left);\n  return (int)$left . $right;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $i = 0;\n    $j = $len - 1;\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = substr($num, $mid + ($len % 2));\n    $left_len = strlen($left);\n    $right_len = strlen($right);\n    $left_rev = strrev($left);\n    $right_rev = strrev($right);\n    if ($left_rev > $right) {\n        $new_num = $left . $left_rev;\n    } else {\n        $new_num = $left . $left_rev;\n        $new_num = (string)((int)$new_num + 1);\n        $new_num = substr($new_num, 0, $left_len) . strrev(substr($new_num, $left_len));\n    }\n    return (int)$new_num;\n}\n\necho next_smallest_palindrome(11) . PHP_EOL;\necho next_smallest_palindrome(12) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(100) . PHP_EOL;\necho next_smallest_palindrome(123) . PHP_EOL;\necho next_smallest_palindrome(999) . PHP_EOL;\necho next_smallest_palindrome(1000) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(9999) . PHP_EOL;\necho next_smallest_palindrome(10000) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(99999) . PHP_EOL;\necho next_smallest_palindrome(100000) . PHP_EOL;\necho next_smallest_palindrome(123456",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $left = substr($num, 0, $len/2);\n    $right = substr($num, $len/2);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . substr($left_rev, 0, $len/2);\n        if ($len % 2 == 1) {\n            $num .= substr($left_rev, $len/2, 1);\n        }\n        return (int)$num;\n    } else {\n        $left = (int)$left;\n        $left++;\n        $left = (string)$left;\n        $left_rev = strrev($left);\n        $num = $left . substr($left_rev, 0, $len/2);\n        if ($len % 2 == 1) {\n            $num .= substr($left_rev, $len/2, 1);\n        }\n        return (int)$num;\n    }\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234567) . \"\\n\";\necho next_smallest_palindrome(123456789) . \"\\n\";\necho next_smallest_palindrome(1234567890) . \"\\n\";\necho next_smallest_palindrome(12345678901) . \"\\n\";\necho next_smallest_palindrome(123456789012) . \"\\n\";\necho next_smallest_palindrome(1234567890123) . \"\\n\";\necho next_smallest_palindrome(12345678901234) . \"\\n\";\necho next_smallest_palindrome(123456789012345) . \"\\n\";\necho next_smallest_palindrome(1234567890123456) . \"\\n\";\necho next_smallest_palind",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $left = strrev($left);\n    if ($left > $right) {\n        $right = $left;\n    } else {\n        $left = strrev($left);\n        $left = (int)$left + 1;\n        $left = strrev($left);\n        $right = $left;\n    }\n    return (int)$left . $right;\n}\n",
    "    $num = (string) $num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num . $right;\n    }\n    if ($right > $left) {\n        $left = strrev(($left + 1));\n        $right = $left;\n    }\n    return (int) ($left . $right);\n}\n\necho next_smallest_palindrome(123) . PHP_EOL; // 131\necho next_smallest_palindrome(1234) . PHP_EOL; // 1331\necho next_smallest_palindrome(12345) . PHP_EOL; // 12421\necho next_smallest_palindrome(123456) . PHP_EOL; // 123321\necho next_smallest_palindrome(1234567) . PHP_EOL; // 1234321\necho next_smallest_palindrome(12345678) . PHP_EOL; // 12443321\necho next_smallest_palindrome(123456789) . PHP_EOL; // 124543321\necho next_smallest_palindrome(1234567890) . PHP_EOL; // 124553321\necho next_smallest_palindrome(12345678901) . PHP_EOL; // 1245643321\necho next_smallest_palindrome(123456789012) . PHP_EOL; // 1245653321\necho next_smallest_palindrome(1234567890123) . PHP_EOL; // 1245663321\necho next_smallest_palindrome(12345678901234) . PHP_EOL; // 1245673321\necho next_smallest_palindrome(123456789012345) . PHP_EOL; // 1245674321\necho next_smallest_palindrome(1234567890123456) . PHP_",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($num[$i] != $num[$j]) {\n            $num[$j] = $num[$i];\n        }\n        $i++;\n        $j--;\n    }\n    return (int)$num;\n}\n\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(12321) . PHP_EOL;\necho next_smallest_palindrome(123321) . PHP_EOL;\necho next_smallest_palindrome(1234321) . PHP_EOL;\necho next_smallest_palindrome(123454321) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;\necho next_smallest_palindrome(1234567899) . PHP_EOL;\necho next_smallest_palindrome(12345678909) . PHP_EOL;\necho next_smallest_palindrome(123456789098) . PHP_EOL;",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $mid = floor($len/2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $mid_val = $num[$mid];\n    $right = $mid_val.$right;\n  }\n  if ($right >= $left) {\n    $left = str_pad((string)((int)$left + 1), $mid, '0', STR_PAD_LEFT);\n    $right = strrev($left);\n  }\n  return (int)$left.$right;\n}\n\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(99999) . PHP_EOL;\necho next_smallest_palindrome(1234321) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(123454321) . PHP_EOL;\necho next_smallest_palindrome(1234567899) . PHP_EOL;",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num++;\n    while (true) {\n        if ($num == strrev($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n\necho next_smallest_palindrome(123);\necho \"\\n\";\necho next_smallest_palindrome(1234);\necho \"\\n\";\necho next_smallest_palindrome(12345);\necho \"\\n\";\necho next_smallest_palindrome(123456);\necho \"\\n\";\necho next_smallest_palindrome(1234567);\necho \"\\n\";\necho next_smallest_palindrome(12345678);\necho \"\\n\";\necho next_smallest_palindrome(123456789);\necho \"\\n\";\necho next_smallest_palindrome(1234567890);\necho \"\\n\";\necho next_smallest_palindrome(12345678901);\necho \"\\n\";\necho next_smallest_palindrome(123456789012);\necho \"\\n\";\necho next_smallest_palindrome(1234567890123);\necho \"\\n\";\necho next_smallest_palindrome(12345678901234);\necho \"\\n\";\necho next_smallest_palindrome(123456789012345);\necho \"\\n\";\necho next_smallest_palindrome(1234567890123456);\necho \"\\n\";\necho next_smallest_palindrome(12345678901234567);\necho \"\\n\";\necho next_smallest_palindrome(123456789012345678);\necho \"\\n\";\necho next_smallest_palindrome(1234567890123456789);\necho \"\\n\";\necho next_smallest_palindrome(12345678901234567890);\necho \"\\n\";\necho next_smallest_palindrome(123456789012345678901);\necho \"\\n\";\necho next_smallest_palindrome(1234567890123456789012);\necho \"\\n\";\necho next_smallest_palindrome(1234567890123",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len%2 ? $half+1 : $half);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . ($len%2 ? $num[$half] : '') . $left_rev;\n    } else {\n        $left = strrev(strval(intval($left)+1));\n        $num = $left . ($len%2 ? $num[$half] : '') . $left;\n    }\n    return intval($num);\n}\n\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1234321) . PHP_EOL;\necho next_smallest_palindrome(123454321) . PHP_EOL;\necho next_smallest_palindrome(12345678987654321) . PHP_EOL;",
    "  $num++;\n  while(!is_palindrome($num)) {\n    $num++;\n  }\n  return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $right = substr($right, 1);\n    } else {\n        $mid_char = '';\n    }\n    if ($left.$mid_char.$right > $num) {\n        return (int)$left.$mid_char.$right;\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    return (int)$left.$mid_char.$right;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1234321) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(1234567899) . \"\\n\";",
    "    $num_str = (string) $num;\n    $len = strlen($num_str);\n    $half = (int) ($len / 2);\n    $left_half = substr($num_str, 0, $half);\n    $right_half = substr($num_str, $half + ($len % 2));\n    $left_half_rev = strrev($left_half);\n    if ($left_half_rev > $right_half) {\n        return $left_half . $left_half_rev;\n    }\n    $left_half_int = (int) $left_half;\n    $left_half_int++;\n    $left_half = (string) $left_half_int;\n    $left_half_rev = strrev($left_half);\n    return $left_half . $left_half_rev;\n}\n\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1243) . PHP_EOL;\necho next_smallest_palindrome(1331) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(999) . PHP_EOL;\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(123456) . PHP_EOL;\necho next_smallest_palindrome(1234567) . PHP_EOL;\necho next_smallest_palindrome(12345678) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $new_num = $left . ($len % 2 ? $num[$half] : '') . $right;\n    if ($new_num > $num) {\n        return (int)$new_num;\n    }\n    $left = strrev((string)((int)$left + 1));\n    $new_num = $left . ($len % 2 ? $num[$half] : '') . $right;\n    return (int)$new_num;\n}\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $mid = floor($len / 2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $mid_num = $num[$mid];\n    $right = $mid_num . $right;\n  }\n  if ($right >= $left) {\n    $left = str_pad((string)($left + 1), $mid, '0', STR_PAD_LEFT);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n      $mid_num = $num[$mid];\n      $right = $mid_num . $right;\n    }\n  }\n  return (int)($left . $right);\n}\n\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(1234554321) . \"\\n\";\necho next_smallest_palindrome(12345654321) . \"\\n\";\necho next_smallest_palindrome(1234567654321) . \"\\n\";\necho next_smallest_palindrome(123456787654321) . \"\\n\";\necho next_smallest_palindrome(12345678987654321) . \"\\n\";\necho next_smallest_palindrome(1234567890987654321) . \"\\n\";\necho next_smallest_palindrome(123456789010987654321) . \"\\n\";\necho next_smallest_palindrome(12345678901210987654321) . \"\\n\";\necho next_smallest_palindrome(123",
    "    $num = strval($num);\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len - $half);\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . $left_rev;\n    } else {\n        $left = strval(intval($left) + 1);\n        $left_rev = strrev($left);\n        $num = $left . $left_rev;\n    }\n    return intval($num);\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1221) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123322) . \"\\n\";\necho next_smallest_palindrome(123323) . \"\\n\";\necho next_smallest_palindrome(123324) . \"\\n\";\necho next_smallest_palindrome(123325) . \"\\n\";\necho next_smallest_palindrome(123326) . \"\\n\";\necho next_smallest_palindrome(123327) . \"\\n\";\necho next_smallest_palindrome(123328) . \"\\n\";\necho next_smallest_palindrome(123329) . \"\\n\";\necho next_smallest_palindrome(123330) . \"\\n\";\necho next_smallest_palindrome(123331) . \"\\n\";\necho next_smallest_palindrome(123332) . \"\\n\";\necho next_smallest_palindrome(123333) . \"\\n\";\necho next_smallest_palindrome(123334) . \"\\n\";\necho next_smallest_palindrome(123335) . \"\\n\";",
    "    $num++;\n    while(!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = strval($num);\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + ($len % 2));\n    $left_rev = strrev($left);\n    if ($left_rev > $right) {\n        $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n    } else {\n        $left = strval(intval($left) + 1);\n        $left_rev = strrev($left);\n        $num = $left . ($len % 2 ? $num[$half] : '') . $left_rev;\n    }\n    return intval($num);\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $mid_num = $mid_num + 1;\n        $right = substr($right, 1);\n    }\n    $right = strrev($right);\n    $result = $left . $mid_num . $right;\n    return $result;\n}\n\necho next_smallest_palindrome(12345);\necho next_smallest_palindrome(99);\necho next_smallest_palindrome(1234);",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_num = $num[$mid];\n        $right = $mid_num . $right;\n    }\n    if ($right > substr($num, $mid)) {\n        return $left . $right;\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $right = $mid_num . $right;\n    }\n    return $left . $right;\n}\n\necho next_smallest_palindrome(12345) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(1234) . PHP_EOL;\necho next_smallest_palindrome(1234321) . PHP_EOL;\necho next_smallest_palindrome(123454321) . PHP_EOL;\necho next_smallest_palindrome(123321) . PHP_EOL;\necho next_smallest_palindrome(123456789) . PHP_EOL;\necho next_smallest_palindrome(1234567899) . PHP_EOL;",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len/2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid = substr($num, $mid, 1);\n    }\n    $next = $left . $mid . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    if ($mid != 9) {\n        $mid = (int)$mid + 1;\n        $next = $left . $mid . $right;\n        return $next;\n    }\n    $left = (int)$left + 1;\n    $left = (string)$left;\n    $right = strrev($left);\n    $next = $left . $right;\n    return $next;\n}\n",
    "    $num++;\n    while (true) {\n        $str = (string)$num;\n        $len = strlen($str);\n        $half = (int)($len / 2);\n        $left = substr($str, 0, $half);\n        $right = substr($str, $len - $half);\n        if ($left == strrev($right)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n\necho next_smallest_palindrome(123) . \"\\n\";\necho next_smallest_palindrome(1233) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123322) . \"\\n\";\necho next_smallest_palindrome(123323) . \"\\n\";\necho next_smallest_palindrome(123324) . \"\\n\";\necho next_smallest_palindrome(123325) . \"\\n\";\necho next_smallest_palindrome(123326) . \"\\n\";\necho next_smallest_palindrome(123327) . \"\\n\";\necho next_smallest_palindrome(123328) . \"\\n\";\necho next_smallest_palindrome(123329) . \"\\n\";\necho next_smallest_palindrome(123330) . \"\\n\";\necho next_smallest_palindrome(123331) . \"\\n\";\necho next_smallest_palindrome(123332) . \"\\n\";\necho next_smallest_palindrome(123333) . \"\\n\";\necho next_smallest_palindrome(123334) . \"\\n\";\necho next_smallest_palindrome(123335) . \"\\n\";\necho next_smallest_palindrome(123336) . \"\\n\";\necho next_smallest_palindrome(123337) . \"\\n\";\necho next_smallest_palindrome(123338) . \"\\n\";\necho next_smallest_palindrome(123339) . \"\\n\";\necho next_smallest_palindrome",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len%2 ? $half+1 : $half);\n    $right = strrev($left);\n    $next = $left.$right;\n    if ($next > $num) return $next;\n    if ($left[0] == '9') {\n        $left = str_repeat('0', $half);\n        $right = str_repeat('0', $half);\n        $next = $left.'1'.$right;\n        return $next;\n    }\n    $left = (int)$left;\n    $left++;\n    $left = (string)$left;\n    $right = strrev($left);\n    $next = $left.$right;\n    return $next;\n}\n",
    "    $num = $num + 1;\n    while (true) {\n        if (is_palindrome($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $mid = floor($len / 2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $mid_element = $num[$mid];\n    $right = $mid_element . $right;\n  }\n  if ($right > $left) {\n    $left = (int)$left + 1;\n    $right = strrev($left);\n  }\n  return (int)$left . $right;\n}\n",
    "    $num_str = (string)$num;\n    $num_len = strlen($num_str);\n    $num_half = floor($num_len/2);\n    $num_left = substr($num_str, 0, $num_half);\n    $num_right = substr($num_str, $num_len-$num_half);\n    $num_left_rev = strrev($num_left);\n    if ($num_left_rev > $num_right) {\n        $num_right = $num_left_rev;\n    } else {\n        $num_left = strrev(++$num_left_rev);\n        $num_right = $num_left_rev;\n    }\n    return (int)$num_left.$num_right;\n}\n",
    "    $num++;\n    while (true) {\n        if ($num == strrev($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n\necho next_smallest_palindrome(11);\necho next_smallest_palindrome(188);\necho next_smallest_palindrome(191);\necho next_smallest_palindrome(2541);\necho next_smallest_palindrome(9999);",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid = substr($num, $mid, 1);\n    }\n    $next = $left . $mid . $right;\n    if ($next > $num) {\n        return $next;\n    }\n    if ($mid != 9) {\n        $mid = (int)$mid + 1;\n        $next = $left . $mid . $right;\n        return $next;\n    }\n    $left = (int)$left + 1;\n    $left = (string)$left;\n    $right = strrev($left);\n    $next = $left . $right;\n    return $next;\n}\n\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";\necho next_smallest_palindrome(1234567899) . \"\\n\";\necho next_smallest_palindrome(123432) . \"\\n\";\necho next_smallest_palindrome(11) . \"\\n\";\necho next_smallest_palindrome(18750) . \"\\n\";\necho next_smallest_palindrome(213312) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123322) . \"\\n\";\necho next_smallest_palindrome(123320) . \"\\n\";\necho next_smallest_palindrome(123310) . \"\\n\";\necho next_smallest_palindrome(123300) . \"\\n\";\necho next_smallest_palindrome(123301) . \"\\n\";\necho next_smallest_palindrome(123200) . \"\\n\";\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $half + $len % 2);\n    $next_left = $left;\n    $next_right = $right;\n    if ($left === strrev($right)) {\n        $next_left = $left + 1;\n        $next_right = strrev($next_left);\n    }\n    return (int)$next_left . $next_right;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len / 2);\n    $left = substr($num, 0, $half);\n    $right = substr($num, $len % 2 ? $half + 1 : $half);\n    $right = strrev($left);\n    $new = $left.$right;\n    if ($new > $num) return $new;\n    $left = (string)((int)$left + 1);\n    $right = strrev($left);\n    return $left.$right;\n}\n\necho next_smallest_palindrome(11) . PHP_EOL; // 22\necho next_smallest_palindrome(188) . PHP_EOL; // 191\necho next_smallest_palindrome(191) . PHP_EOL; // 202\necho next_smallest_palindrome(2541) . PHP_EOL; // 2552\necho next_smallest_palindrome(9999) . PHP_EOL; // 10001\necho next_smallest_palindrome(12345) . PHP_EOL; // 12421\necho next_smallest_palindrome(998001) . PHP_EOL; // 999999\necho next_smallest_palindrome(998002) . PHP_EOL; // 999999\necho next_smallest_palindrome(998003) . PHP_EOL; // 999999\necho next_smallest_palindrome(998004) . PHP_EOL; // 999999\necho next_smallest_palindrome(998005) . PHP_EOL; // 999999\necho next_smallest_palindrome(998006) . PHP_EOL; // 999999\necho next_smallest_palindrome(998007) . PHP_EOL; // 999999\necho next_smallest_palindrome(998008) . PHP_EOL; // 999999\necho next_smallest_palindrome(998009) . PHP_EOL; // 999999\necho next_smallest_palindrome(998010) . PHP_EOL; // 999999\necho next_",
    "    $num++;\n    while (!is_palindrome($num)) {\n        $num++;\n    }\n    return $num;\n}\n",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $half = floor($len/2);\n    $left = substr($num, 0, $half);\n    $right = strrev($left);\n    $next = $left.$right;\n    if ($len % 2 == 1) {\n        $next = $left.substr($num, $half, 1).$right;\n    }\n    if ($next > $num) {\n        return $next;\n    }\n    $left = (string)((int)$left + 1);\n    $right = strrev($left);\n    $next = $left.$right;\n    if ($len % 2 == 1) {\n        $next = $left.substr($num, $half, 1).$right;\n    }\n    return $next;\n}\n",
    "  $num++;\n  while(!is_palindrome($num)) {\n    $num++;\n  }\n  return $num;\n}\n",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $mid = floor($len / 2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $mid = substr($num, $mid, 1);\n  }\n  $next = $left . $mid . $right;\n  if ($next > $num) {\n    return $next;\n  }\n  if ($mid != 9) {\n    $mid = (int)$mid + 1;\n    $next = $left . $mid . $right;\n    return $next;\n  }\n  $left = (int)$left + 1;\n  $left = (string)$left;\n  $right = strrev($left);\n  $next = $left . $right;\n  return $next;\n}\n\necho next_smallest_palindrome(1234) . \"\\n\";\necho next_smallest_palindrome(1243) . \"\\n\";\necho next_smallest_palindrome(1331) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";\necho next_smallest_palindrome(12345) . \"\\n\";\necho next_smallest_palindrome(123454321) . \"\\n\";\necho next_smallest_palindrome(123321) . \"\\n\";\necho next_smallest_palindrome(123322) . \"\\n\";\necho next_smallest_palindrome(123333) . \"\\n\";\necho next_smallest_palindrome(123334) . \"\\n\";\necho next_smallest_palindrome(123335) . \"\\n\";\necho next_smallest_palindrome(123336) . \"\\n\";\necho next_smallest_palindrome(123337) . \"\\n\";\necho next_smallest_palindrome(123338) . \"\\n\";\necho next_smallest_palindrome(123339) . \"\\n\";",
    "  $num = (string)$num;\n  $len = strlen($num);\n  $half = floor($len / 2);\n  $left = substr($num, 0, $half);\n  $right = substr($num, $half + $len % 2);\n  $next = $left . ($len % 2 ? $num[$half] : '') . strrev($left);\n  if ($next > $num) {\n    return (int)$next;\n  }\n  $left = strrev((string)((int)$left + 1));\n  $next = $left . ($len % 2 ? $num[$half] : '') . strrev($left);\n  return (int)$next;\n}\n",
    "    $num++;\n    while (true) {\n        if (is_palindrome($num)) {\n            return $num;\n        }\n        $num++;\n    }\n}\n",
    "  $num = strval($num);\n  $len = strlen($num);\n  $mid = floor($len / 2);\n  $left = substr($num, 0, $mid);\n  $right = strrev($left);\n  if ($len % 2 == 1) {\n    $mid_num = $num[$mid];\n    $mid_num++;\n    $right = substr($right, 1);\n  }\n  if ($left.$mid_num.$right <= $num) {\n    if ($mid_num != 9) {\n      $mid_num++;\n    } else {\n      $left = strval(intval($left) + 1);\n      $right = strrev($left);\n      if ($len % 2 == 1) {\n        $right = substr($right, 1);\n      }\n    }\n  }\n  return intval($left.$mid_num.$right);\n}\n\necho next_smallest_palindrome(1) . \"\\n\";\necho next_smallest_palindrome(9) . \"\\n\";\necho next_smallest_palindrome(10) . \"\\n\";\necho next_smallest_palindrome(11) . \"\\n\";\necho next_smallest_palindrome(99) . \"\\n\";\necho next_smallest_palindrome(100) . \"\\n\";\necho next_smallest_palindrome(101) . \"\\n\";\necho next_smallest_palindrome(111) . \"\\n\";\necho next_smallest_palindrome(999) . \"\\n\";\necho next_smallest_palindrome(1000) . \"\\n\";\necho next_smallest_palindrome(1001) . \"\\n\";\necho next_smallest_palindrome(1111) . \"\\n\";\necho next_smallest_palindrome(9999) . \"\\n\";\necho next_smallest_palindrome(10000) . \"\\n\";\necho next_smallest_palindrome(10001) . \"\\n\";\necho next_smallest_palindrome(10010) . \"\\n\";\necho next_smallest_palindrome(10101) . \"\\n\";\necho next_smallest_",
    "    $num = (string)$num;\n    $len = strlen($num);\n    $mid = floor($len / 2);\n    $left = substr($num, 0, $mid);\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left.$mid_char.$right;\n    } else {\n        $palin = $left.$right;\n    }\n    if ($palin > $num) {\n        return $palin;\n    }\n    $k = ($len % 2 == 1) ? $mid - 1 : $mid;\n    $carry = 1;\n    while ($k >= 0 && $carry > 0) {\n        $sum = (int)$left[$k] + $carry;\n        $carry = floor($sum / 10);\n        $left[$k] = $sum % 10;\n        $k--;\n    }\n    if ($carry > 0) {\n        $left = '1'.$left;\n    }\n    $right = strrev($left);\n    if ($len % 2 == 1) {\n        $mid_char = $num[$mid];\n        $palin = $left.$mid_char.$right;\n    } else {\n        $palin = $left.$right;\n    }\n    return $palin;\n}\n\necho next_smallest_palindrome(1) . PHP_EOL;\necho next_smallest_palindrome(2) . PHP_EOL;\necho next_smallest_palindrome(3) . PHP_EOL;\necho next_smallest_palindrome(9) . PHP_EOL;\necho next_smallest_palindrome(11) . PHP_EOL;\necho next_smallest_palindrome(99) . PHP_EOL;\necho next_smallest_palindrome(101) . PHP_EOL;\necho next_smallest_palindrome(111) . PHP_EOL;\necho next_smallest_palindrome(121) . PHP_EOL;\necho next_smallest_palindrome("
  ]
}