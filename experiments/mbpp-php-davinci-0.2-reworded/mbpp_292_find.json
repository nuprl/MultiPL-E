{
  "name": "mbpp_292_find",
  "language": "php",
  "prompt": "<?php\n// Write a phpthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find($n, $m) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return find(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10, 3) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 5) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    return floor($n / $m);\n}\n\necho find(5, 2);",
    "    return floor($n / $m);\n}\n\necho find(5, 2);",
    "    return floor($n / $m);\n}\n\necho find(7, 2);",
    "    $quotient = floor($n/$m);\n    return $quotient;\n}\n\n$n = 10;\n$m = 3;\necho find($n, $m);",
    "    return floor($n / $m);\n}\n\necho find(5, 2);",
    "    return floor($n / $m);\n}\necho find(5, 2);",
    "    return floor($n/$m);\n}\n\n$n = 10;\n$m = 3;\necho find($n, $m);",
    "    $quotient = floor($n/$m);\n    return $quotient;\n}\necho find(5, 2);",
    "    return floor($n/$m);\n}\n\n$n = 10;\n$m = 3;\necho find($n, $m);",
    "    return floor($n/$m);\n}\n\necho find(5, 2);",
    "    return floor($n/$m);\n}\necho find(5, 2);",
    "    return floor($n / $m);\n}\n\necho find(10, 3);",
    "    return floor($n/$m);\n}\n\necho find(5, 2);",
    "    return floor($n/$m);\n}\n\necho find(5, 2);",
    "    $quotient = floor($n / $m);\n    return $quotient;\n}\n\n$n = 10;\n$m = 3;\necho find($n, $m);",
    "    $quotient = floor($n/$m);\n    return $quotient;\n}\necho find(10, 3);",
    "    return floor($n / $m);\n}\n\necho find(7, 3);",
    "    return floor($n / $m);\n}\n\necho find(5, 2);",
    "    return floor($n/$m);\n}\n\necho find(5, 2);",
    "    return floor($n/$m);\n}\necho find(7,2);"
  ]
}