{
  "name": "mbpp_262_split_two_parts",
  "language": "php",
  "prompt": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    $list3 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n            [8] => 9\n            [9] => 10\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptp7a2kv8.php:25\nStack trace:\n#0 /tmp/tmptp7a2kv8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptp7a2kv8.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n            [8] => 9\n            [9] => 10\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptp7a2kv8.php:25\nStack trace:\n#0 /tmp/tmptp7a2kv8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptp7a2kv8.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 4;\n$result = split_two_parts($list1, $L);\necho \"The first part of the array is: \";\nprint_r($result[0]);\necho \"<br>\";\necho \"The second part of the array is: \";\nprint_r($result[1]);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "The first part of the array is: Array\n(\n    [0] => 5\n    [1] => 6\n    [2] => 7\n    [3] => 8\n    [4] => 9\n    [5] => 10\n    [8] => 9\n    [9] => 10\n)\n<br>The second part of the array is: Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuc7s_vrw.php:29\nStack trace:\n#0 /tmp/tmpuc7s_vrw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuc7s_vrw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    $list3 = [];\n    for ($i = 0; $i < count($list1); $i++) {\n        if ($i < $L) {\n            array_push($list2, $list1[$i]);\n        } else {\n            array_push($list3, $list1[$i]);\n        }\n    }\n    return [$list2, $list3];\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[$i] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[$i - $L] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$list2 = split_two_parts($list1, $L);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplti3scb8.php:21\nStack trace:\n#0 /tmp/tmplti3scb8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmplti3scb8.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\tarray_push($list2, $list1[$i]);\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\tarray_push($list3, $list1[$i]);\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        array_push($list1, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list1, $list2);\n}\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510567,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 134217736 bytes) in /tmp/tmp9h41cdzw.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    $list4 = array($list2, $list3);\n    return $list4;\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array_slice($list1, $L);\n\t$list1 = array_slice($list1, 0, $L);\n\treturn array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = 0; $i < count($list1) - $L; $i++) {\n        $list1[$i] = $list1[$i + $L];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    $list1 = array_values($list1);\n    return array($list2, $list1);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 4;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n        )\n\n    [1] => Array\n        (\n            [0] => 9\n            [1] => 6\n            [2] => 7\n            [3] => 8\n            [4] => 9\n            [5] => 8\n            [6] => 9\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd8429tuk.php:29\nStack trace:\n#0 /tmp/tmpd8429tuk.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpd8429tuk.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list1[$i - $L] = $list1[$i];\n\t}\n\tfor ($i = 0; $i < $L; $i++) {\n\t\tunset($list1[count($list1) - 1]);\n\t}\n\treturn array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpik3rd1_u.php:22\nStack trace:\n#0 /tmp/tmpik3rd1_u.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpik3rd1_u.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list1[$i - $L] = $list1[$i];\n\t}\n\t$list1 = array_slice($list1, 0, count($list1) - $L);\n\treturn array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbp12nbfo.php:20\nStack trace:\n#0 /tmp/tmpbp12nbfo.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpbp12nbfo.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($j = $L; $j < count($list1); $j++) {\n        $list3[] = $list1[$j];\n    }\n    return array($list2, $list3);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8);\n$L = 4;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n        )\n\n    [1] => Array\n        (\n            [0] => 5\n            [1] => 6\n            [2] => 7\n            [3] => 8\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\t$list4 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\t$list4[] = $list2;\n\t$list4[] = $list3;\n\treturn $list4;\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        array_push($list3, $list1[$i]);\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6);\n$L = 3;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list2, $list1);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$list4 = split_two_parts($list1, $L);\nprint_r($list4);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n            [8] => 9\n            [9] => 10\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptp7a2kv8.php:25\nStack trace:\n#0 /tmp/tmptp7a2kv8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptp7a2kv8.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$list2 = split_two_parts($list1, $L);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplti3scb8.php:21\nStack trace:\n#0 /tmp/tmplti3scb8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmplti3scb8.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$list2 = split_two_parts($list1, $L);\n\nprint_r($list2);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0bkh5bq6.php:21\nStack trace:\n#0 /tmp/tmp0bkh5bq6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0bkh5bq6.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i=0; $i < $L; $i++) { \n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i=$L; $i < count($list1); $i++) { \n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5);\n$L = 2;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 3\n            [1] => 4\n            [2] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 5;\n\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i=0; $i < $L; $i++) { \n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i=$L; $i < count($list1); $i++) { \n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\n$list1 = array(1,2,3,4,5,6,7,8,9);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n  $list2 = array_slice($list1, $L);\n  $list1 = array_slice($list1, 0, $L);\n  return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 4;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n        )\n\n    [1] => Array\n        (\n            [0] => 5\n            [1] => 6\n            [2] => 7\n            [3] => 8\n            [4] => 9\n            [5] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list2, $list1);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    $list3 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list2, $list1);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    return $list2;\n}\n\n$list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$L = 5;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp02ung688.php:19\nStack trace:\n#0 /tmp/tmp02ung688.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp02ung688.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[$i] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[$i - $L] = $list1[$i];\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$list4 = split_two_parts($list1, $L);\nprint_r($list4);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n            [8] => 9\n            [9] => 10\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1hej9u5o.php:26\nStack trace:\n#0 /tmp/tmp1hej9u5o.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1hej9u5o.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return [$list2, $list3];\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2q83lu5z.php:22\nStack trace:\n#0 /tmp/tmp2q83lu5z.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2q83lu5z.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = 0; $i < $L; $i++) {\n        unset($list1[$i]);\n    }\n    $list1 = array_values($list1);\n    return array($list1, $list2);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqxcyps7.php:23\nStack trace:\n#0 /tmp/tmplqxcyps7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmplqxcyps7.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 3;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n            [3] => 7\n            [4] => 8\n            [5] => 9\n            [6] => 10\n            [9] => 10\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dgy240y.php:27\nStack trace:\n#0 /tmp/tmp6dgy240y.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6dgy240y.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[$i] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result[0]);\nprint_r($result[1]);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => 6\n    [1] => 7\n    [2] => 8\n    [3] => 9\n    [4] => 10\n    [8] => 9\n    [9] => 10\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8x7v45sz.php:26\nStack trace:\n#0 /tmp/tmp8x7v45sz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8x7v45sz.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpui_tn7tq.php:16\nStack trace:\n#0 /tmp/tmpui_tn7tq.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpui_tn7tq.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list2, $list1);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7);\n$L = 3;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n            [3] => 7\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    return $list2;\n}\n$list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$L = 5;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxtfsvrc.php:18\nStack trace:\n#0 /tmp/tmpdxtfsvrc.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpdxtfsvrc.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list2, $list1);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n            [8] => 9\n            [9] => 10\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmaqzuxnt.php:27\nStack trace:\n#0 /tmp/tmpmaqzuxnt.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmaqzuxnt.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list2, $list1);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    $list3 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        array_push($list3, $list1[$i]);\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 3;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n            [3] => 7\n            [4] => 8\n            [5] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i=0; $i < $L; $i++) { \n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i=$L; $i < count($list1); $i++) { \n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n$list1 = array(1,2,3,4,5,6,7,8,9);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 3;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n            [3] => 7\n            [4] => 8\n            [5] => 9\n            [6] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    $list3 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return [$list2, $list1];\n}\n$list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$L = 4;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n        )\n\n    [1] => Array\n        (\n            [0] => 5\n            [1] => 6\n            [2] => 7\n            [3] => 8\n            [4] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    $list3 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list2, $list1);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp10pjtlns.php:20\nStack trace:\n#0 /tmp/tmp10pjtlns.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp10pjtlns.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    $list4 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    $list4[] = $list2;\n    $list4[] = $list3;\n    return $list4;\n}\n$list1 = array(1, 2, 3, 4, 5);\n$L = 3;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    $list3 = [];\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return [$list2, $list3];\n}\n$list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$L = 5;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2q83lu5z.php:22\nStack trace:\n#0 /tmp/tmp2q83lu5z.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2q83lu5z.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array_slice($list1, $L);\n\t$list1 = array_slice($list1, 0, $L);\n\treturn array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 4;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n        )\n\n    [1] => Array\n        (\n            [0] => 5\n            [1] => 6\n            [2] => 7\n            [3] => 8\n            [4] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 4;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n        )\n\n    [1] => Array\n        (\n            [0] => 5\n            [1] => 6\n            [2] => 7\n            [3] => 8\n            [4] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$list2 = split_two_parts($list1, $L);\nprint_r($list2);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjhgh60jm.php:21\nStack trace:\n#0 /tmp/tmpjhgh60jm.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjhgh60jm.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 4;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n        )\n\n    [1] => Array\n        (\n            [0] => 5\n            [1] => 6\n            [2] => 7\n            [3] => 8\n            [4] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $new_array = array();\n    $new_array[0] = array_slice($list1, 0, $L);\n    $new_array[1] = array_slice($list1, $L);\n    return $new_array;\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[$i] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[$i - $L] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list2, $list1);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    $list3 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array_slice($list1, $L);\n\t$list1 = array_slice($list1, 0, $L);\n\treturn array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\tarray_push($list2, $list1[$i]);\n\t}\n\t$list1 = array_slice($list1, 0, $L);\n\treturn array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($j = $L; $j < count($list1); $j++) {\n        $list3[] = $list1[$j];\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6);\n$L = 3;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$list4 = split_two_parts($list1, $L);\nprint_r($list4);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    $list3 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    $list3 = array($list2, $list1);\n    return $list3;\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = 0; $i < $L; $i++) {\n\t\tarray_shift($list1);\n\t}\n\t$list3 = array($list2, $list1);\n\treturn $list3;\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i=0; $i < $L; $i++) { \n\t\tarray_push($list2, $list1[$i]);\n\t}\n\t$list3 = array();\n\tfor ($j=$L; $j < count($list1); $j++) { \n\t\tarray_push($list3, $list1[$j]);\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_splice($list1, $L);\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return [$list2, $list1];\n}\n\n$list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$L = 3;\nprint_r(split_two_parts($list1, $L));\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n            [3] => 7\n            [4] => 8\n            [5] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 4;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n        )\n\n    [1] => Array\n        (\n            [0] => 5\n            [1] => 6\n            [2] => 7\n            [3] => 8\n            [4] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    $list1 = array_values($list1);\n    return array($list1, $list2);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n            [5] => 9\n            [6] => 10\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_kohjetb.php:23\nStack trace:\n#0 /tmp/tmp_kohjetb.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp_kohjetb.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i=0; $i < $L; $i++) { \n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i=$L; $i < count($list1); $i++) { \n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[$i] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n            [8] => 9\n            [9] => 10\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd8vox_it.php:25\nStack trace:\n#0 /tmp/tmpd8vox_it.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpd8vox_it.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[$i] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[$i - $L] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list2, $list1);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5);\n$L = 3;\n$result = split_two_parts($list1, $L);\necho \"<pre>\";\nprint_r($result);\necho \"</pre>\";\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n        )\n\n)\n</pre>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[$i] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[$i - $L] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 3;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n            [3] => 7\n            [4] => 8\n            [5] => 9\n            [6] => 10\n            [9] => 10\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwm5vd122.php:26\nStack trace:\n#0 /tmp/tmpwm5vd122.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwm5vd122.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    return $list2;\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxgy3q0k.php:16\nStack trace:\n#0 /tmp/tmprxgy3q0k.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprxgy3q0k.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n            [8] => 9\n            [9] => 10\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptp7a2kv8.php:25\nStack trace:\n#0 /tmp/tmptp7a2kv8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptp7a2kv8.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[$i] = $list1[$i];\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$list2 = split_two_parts($list1, $L);\nprint_r($list2);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw2y5p85.php:20\nStack trace:\n#0 /tmp/tmpiw2y5p85.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpiw2y5p85.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[$i] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[$i-$L] = $list1[$i];\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$list4 = split_two_parts($list1, $L);\nprint_r($list4);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list2, $list1);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list2, $list1);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    $list3 = [];\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        array_push($list3, $list1[$i]);\n    }\n    return [$list2, $list3];\n}\n$list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$L = 5;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n            [8] => 9\n            [9] => 10\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1hej9u5o.php:26\nStack trace:\n#0 /tmp/tmp1hej9u5o.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1hej9u5o.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    $result = array($list2, $list1);\n    return $result;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\nprint_r(split_two_parts($list1, $L));\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 5;\n$list4 = split_two_parts($list1, $L);\nprint_r($list4);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list2, $list1);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_k0_pt4.php:20\nStack trace:\n#0 /tmp/tmp2_k0_pt4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2_k0_pt4.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2q83lu5z.php:22\nStack trace:\n#0 /tmp/tmp2q83lu5z.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2q83lu5z.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    for ($i = $L; $i < count($list1); $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    return [array_slice($list1, 0, $L), $list2];\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list2, $list1);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array_slice($list1, $L);\n\t$list1 = array_slice($list1, 0, $L);\n\treturn array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$list4 = split_two_parts($list1, $L);\nprint_r($list4);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    $list3 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i=0; $i < $L; $i++) { \n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i=$L; $i < count($list1); $i++) { \n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[$i] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[$i - $L] = $list1[$i];\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    $list3 = [];\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return [$list2, $list3];\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\tarray_push($list2, $list1[$i]);\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\tarray_push($list3, $list1[$i]);\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 4;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n        )\n\n    [1] => Array\n        (\n            [0] => 5\n            [1] => 6\n            [2] => 7\n            [3] => 8\n            [4] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        $list2[] = $list1[$i];\n    }\n    return array(array_slice($list1, 0, $L), $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8);\n$L = 3;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n            [3] => 7\n            [4] => 8\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    $list3 = [];\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        array_push($list3, $list1[$i]);\n    }\n    return [$list2, $list3];\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    return $list2;\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$list2 = split_two_parts($list1, $L);\nprint_r($list2);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpes4qula5.php:19\nStack trace:\n#0 /tmp/tmpes4qula5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpes4qula5.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    $list3 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    $result = array($list2, $list3);\n    return $result;\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 3;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n            [3] => 7\n            [4] => 8\n            [5] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i=0; $i < $L; $i++) { \n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i=$L; $i < count($list1); $i++) { \n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2q83lu5z.php:22\nStack trace:\n#0 /tmp/tmp2q83lu5z.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2q83lu5z.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    $list3 = [];\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        array_push($list3, $list1[$i]);\n    }\n    return [$list2, $list3];\n}\n\n$list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    $list3 = [];\n    $list4 = [];\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    $list4[] = $list2;\n    $list4[] = $list3;\n    return $list4;\n}\n$list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$L = 5;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        array_push($list3, $list1[$i]);\n    }\n    return array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $first_part = array_slice($list1, 0, $L);\n    $second_part = array_slice($list1, $L);\n    return array($first_part, $second_part);\n}\n\necho \"split_two_parts([1, 2, 3, 4, 5, 6], 3) = \";\nprint_r(split_two_parts([1, 2, 3, 4, 5, 6], 3));\necho \"<br>\";\necho \"split_two_parts([1, 2, 3, 4, 5, 6], 2) = \";\nprint_r(split_two_parts([1, 2, 3, 4, 5, 6], 2));\necho \"<br>\";\necho \"split_two_parts([1, 2, 3, 4, 5, 6], 1) = \";\nprint_r(split_two_parts([1, 2, 3, 4, 5, 6], 1));\necho \"<br>\";\necho \"split_two_parts([1, 2, 3, 4, 5, 6], 0) = \";\nprint_r(split_two_parts([1, 2, 3, 4, 5, 6], 0));\necho \"<br>\";\necho \"split_two_parts([1, 2, 3, 4, 5, 6], 4) = \";\nprint_r(split_two_parts([1, 2, 3, 4, 5, 6], 4));\necho \"<br>\";\necho \"split_two_parts([1, 2, 3, 4, 5, 6], 5) = \";\nprint_r(split_two_parts([1, 2, 3, 4, 5, 6], 5));\necho \"<br>\";\necho \"split_two_parts([1, 2, 3, 4, 5, 6], 6) = \";\nprint_r(split_two_parts([1, 2, 3, 4, 5, 6], 6));\necho \"<br>\";\necho \"split_two_parts([1, 2, 3, 4, 5, 6], 7) = \";\nprint_r(split_two_parts([1, 2, 3, 4, 5, 6], 7));\necho \"<br>\";\necho \"\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Test\", expecting \",\" or \";\" in /tmp/tmpdgw_a6li.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list2, $list1);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[$i] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    $result = array($list1, $list2);\n    return $result;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [7] => 8\n            [8] => 9\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4j0ni1u.php:27\nStack trace:\n#0 /tmp/tmpl4j0ni1u.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpl4j0ni1u.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list1[$i - $L] = $list1[$i];\n\t}\n\tfor ($i = count($list1) - $L; $i < count($list1); $i++) {\n\t\tunset($list1[$i]);\n\t}\n\treturn array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0lwvd_w.php:22\nStack trace:\n#0 /tmp/tmpk0lwvd_w.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpk0lwvd_w.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    $list3 = [];\n    for ($i=0; $i < $L; $i++) { \n        $list2[] = $list1[$i];\n    }\n    for ($i=$L; $i < count($list1); $i++) { \n        $list3[] = $list1[$i];\n    }\n    return [$list2, $list3];\n}\n\n$list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\tarray_push($list2, $list1[$i]);\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\tarray_push($list3, $list1[$i]);\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n            [8] => 9\n            [9] => 10\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplbfqxnf9.php:26\nStack trace:\n#0 /tmp/tmplbfqxnf9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplbfqxnf9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array_slice($list1, $L);\n\t$list1 = array_slice($list1, 0, $L);\n\treturn array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[$i] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = 0; $i < count($list1) - $L; $i++) {\n        unset($list1[$i + $L]);\n    }\n    $list1 = array_values($list1);\n    return array($list2, $list1);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 3;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n            [3] => 8\n            [4] => 9\n            [5] => 10\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjui2zppv.php:27\nStack trace:\n#0 /tmp/tmpjui2zppv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjui2zppv.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    $list4 = array($list2, $list3);\n    return $list4;\n}\n$list1 = array(1, 2, 3, 4, 5, 6);\n$L = 3;\n$list4 = split_two_parts($list1, $L);\nprint_r($list4);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 3, 4, 5);\n$L = 3;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjylw0u9.php:21\nStack trace:\n#0 /tmp/tmpwjylw0u9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpwjylw0u9.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    $list3 = [];\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return [$list2, $list3];\n}\n$list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$L = 5;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    $list3 = [];\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return [$list2, $list3];\n}\n$list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$L = 5;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n\n$list3 = split_two_parts($list1, $L);\n\nprint_r($list3);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\t$list3 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[$i] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[$i - $L] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\nprint_r(split_two_parts($list1, $L));\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array_splice($list1, $L);\n    $list3 = array($list1, $list2);\n    return $list3;\n}\n$list1 = array(1,2,3,4,5,6,7,8,9,10);\n$L = 5;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfh6fymaj.php:21\nStack trace:\n#0 /tmp/tmpfh6fymaj.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfh6fymaj.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[$i] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[$i - $L] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$list4 = split_two_parts($list1, $L);\nprint_r($list4);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    $list3 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n            [8] => 9\n            [9] => 10\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl3dj2_56.php:22\nStack trace:\n#0 /tmp/tmpl3dj2_56.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpl3dj2_56.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[$i] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    $list1 = array_values($list1);\n    $result = array($list2, $list1);\n    return $result;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\nprint_r(split_two_parts($list1, $L));\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n            [5] => 9\n            [6] => 10\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcy976nnq.php:28\nStack trace:\n#0 /tmp/tmpcy976nnq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpcy976nnq.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n            [3] => 4\n            [4] => 5\n        )\n\n    [1] => Array\n        (\n            [0] => 6\n            [1] => 7\n            [2] => 8\n            [3] => 9\n            [4] => 10\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        array_push($list1, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    $result = array($list2, $list1);\n    return $result;\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\nprint_r(split_two_parts($list1, $L));\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 134217736 bytes) in /tmp/tmp5j95rssn.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n    $list2 = [];\n    $list3 = [];\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return [$list2, $list3];\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = [];\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = [];\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn [$list2, $list3];\n}\n\n$list1 = [1, 2, 3, 4, 5, 6];\n$L = 3;\n$result = split_two_parts($list1, $L);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 4\n            [1] => 5\n            [2] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i=0; $i < $L; $i++) { \n\t\t$list2[$i] = $list1[$i];\n\t}\n\tfor ($i=$L; $i < count($list1); $i++) { \n\t\t$list1[$i-$L] = $list1[$i];\n\t}\n\tfor ($i=0; $i < count($list1); $i++) { \n\t\tunset($list1[$i+$L]);\n\t}\n\treturn array($list1, $list2);\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123677,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5ibdv1r.php:22\nStack trace:\n#0 /tmp/tmpb5ibdv1r.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpb5ibdv1r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n\nfunction candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}