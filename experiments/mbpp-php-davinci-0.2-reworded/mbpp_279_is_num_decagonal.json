{
  "name": "mbpp_279_is_num_decagonal",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the nth decagonal number.\nfunction is_num_decagonal($n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return is_num_decagonal(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== 27) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 175) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 370) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == intval($n);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "\t$num = $n * (3 * $n - 2);\n\t$num_sqrt = sqrt($num);\n\t$num_sqrt_int = intval($num_sqrt);\n\tif ($num_sqrt_int == $num_sqrt) {\n\t\t$num_sqrt_int += 1;\n\t\t$num_sqrt_int /= 3;\n\t\t$num_sqrt_int = intval($num_sqrt_int);\n\t\tif ($num_sqrt_int == $num_sqrt / 3) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_root = sqrt($num);\n    $num_root_int = intval($num_root);\n    return ($num_root == $num_root_int) && ($num_root_int % 10 == 3 || $num_root_int % 10 == 7);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_floor = floor($num_sqrt);\n    if ($num_sqrt_floor * ($num_sqrt_floor + 1) == $num) {\n        return true;\n    }\n    return false;\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_int = intval($num_sqrt);\n    if ($num_sqrt_int * $num_sqrt_int == $num) {\n        return true;\n    }\n    return false;\n}\n",
    "  $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n  return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "\t$test = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $test == round($test);\n}\n",
    "  $num = $n * (3 * $n - 2);\n  return $num;\n}\n\necho is_num_decagonal(3);\necho \"\\n\";\necho is_num_decagonal(10);\necho \"\\n\";\n"
  ]
}