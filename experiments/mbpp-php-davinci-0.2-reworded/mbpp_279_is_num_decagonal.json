{
  "name": "mbpp_279_is_num_decagonal",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the nth decagonal number.\nfunction is_num_decagonal($n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return is_num_decagonal(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== 27) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 175) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 370) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == intval($n);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "\t$num = $n * (3 * $n - 2);\n\t$num_sqrt = sqrt($num);\n\t$num_sqrt_int = intval($num_sqrt);\n\tif ($num_sqrt_int == $num_sqrt) {\n\t\t$num_sqrt_int += 1;\n\t\t$num_sqrt_int /= 3;\n\t\t$num_sqrt_int = intval($num_sqrt_int);\n\t\tif ($num_sqrt_int == $num_sqrt / 3) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_root = sqrt($num);\n    $num_root_int = intval($num_root);\n    return ($num_root == $num_root_int) && ($num_root_int % 10 == 3 || $num_root_int % 10 == 7);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_floor = floor($num_sqrt);\n    if ($num_sqrt_floor * ($num_sqrt_floor + 1) == $num) {\n        return true;\n    }\n    return false;\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_int = intval($num_sqrt);\n    if ($num_sqrt_int * $num_sqrt_int == $num) {\n        return true;\n    }\n    return false;\n}\n",
    "  $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n  return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "\t$test = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $test == round($test);\n}\n",
    "  $num = $n * (3 * $n - 2);\n  return $num;\n}\n\necho is_num_decagonal(3);\necho \"\\n\";\necho is_num_decagonal(10);\necho \"\\n\";\n",
    "\t$num = $n * (3 * $n - 2);\n\t$num_sqrt = sqrt($num);\n\tif ($num_sqrt == floor($num_sqrt)) {\n\t\t$num_sqrt = floor($num_sqrt);\n\t\tif (($num_sqrt + 1) % 6 == 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $num == (int)$num;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_int = intval($num_sqrt);\n    if ($num_sqrt_int * $num_sqrt_int == $num) {\n        return true;\n    }\n    return false;\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "  $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n  return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int) $x;\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return ($num == floor($num)) ? true : false;\n}\n",
    "\t$n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $n == floor($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "\t$n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $n == floor($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "\t$num = $n * (3 * $n - 2);\n\t$num_sqrt = sqrt($num);\n\tif ($num_sqrt == floor($num_sqrt)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $num == floor($num);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt(24 * $num + 1);\n    $num = $num + 1;\n    $num = $num / 6;\n    return is_int($num);\n}\n",
    "  $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n  return $n == floor($n);\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "  $num = $n * (3 * $n - 2);\n  if (is_num_pentagonal($num)) {\n    return true;\n  }\n  return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_floor = floor($num_sqrt);\n    if ($num_sqrt_floor * ($num_sqrt_floor + 1) == $num) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $num == floor($num);\n}\n",
    "    $nth = 1;\n    $num = 1;\n    while ($nth < $n) {\n        $num += 10;\n        $nth++;\n    }\n    return $num;\n}\n\necho is_num_decagonal(3);\necho \"\\n\";\necho is_num_decagonal(4);\necho \"\\n\";\necho is_num_decagonal(5);\necho \"\\n\";\necho is_num_decagonal(6);\necho \"\\n\";\necho is_num_decagonal(7);\necho \"\\n\";\necho is_num_decagonal(8);\necho \"\\n\";\necho is_num_decagonal(9);\necho \"\\n\";\necho is_num_decagonal(10);\necho \"\\n\";\necho is_num_decagonal(11);\necho \"\\n\";\necho is_num_decagonal(12);\necho \"\\n\";\necho is_num_decagonal(13);\necho \"\\n\";\necho is_num_decagonal(14);\necho \"\\n\";\necho is_num_decagonal(15);\necho \"\\n\";\necho is_num_decagonal(16);\necho \"\\n\";\necho is_num_decagonal(17);\necho \"\\n\";\necho is_num_decagonal(18);\necho \"\\n\";\necho is_num_decagonal(19);\necho \"\\n\";\necho is_num_decagonal(20);\necho \"\\n\";\necho is_num_decagonal(21);\necho \"\\n\";\necho is_num_decagonal(22);\necho \"\\n\";\necho is_num_decagonal(23);\necho \"\\n\";\necho is_num_decagonal(24);\necho \"\\n\";\necho is_num_decagonal(25);\necho \"\\n\";\necho is_num_decagonal(26);\necho \"\\n\";\necho is_num_decagonal(27);\necho \"\\n\";\necho is_num_decagonal(28);\necho \"\\n\";\necho is_num_decagonal(29);\necho \"\\n\";\necho is_num_decagonal(30);\necho \"\\n\";\necho is_num_decagonal(31);\necho",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    return ($num_sqrt == floor($num_sqrt));\n}\n",
    "  $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n  return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "    $root = sqrt(1 + 4 * 2 * $n);\n    return $root == floor($root) && ($root % 4 == 1);\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $num == floor($num);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $num == floor($num);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    if ($num == floor($num)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $n_sqrt = sqrt(1 + 4 * 2 * $n);\n    return $n_sqrt == floor($n_sqrt);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == round($x);\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $num == floor($num);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "    $i = 1;\n    $num = 1;\n    while ($num < $n) {\n        $i++;\n        $num = $i * (3 * $i - 1) / 2;\n    }\n    if ($num == $n) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $n = (sqrt(1 + 40 * $n) - 1) / 4;\n    return is_int($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == round($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "  $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n  return $x == round($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return $x == (int)$x;\n}\n",
    "\t$num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $num == floor($num);\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $num == floor($num);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == round($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int) $x;\n}\n",
    "    $x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $num == floor($num);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == round($x);\n}\n",
    "  $num = 1;\n  $i = 1;\n  while ($num < $n) {\n    $i++;\n    $num = $i * (3 * $i - 1) / 2;\n  }\n  if ($num == $n) {\n    return true;\n  } else {\n    return false;\n  }\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) + 1) / 2;\n    return $x == round($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if (floor($num_sqrt) == $num_sqrt) {\n        return true;\n    }\n    return false;\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "\t$test = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $test == round($test);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "  $num = 0;\n  $i = 1;\n  while ($num < $n) {\n    $num = $i * (3 * $i - 1) / 2;\n    $i++;\n  }\n  if ($num == $n) {\n    return true;\n  }\n  return false;\n}\n\necho is_num_decagonal(10) . PHP_EOL;\necho is_num_decagonal(15) . PHP_EOL;\necho is_num_decagonal(22) . PHP_EOL;\necho is_num_decagonal(24) . PHP_EOL;\necho is_num_decagonal(26) . PHP_EOL;\necho is_num_decagonal(33) . PHP_EOL;\necho is_num_decagonal(35) . PHP_EOL;\necho is_num_decagonal(37) . PHP_EOL;\necho is_num_decagonal(42) . PHP_EOL;\necho is_num_decagonal(44) . PHP_EOL;\necho is_num_decagonal(46) . PHP_EOL;\necho is_num_decagonal(48) . PHP_EOL;\necho is_num_decagonal(51) . PHP_EOL;\necho is_num_decagonal(53) . PHP_EOL;\necho is_num_decagonal(55) . PHP_EOL;\necho is_num_decagonal(57) . PHP_EOL;\necho is_num_decagonal(62) . PHP_EOL;\necho is_num_decagonal(64) . PHP_EOL;\necho is_num_decagonal(66) . PHP_EOL;\necho is_num_decagonal(68) . PHP_EOL;\necho is_num_decagonal(70) . PHP_EOL;\necho is_num_decagonal(73) . PHP_EOL;\necho is_num_decagonal(75) . PHP_EOL;\necho is_num_decagonal(77) . PHP_EOL;\necho is_num_decagonal(82) . PHP_EOL;\necho is_num_decagonal(84",
    "\t$num = $n * (3 * $n - 2);\n\t$num = sqrt($num);\n\t$num = $num / 3;\n\tif (is_int($num)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) + 1) / 2;\n    return $num == floor($num);\n}\n",
    "\t$n = (sqrt(1 + 40 * $n) + 1) / 4;\n\treturn $n == floor($n);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        $num_sqrt = floor($num_sqrt);\n        $num_sqrt = $num_sqrt + 1;\n        $num_sqrt = $num_sqrt / 3;\n        if ($num_sqrt == floor($num_sqrt)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    if (is_int($num)) {\n        return true;\n    }\n    return false;\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == (int)$x;\n}\n",
    "    $test = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $test == floor($test);\n}\n",
    "    $num = 0;\n    $i = 1;\n    while ($num < $n) {\n        $num = $i * (3 * $i - 1) / 2;\n        $i++;\n    }\n    if ($num == $n) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    if (is_int($num)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if (is_int($num_sqrt) && $num_sqrt % 1 == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "\t$n = (int)$n;\n\t$x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n\treturn $x == (int)$x;\n}\n",
    "\t$n_sqrt = sqrt($n);\n\t$n_sqrt_int = intval($n_sqrt);\n\tif ($n_sqrt == $n_sqrt_int) {\n\t\t$n_sqrt_int_sqrt = sqrt($n_sqrt_int);\n\t\t$n_sqrt_int_sqrt_int = intval($n_sqrt_int_sqrt);\n\t\tif ($n_sqrt_int_sqrt == $n_sqrt_int_sqrt_int) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt(24 * $num + 1);\n    $num = $num + 1;\n    $num = $num / 6;\n    if (is_int($num)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == intval($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "\t$num = $n * (3 * $n - 2);\n\t$sqrt = sqrt($num);\n\tif ($sqrt == floor($sqrt)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "  $num = $n * (3 * $n - 2);\n  $num_sqrt = sqrt($num);\n  if ($num_sqrt == floor($num_sqrt)) {\n    return true;\n  }\n  return false;\n}\n",
    "\t$n = (int)$n;\n\t$x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n\treturn ($x == (int)$x);\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "  $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n  return $x == (int)$x;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        $num_sqrt = floor($num_sqrt);\n        $num_sqrt = $num_sqrt + 1;\n        $num_sqrt = $num_sqrt / 3;\n        if ($num_sqrt == floor($num_sqrt)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int) $x && $x % 2 != 0;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if (floor($num_sqrt) == $num_sqrt) {\n        return true;\n    }\n    return false;\n}\n",
    "\t$n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $n == floor($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "  $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n  return $x == round($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_int = intval($num_sqrt);\n    if ($num_sqrt == $num_sqrt_int) {\n        if ($num_sqrt_int % 6 == 5) {\n            return true;\n        }\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int) $x;\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "\t$num = $n * (3 * $n - 2);\n\t$num = sqrt(24 * $num + 1);\n\tif ($num == floor($num)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) + 1) / 2;\n    return $x == round($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return $x == (int) $x;\n}\n",
    "    $n = (int) $n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n    return $x == (int) $x;\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    return $num_sqrt == floor($num_sqrt);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_floor = floor($num_sqrt);\n    if ($num_sqrt == $num_sqrt_floor) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_floor = floor($num_sqrt);\n    if ($num_floor * ($num_floor + 1) == $num) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $num == floor($num);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    if ($num == floor($num)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "\t$n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $n == floor($n);\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    return $num;\n}\n\necho is_num_decagonal(6);",
    "\t$test = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $test == floor($test);\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "  $num = $n * (3 * $n - 2);\n  if ($num % 2 == 0) {\n    return true;\n  }\n  return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == round($x);\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $num == floor($num);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    return $num == floor($num);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $n == floor($n);\n}\n",
    "\t$x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    if ($num_sqrt == floor($num_sqrt)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    $num = $num + 1;\n    $num = $num / 3;\n    if ($num == floor($num)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_root = sqrt($num);\n    if ($num_root == floor($num_root) && $num_root % 6 == 5) {\n        return true;\n    }\n    return false;\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return $x == (int)$x;\n}\n",
    "    $x = (sqrt(1 + 4 * 3 * 2 * $n) + 1) / 6;\n    return $x == (int) $x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == (int) $x;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "\t$test = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn ($test == round($test)) ? true : false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "  $n = (sqrt(1 + 40 * $n) - 1) / 4;\n  return $n == floor($n);\n}\n",
    "    $n = (int)$n;\n    $x = (sqrt(1 + 4 * 3 * 2 * $n) - 1) / 6;\n    return $x == (int)$x;\n}\n",
    "\t$n = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n\treturn is_int($n);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_int = intval($num_sqrt);\n    if ($num_sqrt == $num_sqrt_int) {\n        return true;\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    return ($num == floor($num));\n}\n",
    "    $num = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $num == floor($num);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_floor = floor($num_sqrt);\n    if ($num_sqrt == $num_sqrt_floor) {\n        $num_sqrt_floor_div_3 = $num_sqrt_floor / 3;\n        $num_sqrt_floor_div_3_floor = floor($num_sqrt_floor_div_3);\n        if ($num_sqrt_floor_div_3 == $num_sqrt_floor_div_3_floor) {\n            return true;\n        }\n    }\n    return false;\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num_sqrt = sqrt($num);\n    $num_sqrt_floor = floor($num_sqrt);\n    if ($num_sqrt == $num_sqrt_floor) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    $num = $n * (3 * $n - 2);\n    return is_num_triangular($num);\n}\n",
    "    $num = $n * (3 * $n - 2);\n    $num = sqrt($num);\n    if (is_int($num)) {\n        return true;\n    }\n    return false;\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n",
    "    $x = (sqrt(1 + 4 * 2 * $n) - 1) / 2;\n    return $x == floor($x);\n}\n"
  ]
}