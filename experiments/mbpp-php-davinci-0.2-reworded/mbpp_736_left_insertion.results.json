{
  "name": "mbpp_736_left_insertion",
  "language": "php",
  "prompt": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\n$result = left_insertion($a, $x);\necho \"Left insertion point for $x is $result\";\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "Left insertion point for 3 is 2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphx3yio9y.php:25\nStack trace:\n#0 /tmp/tmphx3yio9y.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphx3yio9y.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 7;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "6\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplmm2lxoz.php:25\nStack trace:\n#0 /tmp/tmplmm2lxoz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmplmm2lxoz.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvkidmck0.php:25\nStack trace:\n#0 /tmp/tmpvkidmck0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvkidmck0.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph69uedeh.php:26\nStack trace:\n#0 /tmp/tmph69uedeh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmph69uedeh.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x > $a[$mid]) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9rmlo8pr.php:24\nStack trace:\n#0 /tmp/tmp9rmlo8pr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9rmlo8pr.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($x > $a[$m]) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x > $a[$m]) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4f_wu5_b.php:25\nStack trace:\n#0 /tmp/tmp4f_wu5_b.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp4f_wu5_b.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 7;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdoclrktp.php:25\nStack trace:\n#0 /tmp/tmpdoclrktp.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdoclrktp.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkh31x7z6.php:26\nStack trace:\n#0 /tmp/tmpkh31x7z6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkh31x7z6.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $i = 0;\n    while ($i < count($a) && $a[$i] < $x) {\n        $i++;\n    }\n    return $i;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x <= $a[$m]) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxvspad4s.php:25\nStack trace:\n#0 /tmp/tmpxvspad4s.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxvspad4s.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjkvvgy_.php:26\nStack trace:\n#0 /tmp/tmpxjkvvgy_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxjkvvgy_.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = intval(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $i = 0;\n    while ($i < count($a) && $a[$i] < $x) {\n        $i++;\n    }\n    return $i;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } elseif ($a[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6f84nib9.php:26\nStack trace:\n#0 /tmp/tmp6f84nib9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6f84nib9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    if ($x <= $a[0]) {\n        return 0;\n    }\n    if ($x > $a[$n - 1]) {\n        return $n;\n    }\n    $low = 0;\n    $high = $n - 1;\n    while ($low < $high) {\n        $mid = (int) (($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $high;\n}\n$a = array(1, 3, 5, 7, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1dnn1st9.php:28\nStack trace:\n#0 /tmp/tmp1dnn1st9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1dnn1st9.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcd4pt2tm.php:25\nStack trace:\n#0 /tmp/tmpcd4pt2tm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcd4pt2tm.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x > $a[$mid]) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\n$result = left_insertion($a, $x);\necho \"Left insertion point for $x is: $result\";\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "Left insertion point for 5 is: 4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmu00yo6a.php:27\nStack trace:\n#0 /tmp/tmpmu00yo6a.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmu00yo6a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left < $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol9xqn05.php:26\nStack trace:\n#0 /tmp/tmpol9xqn05.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpol9xqn05.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n - 1;\n    while ($l <= $h) {\n        $m = floor(($l + $h) / 2);\n        if ($x < $a[$m]) {\n            $h = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbpeuddj.php:25\nStack trace:\n#0 /tmp/tmpcbpeuddj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcbpeuddj.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n - 1;\n    while ($l <= $h) {\n        $mid = (int) (($l + $h) / 2);\n        if ($x < $a[$mid]) {\n            $h = $mid - 1;\n        } else {\n            $l = $mid + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 4, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left < $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 4, 5, 6);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeoj1qxb9.php:26\nStack trace:\n#0 /tmp/tmpeoj1qxb9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpeoj1qxb9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpidmzgvh_.php:25\nStack trace:\n#0 /tmp/tmpidmzgvh_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpidmzgvh_.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifq18v40.php:25\nStack trace:\n#0 /tmp/tmpifq18v40.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpifq18v40.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    if ($x <= $a[0]) {\n        return 0;\n    }\n    if ($x > $a[$n - 1]) {\n        return $n;\n    }\n    $low = 0;\n    $high = $n - 1;\n    while ($low < $high) {\n        $mid = (int) (($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $high;\n}\n$a = array(1, 3, 5, 7, 9, 11, 13, 15);\n$x = 4;\necho left_insertion($a, $x);\n\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    if ($x <= $a[0]) {\n        return 0;\n    }\n    if ($x > $a[$n - 1]) {\n        return $n;\n    }\n    $low = 0;\n    $high = $n - 1;\n    while ($low < $high) {\n        $mid = (int) (($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $high;\n}\n$a = array(1, 3, 5, 7, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho \"Left insertion point for $x is: \" . left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "Left insertion point for 5 is: 4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x < $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxhi04ii.php:24\nStack trace:\n#0 /tmp/tmppxhi04ii.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppxhi04ii.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x > $a[$mid]) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x > $a[$mid]) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\n$result = left_insertion($a, $x);\necho \"Left insertion point for $x is $result\\n\";\n$x = 3;\n$result = left_insertion($a, $x);\necho \"Left insertion point for $x is $result\\n\";\n$x = 11;\n$result = left_insertion($a, $x);\necho \"Left insertion point for $x is $result\\n\";\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "Left insertion point for 5 is 3\nLeft insertion point for 3 is 2\nLeft insertion point for 11 is 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7fhcgxk.php:31\nStack trace:\n#0 /tmp/tmpf7fhcgxk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpf7fhcgxk.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmudvwsrt.php:26\nStack trace:\n#0 /tmp/tmpmudvwsrt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmudvwsrt.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left < $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8oegkl0g.php:26\nStack trace:\n#0 /tmp/tmp8oegkl0g.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8oegkl0g.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt52yjzx2.php:28\nStack trace:\n#0 /tmp/tmpt52yjzx2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpt52yjzx2.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x < $a[$mid]) {\n            $high = $mid - 1;\n        } elseif ($x > $a[$mid]) {\n            $low = $mid + 1;\n        } else {\n            return $mid;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi31vhvn8.php:26\nStack trace:\n#0 /tmp/tmpi31vhvn8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpi31vhvn8.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n - 1;\n    while ($l <= $h) {\n        $m = floor(($l + $h) / 2);\n        if ($x < $a[$m]) {\n            $h = $m - 1;\n        } else if ($x > $a[$m]) {\n            $l = $m + 1;\n        } else {\n            return $m;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgkwmoue.php:27\nStack trace:\n#0 /tmp/tmpmgkwmoue.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmgkwmoue.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n - 1;\n    while ($l <= $h) {\n        $mid = floor(($l + $h) / 2);\n        if ($x < $a[$mid]) {\n            $h = $mid - 1;\n        } else {\n            $l = $mid + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1wgl0f1.php:25\nStack trace:\n#0 /tmp/tmpx1wgl0f1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpx1wgl0f1.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n;\n    while ($l < $h) {\n        $mid = (int)(($l + $h) / 2);\n        if ($x <= $a[$mid]) {\n            $h = $mid;\n        } else {\n            $l = $mid + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 4, 5, 6);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n - 1;\n    while ($l <= $h) {\n        $m = floor(($l + $h) / 2);\n        if ($x == $a[$m]) {\n            return $m;\n        }\n        if ($x < $a[$m]) {\n            $h = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\n$result = left_insertion($a, $x);\necho \"Left insertion point for $x is: $result\";\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "Left insertion point for 5 is: 4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsiznczbg.php:30\nStack trace:\n#0 /tmp/tmpsiznczbg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpsiznczbg.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } elseif ($a[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqgkmg8f.php:27\nStack trace:\n#0 /tmp/tmpqqgkmg8f.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpqqgkmg8f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } elseif ($a[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $a[$mid]) {\n            return $mid;\n        } elseif ($x < $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1kqzmzy.php:27\nStack trace:\n#0 /tmp/tmpq1kqzmzy.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpq1kqzmzy.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    if ($x <= $a[0]) {\n        return 0;\n    } elseif ($x > $a[$n - 1]) {\n        return $n;\n    } else {\n        $low = 0;\n        $high = $n - 1;\n        while ($low < $high) {\n            $mid = (int)(($low + $high) / 2);\n            if ($x <= $a[$mid]) {\n                $high = $mid;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n        return $high;\n    }\n}\n\n$a = array(1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99);\n$x = 50;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "25",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x < $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppnzmr4vm.php:24\nStack trace:\n#0 /tmp/tmppnzmr4vm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppnzmr4vm.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $i = 0;\n    while ($i < count($a) && $a[$i] < $x) {\n        $i++;\n    }\n    return $i;\n}\n$a = array(1, 3, 5, 7, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg985_f90.php:24\nStack trace:\n#0 /tmp/tmpg985_f90.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg985_f90.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcd4pt2tm.php:25\nStack trace:\n#0 /tmp/tmpcd4pt2tm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcd4pt2tm.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg985_f90.php:24\nStack trace:\n#0 /tmp/tmpg985_f90.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg985_f90.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcd4pt2tm.php:25\nStack trace:\n#0 /tmp/tmpcd4pt2tm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcd4pt2tm.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $l = 0;\n    $r = count($a) - 1;\n    while ($l < $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_a7_01c.php:24\nStack trace:\n#0 /tmp/tmpk_a7_01c.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpk_a7_01c.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x > $a[$m]) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4f_wu5_b.php:25\nStack trace:\n#0 /tmp/tmp4f_wu5_b.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp4f_wu5_b.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\n\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxc4m20s.php:27\nStack trace:\n#0 /tmp/tmpdxc4m20s.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpdxc4m20s.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n;\n    while ($l < $h) {\n        $mid = (int)(($l + $h) / 2);\n        if ($x <= $a[$mid]) {\n            $h = $mid;\n        } else {\n            $l = $mid + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 4, 5, 6);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x > $a[$mid]) {\n            $low = $mid + 1;\n        } elseif ($x < $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            return $mid;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9rrcs9s4.php:26\nStack trace:\n#0 /tmp/tmp9rrcs9s4.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9rrcs9s4.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x > $a[$mid]) {\n            $low = $mid + 1;\n        } elseif ($x < $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            return $mid;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp18b33eau.php:26\nStack trace:\n#0 /tmp/tmp18b33eau.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp18b33eau.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdkx4m8ld.php:24\nStack trace:\n#0 /tmp/tmpdkx4m8ld.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdkx4m8ld.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x > $a[$mid]) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiiywk6yb.php:25\nStack trace:\n#0 /tmp/tmpiiywk6yb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiiywk6yb.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x > $a[$mid]) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31xmrpa8.php:26\nStack trace:\n#0 /tmp/tmp31xmrpa8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp31xmrpa8.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    if ($x <= $a[0]) {\n        return 0;\n    }\n    if ($x > $a[$n - 1]) {\n        return $n;\n    }\n    $low = 0;\n    $high = $n - 1;\n    while ($low < $high) {\n        $mid = (int) (($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $high;\n}\n\n$a = array(1, 3, 5, 7, 9, 11);\n$x = 4;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 11;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "9\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8l6ozpxf.php:26\nStack trace:\n#0 /tmp/tmp8l6ozpxf.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8l6ozpxf.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n - 1;\n    while ($l <= $h) {\n        $m = (int)(($l + $h) / 2);\n        if ($x < $a[$m]) {\n            $h = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x > $a[$mid]) {\n            $low = $mid + 1;\n        } elseif ($x < $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            return $mid;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvkidmck0.php:25\nStack trace:\n#0 /tmp/tmpvkidmck0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvkidmck0.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x > $a[$mid]) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9rmlo8pr.php:24\nStack trace:\n#0 /tmp/tmp9rmlo8pr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9rmlo8pr.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0j4gi88o.php:28\nStack trace:\n#0 /tmp/tmp0j4gi88o.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0j4gi88o.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($x <= $a[$m]) {\n            $r = $m;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left < $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp25xpxsu.php:26\nStack trace:\n#0 /tmp/tmpp25xpxsu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpp25xpxsu.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] >= $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 4, 5, 6);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpekztqvff.php:26\nStack trace:\n#0 /tmp/tmpekztqvff.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpekztqvff.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp35qa5qn7.php:25\nStack trace:\n#0 /tmp/tmp35qa5qn7.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp35qa5qn7.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvkidmck0.php:25\nStack trace:\n#0 /tmp/tmpvkidmck0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvkidmck0.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmudvwsrt.php:26\nStack trace:\n#0 /tmp/tmpmudvwsrt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmudvwsrt.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcd4pt2tm.php:25\nStack trace:\n#0 /tmp/tmpcd4pt2tm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcd4pt2tm.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    if ($x <= $a[0]) {\n        return 0;\n    }\n    if ($x > $a[$n - 1]) {\n        return $n;\n    }\n    $low = 0;\n    $high = $n - 1;\n    while ($low < $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $high;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 9, 10);\n$x = 8;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxyeswak.php:26\nStack trace:\n#0 /tmp/tmppxyeswak.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppxyeswak.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0jps_vj.php:27\nStack trace:\n#0 /tmp/tmps0jps_vj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps0jps_vj.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x <= $a[$m]) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8z6qpaji.php:26\nStack trace:\n#0 /tmp/tmp8z6qpaji.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8z6qpaji.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x == $a[$m]) {\n            return $m;\n        } elseif ($x < $a[$m]) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsvpbfifk.php:27\nStack trace:\n#0 /tmp/tmpsvpbfifk.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpsvpbfifk.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt52yjzx2.php:28\nStack trace:\n#0 /tmp/tmpt52yjzx2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpt52yjzx2.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($x > $a[$m]) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x < $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvde2jl6c.php:25\nStack trace:\n#0 /tmp/tmpvde2jl6c.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvde2jl6c.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4orp1kww.php:24\nStack trace:\n#0 /tmp/tmp4orp1kww.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4orp1kww.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] >= $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpue0yp2_9.php:25\nStack trace:\n#0 /tmp/tmpue0yp2_9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpue0yp2_9.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n - 1;\n    while ($l <= $h) {\n        $mid = floor(($l + $h) / 2);\n        if ($x < $a[$mid]) {\n            $h = $mid - 1;\n        } else {\n            $l = $mid + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1wgl0f1.php:25\nStack trace:\n#0 /tmp/tmpx1wgl0f1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpx1wgl0f1.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $i = 0;\n    while ($i < count($a) && $a[$i] < $x) {\n        $i++;\n    }\n    return $i;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpon6x09ts.php:27\nStack trace:\n#0 /tmp/tmpon6x09ts.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpon6x09ts.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho \"Left insertion point for $x is: \" . left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "Left insertion point for 3 is: 2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyfdp00rc.php:25\nStack trace:\n#0 /tmp/tmpyfdp00rc.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpyfdp00rc.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifq18v40.php:25\nStack trace:\n#0 /tmp/tmpifq18v40.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpifq18v40.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvkidmck0.php:25\nStack trace:\n#0 /tmp/tmpvkidmck0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvkidmck0.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcd4pt2tm.php:25\nStack trace:\n#0 /tmp/tmpcd4pt2tm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcd4pt2tm.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcd4pt2tm.php:25\nStack trace:\n#0 /tmp/tmpcd4pt2tm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcd4pt2tm.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $i = 0;\n    while ($i < count($a)) {\n        if ($a[$i] >= $x) {\n            return $i;\n        }\n        $i++;\n    }\n    return $i;\n}\n$a = array(1, 2, 4, 5);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x < $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\n$result = left_insertion($a, $x);\necho \"Left insertion point for $x is $result\";\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "Left insertion point for 5 is 5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm7g5b3kj.php:25\nStack trace:\n#0 /tmp/tmpm7g5b3kj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpm7g5b3kj.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x <= $a[$m]) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvt2b4vqr.php:25\nStack trace:\n#0 /tmp/tmpvt2b4vqr.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvt2b4vqr.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x < $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxhi04ii.php:24\nStack trace:\n#0 /tmp/tmppxhi04ii.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppxhi04ii.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmudvwsrt.php:26\nStack trace:\n#0 /tmp/tmpmudvwsrt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmudvwsrt.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } elseif ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurqaskah.php:28\nStack trace:\n#0 /tmp/tmpurqaskah.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpurqaskah.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } elseif ($a[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho \"Original array :\\n\";\necho implode(', ', $a);\necho \"\\n\";\necho \"Left insertion point for $x :\\n\";\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "Original array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nLeft insertion point for 5 :\n4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvi96gf63.php:31\nStack trace:\n#0 /tmp/tmpvi96gf63.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvi96gf63.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $i = 0;\n    while ($i < count($a) && $a[$i] < $x) {\n        $i++;\n    }\n    return $i;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x > $a[$mid]) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n;\n    while ($l < $h) {\n        $mid = (int) (($l + $h) / 2);\n        if ($x <= $a[$mid]) {\n            $h = $mid;\n        } else {\n            $l = $mid + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x < $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\n$result = left_insertion($a, $x);\necho \"Left insertion point for $x is $result\";\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "Left insertion point for 5 is 5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm7g5b3kj.php:25\nStack trace:\n#0 /tmp/tmpm7g5b3kj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpm7g5b3kj.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $a[$mid]) {\n            return $mid;\n        } else if ($x < $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9rtgtzk.php:26\nStack trace:\n#0 /tmp/tmpb9rtgtzk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpb9rtgtzk.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x > $a[$mid]) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzw8qxwzo.php:24\nStack trace:\n#0 /tmp/tmpzw8qxwzo.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpzw8qxwzo.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa63eud3z.php:25\nStack trace:\n#0 /tmp/tmpa63eud3z.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpa63eud3z.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n - 1;\n    while ($l <= $h) {\n        $m = (int) (($l + $h) / 2);\n        if ($x < $a[$m]) {\n            $h = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_zilzten.php:24\nStack trace:\n#0 /tmp/tmp_zilzten.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_zilzten.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbpfdfujj.php:28\nStack trace:\n#0 /tmp/tmpbpfdfujj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbpfdfujj.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } elseif ($a[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9d28_rj.php:27\nStack trace:\n#0 /tmp/tmpf9d28_rj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpf9d28_rj.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($x <= $a[$m]) {\n            $r = $m;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho \"Left insertion point for $x is: \" . left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "Left insertion point for 5 is: 4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x < $a[$mid]) {\n            $high = $mid - 1;\n        } elseif ($x > $a[$mid]) {\n            $low = $mid + 1;\n        } else {\n            return $mid;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdar_7o1y.php:26\nStack trace:\n#0 /tmp/tmpdar_7o1y.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdar_7o1y.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n;\n    while ($l < $h) {\n        $mid = (int) (($l + $h) / 2);\n        if ($x <= $a[$mid]) {\n            $h = $mid;\n        } else {\n            $l = $mid + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $i = 0;\n    while ($i < $n) {\n        if ($a[$i] > $x) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}\n$a = array(1, 2, 4, 6, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcd4pt2tm.php:25\nStack trace:\n#0 /tmp/tmpcd4pt2tm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcd4pt2tm.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x > $a[$mid]) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiiywk6yb.php:25\nStack trace:\n#0 /tmp/tmpiiywk6yb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiiywk6yb.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x > $a[$mid]) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ahgaaxf.php:24\nStack trace:\n#0 /tmp/tmp_ahgaaxf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_ahgaaxf.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x <= $a[$m]) {\n            $r = $m;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8huu0yuh.php:26\nStack trace:\n#0 /tmp/tmp8huu0yuh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8huu0yuh.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x == $a[$mid]) {\n            return $mid;\n        } elseif ($x < $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        }\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcwahu42k.php:29\nStack trace:\n#0 /tmp/tmpcwahu42k.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcwahu42k.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $i = 0;\n    $j = count($a);\n    while ($i < $j) {\n        $m = floor(($i + $j) / 2);\n        if ($a[$m] < $x) {\n            $i = $m + 1;\n        } else {\n            $j = $m;\n        }\n    }\n    return $i;\n}\n\n$a = array(1, 2, 4, 5, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvsprz30i.php:25\nStack trace:\n#0 /tmp/tmpvsprz30i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvsprz30i.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x < $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp22ky39ym.php:26\nStack trace:\n#0 /tmp/tmp22ky39ym.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp22ky39ym.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    if ($x <= $a[0]) {\n        return 0;\n    }\n    if ($x > $a[$n - 1]) {\n        return $n;\n    }\n    $low = 0;\n    $high = $n - 1;\n    while ($low < $high) {\n        $mid = (int) (($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $high;\n}\n$a = array(1, 3, 5, 7, 9, 11, 13, 15);\n$x = 4;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $i = 0;\n    $j = $n;\n    while ($i < $j) {\n        $k = (int) (($i + $j) / 2);\n        if ($x <= $a[$k]) {\n            $j = $k;\n        } else {\n            $i = $k + 1;\n        }\n    }\n    return $i;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } elseif ($a[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2ko_6fb.php:26\nStack trace:\n#0 /tmp/tmpd2ko_6fb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpd2ko_6fb.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzqo7cor.php:25\nStack trace:\n#0 /tmp/tmphzqo7cor.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphzqo7cor.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n - 1;\n    while ($l <= $h) {\n        $mid = (int)(($l + $h) / 2);\n        if ($x <= $a[$mid]) {\n            $h = $mid - 1;\n        } else {\n            $l = $mid + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    if ($x <= $a[0]) {\n        return 0;\n    }\n    if ($x > $a[$n - 1]) {\n        return $n;\n    }\n    $low = 0;\n    $high = $n - 1;\n    while ($low < $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $high;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $i = 0;\n    $j = $n;\n    while ($i < $j) {\n        $k = ($i + $j) / 2;\n        if ($x <= $a[$k]) {\n            $j = $k;\n        } else {\n            $i = $k + 1;\n        }\n    }\n    return $i;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmpwcptr0hn.php on line 9\n\nDeprecated: Implicit conversion from float 4.25 to int loses precision in /tmp/tmpwcptr0hn.php on line 9\n\nDeprecated: Implicit conversion from float 3.875 to int loses precision in /tmp/tmpwcptr0hn.php on line 9\n4.875\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpwcptr0hn.php on line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwcptr0hn.php:26\nStack trace:\n#0 /tmp/tmpwcptr0hn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwcptr0hn.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprj5lopfg.php:27\nStack trace:\n#0 /tmp/tmprj5lopfg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprj5lopfg.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7p9id852.php:26\nStack trace:\n#0 /tmp/tmp7p9id852.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7p9id852.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $l = 0;\n    $r = count($a) - 1;\n    while ($l < $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x <= $a[$m]) {\n            $r = $m;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3eqcyfxp.php:25\nStack trace:\n#0 /tmp/tmp3eqcyfxp.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp3eqcyfxp.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($x < $a[$m]) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n;\n    while ($l < $h) {\n        $mid = (int) (($l + $h) / 2);\n        if ($x <= $a[$mid]) {\n            $h = $mid;\n        } else {\n            $l = $mid + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = $left + ($right - $left) / 2;\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpgax05r52.php on line 9\n\nDeprecated: Implicit conversion from float 2.25 to int loses precision in /tmp/tmpgax05r52.php on line 9\n\nDeprecated: Implicit conversion from float 1.125 to int loses precision in /tmp/tmpgax05r52.php on line 9\n\nDeprecated: Implicit conversion from float 2.1875 to int loses precision in /tmp/tmpgax05r52.php on line 9\n\nDeprecated: Implicit conversion from float 2.15625 to int loses precision in /tmp/tmpgax05r52.php on line 9\n\nDeprecated: Implicit conversion from float 2.140625 to int loses precision in /tmp/tmpgax05r52.php on line 9\n\nDeprecated: Implicit conversion from float 2.1328125 to int loses precision in /tmp/tmpgax05r52.php on line 9\n\nDeprecated: Implicit conversion from float 2.12890625 to int loses precision in /tmp/tmpgax05r52.php on line 9\n\nDeprecated: Implicit conversion from float 2.126953125 to int loses precision in /tmp/tmpgax05r52.php on line 9\n\nDeprecated: Implicit conversion from float",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6oaly4a6.php:25\nStack trace:\n#0 /tmp/tmp6oaly4a6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6oaly4a6.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x > $a[$mid]) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiiywk6yb.php:25\nStack trace:\n#0 /tmp/tmpiiywk6yb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiiywk6yb.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg3kuvmc5.php:25\nStack trace:\n#0 /tmp/tmpg3kuvmc5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpg3kuvmc5.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcd4pt2tm.php:25\nStack trace:\n#0 /tmp/tmpcd4pt2tm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcd4pt2tm.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcy886n2c.php:25\nStack trace:\n#0 /tmp/tmpcy886n2c.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcy886n2c.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho \"Left insertion point for $x is \" . left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "Left insertion point for 5 is 4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovee5goq.php:26\nStack trace:\n#0 /tmp/tmpovee5goq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpovee5goq.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbpfdfujj.php:28\nStack trace:\n#0 /tmp/tmpbpfdfujj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbpfdfujj.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x <= $a[$m]) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvt2b4vqr.php:25\nStack trace:\n#0 /tmp/tmpvt2b4vqr.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvt2b4vqr.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $i = 0;\n    $j = $n;\n    while ($i < $j) {\n        $k = ($i + $j) / 2;\n        if ($x <= $a[$k]) {\n            $j = $k;\n        } else {\n            $i = $k + 1;\n        }\n    }\n    return $i;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmpaacdmnpc.php on line 9\n\nDeprecated: Implicit conversion from float 4.25 to int loses precision in /tmp/tmpaacdmnpc.php on line 9\n\nDeprecated: Implicit conversion from float 3.875 to int loses precision in /tmp/tmpaacdmnpc.php on line 9\n4.875\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpaacdmnpc.php on line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaacdmnpc.php:25\nStack trace:\n#0 /tmp/tmpaacdmnpc.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpaacdmnpc.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x <= $a[$m]) {\n            $r = $m;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_9zs31k.php:25\nStack trace:\n#0 /tmp/tmpl_9zs31k.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpl_9zs31k.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    if ($x <= $a[0]) {\n        return 0;\n    }\n    if ($x > $a[$n - 1]) {\n        return $n;\n    }\n    $low = 0;\n    $high = $n - 1;\n    while ($low < $high) {\n        $mid = (int) (($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $high;\n}\n$a = array(1, 3, 5, 7, 9, 11);\n$x = 4;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60b49pqh.php:26\nStack trace:\n#0 /tmp/tmp60b49pqh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp60b49pqh.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    if ($x <= $a[0]) {\n        return 0;\n    }\n    if ($x > $a[$n - 1]) {\n        return $n;\n    }\n    $low = 0;\n    $high = $n - 1;\n    while ($low < $high) {\n        $mid = (int) (($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $high;\n}\n\n$a = array(1, 2, 4, 5, 6);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x < $a[$m]) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppo6gjvr6.php:25\nStack trace:\n#0 /tmp/tmppo6gjvr6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppo6gjvr6.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x < $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxhi04ii.php:24\nStack trace:\n#0 /tmp/tmppxhi04ii.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppxhi04ii.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $l = 0;\n    $r = count($a) - 1;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($x <= $a[$m]) {\n            $r = $m;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytesuij2.php:25\nStack trace:\n#0 /tmp/tmpytesuij2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpytesuij2.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdh014tz.php:25\nStack trace:\n#0 /tmp/tmpfdh014tz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpfdh014tz.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 4, 5, 6);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx36uellg.php:26\nStack trace:\n#0 /tmp/tmpx36uellg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpx36uellg.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvkidmck0.php:25\nStack trace:\n#0 /tmp/tmpvkidmck0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvkidmck0.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 4, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_99vtnog.php:26\nStack trace:\n#0 /tmp/tmp_99vtnog.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_99vtnog.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvkidmck0.php:25\nStack trace:\n#0 /tmp/tmpvkidmck0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvkidmck0.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x > $a[$mid]) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9rmlo8pr.php:24\nStack trace:\n#0 /tmp/tmp9rmlo8pr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9rmlo8pr.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $i = 0;\n    while ($i < count($a) && $a[$i] < $x) {\n        $i++;\n    }\n    return $i;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xv0ad4w.php:24\nStack trace:\n#0 /tmp/tmp9xv0ad4w.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9xv0ad4w.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    if ($x <= $a[0]) {\n        return 0;\n    }\n    if ($x > $a[$n - 1]) {\n        return $n;\n    }\n    $low = 0;\n    $high = $n - 1;\n    while ($low < $high) {\n        $mid = (int) (($low + $high) / 2);\n        if ($x <= $a[$mid]) {\n            $high = $mid;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $high;\n}\n$a = array(1, 3, 5, 7, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n;\n    while ($left < $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x < $a[$mid]) {\n            $high = $mid - 1;\n        } elseif ($x > $a[$mid]) {\n            $low = $mid + 1;\n        } else {\n            return $mid;\n        }\n    }\n    return $low;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaokm1990.php:26\nStack trace:\n#0 /tmp/tmpaokm1990.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpaokm1990.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x > $a[$mid]) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n\n$a = array(1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left < $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9glv9tqx.php:25\nStack trace:\n#0 /tmp/tmp9glv9tqx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9glv9tqx.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj92ii4t8.php:26\nStack trace:\n#0 /tmp/tmpj92ii4t8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpj92ii4t8.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x < $a[$m]) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 4, 5, 6);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbcjnc1sc.php:25\nStack trace:\n#0 /tmp/tmpbcjnc1sc.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbcjnc1sc.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] >= $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvf2lad0c.php:24\nStack trace:\n#0 /tmp/tmpvf2lad0c.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvf2lad0c.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x <= $a[$m]) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8z6qpaji.php:26\nStack trace:\n#0 /tmp/tmp8z6qpaji.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8z6qpaji.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n - 1;\n    while ($l <= $h) {\n        $m = floor(($l + $h) / 2);\n        if ($x <= $a[$m]) {\n            $h = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jmyoyyn.php:26\nStack trace:\n#0 /tmp/tmp_jmyoyyn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_jmyoyyn.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifq18v40.php:25\nStack trace:\n#0 /tmp/tmpifq18v40.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpifq18v40.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $i = 0;\n    while ($i < $n) {\n        if ($a[$i] > $x) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $h = $n - 1;\n    while ($l <= $h) {\n        $m = floor(($l + $h) / 2);\n        if ($x < $a[$m]) {\n            $h = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbpeuddj.php:25\nStack trace:\n#0 /tmp/tmpcbpeuddj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcbpeuddj.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $left = 0;\n    $right = $n - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x <= $a[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n$a = array(1, 2, 4, 5, 7, 8, 9);\n$x = 6;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuvw69p3r.php:25\nStack trace:\n#0 /tmp/tmpuvw69p3r.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpuvw69p3r.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmudvwsrt.php:26\nStack trace:\n#0 /tmp/tmpmudvwsrt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmudvwsrt.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x <= $a[$m]) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho left_insertion($a, $x);\nfunction candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124225,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8z6qpaji.php:26\nStack trace:\n#0 /tmp/tmp8z6qpaji.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8z6qpaji.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}