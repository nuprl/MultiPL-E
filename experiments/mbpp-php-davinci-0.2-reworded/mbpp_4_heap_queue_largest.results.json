{
  "name": "mbpp_4_heap_queue_largest",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n  $heap = new SplMaxHeap();\n  foreach ($nums as $num) {\n    $heap->insert($num);\n  }\n  $largest = [];\n  for ($i = 0; $i < $n; $i++) {\n    $largest[] = $heap->extract();\n  }\n  return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\n\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\n$largest = heap_queue_largest($nums, $n);\nprint_r($largest);\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 20\n    [1] => 19\n    [2] => 18\n    [3] => 17\n    [4] => 16\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 5));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n  $heap = new SplMaxHeap();\n  foreach ($nums as $num) {\n    $heap->insert($num);\n    if ($heap->count() > $n) {\n      $heap->extract();\n    }\n  }\n  $result = [];\n  while ($heap->count()) {\n    $result[] = $heap->extract();\n  }\n  return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzn123nld.php:26\nStack trace:\n#0 /tmp/tmpzn123nld.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzn123nld.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\n$result = heap_queue_largest($nums, $n);\nprint_r($result);\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 3));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n  $heap = new SplMaxHeap();\n  foreach ($nums as $num) {\n    $heap->insert($num);\n  }\n  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $heap->extract();\n  }\n  return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 5));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1,2,3,4,5,6,7,8,9,10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 3));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n  $heap = new SplMaxHeap();\n  foreach ($nums as $num) {\n    $heap->insert($num);\n  }\n  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $heap->extract();\n  }\n  return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 4;\nvar_dump(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "array(4) {\n  [0]=>\n  int(10)\n  [1]=>\n  int(9)\n  [2]=>\n  int(8)\n  [3]=>\n  int(7)\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $queue = new SplPriorityQueue();\n    foreach ($nums as $num) {\n        $queue->insert($num, $num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $queue->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n        if ($heap->count() > $n) {\n            $heap->extract();\n        }\n    }\n    return iterator_to_array($heap);\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 3));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [2] => 3\n    [1] => 2\n    [0] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7a99haa4.php:22\nStack trace:\n#0 /tmp/tmp7a99haa4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp7a99haa4.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    if (count($nums) < $n) {\n        return $nums;\n    }\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 3));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    while ($n--) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\nvar_dump(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "array(3) {\n  [0]=>\n  int(10)\n  [1]=>\n  int(9)\n  [2]=>\n  int(8)\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n  $heap = new SplMaxHeap();\n  foreach ($nums as $num) {\n    $heap->insert($num);\n  }\n  $largest = [];\n  for ($i = 0; $i < $n; $i++) {\n    $largest[] = $heap->extract();\n  }\n  return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\n\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 3));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\necho implode(', ', heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "10, 9, 8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 3));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n  $heap = new SplMaxHeap();\n  foreach ($nums as $num) {\n    $heap->insert($num);\n  }\n  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $heap->extract();\n  }\n  return $result;\n}\n\n$nums = [1,2,3,4,5,6,7,8,9,10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 3));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar_dump(heap_queue_largest($nums, 3));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "array(3) {\n  [0]=>\n  int(10)\n  [1]=>\n  int(9)\n  [2]=>\n  int(8)\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\n$result = heap_queue_largest($nums, $n);\nprint_r($result);\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $queue = new SplPriorityQueue();\n    foreach ($nums as $num) {\n        $queue->insert($num, $num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 4;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n    [4] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(heap_queue_largest($nums, 3));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$largest = heap_queue_largest($nums, $n);\nprint_r($largest);\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n        if ($heap->count() > $n) {\n            $heap->extract();\n        }\n    }\n    return iterator_to_array($heap);\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 5;\nprint_r(heap_queue_largest($nums, $n));\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [4] => 5\n    [3] => 4\n    [2] => 3\n    [1] => 2\n    [0] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpex82le3p.php:23\nStack trace:\n#0 /tmp/tmpex82le3p.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpex82le3p.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    if ($n > count($nums)) {\n        return false;\n    }\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\n$result = heap_queue_largest($nums, $n);\nprint_r($result);\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\nprint_r(heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510498,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    $heap = new SplMaxHeap();\n    foreach($nums as $num) {\n        $heap->insert($num);\n    }\n    $result = [];\n    for($i = 0; $i < $n; $i++) {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n    if ($n > count($nums)) {\n        return false;\n    }\n    $heap = new SplMaxHeap();\n    foreach ($nums as $num) {\n        $heap->insert($num);\n    }\n    $largest = [];\n    for ($i = 0; $i < $n; $i++) {\n        $largest[] = $heap->extract();\n    }\n    return $largest;\n}\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$n = 3;\necho implode(', ', heap_queue_largest($nums, $n));\nfunction candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123701,
      "stdout": "10, 9, 8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}