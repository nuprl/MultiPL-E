{
  "name": "mbpp_611_max_of_nth",
  "language": "php",
  "prompt": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\n\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4),\n    array(5, 6, 7, 8),\n    array(9, 10, 11, 12),\n    array(13, 14, 15, 16),\n);\n\necho max_of_nth($test_list, 2);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "15",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 2);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 16],\n];\n\necho max_of_nth($test_list, 2);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "15",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n\t$max = 0;\n\tforeach ($test_list as $row) {\n\t\tif ($row[$N] > $max) {\n\t\t\t$max = $row[$N];\n\t\t}\n\t}\n\treturn $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(6, 7, 8, 9, 10),\n    array(11, 12, 13, 14, 15),\n    array(16, 17, 18, 19, 20),\n    array(21, 22, 23, 24, 25)\n);\n\necho max_of_nth($test_list, 4);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "25",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $key => $value) {\n        if ($value[$N] > $max) {\n            $max = $value[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n\t$max = 0;\n\tforeach ($test_list as $row) {\n\t\tif ($row[$N] > $max) {\n\t\t\t$max = $row[$N];\n\t\t}\n\t}\n\treturn $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $key => $value) {\n        if ($value[$N] > $max) {\n            $max = $value[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\n\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max_value = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max_value) {\n            $max_value = $row[$N];\n        }\n    }\n    return $max_value;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        $max = max($max, $row[$N]);\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n\t$max = $test_list[0][$N];\n\tforeach ($test_list as $row) {\n\t\tif ($row[$N] > $max) {\n\t\t\t$max = $row[$N];\n\t\t}\n\t}\n\treturn $max;\n}\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(2, 3, 4, 5, 6),\n    array(3, 4, 5, 6, 7),\n    array(4, 5, 6, 7, 8),\n    array(5, 6, 7, 8, 9),\n);\n\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "7",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach($test_list as $row) {\n        $max = max($max, $row[$N]);\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1,2,3,4,5], [2,3,4,5,6], [3,4,5,6,7]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(10, 11, 12),\n);\n\necho max_of_nth($test_list, 0);\necho \"\\n\";\necho max_of_nth($test_list, 1);\necho \"\\n\";\necho max_of_nth($test_list, 2);\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "10\n11\n12\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $key => $value) {\n        if ($value[$N] > $max) {\n            $max = $value[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4),\n    array(5, 6, 7, 8),\n    array(9, 10, 11, 12),\n    array(13, 14, 15, 16),\n);\n\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "15",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1,2,3], [4,5,6], [7,8,9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max_value = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max_value) {\n            $max_value = $row[$N];\n        }\n    }\n    return $max_value;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(2, 3, 4, 5, 6),\n    array(3, 4, 5, 6, 7),\n    array(4, 5, 6, 7, 8),\n    array(5, 6, 7, 8, 9)\n);\n\necho max_of_nth($test_list, 3);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(10, 11, 12)\n);\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "11",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 0);\necho max_of_nth($test_list, 1);\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "789",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25]\n];\n\necho max_of_nth($test_list, 2);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "23",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(6, 7, 8, 9, 10),\n    array(11, 12, 13, 14, 15),\n    array(16, 17, 18, 19, 20),\n    array(21, 22, 23, 24, 25),\n);\n\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "23",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 16],\n];\n\necho max_of_nth($test_list, 2);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "15",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1,2,3], [4,5,6], [7,8,9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n\t$max = $test_list[0][$N];\n\tforeach ($test_list as $row) {\n\t\tif ($row[$N] > $max) {\n\t\t\t$max = $row[$N];\n\t\t}\n\t}\n\treturn $max;\n}\n\n$test_list = array(\n\tarray(1, 2, 3, 4),\n\tarray(5, 6, 7, 8),\n\tarray(9, 10, 11, 12),\n\tarray(13, 14, 15, 16),\n\tarray(17, 18, 19, 20),\n\tarray(21, 22, 23, 24),\n\tarray(25, 26, 27, 28),\n\tarray(29, 30, 31, 32),\n\tarray(33, 34, 35, 36),\n\tarray(37, 38, 39, 40),\n\tarray(41, 42, 43, 44),\n\tarray(45, 46, 47, 48),\n\tarray(49, 50, 51, 52),\n\tarray(53, 54, 55, 56),\n\tarray(57, 58, 59, 60),\n\tarray(61, 62, 63, 64),\n\tarray(65, 66, 67, 68),\n\tarray(69, 70, 71, 72),\n\tarray(73, 74, 75, 76),\n\tarray(77, 78, 79, 80),\n\tarray(81, 82, 83, 84),\n\tarray(85, 86, 87, 88),\n\tarray(89, 90, 91, 92),\n\tarray(93, 94, 95, 96),\n\tarray(97, 98, 99, 100)\n);\n\necho max_of_nth($test_list, 3);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "100",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n$test_list = [[1,2,3], [4,5,6], [7,8,9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\n\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(10, 11, 12)\n);\n\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "12",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1,2,3], [4,5,6], [7,8,9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n\t$max = 0;\n\tforeach ($test_list as $row) {\n\t\tif ($row[$N] > $max) {\n\t\t\t$max = $row[$N];\n\t\t}\n\t}\n\treturn $max;\n}\n\n$test_list = array(\n\tarray(1, 2, 3, 4, 5),\n\tarray(5, 4, 3, 2, 1),\n\tarray(1, 3, 5, 2, 4),\n\tarray(4, 2, 1, 3, 5),\n\tarray(5, 1, 2, 3, 4),\n);\n\necho max_of_nth($test_list, 3);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\n\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n\t$max = 0;\n\tforeach ($test_list as $row) {\n\t\tif ($row[$N] > $max) {\n\t\t\t$max = $row[$N];\n\t\t}\n\t}\n\treturn $max;\n}\n\n$test_list = [[1,2,3], [4,5,6], [7,8,9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]];\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "15",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(10, 11, 12),\n);\n\necho max_of_nth($test_list, 0);\necho max_of_nth($test_list, 1);\necho max_of_nth($test_list, 2);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "101112",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 2); // 9\necho max_of_nth($test_list, 1); // 8\necho max_of_nth($test_list, 0); // 7\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "987",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 16],\n];\n\necho max_of_nth($test_list, 1);\necho \"\\n\";\necho max_of_nth($test_list, 2);\necho \"\\n\";\necho max_of_nth($test_list, 3);\necho \"\\n\";\necho max_of_nth($test_list, 4);\necho \"\\n\";\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "14\n15\n16\n\nWarning: Undefined array key 4 in /tmp/tmp0c020fjh.php on line 6\n\nWarning: Undefined array key 4 in /tmp/tmp0c020fjh.php on line 6\n\nWarning: Undefined array key 4 in /tmp/tmp0c020fjh.php on line 6\n\nWarning: Undefined array key 4 in /tmp/tmp0c020fjh.php on line 6\n0\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1,2,3], [4,5,6], [7,8,9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1,2,3],[4,5,6],[7,8,9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1,2,3], [4,5,6], [7,8,9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($max < $test_list[$i][$N]) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 0);\necho max_of_nth($test_list, 1);\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "789",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(2, 3, 4, 5, 6),\n    array(3, 4, 5, 6, 7),\n    array(4, 5, 6, 7, 8),\n    array(5, 6, 7, 8, 9),\n);\n\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "7",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n\t$max = $test_list[0][$N];\n\tforeach ($test_list as $key => $value) {\n\t\tif ($value[$N] > $max) {\n\t\t\t$max = $value[$N];\n\t\t}\n\t}\n\treturn $max;\n}\n\n$test_list = [\n\t[1, 2, 3, 4, 5],\n\t[6, 7, 8, 9, 10],\n\t[11, 12, 13, 14, 15],\n\t[16, 17, 18, 19, 20],\n\t[21, 22, 23, 24, 25]\n];\n\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "23",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1,2,3], [4,5,6], [7,8,9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $key => $value) {\n        if ($value[$N] > $max) {\n            $max = $value[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(6, 7, 8, 9, 10),\n    array(11, 12, 13, 14, 15),\n    array(16, 17, 18, 19, 20),\n    array(21, 22, 23, 24, 25),\n);\n\necho max_of_nth($test_list, 2);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "23",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1,2,3], [4,5,6], [7,8,9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1,2,3,4,5], [2,3,4,5,6], [3,4,5,6,7]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 2);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i=1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1,2,3], [4,5,6], [7,8,9]];\n$N = 2;\n\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 0; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1,2,3], [4,5,6], [7,8,9]];\n$N = 2;\necho max_of_nth($test_list, $N);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n  $max = 0;\n  foreach ($test_list as $list) {\n    if ($list[$N] > $max) {\n      $max = $list[$N];\n    }\n  }\n  return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\n\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nprint_r(max_of_nth($test_list, 1));\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(10, 11, 12),\n);\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "11",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nprint_r(max_of_nth($test_list, 1));\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n\t$max = $test_list[0][$N];\n\tfor ($i = 0; $i < count($test_list); $i++) {\n\t\tif ($test_list[$i][$N] > $max) {\n\t\t\t$max = $test_list[$i][$N];\n\t\t}\n\t}\n\treturn $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(10, 11, 12),\n);\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "11",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $list) {\n        if ($list[$N] > $max) {\n            $max = $list[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(2, 3, 4, 5, 6),\n    array(3, 4, 5, 6, 7),\n    array(4, 5, 6, 7, 8),\n    array(5, 6, 7, 8, 9),\n);\n\necho max_of_nth($test_list, 2);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "7",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\n\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = 0;\n    foreach ($test_list as $row) {\n        if ($row[$N] > $max) {\n            $max = $row[$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 2;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510367,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n  $max = 0;\n  foreach ($test_list as $row) {\n    if ($row[$N] > $max) {\n      $max = $row[$N];\n    }\n  }\n  return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$N = 1;\necho max_of_nth($test_list, $N);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123460,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n    $max = $test_list[0][$N];\n    for ($i = 1; $i < count($test_list); $i++) {\n        if ($test_list[$i][$N] > $max) {\n            $max = $test_list[$i][$N];\n        }\n    }\n    return $max;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho max_of_nth($test_list, 1);\nfunction candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123459,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}