{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "php",
  "prompt": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i-1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i-1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i-1][$j], $dp[$i][$j-1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n-1][$n-1] / ($n * 2 - 1);\n}\n\n$cost = [[1,2,3], [4,5,6], [7,8,9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $m = count($cost[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $m; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $m; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$m - 1] / ($n + $m - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $rows = count($cost);\n    $cols = count($cost[0]);\n    $dp = array_fill(0, $rows, array_fill(0, $cols, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $rows; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $cols; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $rows; $i++) {\n        for ($j = 1; $j < $cols; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$rows - 1][$cols - 1] / ($rows + $cols - 1);\n}\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $m = count($cost[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $m; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $m; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$m - 1] / ($n + $m - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "3.2222222222222\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy3c0wjt6.php:31\nStack trace:\n#0 /tmp/tmpy3c0wjt6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpy3c0wjt6.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = [];\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 2, 1, 3],\n    [2, 8, 7, 9],\n    [6, 3, 5, 1],\n    [4, 7, 2, 8]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.5714285714286",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = [];\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "3.2222222222222\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps59nqjsu.php:26\nStack trace:\n#0 /tmp/tmps59nqjsu.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps59nqjsu.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i-1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i-1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i-1][$j], $dp[$i][$j-1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n-1][$n-1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $rows = count($cost);\n    $cols = count($cost[0]);\n    $dp = array_fill(0, $rows, array_fill(0, $cols, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $rows; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $cols; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $rows; $i++) {\n        for ($j = 1; $j < $cols; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$rows - 1][$cols - 1] / ($rows + $cols - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 1], [1, 1, 1]];\necho maxAverageOfPath($cost) . PHP_EOL;\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "2.4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = [];\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = [];\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [4, 2, 1, 3],\n    [2, 8, 7, 5],\n    [9, 4, 6, 1],\n    [2, 7, 9, 4]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "2.5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpke4ffss_.php:31\nStack trace:\n#0 /tmp/tmpke4ffss_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpke4ffss_.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for($i = 1; $i < $n; $i++) {\n        for($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "3.2222222222222\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_z9cjck5.php:30\nStack trace:\n#0 /tmp/tmp_z9cjck5.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_z9cjck5.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $m = count($cost[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $m; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $m; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$m - 1] / ($n + $m - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i-1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i-1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i-1][$j], $dp[$i][$j-1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n-1][$n-1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = [];\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $rows = count($cost);\n    $cols = count($cost[0]);\n    $dp = array_fill(0, $rows, array_fill(0, $cols, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $rows; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $cols; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $rows; $i++) {\n        for ($j = 1; $j < $cols; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$rows - 1][$cols - 1] / ($rows + $cols - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3],\n         [4, 5, 6],\n         [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "3.2222222222222\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1zaxin0p.php:32\nStack trace:\n#0 /tmp/tmp1zaxin0p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1zaxin0p.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $m = count($cost[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i-1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $m; $j++) {\n        $dp[0][$j] = $dp[0][$j-1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $m; $j++) {\n            $dp[$i][$j] = max($dp[$i-1][$j], $dp[$i][$j-1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n-1][$m-1] / ($n + $m - 1);\n}\n\n$cost = [\n    [4, 2, 1, 5, 3],\n    [2, 8, 10, 9, 7],\n    [14, 7, 6, 11, 8],\n    [15, 9, 11, 18, 12],\n    [21, 14, 13, 20, 19]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "13.555555555556",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $m = count($cost[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $m; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $m; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$m - 1] / ($n + $m - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = [];\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [1, 2, 3],\n    [6, 5, 4],\n    [7, 3, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "2.8888888888889\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwrh1bdyl.php:32\nStack trace:\n#0 /tmp/tmpwrh1bdyl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwrh1bdyl.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $rows = count($cost);\n    $cols = count($cost[0]);\n    $dp = array_fill(0, $rows, array_fill(0, $cols, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $rows; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $cols; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $rows; $i++) {\n        for ($j = 1; $j < $cols; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$rows - 1][$cols - 1] / ($rows + $cols - 1);\n}\n\n$cost = [[1, 2, 3], [6, 5, 4], [7, 3, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $row = count($cost);\n    $col = count($cost[0]);\n    $dp = array_fill(0, $row, array_fill(0, $col, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $row; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $col; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $row; $i++) {\n        for ($j = 1; $j < $col; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$row - 1][$col - 1] / ($row + $col - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 1], [1, 1, 1]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "2.4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = [];\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 2, 1, 3],\n    [2, 8, 1, 2],\n    [1, 1, 10, 1],\n    [3, 2, 1, 4]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "4.2857142857143",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $n; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "3.2222222222222\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5745flv.php:28\nStack trace:\n#0 /tmp/tmpj5745flv.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpj5745flv.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i-1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i-1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i-1][$j], $dp[$i][$j-1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n-1][$n-1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 1], [1, 1, 1]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "2.4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $rows = count($cost);\n    $cols = count($cost[0]);\n    $dp = array_fill(0, $rows, array_fill(0, $cols, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $rows; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $cols; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $rows; $i++) {\n        for ($j = 1; $j < $cols; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$rows - 1][$cols - 1] / ($rows + $cols - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost) . PHP_EOL;\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "3.2222222222222\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxiwcslz.php:30\nStack trace:\n#0 /tmp/tmpvxiwcslz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvxiwcslz.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $m = count($cost[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $m; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $m; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$m - 1] / ($n + $m - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 1], [1, 1, 1]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "2.4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = $cost;\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] += $dp[0][$i - 1];\n        $dp[$i][0] += $dp[$i - 1][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] += max($dp[$i - 1][$j], $dp[$i][$j - 1]);\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $rows = count($cost);\n    $cols = count($cost[0]);\n    $dp = [];\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $rows; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $cols; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $rows; $i++) {\n        for ($j = 1; $j < $cols; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$rows - 1][$cols - 1] / ($rows + $cols - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $rows = count($cost);\n    $cols = count($cost[0]);\n    $dp = array_fill(0, $rows, array_fill(0, $cols, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $rows; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $cols; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $rows; $i++) {\n        for ($j = 1; $j < $cols; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$rows - 1][$cols - 1] / ($rows + $cols - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost) . PHP_EOL;\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $m = count($cost[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i-1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $m; $j++) {\n        $dp[0][$j] = $dp[0][$j-1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $m; $j++) {\n            $dp[$i][$j] = max($dp[$i-1][$j], $dp[$i][$j-1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n-1][$m-1] / ($n + $m - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $m = count($cost[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $m; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $m; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$m - 1] / ($n + $m - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp[$i][$j] = $cost[$i][$j];\n            } elseif ($i == 0) {\n                $dp[$i][$j] = $dp[$i][$j-1] + $cost[$i][$j];\n            } elseif ($j == 0) {\n                $dp[$i][$j] = $dp[$i-1][$j] + $cost[$i][$j];\n            } else {\n                $dp[$i][$j] = max($dp[$i-1][$j], $dp[$i][$j-1]) + $cost[$i][$j];\n            }\n        }\n    }\n    return $dp[$n-1][$n-1] / ($n * $n);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "3.2222222222222\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuqki1aa3.php:33\nStack trace:\n#0 /tmp/tmpuqki1aa3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpuqki1aa3.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = [];\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = [];\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [6, 5, 4],\n    [7, 3, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $rows = count($cost);\n    $cols = count($cost[0]);\n    $dp = array_fill(0, $rows, array_fill(0, $cols, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $rows; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $cols; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $rows; $i++) {\n        for ($j = 1; $j < $cols; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$rows - 1][$cols - 1] / ($rows + $cols - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $m = count($cost[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $m; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $m; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$m - 1] / ($n + $m - 1);\n}\n\n$cost = [\n    [4, 3, 2, 1],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 16]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "10.857142857143",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "3.2222222222222\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps59nqjsu.php:26\nStack trace:\n#0 /tmp/tmps59nqjsu.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps59nqjsu.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "3.2222222222222\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcvr1zj7.php:30\nStack trace:\n#0 /tmp/tmpjcvr1zj7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjcvr1zj7.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $rows = count($cost);\n    $cols = count($cost[0]);\n    $dp = array_fill(0, $rows, array_fill(0, $cols, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $rows; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $cols; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $rows; $i++) {\n        for ($j = 1; $j < $cols; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$rows - 1][$cols - 1] / ($rows + $cols - 1);\n}\n\n$cost = [\n    [4, 3, 2, 5],\n    [3, 2, 4, 3],\n    [2, 4, 5, 1],\n    [5, 3, 1, 2]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = [];\n    for ($i = 0; $i < $n; $i++) {\n        $dp[$i] = [];\n        for ($j = 0; $j < $n; $j++) {\n            $dp[$i][$j] = $cost[$i][$j];\n        }\n    }\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] += $dp[0][$i - 1];\n        $dp[$i][0] += $dp[$i - 1][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] += max($dp[$i - 1][$j], $dp[$i][$j - 1]);\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "3.2222222222222\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfr0mg6eu.php:35\nStack trace:\n#0 /tmp/tmpfr0mg6eu.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfr0mg6eu.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 2, 1, 6, 5],\n    [8, 7, 3, 1, 2],\n    [1, 9, 9, 3, 4],\n    [1, 7, 2, 8, 6],\n    [2, 4, 6, 5, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "7",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [6, 5, 4],\n    [7, 3, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [[1, 2, 3], [4, 5, 1], [1, 1, 1]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "1.3333333333333\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjhngly9u.php:26\nStack trace:\n#0 /tmp/tmpjhngly9u.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpjhngly9u.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $rows = count($cost);\n    $cols = count($cost[0]);\n    $dp = array_fill(0, $rows, array_fill(0, $cols, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $rows; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $cols; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $rows; $i++) {\n        for ($j = 1; $j < $cols; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    $path = [];\n    $i = $rows - 1;\n    $j = $cols - 1;\n    while ($i >= 0 && $j >= 0) {\n        $path[] = $cost[$i][$j];\n        if ($i == 0) {\n            $j--;\n        } else if ($j == 0) {\n            $i--;\n        } else {\n            if ($dp[$i - 1][$j] > $dp[$i][$j - 1]) {\n                $i--;\n            } else {\n                $j--;\n            }\n        }\n    }\n    return array_sum($path) / count($path);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = [];\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $m = count($cost[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $m; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $m; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$m - 1] / ($n + $m - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for($i = 1; $i < $n; $i++) {\n        for($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "3.2222222222222\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1hwkhjqs.php:32\nStack trace:\n#0 /tmp/tmp1hwkhjqs.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1hwkhjqs.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "3.2222222222222\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcvr1zj7.php:30\nStack trace:\n#0 /tmp/tmpjcvr1zj7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjcvr1zj7.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp[$i][$j] = $cost[$i][$j];\n            } elseif ($i == 0) {\n                $dp[$i][$j] = $dp[$i][$j - 1] + $cost[$i][$j];\n            } elseif ($j == 0) {\n                $dp[$i][$j] = $dp[$i - 1][$j] + $cost[$i][$j];\n            } else {\n                $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n            }\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "3.2222222222222\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgvws5ey.php:33\nStack trace:\n#0 /tmp/tmpcgvws5ey.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpcgvws5ey.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [6, 5, 4],\n    [7, 3, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp[$i][$j] = $cost[$i][$j];\n            } else if ($i == 0) {\n                $dp[$i][$j] = $dp[$i][$j - 1] + $cost[$i][$j];\n            } else if ($j == 0) {\n                $dp[$i][$j] = $dp[$i - 1][$j] + $cost[$i][$j];\n            } else {\n                $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n            }\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $m = count($cost[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i-1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $m; $j++) {\n        $dp[0][$j] = $dp[0][$j-1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $m; $j++) {\n            $dp[$i][$j] = max($dp[$i-1][$j], $dp[$i][$j-1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n-1][$m-1] / ($n + $m - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\necho maxAverageOfPath($cost);\necho PHP_EOL;\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [4, 2, 1, 5, 6],\n    [1, 3, 2, 1, 1],\n    [4, 1, 1, 3, 1],\n    [5, 5, 5, 5, 5],\n    [1, 1, 1, 1, 1]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "1.4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi2hnp3j4.php:32\nStack trace:\n#0 /tmp/tmpi2hnp3j4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpi2hnp3j4.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "3.2222222222222\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcvr1zj7.php:30\nStack trace:\n#0 /tmp/tmpjcvr1zj7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjcvr1zj7.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $m = count($cost[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($j = 1; $j < $m; $j++) {\n        $dp[0][$j] = $dp[0][$j - 1] + $cost[0][$j];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $m; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$m - 1] / ($n + $m - 1);\n}\n$cost = [\n    [1, 2, 3],\n    [6, 5, 4],\n    [7, 3, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp[$i][$j] = $cost[$i][$j];\n            } else if ($i == 0) {\n                $dp[$i][$j] = $dp[$i][$j - 1] + $cost[$i][$j];\n            } else if ($j == 0) {\n                $dp[$i][$j] = $dp[$i - 1][$j] + $cost[$i][$j];\n            } else {\n                $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n            }\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "3.2222222222222\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps7r306ff.php:33\nStack trace:\n#0 /tmp/tmps7r306ff.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps7r306ff.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 1], [1, 1, 1]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "2.4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\n\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "5.8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n    $n = count($cost);\n    $dp = array_fill(0, $n, array_fill(0, $n, 0));\n    $dp[0][0] = $cost[0][0];\n    for ($i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost[$i][0];\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}\n\n$cost = [\n    [4, 7, 8, 6, 4],\n    [6, 7, 3, 9, 2],\n    [3, 8, 1, 2, 4],\n    [7, 1, 7, 3, 7],\n    [2, 9, 8, 9, 3]\n];\necho maxAverageOfPath($cost);\nfunction candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509919,
      "stdout": "6.2222222222222",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}