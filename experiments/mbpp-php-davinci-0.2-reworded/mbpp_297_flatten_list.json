{
  "name": "mbpp_297_flatten_list",
  "language": "php",
  "prompt": "<?php\n// Write a function to flatten a given nested array structure.\nfunction flatten_list($list1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6, 7], 8], 9, 10];\n$list2 = flatten_list($list1);\nprint_r($list2);\n",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6, [7, 8]]], 9, 10];\nprint_r(flatten_list($list1));",
    "    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, array(6))));\nprint_r(flatten_list($list1));",
    "\t$list2 = array();\n\tforeach ($list1 as $item) {\n\t\tif (is_array($item)) {\n\t\t\t$list2 = array_merge($list2, flatten_list($item));\n\t\t} else {\n\t\t\tarray_push($list2, $item);\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, array(2, 3), array(array(4, 5, 6)));\n$list2 = flatten_list($list1);\nprint_r($list2);",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));",
    "\t$list2 = array();\n\tforeach ($list1 as $value) {\n\t\tif (is_array($value)) {\n\t\t\t$list2 = array_merge($list2, flatten_list($value));\n\t\t} else {\n\t\t\t$list2[] = $value;\n\t\t}\n\t}\n\treturn $list2;\n}\n\n$list1 = array(1, 2, array(3, 4), array(array(5, 6), 7));\nprint_r(flatten_list($list1));\n",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6, 7], 8], 9, 10];\nprint_r(flatten_list($list1));\n",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6, 7], 8], 9, 10];\nprint_r(flatten_list($list1));",
    "    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, array(3, 4), 5, array(array(6, 7), 8));\nprint_r(flatten_list($list1));",
    "    $list2 = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6, [7, 8]]]];\n$list2 = flatten_list($list1);\nprint_r($list2);",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6], 7], 8, [9, [10, 11]]];\nprint_r(flatten_list($list1));",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6, 7], 8], 9, 10];\nprint_r(flatten_list($list1));\n",
    "    $result = array();\n    foreach ($list1 as $key => $value) {\n        if (is_array($value)) {\n            $result = array_merge($result, flatten_list($value));\n        } else {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$list2 = array(1, 2, array(3, 4, array(5, 6, array(7, 8, array(9, 10)))));\n$list3 = array(1, 2, array(3, 4, array(5, 6, array(7, 8, array(9, 10, array(11, 12, array(13, 14, array(15, 16, array(17, 18, array(19, 20))))))))));\n\necho \"List 1: \";\nprint_r($list1);\necho \"<br>\";\necho \"Flatten List 1: \";\nprint_r(flatten_list($list1));\necho \"<br><br>\";\n\necho \"List 2: \";\nprint_r($list2);\necho \"<br>\";\necho \"Flatten List 2: \";\nprint_r(flatten_list($list2));\necho \"<br><br>\";\n\necho \"List 3: \";\nprint_r($list3);\necho \"<br>\";\necho \"Flatten List 3: \";\nprint_r(flatten_list($list3));\necho \"<br><br>\";",
    "    $result = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = array(1, 2, 3, 4, array(5, 6, 7, array(8, 9, 10)));\n$list2 = array(1, 2, 3, 4, array(5, 6, 7, array(8, 9, 10, array(11, 12, 13))));\n\nprint_r(flatten_list($list1));\nprint_r(flatten_list($list2));",
    "    $list2 = [];\n    foreach ($list1 as $value) {\n        if (is_array($value)) {\n            $list2 = array_merge($list2, flatten_list($value));\n        } else {\n            $list2[] = $value;\n        }\n    }\n    return $list2;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6, 7], 8], 9, 10];\n$list2 = flatten_list($list1);\nprint_r($list2);\n",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 5], [[4, 3], 2]];\nprint_r(flatten_list($list1));",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6, 7], 8], 9, 10];\nprint_r(flatten_list($list1));\n",
    "    $list2 = array();\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $list2 = array_merge($list2, flatten_list($item));\n        } else {\n            $list2[] = $item;\n        }\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, array(3, 4, array(5, 6, 7, array(8, 9))));\n$list2 = flatten_list($list1);\nprint_r($list2);\n",
    "    $result = [];\n    foreach ($list1 as $item) {\n        if (is_array($item)) {\n            $result = array_merge($result, flatten_list($item));\n        } else {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n$list1 = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]];\nprint_r(flatten_list($list1));\n"
  ]
}