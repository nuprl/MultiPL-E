{
  "name": "mbpp_627_find_First_Missing",
  "language": "php",
  "prompt": "<?php\n// Write a phpthon function to find the smallest missing number from a sorted array of natural numbers.\nfunction find_First_Missing($array) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return find_First_Missing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 1, 2, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1, 2, 6, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 8, 9)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $n = count($array);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($array[$mid] != $mid + 1) {\n            if ($mid == 0 || $array[$mid - 1] == $mid)\n                return $mid + 1;\n            $high = $mid - 1;\n        } else\n            $low = $mid + 1;\n    }\n    if ($low > $high)\n        return $array[0] == 1 ? $n + 1 : 1;\n}\n$array = array(1, 2, 3, 4, 5, 6, 7, 10);\n$missing = find_First_Missing($array);\necho \"The smallest positive missing number is \" . $missing;",
    "    $n = count($array);\n    $i = 0;\n    while ($i < $n) {\n        if ($array[$i] != $i + 1) {\n            return $i + 1;\n        }\n        $i++;\n    }\n    return $n + 1;\n}\n$array = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$missing_number = find_First_Missing($array);\necho $missing_number;",
    "    $n = count($array);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($array[$mid] != $mid + 1) {\n            if ($mid == 0 || $array[$mid - 1] == $mid) {\n                return $mid + 1;\n            }\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    if ($low > $high) {\n        return $array[0] == 1 ? $n + 1 : 1;\n    }\n}\n\n$array = array(1, 2, 3, 4, 5, 6, 7, 8, 10);\necho find_First_Missing($array);",
    "    $n = count($array);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($array[$mid] != $mid + 1 && $array[$mid - 1] == $mid) {\n            return $mid + 1;\n        } elseif ($array[$mid] != $mid + 1) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return -1;\n}\n$array = array(1, 2, 3, 4, 5, 6, 7, 8, 10);\necho find_First_Missing($array);",
    "    $n = count($array);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($array[$mid] != $mid + 1) {\n            if ($mid == 0 || $array[$mid - 1] == $mid)\n                return $mid + 1;\n            $high = $mid - 1;\n        } else\n            $low = $mid + 1;\n    }\n    if ($low > $high)\n        return $array[0] == 1 ? $n + 1 : 1;\n}\n\n$array = array(1, 2, 3, 4, 5, 6, 7, 8, 10);\n$missing = find_First_Missing($array);\necho $missing;",
    "    $n = count($array);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($array[$mid] != $mid + 1) {\n            if ($mid == 0 || $array[$mid - 1] == $mid) {\n                return $mid + 1;\n            }\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    if ($low > $high) {\n        return $array[0] == 1 ? $n + 1 : 1;\n    }\n}\n\n$array = array(1, 2, 3, 4, 5, 6, 7, 8, 10);\necho find_First_Missing($array);",
    "    $n = count($array);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($array[$mid] != $mid + 1) {\n            if ($mid == 0 || $array[$mid - 1] == $mid) {\n                return $mid + 1;\n            }\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    if ($low > $high) {\n        return $low + 1;\n    }\n}\n$array = array(0, 1, 2, 3, 4, 5, 6, 7, 10);\n$missing = find_First_Missing($array);\necho $missing;",
    "    $n = sizeof($array);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($array[$mid] != $mid + 1) {\n            if ($mid == 0 || $array[$mid - 1] == $mid) {\n                return $mid + 1;\n            }\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    if ($low > $high) {\n        return $low + 1;\n    }\n}\n$array = array(1, 2, 3, 4, 5, 6, 7, 8, 10);\n$missing = find_First_Missing($array);\necho \"First Missing number is : \" . $missing;",
    "    $n = count($array);\n    $i = 0;\n    while ($i < $n) {\n        if ($array[$i] != $i + 1) {\n            return $i + 1;\n        }\n        $i++;\n    }\n    return $n + 1;\n}\n\n$array = array(1, 2, 3, 4, 5, 6, 7, 8, 10);\n$result = find_First_Missing($array);\necho $result;",
    "    $n = sizeof($array);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($array[$mid] != $mid + 1) {\n            if ($mid == 0 || $array[$mid - 1] == $mid)\n                return $mid + 1;\n            $high = $mid - 1;\n        } else\n            $low = $mid + 1;\n    }\n    if ($low > $high)\n        return $array[0] == 1 ? $n + 1 : 1;\n}\n$array = array(1, 2, 3, 4, 5, 6, 7, 10);\n$missing = find_First_Missing($array);\necho \"The smallest positive missing number is \" . $missing;",
    "    $n = sizeof($array);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($array[$mid] != $mid + 1) {\n            if ($mid == 0 || $array[$mid - 1] == $mid)\n                return $mid + 1;\n            $high = $mid - 1;\n        } else\n            $low = $mid + 1;\n    }\n    if ($low > $high)\n        return $array[0] == 1 ? $n + 1 : 1;\n}\n$array = array(0, 1, 2, 3, 4, 5, 6, 7, 10);\n$missing = find_First_Missing($array);\necho \"The smallest positive missing number is \" . $missing;",
    "    $n = count($array);\n    for ($i = 0; $i < $n; $i++) {\n        if ($array[$i] != $i) {\n            return $i;\n        }\n    }\n    return $n;\n}\n$array = array(0, 1, 2, 3, 4, 5, 6, 7, 10);\necho find_First_Missing($array);",
    "    $n = count($array);\n    $i = 0;\n    while($i < $n) {\n        if($array[$i] != $i) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}\n\n$array = array(0, 1, 2, 3, 4, 5, 6, 7, 10);\n$result = find_First_Missing($array);\necho $result;",
    "    $n = count($array);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($array[$mid] != $mid + 1) {\n            if ($mid == 0 || $array[$mid - 1] == $mid) {\n                return $mid + 1;\n            }\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    if ($low > $high) {\n        return $array[0] == 1 ? $n + 1 : 1;\n    }\n}\n\n$array = [0, 1, 2, 3, 4, 5, 6, 7, 10];\necho find_First_Missing($array);",
    "    $n = count($array);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($array[$mid] != $mid + 1) {\n            if ($mid == 0 || $array[$mid - 1] == $mid) {\n                return $mid + 1;\n            }\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    if ($low > $high) {\n        return $low + 1;\n    }\n}\n$array = array(1, 2, 3, 4, 5, 6, 7, 8, 10);\necho find_First_Missing($array);",
    "    $i = 0;\n    $n = count($array);\n    while ($i < $n) {\n        if ($array[$i] != $i) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}\n$array = array(0, 1, 2, 3, 4, 5, 6, 7, 10);\necho find_First_Missing($array);",
    "    $n = count($array);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($array[$mid] != $mid + 1) {\n            if ($mid == 0 || $array[$mid - 1] == $mid)\n                return $mid + 1;\n            $high = $mid - 1;\n        } else\n            $low = $mid + 1;\n    }\n    if ($low > $high)\n        return $low + 1;\n}\n$array = array(0, 1, 2, 3, 4, 5, 6, 7, 10);\n$missing = find_First_Missing($array);\necho \"The smallest positive missing number is \" . $missing;",
    "    $n = count($array);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($array[$mid] != $mid + 1) {\n            if ($mid == 0 || $array[$mid - 1] == $mid)\n                return $mid + 1;\n            $high = $mid - 1;\n        } else\n            $low = $mid + 1;\n    }\n    if ($low > $high)\n        return $array[0] == 1 ? $n + 1 : 1;\n}\n\n$array = array(1, 2, 3, 4, 5, 6, 7, 10);\n$missing = find_First_Missing($array);\necho $missing;",
    "    $n = count($array);\n    for ($i = 0; $i < $n; $i++) {\n        if ($array[$i] != $i) {\n            return $i;\n        }\n    }\n    return $n;\n}\n$array = array(0, 1, 2, 3, 4, 5, 6, 7, 10);\n$missing = find_First_Missing($array);\necho $missing;",
    "    $n = count($array);\n    $i = 0;\n    while ($i < $n) {\n        if ($array[$i] != $i) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}\n\n$array = array(0, 1, 2, 3, 4, 5, 6, 7, 10);\necho find_First_Missing($array);"
  ]
}