{
  "name": "mbpp_576_is_Sub_Array",
  "language": "php",
  "prompt": "<?php\n// Write a phpthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array($A, $B) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return is_Sub_Array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 5), array(1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1), array(1, 2, 1)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2, 2), array(2, 2, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    while ($i < $n && $j < $m) {\n        if ($A[$i] < $B[$j]) {\n            $i++;\n        } else if ($A[$i] == $B[$j]) {\n            $i++;\n            $j++;\n        } else if ($A[$i] > $B[$j]) {\n            return false;\n        }\n    }\n    if ($j < $m) {\n        return false;\n    }\n    return true;\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4, 6);\nif (is_Sub_Array($A, $B)) {\n    echo \"B is a subarray of A\";\n} else {\n    echo \"B is not a subarray of A\";\n}",
    "    $len_A = count($A);\n    $len_B = count($B);\n    if ($len_A > $len_B) {\n        return false;\n    }\n    for ($i = 0; $i < $len_A; $i++) {\n        if ($A[$i] != $B[$i]) {\n            return false;\n        }\n    }\n    return true;\n}\n$A = array(1, 2, 3, 4, 5);\n$B = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$C = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nif (is_Sub_Array($A, $B)) {\n    echo \"A is sub array of B\";\n} else {\n    echo \"A is not sub array of B\";\n}\necho \"<br>\";\nif (is_Sub_Array($A, $C)) {\n    echo \"A is sub array of C\";\n} else {\n    echo \"A is not sub array of C\";\n}",
    "    $i = 0;\n    $j = 0;\n    while ($i < count($A) && $j < count($B)) {\n        if ($A[$i] == $B[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    if ($j == count($B)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 3, 4);\nif (is_Sub_Array($A, $B)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "    $len_A = count($A);\n    $len_B = count($B);\n    $i = 0;\n    $j = 0;\n    while ($i < $len_A && $j < $len_B) {\n        if ($A[$i] == $B[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    if ($j == $len_B) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4, 5);\n$C = array(2, 3, 4);\n\nif (is_Sub_Array($A, $B)) {\n    echo \"B is a subarray of A\";\n} else {\n    echo \"B is not a subarray of A\";\n}\n\necho \"<br>\";\n\nif (is_Sub_Array($A, $C)) {\n    echo \"C is a subarray of A\";\n} else {\n    echo \"C is not a subarray of A\";\n}",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $m) {\n            return 0;\n        }\n    }\n    return 1;\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4);\nif (is_Sub_Array($A, $B)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "    $len = count($A);\n    $len2 = count($B);\n    $i = 0;\n    $j = 0;\n    while ($i < $len && $j < $len2) {\n        if ($A[$i] == $B[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    if ($j == $len2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4, 5);\n$C = array(2, 3, 4);\necho is_Sub_Array($A, $B) ? \"Yes\" : \"No\";\necho \"\\n\";\necho is_Sub_Array($A, $C) ? \"Yes\" : \"No\";",
    "    $lenA = count($A);\n    $lenB = count($B);\n    $i = 0;\n    $j = 0;\n    while ($i < $lenA && $j < $lenB) {\n        if ($A[$i] == $B[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    if ($j == $lenB) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$A = array(1, 2, 3, 4, 5);\n$B = array(2, 3, 4);\n$C = array(2, 3, 4, 5);\n$D = array(2, 3, 4, 5, 6);\n$E = array(2, 3, 4, 5, 6, 7);\n\nif (is_Sub_Array($A, $B)) {\n    echo \"B is sub array of A\";\n} else {\n    echo \"B is not sub array of A\";\n}\necho \"<br>\";\nif (is_Sub_Array($A, $C)) {\n    echo \"C is sub array of A\";\n} else {\n    echo \"C is not sub array of A\";\n}\necho \"<br>\";\nif (is_Sub_Array($A, $D)) {\n    echo \"D is sub array of A\";\n} else {\n    echo \"D is not sub array of A\";\n}\necho \"<br>\";\nif (is_Sub_Array($A, $E)) {\n    echo \"E is sub array of A\";\n} else {\n    echo \"E is not sub array of A\";\n}",
    "    $i = 0;\n    $j = 0;\n    while ($i < count($A) && $j < count($B)) {\n        if ($A[$i] == $B[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    if ($j == count($B)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n$A = array(1, 2, 3, 4, 5);\n$B = array(2, 3, 4);\nif (is_Sub_Array($A, $B)) {\n    echo \"B is a sub array of A\";\n} else {\n    echo \"B is not a sub array of A\";\n}",
    "    $j = 0;\n    for ($i = 0; $i < count($A); $i++) {\n        if ($A[$i] == $B[$j]) {\n            $j++;\n            if ($j == count($B)) {\n                return true;\n            }\n        } else {\n            $j = 0;\n        }\n    }\n    return false;\n}\n\n$A = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$B = array(2, 4, 6, 8);\n$C = array(2, 4, 6, 8, 10);\n\nif (is_Sub_Array($A, $B)) {\n    echo \"B is a sub array of A\";\n} else {\n    echo \"B is not a sub array of A\";\n}\n\necho \"<br>\";\n\nif (is_Sub_Array($A, $C)) {\n    echo \"C is a sub array of A\";\n} else {\n    echo \"C is not a sub array of A\";\n}",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $m) {\n            return 0;\n        }\n    }\n    return 1;\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4, 5);\nif (is_Sub_Array($A, $B)) {\n    echo \"Array B is a subarray of Array A\";\n} else {\n    echo \"Array B is not a subarray of Array A\";\n}",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    while ($i < $n && $j < $m) {\n        if ($A[$i] == $B[$j]) {\n            $i++;\n        }\n        $j++;\n    }\n    return ($i == $n);\n}\n$A = array(1, 2, 3, 4, 5);\n$B = array(2, 3, 4, 5);\nif (is_Sub_Array($A, $B)) {\n    echo \"B is a subarray of A\";\n} else {\n    echo \"B is not a subarray of A\";\n}",
    "    $len_A = count($A);\n    $len_B = count($B);\n    $i = 0;\n    $j = 0;\n    while ($i < $len_A && $j < $len_B) {\n        if ($A[$i] == $B[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    if ($j == $len_B) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4, 5);\n$C = array(2, 3, 4);\n\nif (is_Sub_Array($A, $B)) {\n    echo \"Array B is a sub array of Array A\";\n} else {\n    echo \"Array B is not a sub array of Array A\";\n}\necho \"<br>\";\nif (is_Sub_Array($A, $C)) {\n    echo \"Array C is a sub array of Array A\";\n} else {\n    echo \"Array C is not a sub array of Array A\";\n}",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $m) {\n            return 0;\n        }\n    }\n    return 1;\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4, 5);\nif (is_Sub_Array($A, $B)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $m) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4);\n\nif (is_Sub_Array($B, $A)) {\n    echo \"B is a subarray of A\";\n} else {\n    echo \"B is not a subarray of A\";\n}",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $m) {\n            return 0;\n        }\n    }\n    return 1;\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4, 5);\nif (is_Sub_Array($A, $B)) {\n    echo \"B is a sub array of A\";\n} else {\n    echo \"B is not a sub array of A\";\n}",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j]) {\n                break;\n            }\n        }\n        if ($j == $m) {\n            return 0;\n        }\n    }\n    return 1;\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4, 5);\nif (is_Sub_Array($B, $A)) {\n    echo \"Yes\";\n} else {\n    echo \"No\";\n}",
    "\t$len1 = count($A);\n\t$len2 = count($B);\n\t$i = 0;\n\t$j = 0;\n\twhile ($i < $len1 && $j < $len2) {\n\t\tif ($A[$i] == $B[$j]) {\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t}\n\tif ($j == $len2) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$A = array(1, 2, 3, 4, 5);\n$B = array(2, 3, 4);\n$C = array(2, 4, 6);\n\nif (is_Sub_Array($A, $B)) {\n\techo \"Array B is a sub array of A\";\n} else {\n\techo \"Array B is not a sub array of A\";\n}\n\necho \"<br>\";\n\nif (is_Sub_Array($A, $C)) {\n\techo \"Array C is a sub array of A\";\n} else {\n\techo \"Array C is not a sub array of A\";\n}\n",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j])\n                break;\n        }\n        if ($j == $m)\n            return 0;\n    }\n    return 1;\n}\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4, 5);\nif (is_Sub_Array($A, $B))\n    echo \"Yes\";\nelse\n    echo \"No\";",
    "    $lenA = count($A);\n    $lenB = count($B);\n    if ($lenA > $lenB) {\n        return false;\n    }\n    $i = 0;\n    $j = 0;\n    while ($i < $lenA && $j < $lenB) {\n        if ($A[$i] == $B[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $j++;\n        }\n    }\n    if ($i == $lenA) {\n        return true;\n    }\n    return false;\n}\n$A = array(1, 2, 3, 4, 5);\n$B = array(1, 2, 3, 4, 5, 6, 7);\n$C = array(1, 2, 3, 4, 5, 6, 7, 8);\n$D = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$E = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$F = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\n$G = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n$H = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);\n$I = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);\n$J = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n$K = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n$L = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);\n$M = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
    "    $i = 0;\n    $j = 0;\n    $n = count($A);\n    $m = count($B);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($A[$i] == $B[$j])\n                break;\n        }\n        if ($j == $m)\n            return 0;\n    }\n    return 1;\n}\n\n$A = array(1, 2, 3, 4, 5, 6);\n$B = array(2, 4, 5);\n\nif (is_Sub_Array($A, $B))\n    echo \"Yes\";\nelse\n    echo \"No\";"
  ]
}