{
  "name": "mbpp_308_large_product",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product($nums1, $nums2, $N) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return large_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), array(3, 6, 8, 9, 10, 6), 3) !== array(60, 54, 50)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6), array(3, 6, 8, 9, 10, 6), 4) !== array(60, 54, 50, 48)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6), array(3, 6, 8, 9, 10, 6), 5) !== array(60, 54, 50, 48, 45)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $nums1 = array_unique($nums1);\n    $nums2 = array_unique($nums2);\n    $nums1 = array_values($nums1);\n    $nums2 = array_values($nums2);\n    $products = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $products[] = $num1 * $num2;\n        }\n    }\n    sort($products);\n    return $products[count($products) - $N];\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\necho large_product($nums1, $nums2, $N);",
    "    $products = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $products[] = $nums1[$i] * $nums2[$j];\n        }\n    }\n    sort($products);\n    return array_slice($products, -$N);\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\n\nprint_r(large_product($nums1, $nums2, $N));",
    "    $products = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $products[] = $nums1[$i] * $nums2[$j];\n        }\n    }\n    sort($products);\n    return $products[count($products) - $N];\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\necho large_product($nums1, $nums2, $N);",
    "    $products = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $products[] = $num1 * $num2;\n        }\n    }\n    sort($products);\n    return $products[count($products) - $N];\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\necho large_product($nums1, $nums2, $N);",
    "    // Write your code here\n    $result = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = $nums1[$i] * $nums2[$j];\n        }\n    }\n    rsort($result);\n    return array_slice($result, 0, $N);\n}\n\n$nums1 = [1, 2, 3, 4];\n$nums2 = [5, 6, 7, 8];\n$N = 3;\nprint_r(large_product($nums1, $nums2, $N));",
    "    $products = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $products[] = $num1 * $num2;\n        }\n    }\n    sort($products);\n    return $products[count($products) - $N];\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\necho large_product($nums1, $nums2, $N);",
    "    $products = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $products[] = $num1 * $num2;\n        }\n    }\n    sort($products);\n    return $products[count($products) - $N];\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\necho large_product($nums1, $nums2, $N);",
    "    $result = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = $nums1[$i] * $nums2[$j];\n        }\n    }\n    sort($result);\n    return $result[count($result) - $N];\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\necho large_product($nums1, $nums2, $N);\n",
    "    $products = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $products[] = $num1 * $num2;\n        }\n    }\n    sort($products);\n    return $products[count($products) - $N];\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\necho large_product($nums1, $nums2, $N);",
    "    $products = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $products[] = $num1 * $num2;\n        }\n    }\n    sort($products);\n    return $products[count($products) - $N];\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\necho large_product($nums1, $nums2, $N);",
    "    $products = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $products[] = $nums1[$i] * $nums2[$j];\n        }\n    }\n    sort($products);\n    return array_slice($products, -$N);\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\n\n$result = large_product($nums1, $nums2, $N);\nprint_r($result);",
    "    $products = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $products[] = $num1 * $num2;\n        }\n    }\n    rsort($products);\n    return array_slice($products, 0, $N);\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\nprint_r(large_product($nums1, $nums2, $N));",
    "    $products = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $products[] = $num1 * $num2;\n        }\n    }\n    sort($products);\n    return $products[count($products) - $N];\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\n\necho large_product($nums1, $nums2, $N);",
    "    $products = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $products[] = $nums1[$i] * $nums2[$j];\n        }\n    }\n    sort($products);\n    return $products[count($products) - $N];\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\necho large_product($nums1, $nums2, $N);",
    "    $products = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $products[] = $nums1[$i] * $nums2[$j];\n        }\n    }\n    sort($products);\n    return $products[count($products) - $N];\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\necho large_product($nums1, $nums2, $N);",
    "    $products = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $products[] = $num1 * $num2;\n        }\n    }\n    sort($products);\n    return $products[count($products) - $N];\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\n\necho large_product($nums1, $nums2, $N);",
    "    $products = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $products[] = $num1 * $num2;\n        }\n    }\n    sort($products);\n    return $products[count($products) - $N];\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\necho large_product($nums1, $nums2, $N);",
    "    $products = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $products[] = $nums1[$i] * $nums2[$j];\n        }\n    }\n    sort($products);\n    return array_slice($products, -$N);\n}\n\n$nums1 = [1, 2, 3, 4, 5];\n$nums2 = [6, 7, 8, 9, 10];\n$N = 3;\n\nprint_r(large_product($nums1, $nums2, $N));",
    "    $products = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $products[] = $num1 * $num2;\n        }\n    }\n    sort($products);\n    return $products[count($products) - $N];\n}\n\n$nums1 = [1, 2, 3, 4];\n$nums2 = [5, 6, 7, 8];\n$N = 3;\necho large_product($nums1, $nums2, $N);",
    "    $products = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $products[] = $num1 * $num2;\n        }\n    }\n    sort($products);\n    return $products[count($products) - $N];\n}\n\n$nums1 = [1, 2, 3];\n$nums2 = [4, 5, 6];\n$N = 4;\n\necho large_product($nums1, $nums2, $N);"
  ]
}