{
  "name": "mbpp_615_average_tuple",
  "language": "php",
  "prompt": "<?php\n// Write a function which takes an array of arrays and returns the average value for each array as an array.\nfunction average_tuple($nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return average_tuple(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(10, 10, 10, 12), array(30, 45, 56, 45), array(81, 80, 39, 32), array(1, 2, 3, 4))) !== array(30.5, 34.25, 27.0, 23.25)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, -5), array(30, -15, 56), array(81, -60, -39), array(-10, 2, 3))) !== array(25.5, -18.0, 3.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(100, 100, 100, 120), array(300, 450, 560, 450), array(810, 800, 390, 320), array(10, 20, 30, 40))) !== array(305.0, 342.5, 270.0, 232.5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $avg_arr = [];\n    foreach ($nums as $arr) {\n        $avg = array_sum($arr) / count($arr);\n        array_push($avg_arr, $avg);\n    }\n    return $avg_arr;\n}\n\n$nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nprint_r(average_tuple($nums));\n",
    "  $avg = [];\n  foreach ($nums as $num) {\n    $avg[] = array_sum($num) / count($num);\n  }\n  return $avg;\n}\n",
    "    $result = [];\n    foreach ($nums as $num) {\n        $result[] = array_sum($num) / count($num);\n    }\n    return $result;\n}\n",
    "    $new_array = [];\n    foreach($nums as $num) {\n        $new_array[] = array_sum($num) / count($num);\n    }\n    return $new_array;\n}\n",
    "    $result = [];\n    foreach ($nums as $num) {\n        $result[] = array_sum($num) / count($num);\n    }\n    return $result;\n}\n",
    "    $avg = [];\n    foreach ($nums as $num) {\n        $avg[] = array_sum($num) / count($num);\n    }\n    return $avg;\n}\n",
    "    $average = [];\n    foreach ($nums as $num) {\n        $average[] = array_sum($num) / count($num);\n    }\n    return $average;\n}\n",
    "  $avg = [];\n  foreach ($nums as $num) {\n    $avg[] = array_sum($num) / count($num);\n  }\n  return $avg;\n}\n",
    "    $avg_arr = [];\n    foreach ($nums as $arr) {\n        $avg_arr[] = array_sum($arr) / count($arr);\n    }\n    return $avg_arr;\n}\n",
    "    $avg = [];\n    foreach ($nums as $num) {\n        $avg[] = array_sum($num) / count($num);\n    }\n    return $avg;\n}\n",
    "    $result = [];\n    foreach ($nums as $arr) {\n        $result[] = array_sum($arr) / count($arr);\n    }\n    return $result;\n}\n",
    "    $avg = [];\n    foreach ($nums as $num) {\n        $avg[] = array_sum($num) / count($num);\n    }\n    return $avg;\n}\n",
    "    $result = [];\n    foreach ($nums as $num) {\n        $result[] = array_sum($num) / count($num);\n    }\n    return $result;\n}\n",
    "  $result = [];\n  foreach ($nums as $num) {\n    $result[] = array_sum($num) / count($num);\n  }\n  return $result;\n}\n",
    "    $result = [];\n    foreach($nums as $num) {\n        $result[] = array_sum($num) / count($num);\n    }\n    return $result;\n}\n",
    "    $result = [];\n    foreach ($nums as $num) {\n        $result[] = array_sum($num) / count($num);\n    }\n    return $result;\n}\n",
    "  $avg_arr = [];\n  foreach($nums as $arr) {\n    $avg_arr[] = array_sum($arr) / count($arr);\n  }\n  return $avg_arr;\n}\n",
    "    $result = [];\n    foreach ($nums as $num) {\n        $sum = 0;\n        foreach ($num as $value) {\n            $sum += $value;\n        }\n        $result[] = $sum / count($num);\n    }\n    return $result;\n}\n",
    "    $result = [];\n    foreach ($nums as $num) {\n        $result[] = array_sum($num) / count($num);\n    }\n    return $result;\n}\n",
    "    $avg = [];\n    foreach ($nums as $num) {\n        $avg[] = array_sum($num) / count($num);\n    }\n    return $avg;\n}\n"
  ]
}