{
  "name": "mbpp_733_find_first_occurrence",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmao41gw.php:26\nStack trace:\n#0 /tmp/tmpbmao41gw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbmao41gw.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 8;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 1;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 10;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 4;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\n8\n0\n-1\n6\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd0f8bsny.php:45\nStack trace:\n#0 /tmp/tmpd0f8bsny.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpd0f8bsny.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n\t$start = 0;\n\t$end = count($A) - 1;\n\t$result = -1;\n\twhile ($start <= $end) {\n\t\t$mid = floor(($start + $end) / 2);\n\t\tif ($x == $A[$mid]) {\n\t\t\t$result = $mid;\n\t\t\t$end = $mid - 1;\n\t\t} else if ($x < $A[$mid]) {\n\t\t\t$end = $mid - 1;\n\t\t} else {\n\t\t\t$start = $mid + 1;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10];\n$x = 4;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqov0bolz.php:29\nStack trace:\n#0 /tmp/tmpqov0bolz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqov0bolz.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmplihgtzs2.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else if ($A[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $result = $mid;\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphkthu92q.php:29\nStack trace:\n#0 /tmp/tmphkthu92q.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphkthu92q.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72y4x0ep.php:29\nStack trace:\n#0 /tmp/tmp72y4x0ep.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp72y4x0ep.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps99txoco.php:29\nStack trace:\n#0 /tmp/tmps99txoco.php(34): test()\n#1 {main}\n  thrown in /tmp/tmps99txoco.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpacm62md7.php:29\nStack trace:\n#0 /tmp/tmpacm62md7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpacm62md7.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72y4x0ep.php:29\nStack trace:\n#0 /tmp/tmp72y4x0ep.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp72y4x0ep.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $start = 0;\n    $end = count($A) - 1;\n    $result = -1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $end = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $end = $mid - 1;\n        } else {\n            $start = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmyts8ovc.php:29\nStack trace:\n#0 /tmp/tmpmyts8ovc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmyts8ovc.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\necho find_first_occurrence($A, 3) . PHP_EOL;\necho find_first_occurrence($A, 10) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "3\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6ox_jgg.php:29\nStack trace:\n#0 /tmp/tmpc6ox_jgg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpc6ox_jgg.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphrfigqz5.php:29\nStack trace:\n#0 /tmp/tmphrfigqz5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphrfigqz5.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1; // search left\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1; // search left\n        } else {\n            $low = $mid + 1; // search right\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmpqj5qsn3z.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpki9q44wf.php:29\nStack trace:\n#0 /tmp/tmpki9q44wf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpki9q44wf.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n\n        if ($A[$mid] == $x && ($mid == 0 || $A[$mid - 1] < $x)) {\n            return $mid;\n        } elseif ($A[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n\n    return -1;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\n\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmu2p24g7.php:31\nStack trace:\n#0 /tmp/tmpmu2p24g7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpmu2p24g7.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n\n        if ($A[$mid] == $x) {\n            if ($mid == 0 || $A[$mid - 1] != $x) {\n                return $mid;\n            } else {\n                $high = $mid - 1;\n            }\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n\n    return -1;\n}\n\n$A = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmpv7i6vf4r.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2mb4az7u.php:29\nStack trace:\n#0 /tmp/tmp2mb4az7u.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2mb4az7u.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n\n        if ($A[$mid] == $x) {\n            if ($mid == 0 || $A[$mid - 1] != $x) {\n                return $mid;\n            } else {\n                $right = $mid - 1;\n            }\n        } else if ($A[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n\n    return -1;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiof_fgo6.php:35\nStack trace:\n#0 /tmp/tmpiof_fgo6.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpiof_fgo6.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyv_c1ih7.php:29\nStack trace:\n#0 /tmp/tmpyv_c1ih7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpyv_c1ih7.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2y4cy755.php:30\nStack trace:\n#0 /tmp/tmp2y4cy755.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2y4cy755.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1,2,2,2,2,3,4,7,8,8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaq0k8q5e.php:29\nStack trace:\n#0 /tmp/tmpaq0k8q5e.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpaq0k8q5e.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbfuplhca.php:29\nStack trace:\n#0 /tmp/tmpbfuplhca.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbfuplhca.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = $low + ($high - $low) / 2;\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp4o_vqlbx.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmp4o_vqlbx.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp4o_vqlbx.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp4o_vqlbx.php on line 12\n1.75\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp4o_vqlbx.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp4o_vqlbx.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmp4o_vqlbx.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp4o_vqlbx.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp4o_vqlbx.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4o_v",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $start = 0;\n    $end = count($A) - 1;\n    $result = -1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $end = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $end = $mid - 1;\n        } else {\n            $start = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3wd8_dhc.php:29\nStack trace:\n#0 /tmp/tmp3wd8_dhc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3wd8_dhc.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6e8qaop.php:29\nStack trace:\n#0 /tmp/tmpn6e8qaop.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpn6e8qaop.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz7nhmev0.php:29\nStack trace:\n#0 /tmp/tmpz7nhmev0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpz7nhmev0.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmpkvop6169.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($A[$mid] == $x) {\n            if ($mid == 0 || $A[$mid - 1] != $x) {\n                return $mid;\n            }\n            $right = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return -1;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_n2m5pny.php:30\nStack trace:\n#0 /tmp/tmp_n2m5pny.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_n2m5pny.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpya0o9pms.php:29\nStack trace:\n#0 /tmp/tmpya0o9pms.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpya0o9pms.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxypts_8.php:29\nStack trace:\n#0 /tmp/tmpjxypts_8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjxypts_8.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl0x4tfi5.php:29\nStack trace:\n#0 /tmp/tmpl0x4tfi5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpl0x4tfi5.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmpkvop6169.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9mk5zn5.php:30\nStack trace:\n#0 /tmp/tmpj9mk5zn5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpj9mk5zn5.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $n = count($A);\n    $low = 0;\n    $high = $n - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zuk32n0.php:30\nStack trace:\n#0 /tmp/tmp2zuk32n0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2zuk32n0.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $n = sizeof($A);\n    $low = 0;\n    $high = $n - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2a3xzd76.php:30\nStack trace:\n#0 /tmp/tmp2a3xzd76.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2a3xzd76.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\necho find_first_occurrence($A, 2) . PHP_EOL;\necho find_first_occurrence($A, 8) . PHP_EOL;\necho find_first_occurrence($A, 1) . PHP_EOL;\necho find_first_occurrence($A, 10) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n8\n0\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpgxsg3l.php:31\nStack trace:\n#0 /tmp/tmpwpgxsg3l.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwpgxsg3l.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $n = count($A);\n    $low = 0;\n    $high = $n - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps25g4m6e.php:30\nStack trace:\n#0 /tmp/tmps25g4m6e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmps25g4m6e.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10];\n$x = 4;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7ejh5c2.php:29\nStack trace:\n#0 /tmp/tmph7ejh5c2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph7ejh5c2.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpsa2lbbf4.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpsa2lbbf4.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpis7p6xw2.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsppcm8u2.php:29\nStack trace:\n#0 /tmp/tmpsppcm8u2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsppcm8u2.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $n = count($A);\n    $low = 0;\n    $high = $n - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\necho find_first_occurrence($A, 2);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptr7i22wc.php:29\nStack trace:\n#0 /tmp/tmptr7i22wc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptr7i22wc.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = $low + (($high - $low) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp49bq0u7k.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmp49bq0u7k.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp49bq0u7k.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp49bq0u7k.php on line 12\n1.75\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp49bq0u7k.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp49bq0u7k.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmp49bq0u7k.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp49bq0u7k.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp49bq0u7k.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp49bq",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5s6t361.php:29\nStack trace:\n#0 /tmp/tmpn5s6t361.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpn5s6t361.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 8;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 1;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 10;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n8\n0\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpletn5ter.php:41\nStack trace:\n#0 /tmp/tmpletn5ter.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpletn5ter.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wligdry.php:29\nStack trace:\n#0 /tmp/tmp2wligdry.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2wligdry.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($A[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\necho find_first_occurrence($A, 2) . PHP_EOL;\necho find_first_occurrence($A, 8) . PHP_EOL;\necho find_first_occurrence($A, 1) . PHP_EOL;\necho find_first_occurrence($A, 10) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n8\n0\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxxnujvj1.php:31\nStack trace:\n#0 /tmp/tmpxxnujvj1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxxnujvj1.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp31jz9pf7.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9];\n$x = 4;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7wyc633z.php:30\nStack trace:\n#0 /tmp/tmp7wyc633z.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7wyc633z.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 8;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 1;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 10;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n8\n0\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqzw2zomp.php:41\nStack trace:\n#0 /tmp/tmpqzw2zomp.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpqzw2zomp.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpix2viyo0.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph27gfetu.php:29\nStack trace:\n#0 /tmp/tmph27gfetu.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph27gfetu.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10];\n$x = 4;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_4m2esuf.php:29\nStack trace:\n#0 /tmp/tmp_4m2esuf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_4m2esuf.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphvepgqvp.php:26\nStack trace:\n#0 /tmp/tmphvepgqvp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphvepgqvp.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = $low + (($high - $low) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\necho find_first_occurrence($A, 2) . PHP_EOL;\necho find_first_occurrence($A, 1) . PHP_EOL;\necho find_first_occurrence($A, 3) . PHP_EOL;\necho find_first_occurrence($A, 8) . PHP_EOL;\necho find_first_occurrence($A, 4) . PHP_EOL;\necho find_first_occurrence($A, 9) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp4adn2iri.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmp4adn2iri.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp4adn2iri.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp4adn2iri.php on line 12\n1.75\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp4adn2iri.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp4adn2iri.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmp4adn2iri.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmp4adn2iri.php on line 12\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp4adn2iri.php on line 9\n0.375\n\nDeprecated: Implicit conversion from float 4.5 to int l",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9];\n$x = 5;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9znkx8sq.php:29\nStack trace:\n#0 /tmp/tmp9znkx8sq.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp9znkx8sq.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = $low + (($high - $low) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp014hi2h1.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmp014hi2h1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp014hi2h1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp014hi2h1.php on line 12\n1.75\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp014hi2h1.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp014hi2h1.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmp014hi2h1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp014hi2h1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp014hi2h1.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp014",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wligdry.php:29\nStack trace:\n#0 /tmp/tmp2wligdry.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2wligdry.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $start = 0;\n    $end = count($A) - 1;\n    $result = -1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $end = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $end = $mid - 1;\n        } else {\n            $start = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkettq77g.php:29\nStack trace:\n#0 /tmp/tmpkettq77g.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkettq77g.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $l = 0;\n    $r = count($A) - 1;\n    while ($l < $r) {\n        $m = floor(($l + $r) / 2);\n        if ($A[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $A[$l] == $x ? $l : -1;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5];\n$x = 3;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb58dh1bw.php:25\nStack trace:\n#0 /tmp/tmpb58dh1bw.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpb58dh1bw.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 3;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 8;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 1;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 23;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 0;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\n5\n8\n0\n-1\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5sniymvz.php:49\nStack trace:\n#0 /tmp/tmp5sniymvz.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp5sniymvz.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $left = 0;\n  $right = count($A) - 1;\n  $result = -1;\n  while ($left <= $right) {\n    $mid = floor(($left + $right) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $right = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $right = $mid - 1;\n    } else {\n      $left = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyz_od2ia.php:29\nStack trace:\n#0 /tmp/tmpyz_od2ia.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpyz_od2ia.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9);\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkrckc6os.php:29\nStack trace:\n#0 /tmp/tmpkrckc6os.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkrckc6os.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6e8qaop.php:29\nStack trace:\n#0 /tmp/tmpn6e8qaop.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpn6e8qaop.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } elseif ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpiyigz543.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $start = 0;\n    $end = count($A) - 1;\n    $result = -1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $end = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $end = $mid - 1;\n        } else {\n            $start = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpylorcqt_.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpacm62md7.php:29\nStack trace:\n#0 /tmp/tmpacm62md7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpacm62md7.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n\n    return $result;\n}\n\n$A = [0, 1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n\necho find_first_occurrence($A, 3);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpykx1wtk0.php:32\nStack trace:\n#0 /tmp/tmpykx1wtk0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpykx1wtk0.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl2kc5ryl.php:30\nStack trace:\n#0 /tmp/tmpl2kc5ryl.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpl2kc5ryl.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmpkvop6169.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph38j0eec.php:29\nStack trace:\n#0 /tmp/tmph38j0eec.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph38j0eec.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $n = count($A);\n  $l = 0;\n  $r = $n - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($A[$m] == $x) {\n      if ($m == 0 || $A[$m - 1] != $x) {\n        return $m;\n      } else {\n        $r = $m - 1;\n      }\n    } else if ($A[$m] > $x) {\n      $r = $m - 1;\n    } else {\n      $l = $m + 1;\n    }\n  }\n  return -1;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxjf3rd0.php:32\nStack trace:\n#0 /tmp/tmpvxjf3rd0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvxjf3rd0.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmao41gw.php:26\nStack trace:\n#0 /tmp/tmpbmao41gw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbmao41gw.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb83ch5f_.php:29\nStack trace:\n#0 /tmp/tmpb83ch5f_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb83ch5f_.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = $low + (($high - $low) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmprg3tw94w.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmprg3tw94w.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmprg3tw94w.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmprg3tw94w.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmprg3tw94w.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprg3tw94w.php:26\nStack trace:\n#0 /tmp/tmprg3tw94w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprg3tw94w.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxypts_8.php:29\nStack trace:\n#0 /tmp/tmpjxypts_8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjxypts_8.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcrzb_5be.php:29\nStack trace:\n#0 /tmp/tmpcrzb_5be.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcrzb_5be.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 7, 8, 8, 9, 9, 9, 10, 10, 10];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9tsqs7y.php:30\nStack trace:\n#0 /tmp/tmpj9tsqs7y.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpj9tsqs7y.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2y4cy755.php:30\nStack trace:\n#0 /tmp/tmp2y4cy755.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2y4cy755.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = $left + ($right - $left) / 2;\n        if ($A[$mid] > $x) {\n            $right = $mid - 1;\n        } else if ($A[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $result = $mid;\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmptpmxwoud.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmptpmxwoud.php on line 11\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmptpmxwoud.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmptpmxwoud.php on line 11\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmptpmxwoud.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmptpmxwoud.php on line 11\n1.75\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmptpmxwoud.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmptpmxwoud.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmptpmxwoud.php on line 11\n\nDeprecated: Implicit conversion from float 0.375 to int loses",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = $left + (($right - $left) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpwt4mwq3l.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9];\n$x = 4;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmkjlc9rm.php:29\nStack trace:\n#0 /tmp/tmpmkjlc9rm.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmkjlc9rm.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbr_258i7.php:26\nStack trace:\n#0 /tmp/tmpbr_258i7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbr_258i7.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wligdry.php:29\nStack trace:\n#0 /tmp/tmp2wligdry.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2wligdry.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7y_h2ok.php:29\nStack trace:\n#0 /tmp/tmpd7y_h2ok.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpd7y_h2ok.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = $left + (int)(($right - $left) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 3, 4, 7, 8, 9];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmprfwbakdq.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $start = 0;\n    $end = count($A) - 1;\n    $result = -1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $end = $mid - 1;\n        } else if ($A[$mid] < $x) {\n            $start = $mid + 1;\n        } else {\n            $end = $mid - 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxe5batdl.php:29\nStack trace:\n#0 /tmp/tmpxe5batdl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxe5batdl.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvphyab.php:29\nStack trace:\n#0 /tmp/tmp_mvphyab.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_mvphyab.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = $low + ($high - $low) / 2;\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpz2y9e0qp.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmpz2y9e0qp.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpz2y9e0qp.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpz2y9e0qp.php on line 12\n1.75\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpz2y9e0qp.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpz2y9e0qp.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmpz2y9e0qp.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpz2y9e0qp.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpz2y9e0qp.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz2y9",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n\t$low = 0;\n\t$high = count($A) - 1;\n\t$result = -1;\n\twhile ($low <= $high) {\n\t\t$mid = floor(($low + $high) / 2);\n\t\tif ($A[$mid] == $x) {\n\t\t\t$result = $mid;\n\t\t\t$high = $mid - 1;\n\t\t} else if ($A[$mid] > $x) {\n\t\t\t$high = $mid - 1;\n\t\t} else {\n\t\t\t$low = $mid + 1;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65ry996p.php:26\nStack trace:\n#0 /tmp/tmp65ry996p.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp65ry996p.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmprfwbakdq.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5l7xikr.php:29\nStack trace:\n#0 /tmp/tmpl5l7xikr.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpl5l7xikr.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_4owv_f.php:30\nStack trace:\n#0 /tmp/tmpa_4owv_f.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpa_4owv_f.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprb0lsngz.php:30\nStack trace:\n#0 /tmp/tmprb0lsngz.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprb0lsngz.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppqj0rwk1.php:29\nStack trace:\n#0 /tmp/tmppqj0rwk1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmppqj0rwk1.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = (int) (($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxiyb22gw.php:30\nStack trace:\n#0 /tmp/tmpxiyb22gw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpxiyb22gw.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz7nhmev0.php:29\nStack trace:\n#0 /tmp/tmpz7nhmev0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpz7nhmev0.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\necho find_first_occurrence($A, 2);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmrf33r_h.php:28\nStack trace:\n#0 /tmp/tmpmrf33r_h.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmrf33r_h.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_ouujcr.php:29\nStack trace:\n#0 /tmp/tmpa_ouujcr.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpa_ouujcr.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz7nhmev0.php:29\nStack trace:\n#0 /tmp/tmpz7nhmev0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpz7nhmev0.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpsa2lbbf4.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq9gsq62r.php:29\nStack trace:\n#0 /tmp/tmpq9gsq62r.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpq9gsq62r.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wligdry.php:29\nStack trace:\n#0 /tmp/tmp2wligdry.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2wligdry.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 3, 4, 7, 8, 9];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlrd6k8l.php:29\nStack trace:\n#0 /tmp/tmpvlrd6k8l.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvlrd6k8l.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxypts_8.php:29\nStack trace:\n#0 /tmp/tmpjxypts_8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjxypts_8.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wligdry.php:29\nStack trace:\n#0 /tmp/tmp2wligdry.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2wligdry.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $n = count($A);\n    $low = 0;\n    $high = $n - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdpv7r8o.php:32\nStack trace:\n#0 /tmp/tmpzdpv7r8o.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzdpv7r8o.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpig_ihx_r.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmp35gyrguy.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $start = 0;\n    $end = count($A) - 1;\n    $result = -1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $end = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $end = $mid - 1;\n        } else {\n            $start = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3wd8_dhc.php:29\nStack trace:\n#0 /tmp/tmp3wd8_dhc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3wd8_dhc.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4vedb7ia.php:29\nStack trace:\n#0 /tmp/tmp4vedb7ia.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4vedb7ia.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elseif ($A[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk1_w38l6.php:29\nStack trace:\n#0 /tmp/tmpk1_w38l6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpk1_w38l6.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = $low + ($high - $low) / 2;\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpqcddn0o1.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmpqcddn0o1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpqcddn0o1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpqcddn0o1.php on line 12\n1.75\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpqcddn0o1.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpqcddn0o1.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmpqcddn0o1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpqcddn0o1.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpqcddn0o1.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqcd",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $left = 0;\n    $right = count($A) - 1;\n    $result = -1;\n    while ($left <= $right) {\n        $mid = $left + ($right - $left) / 2;\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $right = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpa_li9o7a.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmpa_li9o7a.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpa_li9o7a.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpa_li9o7a.php on line 12\n1.75\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpa_li9o7a.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpa_li9o7a.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmpa_li9o7a.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpa_li9o7a.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpa_li9o7a.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_li",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd19ixvtt.php:29\nStack trace:\n#0 /tmp/tmpd19ixvtt.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpd19ixvtt.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkkpslp69.php:29\nStack trace:\n#0 /tmp/tmpkkpslp69.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkkpslp69.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [0, 1, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2pkpmf4.php:29\nStack trace:\n#0 /tmp/tmpt2pkpmf4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpt2pkpmf4.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_0ssufu7.php:30\nStack trace:\n#0 /tmp/tmp_0ssufu7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_0ssufu7.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\necho find_first_occurrence($A, 2) . PHP_EOL;\necho find_first_occurrence($A, 8) . PHP_EOL;\necho find_first_occurrence($A, 1) . PHP_EOL;\necho find_first_occurrence($A, 10) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\n8\n0\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgsp3ddw3.php:31\nStack trace:\n#0 /tmp/tmpgsp3ddw3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgsp3ddw3.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4098yl3f.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $left = 0;\n  $right = count($A) - 1;\n  $result = -1;\n  while ($left <= $right) {\n    $mid = floor(($left + $right) / 2);\n    if ($A[$mid] == $x) {\n      $result = $mid;\n      $right = $mid - 1;\n    } elseif ($A[$mid] > $x) {\n      $right = $mid - 1;\n    } else {\n      $left = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0lmm6bh.php:30\nStack trace:\n#0 /tmp/tmpa0lmm6bh.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpa0lmm6bh.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($A[$mid] == $x) {\n      if ($mid == 0 || $A[$mid - 1] != $x) {\n        return $mid;\n      } else {\n        $high = $mid - 1;\n      }\n    } else if ($A[$mid] > $x) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return -1;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmpyipyeq__.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10];\n$x = 4;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaecmlet6.php:29\nStack trace:\n#0 /tmp/tmpaecmlet6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpaecmlet6.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } elseif ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsdmdrc50.php:29\nStack trace:\n#0 /tmp/tmpsdmdrc50.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsdmdrc50.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpacm62md7.php:29\nStack trace:\n#0 /tmp/tmpacm62md7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpacm62md7.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $start = 0;\n    $end = count($A) - 1;\n    $result = -1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $end = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $end = $mid - 1;\n        } else {\n            $start = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2tmwl78y.php:29\nStack trace:\n#0 /tmp/tmp2tmwl78y.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2tmwl78y.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wligdry.php:29\nStack trace:\n#0 /tmp/tmp2wligdry.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2wligdry.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\n\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpprxbif6v.php:34\nStack trace:\n#0 /tmp/tmpprxbif6v.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpprxbif6v.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxw5z5i9.php:29\nStack trace:\n#0 /tmp/tmpbxw5z5i9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbxw5z5i9.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($A[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($A[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9u691kup.php:26\nStack trace:\n#0 /tmp/tmp9u691kup.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9u691kup.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517226,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesd8wpnw.php:29\nStack trace:\n#0 /tmp/tmpesd8wpnw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpesd8wpnw.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $low = 0;\n  $high = count($A) - 1;\n  $result = -1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $high = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $high = $mid - 1;\n    } else {\n      $low = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb83ch5f_.php:29\nStack trace:\n#0 /tmp/tmpb83ch5f_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb83ch5f_.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\n$result = find_first_occurrence($A, $x);\necho $result;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122573,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2y4cy755.php:30\nStack trace:\n#0 /tmp/tmp2y4cy755.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2y4cy755.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n  $left = 0;\n  $right = count($A) - 1;\n  $result = -1;\n  while ($left <= $right) {\n    $mid = $left + ($right - $left) / 2;\n    if ($x == $A[$mid]) {\n      $result = $mid;\n      $right = $mid - 1;\n    } else if ($x < $A[$mid]) {\n      $right = $mid - 1;\n    } else {\n      $left = $mid + 1;\n    }\n  }\n  return $result;\n}\n\n$A = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\n$x = 2;\necho find_first_occurrence($A, $x) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpaq23uhfs.php on line 9\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmpaq23uhfs.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpaq23uhfs.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpaq23uhfs.php on line 12\n1.75\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpaq23uhfs.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpaq23uhfs.php on line 12\n\nDeprecated: Implicit conversion from float 1.75 to int loses precision in /tmp/tmpaq23uhfs.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpaq23uhfs.php on line 9\n\nDeprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpaq23uhfs.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaq2",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } else if ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = array(1, 2, 2, 2, 2, 3, 4, 7, 8, 8);\n$x = 2;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmubmgb8q.php:29\nStack trace:\n#0 /tmp/tmpmubmgb8q.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmubmgb8q.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n    $low = 0;\n    $high = count($A) - 1;\n    $result = -1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x == $A[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elseif ($x < $A[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\n\n$A = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho find_first_occurrence($A, $x);\nfunction candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122574,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoopqwss0.php:29\nStack trace:\n#0 /tmp/tmpoopqwss0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpoopqwss0.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}