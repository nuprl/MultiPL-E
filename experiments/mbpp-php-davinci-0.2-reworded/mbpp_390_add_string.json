{
  "name": "mbpp_390_add_string",
  "language": "php",
  "prompt": "<?php\n// Write a function to apply a given format string to all of the elements in an array.\nfunction add_string($list_, $string) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return add_string(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4), \"temp{0}\") !== array(\"temp1\", \"temp2\", \"temp3\", \"temp4\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), \"python{0}\") !== array(\"pythona\", \"pythonb\", \"pythonc\", \"pythond\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8), \"string{0}\") !== array(\"string5\", \"string6\", \"string7\", \"string8\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = ['a', 'b', 'c'];\n$new_list = add_string($list, '*');\nprint_r($new_list);\n",
    "\t$new_list = [];\n\tforeach ($list_ as $value) {\n\t\tarray_push($new_list, $string . $value);\n\t}\n\treturn $new_list;\n}\n\n$list = ['a', 'b', 'c'];\n$new_list = add_string($list, '*');\nprint_r($new_list);\n",
    "    $new_list = array();\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = array(1, 2, 3, 4, 5);\n$new_list = add_string($list, 'a');\nprint_r($new_list);\n",
    "\t$new_list = array();\n\tforeach ($list_ as $item) {\n\t\t$new_list[] = $string . $item;\n\t}\n\treturn $new_list;\n}\n\n$list = array(\"one\", \"two\", \"three\");\n$new_list = add_string($list, \"new_\");\nprint_r($new_list);\n",
    "    foreach ($list_ as $key => $value) {\n        $list_[$key] = $string . $value;\n    }\n    return $list_;\n}\n",
    "    $new_list = array();\n    foreach ($list_ as $value) {\n        $new_list[] = $string . $value;\n    }\n    return $new_list;\n}\n\n$list = array(1, 2, 3, 4, 5);\n$new_list = add_string($list, \"*\");\nprint_r($new_list);\n",
    "    $list = $list_;\n    foreach ($list as $key => $value) {\n        $list[$key] = $string . $value;\n    }\n    return $list;\n}\n$list = [\"Hello\", \"World\", \"!\"];\n$list = add_string($list, \"Hello \");\nprint_r($list);\n",
    "    $new_list = array();\n    foreach ($list_ as $value) {\n        $new_list[] = $string . $value;\n    }\n    return $new_list;\n}\n\n$list = array(1, 2, 3, 4, 5);\n$list = add_string($list, '$');\nprint_r($list);\n",
    "\t$new_list = array();\n\tforeach ($list_ as $item) {\n\t\t$new_list[] = $string . $item;\n\t}\n\treturn $new_list;\n}\n\n$list = array(\"one\", \"two\", \"three\");\n$list = add_string($list, \"new_\");\nprint_r($list);\n",
    "    $result = [];\n    foreach ($list_ as $item) {\n        $result[] = $string . $item;\n    }\n    return $result;\n}\n\n$list = ['a', 'b', 'c'];\n$result = add_string($list, '*');\nprint_r($result);\n",
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = ['a', 'b', 'c'];\n$new_list = add_string($list, '%');\nprint_r($new_list);\n",
    "    foreach ($list_ as $key => $value) {\n        $list_[$key] = $string . $value;\n    }\n    return $list_;\n}\n\n$list = array(\"a\", \"b\", \"c\");\n$list = add_string($list, \"d\");\nprint_r($list);\n",
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = ['a', 'b', 'c'];\n$new_list = add_string($list, '*');\nprint_r($new_list);\n",
    "\t$new_list = array();\n\tforeach ($list_ as $item) {\n\t\t$new_list[] = $string . $item;\n\t}\n\treturn $new_list;\n}\n\n$list = array('a', 'b', 'c');\n$new_list = add_string($list, 'foo');\nprint_r($new_list);\n",
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = ['a', 'b', 'c'];\n$new_list = add_string($list, 'foo');\nprint_r($new_list);\n",
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = ['a', 'b', 'c'];\n$new_list = add_string($list, '*');\nprint_r($new_list);\n",
    "    $list_ = array_map(function($item) use ($string) {\n        return $item . $string;\n    }, $list_);\n    return $list_;\n}\n",
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = ['a', 'b', 'c'];\n$new_list = add_string($list, 'x');\nprint_r($new_list);\n",
    "    $new_list = [];\n    foreach ($list_ as $value) {\n        $new_list[] = $string . $value;\n    }\n    return $new_list;\n}\n\n$list = ['a', 'b', 'c'];\n$new_list = add_string($list, '*');\nprint_r($new_list);\n",
    "    $new_list = [];\n    foreach ($list_ as $item) {\n        $new_list[] = $string . $item;\n    }\n    return $new_list;\n}\n\n$list = ['a', 'b', 'c'];\n$new_list = add_string($list, '*');\nprint_r($new_list);\n"
  ]
}