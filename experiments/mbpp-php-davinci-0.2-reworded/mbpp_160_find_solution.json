{
  "name": "mbpp_160_find_solution",
  "language": "php",
  "prompt": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $x = 0;\n    $y = 0;\n    while ($a * $x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\necho '<pre>';\nprint_r(find_solution(3, 5, 4));\necho '</pre>';\n",
    "    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y % 1 == 0) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n",
    "    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == (int) $y) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\n$a = 3;\n$b = 5;\n$n = 7;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 8;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 9;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 10;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 11;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 12;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 13;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 14;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 15;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 16;\n\n$result = find",
    "    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n",
    "  for ($x = 0; $x <= $n; $x++) {\n    for ($y = 0; $y <= $n; $y++) {\n      if ($a * $x + $b * $y == $n) {\n        return array($x, $y);\n      }\n    }\n  }\n  return null;\n}\n",
    "    $x = 0;\n    $y = 0;\n    $found = false;\n    while ($x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            $found = true;\n            break;\n        }\n        $x++;\n    }\n    if ($found) {\n        return array($x, $y);\n    } else {\n        return null;\n    }\n}\n",
    "    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if (is_int($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n",
    "    $x = 0;\n    $y = 0;\n    while ($a * $x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n",
    "    $x = 0;\n    $y = 0;\n    $x_inc = 1;\n    $y_inc = 1;\n    $found = false;\n    while ($x < $n && $y < $n) {\n        if ($x * $a + $y * $b == $n) {\n            $found = true;\n            break;\n        }\n        if ($x * $a + $y * $b < $n) {\n            $x += $x_inc;\n            $y += $y_inc;\n        } else {\n            $x_inc = -$x_inc;\n            $y_inc = -$y_inc;\n            $x += $x_inc;\n            $y += $y_inc;\n        }\n    }\n    if ($found) {\n        return array($x, $y);\n    } else {\n        return null;\n    }\n}\n",
    "    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n",
    "    if ($a == 0) {\n        if ($n % $b == 0) {\n            return array(0, $n / $b);\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0 || $y != (int) $y) {\n        return null;\n    }\n    return array($x, $y);\n}\n",
    "    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n",
    "    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n\nprint_r(find_solution(3, 5, 4));\nprint_r(find_solution(3, 5, 7));\nprint_r(find_solution(3, 5, 1));\nprint_r(find_solution(3, 5, 0));\nprint_r(find_solution(3, 5, -1));\nprint_r(find_solution(3, 5, -2));\nprint_r(find_solution(3, 5, -3));\nprint_r(find_solution(3, 5, -4));\nprint_r(find_solution(3, 5, -5));\nprint_r(find_solution(3, 5, -6));\nprint_r(find_solution(3, 5, -7));\nprint_r(find_solution(3, 5, -8));\nprint_r(find_solution(3, 5, -9));\nprint_r(find_solution(3, 5, -10));\nprint_r(find_solution(3, 5, -11));\nprint_r(find_solution(3, 5, -12));\nprint_r(find_solution(3, 5, -13));\nprint_r(find_solution(3, 5, -14));\nprint_r(find_solution(3, 5, -15));\nprint_r(find_solution(3, 5, -16));\nprint_r(find_solution(3, 5, -17));\nprint_r(find_solution(3, 5, -18));\nprint_r(find_solution(3, 5, -19));\nprint_r(find_solution(3, 5, -20));\nprint_r(find_solution(3, 5, -21));\nprint_r(find_solution(3, 5, -",
    "    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n",
    "    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n",
    "    $x = 0;\n    $y = 0;\n    $x_max = $n / $a;\n    $y_max = $n / $b;\n    for ($x = 0; $x <= $x_max; $x++) {\n        for ($y = 0; $y <= $y_max; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n\n$a = 3;\n$b = 5;\n$n = 16;\n$result = find_solution($a, $b, $n);\nif ($result) {\n    echo \"x = $result[0], y = $result[1]\\n\";\n} else {\n    echo \"No solution\\n\";\n}",
    "    $x = 0;\n    $y = 0;\n    $x_increment = $a;\n    $y_increment = $b;\n    while ($x_increment <= $n) {\n        while ($y_increment <= $n) {\n            if ($x_increment + $y_increment == $n) {\n                return array($x, $y);\n            }\n            $y++;\n            $y_increment += $b;\n        }\n        $x++;\n        $x_increment += $a;\n        $y = 0;\n        $y_increment = $b;\n    }\n    return null;\n}\n",
    "  $x = 0;\n  $y = 0;\n  $x_inc = $a;\n  $y_inc = $b;\n  while ($x_inc <= $n) {\n    $y = 0;\n    $y_inc = $b;\n    while ($y_inc <= $n) {\n      if ($x_inc + $y_inc == $n) {\n        return [$x, $y];\n      }\n      $y++;\n      $y_inc = $b * $y;\n    }\n    $x++;\n    $x_inc = $a * $x;\n  }\n  return null;\n}\n",
    "    if ($a == 0) {\n        if ($n == 0) {\n            return [0, 0];\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($x != (int) $x || $y != (int) $y) {\n        return null;\n    }\n    return [$x, $y];\n}\n",
    "  $x = 0;\n  $y = 0;\n  $x_inc = $a;\n  $y_inc = $b;\n  $x_max = $n;\n  $y_max = $n;\n  $x_min = 0;\n  $y_min = 0;\n  $solution = null;\n  while ($x <= $x_max && $y <= $y_max) {\n    if ($x * $a + $y * $b == $n) {\n      $solution = array($x, $y);\n      break;\n    }\n    if ($x * $a + $y * $b < $n) {\n      $x += $x_inc;\n      $y += $y_inc;\n    } else {\n      $x_inc = -$x_inc;\n      $y_inc = -$y_inc;\n      $x += $x_inc;\n      $y += $y_inc;\n    }\n  }\n  return $solution;\n}\n"
  ]
}