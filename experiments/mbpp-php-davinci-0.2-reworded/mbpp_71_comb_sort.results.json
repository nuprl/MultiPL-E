{
  "name": "mbpp_71_comb_sort",
  "language": "php",
  "prompt": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [3, 4, 2, 1, 5, 7, 9, 8, 6];\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 3, 2, 4, 5, 7, 6, 9, 8);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 5, 2, 7, 4, 9, 3, 8, 6);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swapped = false;\n        for ($i = 0; $gap + $i < count($nums); $i++) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 4, 3, 2, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $tmp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $tmp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [3, 5, 2, 1, 4];\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = false;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n$nums = array(5, 3, 8, 2, 1, 4);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = false;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 5, 6, 2, 3, 4);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 4, 3, 2, 1);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.247330950103979);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, -4, 3, 7, 2, 1, 0, 8, 9, 2);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => -4\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 2\n    [5] => 3\n    [6] => 5\n    [7] => 7\n    [8] => 8\n    [9] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(4, 3, 2, 1, 5, 6, 7, 8, 9, 10);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 4, 3, 2, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = false;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 3, 8, 2, 1, 4);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 50, 20, 40, 30);\necho \"Original Array :\\n\";\necho implode(', ', $nums );\necho \"\\nSorted Array :\\n\";\necho implode(', ', comb_sort($nums)) . \"\\n\";\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Original Array :\n10, 50, 20, 40, 30\nSorted Array :\n10, 20, 30, 40, 50\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 3, 2, 4, 5, 7, 6, 9, 8);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        for ($i = 0; $i + $gap < count($nums); $i++) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $tmp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $tmp;\n                $swapped = true;\n            }\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 1, 5, 2, 4);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 3, 2, 4, 5, 7, 6, 9, 8);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 2, 3);\necho \"Original Array :\\n\";\necho implode(', ',$nums );\necho \"\\nSorted Array :\\n\";\necho implode(', ',comb_sort($nums)). PHP_EOL;\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Original Array :\n10, 5, 2, 3\nSorted Array :\n\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmplbcojlqh.php on line 13\n\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmplbcojlqh.php on line 15\n\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmplbcojlqh.php on line 16\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmplbcojlqh.php on line 13\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmplbcojlqh.php on line 15\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmplbcojlqh.php on line 16\n\nDeprecated: Implicit conversion from float 3.56 to int loses precision in /tmp/tmplbcojlqh.php on line 13\n\nDeprecated: Implicit conversion from float 2.048 to int loses precision in /tmp/tmplbcojlqh.php on line 13\n\nDeprecated: Implicit conversion from float 3.048 to int loses precision in /tmp/tmplbcojlqh.php on line 13\n\nDeprecated: Impli",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 1, 4, 1, 5, 9, 2, 6, 5, 3);\necho \"Original Array :\\n\";\necho implode(', ', $nums );\necho \"\\nSorted Array :\\n\";\necho implode(', ', comb_sort($nums)) . PHP_EOL;\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Original Array :\n3, 1, 4, 1, 5, 9, 2, 6, 5, 3\nSorted Array :\n1, 1, 2, 3, 3, 4, 5, 5, 6, 9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [1, 3, 2, 5, 4, 7, 6, 9, 8];\necho implode(', ', comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "1, 2, 3, 4, 5, 6, 7, 8, 9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\necho \"Original Array :\\n\";\necho implode(', ', $nums );\necho \"\\nSorted Array :\\n\";\necho implode(', ', comb_sort($nums)). PHP_EOL;\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Original Array :\n10, 5, 3, 8, 2, 6, 4, 7, 9, 1\nSorted Array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 4, 3, 2, 1);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 3, 2, 5, 4, 7, 6, 9, 8);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 3, 2, 4, 5, 7, 6, 9, 8);\n$nums = comb_sort($nums);\nprint_r($nums);\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 2, 1, 5, 4);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 1, 2, 5, 4);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10];\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 3, 2, 5, 4, 7, 6, 9, 8, 10);\nprint_r(comb_sort($nums));\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\necho \"Original Array :\\n\";\necho implode(', ', $nums );\necho \"\\nSorted Array :\\n\";\necho implode(', ', comb_sort($nums)). PHP_EOL;\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Original Array :\n10, 5, 3, 8, 2, 6, 4, 7, 9, 1\nSorted Array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 2, 3);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 5\n    [3] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 4, 2, 1, 6, 5, 7, 8, 1, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n    [7] => 6\n    [8] => 7\n    [9] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [5, -4, 3, 7, 2, 1, 0, 8, 9, 2];\necho \"Original Array :\\n\";\necho implode(', ',$nums );\necho \"\\nSorted Array :\\n\";\necho implode(', ',comb_sort($nums)). PHP_EOL;\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Original Array :\n5, -4, 3, 7, 2, 1, 0, 8, 9, 2\nSorted Array :\n-4, 0, 1, 2, 2, 3, 5, 7, 8, 9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 2, 3);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 5\n    [3] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $tmp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $tmp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [3, 5, 1, 2, 4];\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 4, 2, 1, 6, 5, 7, 8, 1, 1);\n$nums = comb_sort($nums);\nprint_r($nums);\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n    [7] => 6\n    [8] => 7\n    [9] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = false;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 2, 1, 5, 4);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 3, 2, 4, 5, 6, 7, 8, 9, 10);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $tmp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $tmp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 5, 2, 7, 3, 9, 4);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 7\n    [6] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 50, 20, 40, 30);\n$sorted_nums = comb_sort($nums);\necho implode(', ', $sorted_nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "10, 20, 30, 40, 50",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [1, 5, 6, 2, 4, 3];\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 3, 2, 5, 4, 7, 6, 9, 8);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 7.2 to int loses precision in /tmp/tmp5dy910fk.php on line 13\n\nDeprecated: Implicit conversion from float 8.2 to int loses precision in /tmp/tmp5dy910fk.php on line 13\n\nDeprecated: Implicit conversion from float 5.76 to int loses precision in /tmp/tmp5dy910fk.php on line 13\n\nDeprecated: Implicit conversion from float 6.76 to int loses precision in /tmp/tmp5dy910fk.php on line 13\n\nDeprecated: Implicit conversion from float 7.76 to int loses precision in /tmp/tmp5dy910fk.php on line 13\n\nDeprecated: Implicit conversion from float 8.76 to int loses precision in /tmp/tmp5dy910fk.php on line 13\n\nDeprecated: Implicit conversion from float 4.608 to int loses precision in /tmp/tmp5dy910fk.php on line 13\n\nDeprecated: Implicit conversion from float 5.608 to int loses precision in /tmp/tmp5dy910fk.php on line 13\n\nDeprecated: Implicit conversion from float 6.608 to int loses precision in /tmp/tmp5dy910fk.php on line 13\n\nDeprecated: Implicit conversion from float 7.608 to int los",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 50, 20, 40, 30);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 20\n    [2] => 30\n    [3] => 40\n    [4] => 50\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 4, 3, 2, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 4, 3, 2, 1);\necho implode(', ', comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "1, 2, 3, 4, 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\n$nums = comb_sort($nums);\necho implode(', ', $nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 2, 1, 8, 4, 7, 6, 3);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        for ($i = 0; $i + $gap < count($nums); $i++) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while($gap > 1 || $swap) {\n        if($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while($i + $gap < count($nums)) {\n            if($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [2, 1, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = false;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 5, 3, 2, 4);\n$nums = comb_sort($nums);\nprint_r($nums);\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 2, 3);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 5\n    [3] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 4, 3, 2, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 2, 3);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 5\n    [3] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $tmp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $tmp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\necho implode(', ', comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 3, 2, 5, 4, 7, 6, 9, 8);\nprint_r(comb_sort($nums));\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 4.2 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 3.56 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 4.5600000000000005 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 2.048 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 3.048 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 4.048 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 1.6384 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(9, 8, 7, 6, 5, 4, 3, 2, 1);\necho \"Original Array :\\n\";\necho implode(', ', $nums);\necho \"\\nSorted Array :\\n\";\necho implode(', ', comb_sort($nums)) . PHP_EOL;\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Original Array :\n9, 8, 7, 6, 5, 4, 3, 2, 1\nSorted Array :\n1, 2, 3, 4, 5, 6, 7, 8, 9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 3, 8, 2, 1, 4);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 4.8 to int loses precision in /tmp/tmp68ssya_d.php on line 13\n\nDeprecated: Implicit conversion from float 4.8 to int loses precision in /tmp/tmp68ssya_d.php on line 14\n\nDeprecated: Implicit conversion from float 4.8 to int loses precision in /tmp/tmp68ssya_d.php on line 14\n\nDeprecated: Implicit conversion from float 5.8 to int loses precision in /tmp/tmp68ssya_d.php on line 13\n\nDeprecated: Implicit conversion from float 3.84 to int loses precision in /tmp/tmp68ssya_d.php on line 13\n\nDeprecated: Implicit conversion from float 4.84 to int loses precision in /tmp/tmp68ssya_d.php on line 13\n\nDeprecated: Implicit conversion from float 5.84 to int loses precision in /tmp/tmp68ssya_d.php on line 13\n\nDeprecated: Implicit conversion from float 5.84 to int loses precision in /tmp/tmp68ssya_d.php on line 14\n\nDeprecated: Implicit conversion from float 5.84 to int loses precision in /tmp/tmp68ssya_d.php on line 14\n\nDeprecated: Implicit conversion from float 3.072 to int loses pr",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 5, 2, 7, 3, 9, 4, 6, 8);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $tmp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $tmp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.247330950103979;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 3, 2, 4, 5, 6, 7, 8, 9, 10);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 8.017118471377934 to int loses precision in /tmp/tmpolpn7avx.php on line 13\n\nDeprecated: Implicit conversion from float 9.017118471377934 to int loses precision in /tmp/tmpolpn7avx.php on line 13\n\nDeprecated: Implicit conversion from float 6.427418858410927 to int loses precision in /tmp/tmpolpn7avx.php on line 13\n\nDeprecated: Implicit conversion from float 7.427418858410927 to int loses precision in /tmp/tmpolpn7avx.php on line 13\n\nDeprecated: Implicit conversion from float 8.427418858410928 to int loses precision in /tmp/tmpolpn7avx.php on line 13\n\nDeprecated: Implicit conversion from float 9.427418858410928 to int loses precision in /tmp/tmpolpn7avx.php on line 13\n\nDeprecated: Implicit conversion from float 5.152937845304912 to int loses precision in /tmp/tmpolpn7avx.php on line 13\n\nDeprecated: Implicit conversion from float 6.152937845304912 to int loses precision in /tmp/tmpolpn7avx.php on line 13\n\nDeprecated: Implicit conversion from float 7.152937845304912 to",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 6.4 to int loses precision in /tmp/tmp8xggzlhe.php on line 13\n\nDeprecated: Implicit conversion from float 6.4 to int loses precision in /tmp/tmp8xggzlhe.php on line 14\n\nDeprecated: Implicit conversion from float 6.4 to int loses precision in /tmp/tmp8xggzlhe.php on line 14\n\nDeprecated: Implicit conversion from float 7.4 to int loses precision in /tmp/tmp8xggzlhe.php on line 13\n\nDeprecated: Implicit conversion from float 8.4 to int loses precision in /tmp/tmp8xggzlhe.php on line 13\n\nDeprecated: Implicit conversion from float 9.4 to int loses precision in /tmp/tmp8xggzlhe.php on line 13\n\nDeprecated: Implicit conversion from float 9.4 to int loses precision in /tmp/tmp8xggzlhe.php on line 14\n\nDeprecated: Implicit conversion from float 9.4 to int loses precision in /tmp/tmp8xggzlhe.php on line 14\n\nDeprecated: Implicit conversion from float 5.12 to int loses precision in /tmp/tmp8xggzlhe.php on line 13\n\nDeprecated: Implicit conversion from float 6.12 to int loses precisi",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 1, 5, 7, 2, 4, 9, 6, 10, 8);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 5, 2, 7, 3, 9, 4);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 7\n    [6] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [3, 5, 2, 1, 4];\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 4, 3, 2, 1);\nprint_r(comb_sort($nums));\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [1, 4, 2, 5, 3, 7, 6];\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 2, 1, 3, 4);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 3, 1, 2, 4);\necho implode(', ', comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "1, 2, 3, 4, 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmp7xsuvwq8.php on line 13\n\nDeprecated: Implicit conversion from float 4.2 to int loses precision in /tmp/tmp7xsuvwq8.php on line 13\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmp7xsuvwq8.php on line 13\n\nDeprecated: Implicit conversion from float 3.56 to int loses precision in /tmp/tmp7xsuvwq8.php on line 13\n\nDeprecated: Implicit conversion from float 4.5600000000000005 to int loses precision in /tmp/tmp7xsuvwq8.php on line 13\n\nDeprecated: Implicit conversion from float 2.048 to int loses precision in /tmp/tmp7xsuvwq8.php on line 13\n\nDeprecated: Implicit conversion from float 3.048 to int loses precision in /tmp/tmp7xsuvwq8.php on line 13\n\nDeprecated: Implicit conversion from float 4.048 to int loses precision in /tmp/tmp7xsuvwq8.php on line 13\n\nDeprecated: Implicit conversion from float 1.6384 to int loses precision in /tmp/tmp7xsuvwq8.php on line 13\n\nDeprecated: Implicit conversion from float ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 5, 2, 7, 3, 9, 4, 6, 8);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 5, 2, 6, 3, 7, 4);\nprint_r(comb_sort($nums));\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 2, 3);\nprint_r(comb_sort($nums));\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 5\n    [3] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = false;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 3, 2, 4, 5, 7, 6, 9, 8);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [3, 1, 2, 5, 4];\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 3, 8, 2, 1, 4);\n$nums = comb_sort($nums);\necho implode(', ', $nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "1, 2, 3, 4, 5, 8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(4, 3, 2, 1, 5, 6, 7, 8, 9, 10);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 6.4 to int loses precision in /tmp/tmppeihibc2.php on line 13\n\nDeprecated: Implicit conversion from float 7.4 to int loses precision in /tmp/tmppeihibc2.php on line 13\n\nDeprecated: Implicit conversion from float 8.4 to int loses precision in /tmp/tmppeihibc2.php on line 13\n\nDeprecated: Implicit conversion from float 9.4 to int loses precision in /tmp/tmppeihibc2.php on line 13\n\nDeprecated: Implicit conversion from float 5.12 to int loses precision in /tmp/tmppeihibc2.php on line 13\n\nDeprecated: Implicit conversion from float 6.12 to int loses precision in /tmp/tmppeihibc2.php on line 13\n\nDeprecated: Implicit conversion from float 7.12 to int loses precision in /tmp/tmppeihibc2.php on line 13\n\nDeprecated: Implicit conversion from float 8.120000000000001 to int loses precision in /tmp/tmppeihibc2.php on line 13\n\nDeprecated: Implicit conversion from float 9.120000000000001 to int loses precision in /tmp/tmppeihibc2.php on line 13\n\nDeprecated: Implicit conversion from f",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(4, 2, 6, 1, 3, 5, 7, 9, 8);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 7.2 to int loses precision in /tmp/tmphvkoo1eg.php on line 13\n\nDeprecated: Implicit conversion from float 8.2 to int loses precision in /tmp/tmphvkoo1eg.php on line 13\n\nDeprecated: Implicit conversion from float 5.76 to int loses precision in /tmp/tmphvkoo1eg.php on line 13\n\nDeprecated: Implicit conversion from float 6.76 to int loses precision in /tmp/tmphvkoo1eg.php on line 13\n\nDeprecated: Implicit conversion from float 7.76 to int loses precision in /tmp/tmphvkoo1eg.php on line 13\n\nDeprecated: Implicit conversion from float 8.76 to int loses precision in /tmp/tmphvkoo1eg.php on line 13\n\nDeprecated: Implicit conversion from float 4.608 to int loses precision in /tmp/tmphvkoo1eg.php on line 13\n\nDeprecated: Implicit conversion from float 4.608 to int loses precision in /tmp/tmphvkoo1eg.php on line 14\n\nDeprecated: Implicit conversion from float 4.608 to int loses precision in /tmp/tmphvkoo1eg.php on line 14\n\nDeprecated: Implicit conversion from float 5.608 to int los",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 0, 2, 5, -1, 4, 1);\necho \"Original Array :\\n\";\necho implode(', ',$nums );\necho \"\\nSorted Array :\\n\";\necho implode(', ',comb_sort($nums)). PHP_EOL;\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Original Array :\n3, 0, 2, 5, -1, 4, 1\nSorted Array :\n-1, 0, 1, 2, 3, 4, 5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap != 1 || $swap == true) {\n        $gap = floor($gap / 1.25);\n        if ($gap < 1) {\n            $gap = 1;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [1, 5, 3, 2, 4, 8, 7, 6, 9, 10];\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 5, 2, 7, 3, 9, 4);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 7\n    [6] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.3);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [1, 5, 2, 7, 3, 9, 4];\n$sorted_nums = comb_sort($nums);\nprint_r($sorted_nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 7\n    [6] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 5, 4, 2, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.247330950103979);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $tmp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $tmp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 2, 5, 1, 8, 9, 3, 4, 6, 7);\necho \"Original Array :\\n\";\necho implode(', ',$nums );\necho \"\\nSorted Array :\\n\";\necho implode(', ',comb_sort($nums)). PHP_EOL;\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Original Array :\n10, 2, 5, 1, 8, 9, 3, 4, 6, 7\nSorted Array :\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [3, 5, 1, 2, 4];\nprint_r(comb_sort($nums));\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.247330950103979);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $tmp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $tmp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 3, 2, 4, 5, 6, 7, 8, 9, 10);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $tmp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $tmp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 5, 2, 7, 3, 9, 4);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 7\n    [6] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(2, 3, 2, 5, 6, 1, -2, 3, 14, 12);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 6.4 to int loses precision in /tmp/tmp2m7ek7ia.php on line 13\n\nDeprecated: Implicit conversion from float 6.4 to int loses precision in /tmp/tmp2m7ek7ia.php on line 14\n\nDeprecated: Implicit conversion from float 6.4 to int loses precision in /tmp/tmp2m7ek7ia.php on line 14\n\nDeprecated: Implicit conversion from float 7.4 to int loses precision in /tmp/tmp2m7ek7ia.php on line 13\n\nDeprecated: Implicit conversion from float 8.4 to int loses precision in /tmp/tmp2m7ek7ia.php on line 13\n\nDeprecated: Implicit conversion from float 9.4 to int loses precision in /tmp/tmp2m7ek7ia.php on line 13\n\nDeprecated: Implicit conversion from float 5.12 to int loses precision in /tmp/tmp2m7ek7ia.php on line 13\n\nDeprecated: Implicit conversion from float 6.12 to int loses precision in /tmp/tmp2m7ek7ia.php on line 13\n\nDeprecated: Implicit conversion from float 6.12 to int loses precision in /tmp/tmp2m7ek7ia.php on line 14\n\nDeprecated: Implicit conversion from float 6.12 to int loses preci",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 3, 8, 2, 1, 4);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 3, 2, 5, 4, 7, 6, 9, 8);\necho '<pre>';\nprint_r(comb_sort($nums));\necho '</pre>';\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n</pre>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 2, 3);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 5\n    [3] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 2, 3);\necho \"Original Array :\\n\";\necho implode(', ', $nums );\necho \"\\nSorted Array\\n:\";\necho implode(', ', comb_sort($nums)) . PHP_EOL;\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Original Array :\n10, 5, 2, 3\nSorted Array\n:2, 3, 5, 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 4, 3, 2, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\nprint_r(comb_sort($nums));\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3];\necho implode(', ', comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "1, 1, 2, 3, 3, 4, 5, 5, 6, 9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, -4, 3, 7, 2, 1, 0, 8, 9, 2);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => -4\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 2\n    [5] => 3\n    [6] => 5\n    [7] => 7\n    [8] => 8\n    [9] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n$nums = array(1, 5, 2, 7, 3, 9, 4, 6, 8);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 5, 1, 2, 4);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 5, 1, 2, 4);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmpw6vu4aro.php on line 13\n\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmpw6vu4aro.php on line 14\n\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmpw6vu4aro.php on line 14\n\nDeprecated: Implicit conversion from float 4.2 to int loses precision in /tmp/tmpw6vu4aro.php on line 13\n\nDeprecated: Implicit conversion from float 4.2 to int loses precision in /tmp/tmpw6vu4aro.php on line 14\n\nDeprecated: Implicit conversion from float 4.2 to int loses precision in /tmp/tmpw6vu4aro.php on line 14\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmpw6vu4aro.php on line 13\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmpw6vu4aro.php on line 14\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmpw6vu4aro.php on line 14\n\nDeprecated: Implicit conversion from float 3.56 to int loses preci",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.247330950103979);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 1, 4, 1, 5, 9, 2, 6, 5, 3);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 2\n    [3] => 3\n    [4] => 3\n    [5] => 4\n    [6] => 5\n    [7] => 5\n    [8] => 6\n    [9] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3, 2, 3, 8, 4, 6, 2, 6, 4, 3, 3, 8, 3, 2, 7, 9, 5, 0, 2, 8, 8, 4, 1, 9, 7, 1, 6, 9, 3, 9, 9, 3, 7, 5, 1, 0, 5, 8, 2, 0, 9, 7, 4, 9, 4, 4, 5, 9, 2, 3, 0, 7, 8, 1, 6, 4, 0, 6, 2, 8, 6);\n\necho implode(', ', comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [3, 5, 2, 6, 8, 1, 0, 3, 5, 6, 2, 5, 4, 1, 5, 3];\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 0\n    [1] => 1\n    [2] => 1\n    [3] => 2\n    [4] => 2\n    [5] => 3\n    [6] => 3\n    [7] => 3\n    [8] => 4\n    [9] => 5\n    [10] => 5\n    [11] => 5\n    [12] => 5\n    [13] => 6\n    [14] => 6\n    [15] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n$nums = array(1, 3, 2, 5, 4, 7, 6, 9, 8);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap != 1 || $swap) {\n        $gap = floor($gap / 1.25);\n        if ($gap < 1) {\n            $gap = 1;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(4, 3, 2, 1, 5, 6, 7, 8, 9, 10);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 2, 3);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 5\n    [3] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 1, 5, 2, 4);\necho implode(', ', comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "1, 2, 3, 4, 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(23, 1, 2, 11, 24, 22, 19, 6, 10, 7, 25, 20, 5, 8, 18, 12, 13, 14, 15, 16, 17, 21, 3, 4, 9);\n$nums = comb_sort($nums);\necho implode(', ', $nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 2, 3);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmpffpogkuz.php on line 13\n\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmpffpogkuz.php on line 14\n\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmpffpogkuz.php on line 14\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmpffpogkuz.php on line 13\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmpffpogkuz.php on line 14\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmpffpogkuz.php on line 14\n\nDeprecated: Implicit conversion from float 3.56 to int loses precision in /tmp/tmpffpogkuz.php on line 13\n\nDeprecated: Implicit conversion from float 2.048 to int loses precision in /tmp/tmpffpogkuz.php on line 13\n\nDeprecated: Implicit conversion from float 3.048 to int loses precision in /tmp/tmpffpogkuz.php on line 13\n\nDeprecated: Implicit conversion from float 1.6384 to int lose",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = false;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = false;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [1, 5, 2, 3, 4, 7, 6];\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 50, 20, 40, 30);\necho \"Original Array :\\n\";\necho implode(', ',$nums );\necho \"\\nSorted Array :\\n\";\necho implode(', ',comb_sort($nums)). PHP_EOL;\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Original Array :\n10, 50, 20, 40, 30\nSorted Array :\n10, 20, 30, 40, 50\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 4, 3, 2, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 4, 3, 2, 1);\nprint_r(comb_sort($nums));\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(3, 0, 2, 5, -1, 4, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => -1\n    [1] => 0\n    [2] => 1\n    [3] => 2\n    [4] => 3\n    [5] => 4\n    [6] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 2, 3);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 5\n    [3] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [1, 5, 2, 8, 3, 9, 4, 7, 6];\necho implode(', ', comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "1, 2, 3, 4, 5, 6, 7, 8, 9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 2, 3);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmpffpogkuz.php on line 13\n\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmpffpogkuz.php on line 14\n\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmpffpogkuz.php on line 14\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmpffpogkuz.php on line 13\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmpffpogkuz.php on line 14\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmpffpogkuz.php on line 14\n\nDeprecated: Implicit conversion from float 3.56 to int loses precision in /tmp/tmpffpogkuz.php on line 13\n\nDeprecated: Implicit conversion from float 2.048 to int loses precision in /tmp/tmpffpogkuz.php on line 13\n\nDeprecated: Implicit conversion from float 3.048 to int loses precision in /tmp/tmpffpogkuz.php on line 13\n\nDeprecated: Implicit conversion from float 1.6384 to int lose",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 4, 3, 2, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 3, 8, 2, 1, 4);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 4.8 to int loses precision in /tmp/tmp68ssya_d.php on line 13\n\nDeprecated: Implicit conversion from float 4.8 to int loses precision in /tmp/tmp68ssya_d.php on line 14\n\nDeprecated: Implicit conversion from float 4.8 to int loses precision in /tmp/tmp68ssya_d.php on line 14\n\nDeprecated: Implicit conversion from float 5.8 to int loses precision in /tmp/tmp68ssya_d.php on line 13\n\nDeprecated: Implicit conversion from float 3.84 to int loses precision in /tmp/tmp68ssya_d.php on line 13\n\nDeprecated: Implicit conversion from float 4.84 to int loses precision in /tmp/tmp68ssya_d.php on line 13\n\nDeprecated: Implicit conversion from float 5.84 to int loses precision in /tmp/tmp68ssya_d.php on line 13\n\nDeprecated: Implicit conversion from float 5.84 to int loses precision in /tmp/tmp68ssya_d.php on line 14\n\nDeprecated: Implicit conversion from float 5.84 to int loses precision in /tmp/tmp68ssya_d.php on line 14\n\nDeprecated: Implicit conversion from float 3.072 to int loses pr",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 4, 3, 2, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 4.2 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 3.56 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 4.5600000000000005 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 2.048 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 3.048 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 4.048 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 1.6384 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.247330950103979;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 4, 3, 2, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 4.008559235688967 to int loses precision in /tmp/tmpnlmhwoko.php on line 13\n\nDeprecated: Implicit conversion from float 4.008559235688967 to int loses precision in /tmp/tmpnlmhwoko.php on line 14\n\nDeprecated: Implicit conversion from float 4.008559235688967 to int loses precision in /tmp/tmpnlmhwoko.php on line 14\n\nDeprecated: Implicit conversion from float 3.2137094292054633 to int loses precision in /tmp/tmpnlmhwoko.php on line 13\n\nDeprecated: Implicit conversion from float 4.213709429205464 to int loses precision in /tmp/tmpnlmhwoko.php on line 13\n\nDeprecated: Implicit conversion from float 2.576468922652456 to int loses precision in /tmp/tmpnlmhwoko.php on line 13\n\nDeprecated: Implicit conversion from float 3.576468922652456 to int loses precision in /tmp/tmpnlmhwoko.php on line 13\n\nDeprecated: Implicit conversion from float 3.576468922652456 to int loses precision in /tmp/tmpnlmhwoko.php on line 14\n\nDeprecated: Implicit conversion from float 3.576468922652456 t",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 5, 2, 7, 3, 9, 4);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 7\n    [6] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n$nums = array(5, 3, 8, 2, 1, 4);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 4.8 to int loses precision in /tmp/tmp6nwh2o2y.php on line 13\n\nDeprecated: Implicit conversion from float 4.8 to int loses precision in /tmp/tmp6nwh2o2y.php on line 14\n\nDeprecated: Implicit conversion from float 4.8 to int loses precision in /tmp/tmp6nwh2o2y.php on line 14\n\nDeprecated: Implicit conversion from float 5.8 to int loses precision in /tmp/tmp6nwh2o2y.php on line 13\n\nDeprecated: Implicit conversion from float 3.84 to int loses precision in /tmp/tmp6nwh2o2y.php on line 13\n\nDeprecated: Implicit conversion from float 4.84 to int loses precision in /tmp/tmp6nwh2o2y.php on line 13\n\nDeprecated: Implicit conversion from float 5.84 to int loses precision in /tmp/tmp6nwh2o2y.php on line 13\n\nDeprecated: Implicit conversion from float 5.84 to int loses precision in /tmp/tmp6nwh2o2y.php on line 14\n\nDeprecated: Implicit conversion from float 5.84 to int loses precision in /tmp/tmp6nwh2o2y.php on line 14\n\nDeprecated: Implicit conversion from float 3.072 to int loses pr",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [5, 4, 3, 2, 1];\n$nums = comb_sort($nums);\nprint_r($nums);\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 50, 20, 40, 30);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 10\n    [1] => 20\n    [2] => 30\n    [3] => 40\n    [4] => 50\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(2, 3, 2, 5, 6, 1, -2, 3, 14, 12);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => -2\n    [1] => 1\n    [2] => 2\n    [3] => 2\n    [4] => 3\n    [5] => 3\n    [6] => 5\n    [7] => 6\n    [8] => 12\n    [9] => 14\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.247330950103979;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n$nums = array(1, 3, 2, 4, 5, 7, 6, 9, 8);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 7.215406624240141 to int loses precision in /tmp/tmpaif8v9bp.php on line 13\n\nDeprecated: Implicit conversion from float 8.215406624240142 to int loses precision in /tmp/tmpaif8v9bp.php on line 13\n\nDeprecated: Implicit conversion from float 5.784676972569835 to int loses precision in /tmp/tmpaif8v9bp.php on line 13\n\nDeprecated: Implicit conversion from float 6.784676972569835 to int loses precision in /tmp/tmpaif8v9bp.php on line 13\n\nDeprecated: Implicit conversion from float 7.784676972569835 to int loses precision in /tmp/tmpaif8v9bp.php on line 13\n\nDeprecated: Implicit conversion from float 8.784676972569834 to int loses precision in /tmp/tmpaif8v9bp.php on line 13\n\nDeprecated: Implicit conversion from float 4.637644060774421 to int loses precision in /tmp/tmpaif8v9bp.php on line 13\n\nDeprecated: Implicit conversion from float 5.637644060774421 to int loses precision in /tmp/tmpaif8v9bp.php on line 13\n\nDeprecated: Implicit conversion from float 6.637644060774421 to",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 3, 1, 2, 4);\necho implode(', ', comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "1, 2, 3, 4, 5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.247330950103979);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(1, 3, 2, 5, 4, 7, 6, 9, 8);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(2, 3, 2, 5, 6, 1, -2, 3, 14, 12);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => -2\n    [1] => 1\n    [2] => 2\n    [3] => 2\n    [4] => 3\n    [5] => 3\n    [6] => 5\n    [7] => 6\n    [8] => 12\n    [9] => 14\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = false;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [1, 5, 2, 4, 3];\nprint_r(comb_sort($nums));\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 2, 3);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmpffpogkuz.php on line 13\n\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmpffpogkuz.php on line 14\n\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmpffpogkuz.php on line 14\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmpffpogkuz.php on line 13\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmpffpogkuz.php on line 14\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmpffpogkuz.php on line 14\n\nDeprecated: Implicit conversion from float 3.56 to int loses precision in /tmp/tmpffpogkuz.php on line 13\n\nDeprecated: Implicit conversion from float 2.048 to int loses precision in /tmp/tmpffpogkuz.php on line 13\n\nDeprecated: Implicit conversion from float 3.048 to int loses precision in /tmp/tmpffpogkuz.php on line 13\n\nDeprecated: Implicit conversion from float 1.6384 to int lose",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n\n        $swapped = false;\n        $i = 0;\n\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [3, 4, 2, 1, 5, 6, 7, 8, 9, 10];\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(100, 54, 7, 2, 5, 3, 1, 2, 0, -1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 6.4 to int loses precision in /tmp/tmpavmtuvp7.php on line 13\n\nDeprecated: Implicit conversion from float 7.4 to int loses precision in /tmp/tmpavmtuvp7.php on line 13\n\nDeprecated: Implicit conversion from float 8.4 to int loses precision in /tmp/tmpavmtuvp7.php on line 13\n\nDeprecated: Implicit conversion from float 9.4 to int loses precision in /tmp/tmpavmtuvp7.php on line 13\n\nDeprecated: Implicit conversion from float 5.12 to int loses precision in /tmp/tmpavmtuvp7.php on line 13\n\nDeprecated: Implicit conversion from float 6.12 to int loses precision in /tmp/tmpavmtuvp7.php on line 13\n\nDeprecated: Implicit conversion from float 7.12 to int loses precision in /tmp/tmpavmtuvp7.php on line 13\n\nDeprecated: Implicit conversion from float 7.12 to int loses precision in /tmp/tmpavmtuvp7.php on line 14\n\nDeprecated: Implicit conversion from float 7.12 to int loses precision in /tmp/tmpavmtuvp7.php on line 14\n\nDeprecated: Implicit conversion from float 8.120000000000001 to ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(2, 5, 1, 0, 4);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 50, 20, 40, 30, 70, 60, 80, 90);\necho \"Original Array :\\n\";\necho implode(', ',$nums );\necho \"\\nSorted Array :\\n\";\necho implode(', ',comb_sort($nums)).\"\\n\";\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Original Array :\n10, 50, 20, 40, 30, 70, 60, 80, 90\nSorted Array :\n10, 20, 30, 40, 50, 60, 70, 80, 90\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 2, 5, 1, 9, 4, 3, 8, 6, 7);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 3, 8, 2, 6, 4, 7, 9, 1);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 4, 3, 2, 1);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.247330950103979);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap /= 1.25;\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "\nDeprecated: Implicit conversion from float 3.2 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 4.2 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 2.56 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 3.56 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 4.5600000000000005 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 2.048 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 3.048 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 4.048 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float 1.6384 to int loses precision in /tmp/tmptnb0lv79.php on line 13\n\nDeprecated: Implicit conversion from float ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $tmp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $tmp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(10, 5, 2, 3);\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 5\n    [3] => 10\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = array(5, 3, 1, 2, 4);\n$nums = comb_sort($nums);\nprint_r($nums);\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.25);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                list($nums[$i], $nums[$i + $gap]) = array($nums[$i + $gap], $nums[$i]);\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $swap = true;\n    while ($gap > 1 || $swap) {\n        if ($gap > 1) {\n            $gap = floor($gap / 1.247330950103979);\n        }\n        $swap = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swap = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n        $swapped = false;\n        $i = 0;\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n            $i++;\n        }\n    }\n    return $nums;\n}\n\n$nums = [5, 3, 8, 2, 1, 4];\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 8\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to sort an array of elements.\nfunction comb_sort($nums) {\n    $gap = count($nums);\n    $shrink = 1.3;\n    $swapped = true;\n\n    while ($gap > 1 || $swapped) {\n        if ($gap > 1) {\n            $gap = floor($gap / $shrink);\n        }\n\n        $swapped = false;\n        $i = 0;\n\n        while ($i + $gap < count($nums)) {\n            if ($nums[$i] > $nums[$i + $gap]) {\n                $temp = $nums[$i];\n                $nums[$i] = $nums[$i + $gap];\n                $nums[$i + $gap] = $temp;\n                $swapped = true;\n            }\n\n            $i++;\n        }\n    }\n\n    return $nums;\n}\n\n$nums = [3, 5, 2, 1, 7, 4, 9, 8, 6];\nprint_r(comb_sort($nums));\nfunction candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}