{
  "name": "mbpp_745_divisible_by_digits",
  "language": "php",
  "prompt": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp8531zd18.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmp8531zd18.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmp8531zd18.php(17): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmp8531zd18.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(10, 30));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpi2rcugfa.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpi2rcugfa.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpi2rcugfa.php(15): divisible_by_digits(10, 30)\n#3 {main}\n  thrown in /tmp/tmpi2rcugfa.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($num) {\n        $digits = str_split($num);\n        foreach ($digits as $digit) {\n            if ($num % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpqu0z_pc1.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpqu0z_pc1.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpqu0z_pc1.php(16): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpqu0z_pc1.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $flag = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"Numbers between $startnum and $endnum which are divisible by every digit it contains: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "Numbers between 100 and 1000 which are divisible by every digit it contains: \nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpj7rlzcrg.php:9\nStack trace:\n#0 /tmp/tmpj7rlzcrg.php(24): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpj7rlzcrg.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = range($startnum, $endnum);\n    $result = array_filter($numbers, function($number) {\n        $digits = str_split($number);\n        $divisible = true;\n        foreach($digits as $digit) {\n            if($number % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpr4in3l3b.php:9\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpr4in3l3b.php(15): array_filter(Array, Object(Closure))\n#2 /tmp/tmpr4in3l3b.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpr4in3l3b.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $divisible = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n            $num = floor($num / 10);\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 11\n    [10] => 12\n    [11] => 15\n    [12] => 22\n    [13] => 24\n    [14] => 33\n    [15] => 36\n    [16] => 44\n    [17] => 48\n    [18] => 55\n    [19] => 66\n    [20] => 77\n    [21] => 88\n    [22] => 99\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($num) {\n        $digits = str_split($num);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($num % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmptewcu4r4.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmptewcu4r4.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmptewcu4r4.php(18): divisible_by_digits(10, 20)\n#3 {main}\n  thrown in /tmp/tmptewcu4r4.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function($carry, $digit) use ($n) {\n            return $carry && $n % $digit == 0;\n        }, true);\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpzt7wo3ax.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmpzt7wo3ax.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmpzt7wo3ax.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmpzt7wo3ax.php(12): divisible_by_digits(1, 100)\n#5 {main}\n  thrown in /tmp/tmpzt7wo3ax.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmposuof1eh.php:9\nStack trace:\n#0 /tmp/tmposuof1eh.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmposuof1eh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $is_divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $is_divisible = false;\n                break;\n            }\n        }\n        if ($is_divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum divisible by every digit it contains: \" . implode(', ', $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp274jayqo.php:9\nStack trace:\n#0 /tmp/tmp274jayqo.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmp274jayqo.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $str = strval($i);\n        $flag = true;\n        for ($j = 0; $j < strlen($str); $j++) {\n            if ($i % intval($str[$j]) != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            array_push($result, $i);\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpws3gqe7r.php:9\nStack trace:\n#0 /tmp/tmpws3gqe7r.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmpws3gqe7r.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpmnshy2ng.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpmnshy2ng.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpmnshy2ng.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpmnshy2ng.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $is_divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $is_divisible = false;\n                break;\n            }\n        }\n        if ($is_divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers from $startnum to $endnum divisible by every digit it contains: \";\necho implode(', ', $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp8337iqu9.php:9\nStack trace:\n#0 /tmp/tmp8337iqu9.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmp8337iqu9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpmnshy2ng.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpmnshy2ng.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpmnshy2ng.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpmnshy2ng.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $divisible = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n            $num = floor($num / 10);\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum divisible by every digit it contains are: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "Numbers between 100 and 1000 divisible by every digit it contains are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function($carry, $digit) use ($n) {\n            return $carry && $n % $digit == 0;\n        }, true);\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpph3cbo8n.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmpph3cbo8n.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmpph3cbo8n.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmpph3cbo8n.php(13): divisible_by_digits(10, 20)\n#5 {main}\n  thrown in /tmp/tmpph3cbo8n.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = (int) ($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\nprint_r($result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "Array\n(\n    [0] => 111\n    [1] => 112\n    [2] => 115\n    [3] => 122\n    [4] => 124\n    [5] => 126\n    [6] => 128\n    [7] => 132\n    [8] => 135\n    [9] => 144\n    [10] => 155\n    [11] => 162\n    [12] => 168\n    [13] => 175\n    [14] => 184\n    [15] => 212\n    [16] => 216\n    [17] => 222\n    [18] => 224\n    [19] => 244\n    [20] => 248\n    [21] => 264\n    [22] => 288\n    [23] => 312\n    [24] => 315\n    [25] => 324\n    [26] => 333\n    [27] => 336\n    [28] => 366\n    [29] => 384\n    [30] => 396\n    [31] => 412\n    [32] => 424\n    [33] => 432\n    [34] => 444\n    [35] => 448\n    [36] => 488\n    [37] => 515\n    [38] => 555\n    [39] => 612\n    [40] => 624\n    [41] => 636\n    [42] => 648\n    [43] => 666\n    [44] => 672\n    [45] => 728\n    [46] => 735\n    [47] => 777\n    [48] => 784\n    [49] => 816\n    [50] => 824\n    [51] => 848\n    [52] => 864\n    [53] => 888\n    [54] => 936\n    [55] => 999\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = range($startnum, $endnum);\n    $result = array_filter($numbers, function($number) {\n        $digits = str_split($number);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpqdswamv3.php:9\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpqdswamv3.php(15): array_filter(Array, Object(Closure))\n#2 /tmp/tmpqdswamv3.php(19): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpqdswamv3.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($num) {\n        $digits = str_split($num);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($num % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpn_d6pz4y.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpn_d6pz4y.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpn_d6pz4y.php(17): divisible_by_digits(10, 20)\n#3 {main}\n  thrown in /tmp/tmpn_d6pz4y.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpcao7qrg7.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpcao7qrg7.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpcao7qrg7.php(16): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpcao7qrg7.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function ($n) {\n        $digits = str_split($n);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpl2t660cu.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpl2t660cu.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpl2t660cu.php(17): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpl2t660cu.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $num = $i;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num /= 10;\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"Numbers between $startnum and $endnum which are divisible by every digit it contains are: \";\necho implode(\", \", divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "Numbers between 100 and 1000 which are divisible by every digit it contains are: \nDeprecated: Implicit conversion from float 10.1 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 10.2 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 10.4 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 10.5 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 11.1 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 1.1099999999999999 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 0.11099999999999999 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 11.2 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 1.1199999999999999 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 0.11199999999999999 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 11.5 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 1.15 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 0.11499999999999999 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 12.1 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 12.2 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 1.22 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 0.122 to int loses precision in /tmp/tmpjcjydrxp.php on line 9\n\nDeprecated: Implicit conversion from float 12.3 to int loses precision in /tmp/tmpjcjydrxp",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function($carry, $digit) use ($n) {\n            return $carry && ($n % $digit == 0);\n        }, true);\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpkr4liv2s.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmpkr4liv2s.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmpkr4liv2s.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmpkr4liv2s.php(13): divisible_by_digits(10, 20)\n#5 {main}\n  thrown in /tmp/tmpkr4liv2s.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function($carry, $item) use ($n) {\n            return $carry && ($n % $item == 0);\n        }, true);\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpfy0dxrba.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmpfy0dxrba.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmpfy0dxrba.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmpfy0dxrba.php(12): divisible_by_digits(10, 20)\n#5 {main}\n  thrown in /tmp/tmpfy0dxrba.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpcao7qrg7.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpcao7qrg7.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpcao7qrg7.php(16): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpcao7qrg7.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmposuof1eh.php:9\nStack trace:\n#0 /tmp/tmposuof1eh.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmposuof1eh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($number) {\n        $digits = str_split($number);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpaem3m_t9.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpaem3m_t9.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpaem3m_t9.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpaem3m_t9.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($number) {\n        $digits = str_split($number);\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpc3a2tjiz.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpc3a2tjiz.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpc3a2tjiz.php(16): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpc3a2tjiz.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $rem = $num % 10;\n            if ($rem == 0 || $i % $rem != 0) {\n                $flag = false;\n                break;\n            }\n            $num = $num / 10;\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum which are divisible by their digits are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 100 and 1000 which are divisible by their digits are: \nDeprecated: Implicit conversion from float 10.1 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 10.2 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 10.4 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 10.5 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 11.1 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 1.1099999999999999 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 0.11099999999999999 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 11.2 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 1.1199999999999999 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 0.11199999999999999 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 11.5 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 1.15 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 0.11499999999999999 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 12.1 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 12.2 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 1.22 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 0.122 to int loses precision in /tmp/tmpw1cme30n.php on line 9\n\nDeprecated: Implicit conversion from float 12.3 to int loses precision in /tmp/tmpw1cme30n.php on",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = range($startnum, $endnum);\n    $result = array_filter($numbers, function($number) {\n        $digits = str_split($number);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $divisible = false;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp14pj1xiu.php:9\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmp14pj1xiu.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmp14pj1xiu.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmp14pj1xiu.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($num) {\n        $digits = str_split($num);\n        foreach ($digits as $digit) {\n            if ($digit == 0) {\n                return false;\n            }\n            if ($num % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [10] => 11\n    [11] => 12\n    [14] => 15\n    [21] => 22\n    [23] => 24\n    [32] => 33\n    [35] => 36\n    [43] => 44\n    [47] => 48\n    [54] => 55\n    [65] => 66\n    [76] => 77\n    [87] => 88\n    [98] => 99\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpghnzpha3.php:25\nStack trace:\n#0 /tmp/tmpghnzpha3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpghnzpha3.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($number) {\n        $digits = str_split($number);\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp1efv7s5p.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmp1efv7s5p.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmp1efv7s5p.php(16): divisible_by_digits(10, 20)\n#3 {main}\n  thrown in /tmp/tmp1efv7s5p.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum which are divisible by their digits are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "The numbers between 100 and 1000 which are divisible by their digits are: \nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmppc2e8689.php:9\nStack trace:\n#0 /tmp/tmppc2e8689.php(24): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmppc2e8689.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $arr = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = 0;\n        while ($num > 0) {\n            $rem = $num % 10;\n            if ($rem == 0) {\n                $flag = 1;\n                break;\n            }\n            if ($i % $rem != 0) {\n                $flag = 1;\n                break;\n            }\n            $num = $num / 10;\n        }\n        if ($flag == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum are divisible by every digit it contains are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 100 and 1000 are divisible by every digit it contains are: \nDeprecated: Implicit conversion from float 10.1 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 10.2 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 10.4 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 10.5 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 11.1 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 1.1099999999999999 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 0.11099999999999999 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 11.2 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 1.1199999999999999 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 0.11199999999999999 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 11.5 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 1.15 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 0.11499999999999999 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 12.1 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 12.2 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 1.22 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 0.122 to int loses precision in /tmp/tmp5xbxypgu.php on line 9\n\nDeprecated: Implicit conversion from float 12.3 to int loses precision in /tmp/tmp5xbxypgu.p",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpmnshy2ng.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpmnshy2ng.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpmnshy2ng.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpmnshy2ng.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = (int)($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum which are divisible by the digits they contain are: \";\necho implode(\", \", divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "The numbers between 100 and 1000 which are divisible by the digits they contain are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmposuof1eh.php:9\nStack trace:\n#0 /tmp/tmposuof1eh.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmposuof1eh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpve88ts3z.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpve88ts3z.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpve88ts3z.php(15): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpve88ts3z.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function($carry, $digit) use ($n) {\n            return $carry && $n % $digit == 0;\n        }, true);\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp72yljb6o.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmp72yljb6o.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmp72yljb6o.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmp72yljb6o.php(13): divisible_by_digits(1, 100)\n#5 {main}\n  thrown in /tmp/tmp72yljb6o.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $arr = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = floor($num / 10);\n        }\n        if ($flag) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n}\n\nprint_r(divisible_by_digits(1, 100));\necho \"<br>\";\nprint_r(divisible_by_digits(100, 200));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 11\n    [10] => 12\n    [11] => 15\n    [12] => 22\n    [13] => 24\n    [14] => 33\n    [15] => 36\n    [16] => 44\n    [17] => 48\n    [18] => 55\n    [19] => 66\n    [20] => 77\n    [21] => 88\n    [22] => 99\n)\n<br>Array\n(\n    [0] => 111\n    [1] => 112\n    [2] => 115\n    [3] => 122\n    [4] => 124\n    [5] => 126\n    [6] => 128\n    [7] => 132\n    [8] => 135\n    [9] => 144\n    [10] => 155\n    [11] => 162\n    [12] => 168\n    [13] => 175\n    [14] => 184\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmposuof1eh.php:9\nStack trace:\n#0 /tmp/tmposuof1eh.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmposuof1eh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\necho \"Divisible by digits: \";\necho implode(\", \", divisible_by_digits(10, 20));\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "Divisible by digits: \nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpplk10zue.php:9\nStack trace:\n#0 /tmp/tmpplk10zue.php(22): divisible_by_digits(10, 20)\n#1 {main}\n  thrown in /tmp/tmpplk10zue.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n\necho \"The numbers between $startnum and $endnum divisible by the digits they contain are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "The numbers between 100 and 1000 divisible by the digits they contain are: \nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpydz1rcdz.php:9\nStack trace:\n#0 /tmp/tmpydz1rcdz.php(25): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpydz1rcdz.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function($carry, $digit) use ($n) {\n            return $carry && $n % $digit == 0;\n        }, true);\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpd7h6fc4p.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmpd7h6fc4p.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmpd7h6fc4p.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmpd7h6fc4p.php(12): divisible_by_digits(10, 20)\n#5 {main}\n  thrown in /tmp/tmpd7h6fc4p.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $digits = str_split($i);\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum are divisible by every digit it contains are : \";\necho implode(', ', $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp7t6ikah0.php:9\nStack trace:\n#0 /tmp/tmp7t6ikah0.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmp7t6ikah0.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function($carry, $digit) use ($n) {\n            return $carry && ($n % $digit == 0);\n        }, true);\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpkr4liv2s.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmpkr4liv2s.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmpkr4liv2s.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmpkr4liv2s.php(13): divisible_by_digits(10, 20)\n#5 {main}\n  thrown in /tmp/tmpkr4liv2s.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmposuof1eh.php:9\nStack trace:\n#0 /tmp/tmposuof1eh.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmposuof1eh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = range($startnum, $endnum);\n    $divisible_by_digits = array_filter($numbers, function($number) {\n        $digits = str_split($number);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $divisible_by_digits;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpbwb2_13x.php:9\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpbwb2_13x.php(15): array_filter(Array, Object(Closure))\n#2 /tmp/tmpbwb2_13x.php(19): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpbwb2_13x.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function($carry, $digit) use ($n) {\n            return $carry && $n % $digit == 0;\n        }, true);\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpzt7wo3ax.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmpzt7wo3ax.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmpzt7wo3ax.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmpzt7wo3ax.php(12): divisible_by_digits(1, 100)\n#5 {main}\n  thrown in /tmp/tmpzt7wo3ax.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpve88ts3z.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpve88ts3z.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpve88ts3z.php(15): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpve88ts3z.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = floor($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum are divisible by the digits they contain: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "The numbers between 100 and 1000 are divisible by the digits they contain: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($num) {\n        $digits = str_split($num);\n        foreach ($digits as $digit) {\n            if ($num % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpve4auhvt.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpve4auhvt.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpve4auhvt.php(16): divisible_by_digits(10, 20)\n#3 {main}\n  thrown in /tmp/tmpve4auhvt.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmposuof1eh.php:9\nStack trace:\n#0 /tmp/tmposuof1eh.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmposuof1eh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = range($startnum, $endnum);\n    $result = array_filter($numbers, function($number) {\n        $digits = str_split($number);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpqdswamv3.php:9\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpqdswamv3.php(15): array_filter(Array, Object(Closure))\n#2 /tmp/tmpqdswamv3.php(19): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpqdswamv3.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmppfdnjlws.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmppfdnjlws.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmppfdnjlws.php(16): divisible_by_digits(10, 20)\n#3 {main}\n  thrown in /tmp/tmppfdnjlws.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"The numbers between $startnum and $endnum that are divisible by each digit it contains are: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpdwtr9q9f.php:9\nStack trace:\n#0 /tmp/tmpdwtr9q9f.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpdwtr9q9f.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $arr = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = 0;\n        $num = $i;\n        while ($num) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = 1;\n                break;\n            }\n            $num = (int) ($num / 10);\n        }\n        if ($flag == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$arr = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum are divisible by their digits are: \";\necho implode(', ', $arr);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "Numbers between 100 and 1000 are divisible by their digits are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\necho \"Divisible by digits from 1 to 100: \";\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "Divisible by digits from 1 to 100: \nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpmlai1dep.php:9\nStack trace:\n#0 /tmp/tmpmlai1dep.php(22): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmpmlai1dep.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmphfg29j_3.php:9\nStack trace:\n#0 /tmp/tmphfg29j_3.php(21): divisible_by_digits(10, 20)\n#1 {main}\n  thrown in /tmp/tmphfg29j_3.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function ($n) {\n        $digits = str_split($n);\n        foreach ($digits as $digit) {\n            if ($n % $digit !== 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpjnkjv60m.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpjnkjv60m.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpjnkjv60m.php(16): divisible_by_digits(10, 20)\n#3 {main}\n  thrown in /tmp/tmpjnkjv60m.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $digits = str_split($i);\n        foreach ($digits as $digit) {\n            if ($digit != 0 && $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n    [10] => 11\n    [11] => 12\n    [12] => 15\n    [13] => 20\n    [14] => 22\n    [15] => 24\n    [16] => 30\n    [17] => 33\n    [18] => 36\n    [19] => 40\n    [20] => 44\n    [21] => 48\n    [22] => 50\n    [23] => 55\n    [24] => 60\n    [25] => 66\n    [26] => 70\n    [27] => 77\n    [28] => 80\n    [29] => 88\n    [30] => 90\n    [31] => 99\n    [32] => 100\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7sfgnmpw.php:27\nStack trace:\n#0 /tmp/tmp7sfgnmpw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp7sfgnmpw.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($num) {\n        $digits = str_split($num);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($num % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp3nlwhbig.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmp3nlwhbig.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmp3nlwhbig.php(17): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmp3nlwhbig.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmposuof1eh.php:9\nStack trace:\n#0 /tmp/tmposuof1eh.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmposuof1eh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n  $result = array();\n  for ($i = $startnum; $i <= $endnum; $i++) {\n    $digits = str_split($i);\n    $divisible = true;\n    foreach ($digits as $digit) {\n      if ($i % $digit != 0) {\n        $divisible = false;\n        break;\n      }\n    }\n    if ($divisible) {\n      $result[] = $i;\n    }\n  }\n  return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"Numbers between $startnum and $endnum which are divisible by their digits are: \";\n$result = divisible_by_digits($startnum, $endnum);\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "Numbers between 100 and 1000 which are divisible by their digits are: \nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpkqlgvca5.php:9\nStack trace:\n#0 /tmp/tmpkqlgvca5.php(24): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpkqlgvca5.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = floor($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum which are divisible by the sum of their digits are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "The numbers between 100 and 1000 which are divisible by the sum of their digits are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $divisible = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n            $num = (int)($num / 10);\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 1;\n$endnum = 100;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum which are divisible by every digit it contains: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "Numbers between 1 and 100 which are divisible by every digit it contains: 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24, 33, 36, 44, 48, 55, 66, 77, 88, 99",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $numbers[] = $i;\n        }\n    }\n    return $numbers;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\nprint_r($result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmplkkbshkw.php:9\nStack trace:\n#0 /tmp/tmplkkbshkw.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmplkkbshkw.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $num = $i;\n        while ($num != 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = $num / 10;\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum which are divisible by every digit it contains: \";\necho implode(', ', $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nDeprecated: Implicit conversion from float 10.1 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 10.2 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 10.4 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 10.5 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 11.1 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 1.1099999999999999 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 0.11099999999999999 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 11.2 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 1.1199999999999999 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 0.11199999999999999 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 11.5 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 1.15 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 0.11499999999999999 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 12.1 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 12.2 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 1.22 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 0.122 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 12.3 to int loses precision in /tmp/tmp89fwkqw2.php on line 9\n\nDeprecated: Implicit conversion from float 12.4 to int loses prec",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0) {\n                $flag = false;\n                break;\n            }\n            if ($i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = (int) ($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum which are divisible by the sum of their digits are: \";\necho implode(\", \", divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "The numbers between 100 and 1000 which are divisible by the sum of their digits are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $digits = str_split($i);\n        foreach ($digits as $digit) {\n            if ($digit == 0) {\n                $flag = false;\n                break;\n            }\n            if ($i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum divisible by every digit it contains: \";\necho implode(', ', $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "Numbers between 100 and 1000 divisible by every digit it contains: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $num = $i;\n        while ($num > 0) {\n            $rem = $num % 10;\n            if ($rem == 0 || $i % $rem != 0) {\n                $flag = false;\n                break;\n            }\n            $num = (int) ($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum which are divisible by every digit it contains are: \";\necho implode(', ', $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "Numbers between 100 and 1000 which are divisible by every digit it contains are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"Numbers between $startnum and $endnum which are divisible by every digit it contains: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "Numbers between 100 and 1000 which are divisible by every digit it contains: \nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpxva0bb5w.php:9\nStack trace:\n#0 /tmp/tmpxva0bb5w.php(24): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpxva0bb5w.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        foreach($digits as $digit) {\n            if($n % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpwj_e1i0w.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpwj_e1i0w.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpwj_e1i0w.php(16): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpwj_e1i0w.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"Numbers between $startnum and $endnum which are divisible by every digit it contains are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "Numbers between 100 and 1000 which are divisible by every digit it contains are: \nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpggw_7pas.php:9\nStack trace:\n#0 /tmp/tmpggw_7pas.php(24): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpggw_7pas.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $num = $i;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = (int) ($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum which are divisible by the digits they contain are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "The numbers between 100 and 1000 which are divisible by the digits they contain are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function ($number) {\n        $digits = str_split($number);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpd329vwrx.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpd329vwrx.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpd329vwrx.php(18): divisible_by_digits(10, 20)\n#3 {main}\n  thrown in /tmp/tmpd329vwrx.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp7u_1jpl9.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmp7u_1jpl9.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmp7u_1jpl9.php(17): divisible_by_digits(10, 20)\n#3 {main}\n  thrown in /tmp/tmp7u_1jpl9.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmposuof1eh.php:9\nStack trace:\n#0 /tmp/tmposuof1eh.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmposuof1eh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function ($n) {\n        $digits = str_split($n);\n        foreach ($digits as $digit) {\n            if ($n % $digit !== 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpds68el76.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpds68el76.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpds68el76.php(16): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpds68el76.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($num) {\n        $digits = str_split($num);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($num % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp3nlwhbig.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmp3nlwhbig.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmp3nlwhbig.php(17): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmp3nlwhbig.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $rem = $num % 10;\n            if ($rem == 0 || $i % $rem != 0) {\n                $flag = false;\n                break;\n            }\n            $num = (int) ($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum which are divisible by every digit it contains are: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "Numbers between 100 and 1000 which are divisible by every digit it contains are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmposuof1eh.php:9\nStack trace:\n#0 /tmp/tmposuof1eh.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmposuof1eh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = floor($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 500;\nprint_r(divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "Array\n(\n    [0] => 111\n    [1] => 112\n    [2] => 115\n    [3] => 122\n    [4] => 124\n    [5] => 126\n    [6] => 128\n    [7] => 132\n    [8] => 135\n    [9] => 144\n    [10] => 155\n    [11] => 162\n    [12] => 168\n    [13] => 175\n    [14] => 184\n    [15] => 212\n    [16] => 216\n    [17] => 222\n    [18] => 224\n    [19] => 244\n    [20] => 248\n    [21] => 264\n    [22] => 288\n    [23] => 312\n    [24] => 315\n    [25] => 324\n    [26] => 333\n    [27] => 336\n    [28] => 366\n    [29] => 384\n    [30] => 396\n    [31] => 412\n    [32] => 424\n    [33] => 432\n    [34] => 444\n    [35] => 448\n    [36] => 488\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num != 0) {\n            $rem = $num % 10;\n            if ($rem == 0 || $i % $rem != 0) {\n                $flag = false;\n                break;\n            }\n            $num = (int) ($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum are divisible by every digit it contains are: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "Numbers between 100 and 1000 are divisible by every digit it contains are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = range($startnum, $endnum);\n    $result = array_filter($numbers, function($number) {\n        $digits = str_split($number);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpqdswamv3.php:9\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpqdswamv3.php(15): array_filter(Array, Object(Closure))\n#2 /tmp/tmpqdswamv3.php(19): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpqdswamv3.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $arr = [];\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            array_push($arr, $i);\n        }\n    }\n    return $arr;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpsc15lwu6.php:9\nStack trace:\n#0 /tmp/tmpsc15lwu6.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmpsc15lwu6.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $digits = str_split($i);\n        foreach ($digits as $digit) {\n            if ($digit != 0) {\n                if ($i % $digit != 0) {\n                    $flag = false;\n                    break;\n                }\n            }\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\necho \"<pre>\";\nprint_r(divisible_by_digits(1, 100));\necho \"</pre>\";\n\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n    [10] => 11\n    [11] => 12\n    [12] => 15\n    [13] => 20\n    [14] => 22\n    [15] => 24\n    [16] => 30\n    [17] => 33\n    [18] => 36\n    [19] => 40\n    [20] => 44\n    [21] => 48\n    [22] => 50\n    [23] => 55\n    [24] => 60\n    [25] => 66\n    [26] => 70\n    [27] => 77\n    [28] => 80\n    [29] => 88\n    [30] => 90\n    [31] => 99\n    [32] => 100\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7wyeymw6.php:32\nStack trace:\n#0 /tmp/tmp7wyeymw6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7wyeymw6.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = (int)($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 11\n    [10] => 12\n    [11] => 15\n    [12] => 22\n    [13] => 24\n    [14] => 33\n    [15] => 36\n    [16] => 44\n    [17] => 48\n    [18] => 55\n    [19] => 66\n    [20] => 77\n    [21] => 88\n    [22] => 99\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $is_divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $is_divisible = false;\n                break;\n            }\n        }\n        if ($is_divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\necho \"The numbers between 100 and 1000 divisible by digits are: \";\necho implode(\", \", divisible_by_digits(100, 1000));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 100 and 1000 divisible by digits are: \nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpos_19ji2.php:9\nStack trace:\n#0 /tmp/tmpos_19ji2.php(22): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpos_19ji2.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($num) {\n        $digits = str_split($num);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($num % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpzovnfwwd.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpzovnfwwd.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpzovnfwwd.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpzovnfwwd.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $num = $i;\n        while ($num > 0) {\n            $rem = $num % 10;\n            if ($rem == 0 || $i % $rem != 0) {\n                $flag = false;\n                break;\n            }\n            $num = $num / 10;\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum are divisible by their digits are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 100 and 1000 are divisible by their digits are: \nDeprecated: Implicit conversion from float 10.1 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 10.2 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 10.4 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 10.5 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 11.1 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 1.1099999999999999 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 0.11099999999999999 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 11.2 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 1.1199999999999999 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 0.11199999999999999 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 11.5 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 1.15 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 0.11499999999999999 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 12.1 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 12.2 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 1.22 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 0.122 to int loses precision in /tmp/tmpb0_9tpil.php on line 9\n\nDeprecated: Implicit conversion from float 12.3 to int loses precision in /tmp/tmpb0_9tpil.php on line ",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($number) {\n        $digits = str_split($number);\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpc3a2tjiz.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpc3a2tjiz.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpc3a2tjiz.php(16): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpc3a2tjiz.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmposuof1eh.php:9\nStack trace:\n#0 /tmp/tmposuof1eh.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmposuof1eh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $digits = str_split($i);\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpkoyudj8i.php:9\nStack trace:\n#0 /tmp/tmpkoyudj8i.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmpkoyudj8i.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($number) {\n        $digits = str_split($number);\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpjuoaatvd.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpjuoaatvd.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpjuoaatvd.php(17): divisible_by_digits(1, 22)\n#3 /tmp/tmpjuoaatvd.php(21): candidate(1, 22)\n#4 /tmp/tmpjuoaatvd.php(26): test()\n#5 {main}\n  thrown in /tmp/tmpjuoaatvd.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function($carry, $digit) use ($n) {\n            return $carry && ($n % $digit == 0);\n        }, true);\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpkr4liv2s.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmpkr4liv2s.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmpkr4liv2s.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmpkr4liv2s.php(13): divisible_by_digits(10, 20)\n#5 {main}\n  thrown in /tmp/tmpkr4liv2s.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = floor($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum which are divisible by every digit it contains are: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "Numbers between 100 and 1000 which are divisible by every digit it contains are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function ($number) {\n        $digits = str_split($number);\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpdmrvouw9.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpdmrvouw9.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpdmrvouw9.php(15): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpdmrvouw9.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum divisible by every digit it contains: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp35pyiq96.php:9\nStack trace:\n#0 /tmp/tmp35pyiq96.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmp35pyiq96.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $is_divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $is_divisible = false;\n                break;\n            }\n        }\n        if ($is_divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n\necho \"The numbers between $startnum and $endnum which are divisible by their digits are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 100 and 1000 which are divisible by their digits are: \nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpdjx6da99.php:9\nStack trace:\n#0 /tmp/tmpdjx6da99.php(25): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpdjx6da99.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = range($startnum, $endnum);\n    $result = array_filter($numbers, function ($number) {\n        $digits = str_split($number);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmppr2tvfqt.php:9\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmppr2tvfqt.php(15): array_filter(Array, Object(Closure))\n#2 /tmp/tmppr2tvfqt.php(19): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmppr2tvfqt.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $is_divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $is_divisible = false;\n                break;\n            }\n        }\n        if ($is_divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n\n$result = divisible_by_digits($startnum, $endnum);\n\necho \"The numbers between $startnum and $endnum which are divisible by every digit it contains are: \";\necho implode(', ', $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpo9vvxacw.php:9\nStack trace:\n#0 /tmp/tmpo9vvxacw.php(24): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpo9vvxacw.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($num) {\n        $digits = str_split($num);\n        foreach ($digits as $digit) {\n            if ($digit == 0) {\n                return false;\n            }\n            if ($num % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [10] => 11\n    [11] => 12\n    [14] => 15\n    [21] => 22\n    [23] => 24\n    [32] => 33\n    [35] => 36\n    [43] => 44\n    [47] => 48\n    [54] => 55\n    [65] => 66\n    [76] => 77\n    [87] => 88\n    [98] => 99\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpghnzpha3.php:25\nStack trace:\n#0 /tmp/tmpghnzpha3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpghnzpha3.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmphfg29j_3.php:9\nStack trace:\n#0 /tmp/tmphfg29j_3.php(21): divisible_by_digits(10, 20)\n#1 {main}\n  thrown in /tmp/tmphfg29j_3.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpi5aa97vb.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpi5aa97vb.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpi5aa97vb.php(15): divisible_by_digits(10, 20)\n#3 {main}\n  thrown in /tmp/tmpi5aa97vb.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $divisible = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n            $num = floor($num / 10);\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 1;\n$endnum = 100;\necho \"The numbers between $startnum and $endnum that are divisible by the digits they contain are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 1 and 100 that are divisible by the digits they contain are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24, 33, 36, 44, 48, 55, 66, 77, 88, 99",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = range($startnum, $endnum);\n    $result = array_filter($numbers, function($number) {\n        $digits = str_split($number);\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpa2qrada2.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpa2qrada2.php(13): array_filter(Array, Object(Closure))\n#2 /tmp/tmpa2qrada2.php(17): divisible_by_digits(10, 20)\n#3 {main}\n  thrown in /tmp/tmpa2qrada2.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $digits = str_split($i);\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"The numbers between $startnum and $endnum are divisible by every digit it contains are: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmphzk5ozg6.php:9\nStack trace:\n#0 /tmp/tmphzk5ozg6.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmphzk5ozg6.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $arr = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = 0;\n        $str = (string) $i;\n        for ($j = 0; $j < strlen($str); $j++) {\n            if ($str[$j] == 0) {\n                $flag = 1;\n                break;\n            }\n            if ($i % $str[$j] != 0) {\n                $flag = 1;\n                break;\n            }\n        }\n        if ($flag == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 11\n    [10] => 12\n    [11] => 15\n    [12] => 22\n    [13] => 24\n    [14] => 33\n    [15] => 36\n    [16] => 44\n    [17] => 48\n    [18] => 55\n    [19] => 66\n    [20] => 77\n    [21] => 88\n    [22] => 99\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $is_divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $is_divisible = false;\n                break;\n            }\n        }\n        if ($is_divisible) {\n            $numbers[] = $i;\n        }\n    }\n    return $numbers;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum which are divisible by every digit it contains are: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmptlk9elut.php:9\nStack trace:\n#0 /tmp/tmptlk9elut.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmptlk9elut.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function ($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function ($carry, $digit) use ($n) {\n            return $carry && $n % $digit == 0;\n        }, true);\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpr3vbqjam.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmpr3vbqjam.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmpr3vbqjam.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmpr3vbqjam.php(12): divisible_by_digits(1, 100)\n#5 {main}\n  thrown in /tmp/tmpr3vbqjam.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpmnshy2ng.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpmnshy2ng.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpmnshy2ng.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpmnshy2ng.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $arr = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $rem = $num % 10;\n            if ($rem == 0 || $i % $rem != 0) {\n                $flag = false;\n                break;\n            }\n            $num = $num / 10;\n        }\n        if ($flag) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nDeprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpeyx3ra8k.php on line 9\n\nDeprecated: Implicit conversion from float 0.2 to int loses precision in /tmp/tmpeyx3ra8k.php on line 9\n\nDeprecated: Implicit conversion from float 0.3 to int loses precision in /tmp/tmpeyx3ra8k.php on line 9\n\nDeprecated: Implicit conversion from float 0.4 to int loses precision in /tmp/tmpeyx3ra8k.php on line 9\n\nDeprecated: Implicit conversion from float 0.5 to int loses precision in /tmp/tmpeyx3ra8k.php on line 9\n\nDeprecated: Implicit conversion from float 0.6 to int loses precision in /tmp/tmpeyx3ra8k.php on line 9\n\nDeprecated: Implicit conversion from float 0.7 to int loses precision in /tmp/tmpeyx3ra8k.php on line 9\n\nDeprecated: Implicit conversion from float 0.8 to int loses precision in /tmp/tmpeyx3ra8k.php on line 9\n\nDeprecated: Implicit conversion from float 0.9 to int loses precision in /tmp/tmpeyx3ra8k.php on line 9\n\nDeprecated: Implicit conversion from float 1.1 to int loses precision in /tmp/",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $divisible = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n            $num = (int)($num / 10);\n        }\n        if ($divisible) {\n            array_push($result, $i);\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum divisible by every digit it contains are: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "Numbers between 100 and 1000 divisible by every digit it contains are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $digits = str_split($i);\n        foreach ($digits as $digit) {\n            if ($digit == 0) {\n                $flag = false;\n                break;\n            }\n            if ($i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            array_push($result, $i);\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum which are divisible by the digits they contain are: \";\necho implode(\", \", divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 100 and 1000 which are divisible by the digits they contain are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = array_map('intval', str_split($i));\n        if (array_reduce($digits, function($carry, $item) use ($i) {\n            return $carry && $i % $item == 0;\n        }, true)) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp1ugxftp0.php:8\nStack trace:\n#0 [internal function]: {closure}(true, 0)\n#1 /tmp/tmp1ugxftp0.php(9): array_reduce(Array, Object(Closure), true)\n#2 /tmp/tmp1ugxftp0.php(16): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmp1ugxftp0.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $is_divisible = true;\n        foreach ($digits as $digit) {\n            if ($digit == 0) {\n                $is_divisible = false;\n                break;\n            }\n            if ($i % $digit != 0) {\n                $is_divisible = false;\n                break;\n            }\n        }\n        if ($is_divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum divisible by digits: \" . implode(', ', $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "Numbers between 100 and 1000 divisible by digits: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = (int) ($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"The numbers between $startnum and $endnum which are divisible by every digit it contains are: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 100 and 1000 which are divisible by every digit it contains are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = (int) ($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum divisible by digits are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 100 and 1000 divisible by digits are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function($carry, $digit) use ($n) {\n            return $carry && $n % $digit == 0;\n        }, true);\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpph3cbo8n.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmpph3cbo8n.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmpph3cbo8n.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmpph3cbo8n.php(13): divisible_by_digits(10, 20)\n#5 {main}\n  thrown in /tmp/tmpph3cbo8n.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum divisible by every digit it contains: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp35pyiq96.php:9\nStack trace:\n#0 /tmp/tmp35pyiq96.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmp35pyiq96.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"Numbers between $startnum and $endnum which are divisible by every digit it contains: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "Numbers between 100 and 1000 which are divisible by every digit it contains: \nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpxva0bb5w.php:9\nStack trace:\n#0 /tmp/tmpxva0bb5w.php(24): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpxva0bb5w.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $arr = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = 0;\n        $num = $i;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0) {\n                $flag = 1;\n                break;\n            }\n            if ($i % $digit != 0) {\n                $flag = 1;\n                break;\n            }\n            $num = (int) ($num / 10);\n        }\n        if ($flag == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n}\n\n$startnum = 100;\n$endnum = 1000;\nprint_r(divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "Array\n(\n    [0] => 111\n    [1] => 112\n    [2] => 115\n    [3] => 122\n    [4] => 124\n    [5] => 126\n    [6] => 128\n    [7] => 132\n    [8] => 135\n    [9] => 144\n    [10] => 155\n    [11] => 162\n    [12] => 168\n    [13] => 175\n    [14] => 184\n    [15] => 212\n    [16] => 216\n    [17] => 222\n    [18] => 224\n    [19] => 244\n    [20] => 248\n    [21] => 264\n    [22] => 288\n    [23] => 312\n    [24] => 315\n    [25] => 324\n    [26] => 333\n    [27] => 336\n    [28] => 366\n    [29] => 384\n    [30] => 396\n    [31] => 412\n    [32] => 424\n    [33] => 432\n    [34] => 444\n    [35] => 448\n    [36] => 488\n    [37] => 515\n    [38] => 555\n    [39] => 612\n    [40] => 624\n    [41] => 636\n    [42] => 648\n    [43] => 666\n    [44] => 672\n    [45] => 728\n    [46] => 735\n    [47] => 777\n    [48] => 784\n    [49] => 816\n    [50] => 824\n    [51] => 848\n    [52] => 864\n    [53] => 888\n    [54] => 936\n    [55] => 999\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function ($n) {\n        $digits = str_split($n);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmptznk86q0.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmptznk86q0.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmptznk86q0.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmptznk86q0.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = [];\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $is_divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $is_divisible = false;\n                break;\n            }\n        }\n        if ($is_divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum divisible by every digit it contains: \" . implode(', ', $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpnr355n96.php:9\nStack trace:\n#0 /tmp/tmpnr355n96.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpnr355n96.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpcao7qrg7.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpcao7qrg7.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpcao7qrg7.php(16): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpcao7qrg7.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $is_divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $is_divisible = false;\n                break;\n            }\n        }\n        if ($is_divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\necho \"Divisible by digits: \";\nprint_r(divisible_by_digits(100, 1000));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "Divisible by digits: \nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpxrg9k71x.php:9\nStack trace:\n#0 /tmp/tmpxrg9k71x.php(22): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpxrg9k71x.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        foreach($digits as $digit) {\n            if($n % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpk88g88mt.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpk88g88mt.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpk88g88mt.php(15): divisible_by_digits(10, 20)\n#3 {main}\n  thrown in /tmp/tmpk88g88mt.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit !== 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp1wx3tmvk.php:9\nStack trace:\n#0 /tmp/tmp1wx3tmvk.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmp1wx3tmvk.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $flag = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpln7v52il.php:9\nStack trace:\n#0 /tmp/tmpln7v52il.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmpln7v52il.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 1;\n$endnum = 100;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum divisible by every digit it contains: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp8451ssvd.php:9\nStack trace:\n#0 /tmp/tmp8451ssvd.php(23): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmp8451ssvd.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = range($startnum, $endnum);\n    $result = array_filter($numbers, function($number) {\n        $digits = str_split($number);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $divisible = false;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpkea00bb9.php:9\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpkea00bb9.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpkea00bb9.php(18): divisible_by_digits(10, 20)\n#3 {main}\n  thrown in /tmp/tmpkea00bb9.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $is_divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $is_divisible = false;\n                break;\n            }\n        }\n        if ($is_divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\nprint_r(divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpa0n9bi1i.php:9\nStack trace:\n#0 /tmp/tmpa0n9bi1i.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpa0n9bi1i.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($var) {\n        $digits = str_split($var);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($var % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpejhq9ibj.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpejhq9ibj.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpejhq9ibj.php(18): divisible_by_digits(10, 20)\n#3 {main}\n  thrown in /tmp/tmpejhq9ibj.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmposuof1eh.php:9\nStack trace:\n#0 /tmp/tmposuof1eh.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmposuof1eh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum divisible by every digit it contains: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp35pyiq96.php:9\nStack trace:\n#0 /tmp/tmp35pyiq96.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmp35pyiq96.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function ($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function ($carry, $digit) use ($n) {\n            return $carry && $n % $digit == 0;\n        }, true);\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(100, 1000));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp85fgdcp2.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmp85fgdcp2.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(100)\n#3 /tmp/tmp85fgdcp2.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmp85fgdcp2.php(13): divisible_by_digits(100, 1000)\n#5 {main}\n  thrown in /tmp/tmp85fgdcp2.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $str = strval($i);\n        $flag = true;\n        for ($j = 0; $j < strlen($str); $j++) {\n            if ($i % intval($str[$j]) != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            array_push($result, $i);\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\n\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp0wqwp59f.php:9\nStack trace:\n#0 /tmp/tmp0wqwp59f.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmp0wqwp59f.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = range($startnum, $endnum);\n    $result = array_filter($numbers, function($number) {\n        $digits = str_split($number);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp91wkbo94.php:9\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmp91wkbo94.php(15): array_filter(Array, Object(Closure))\n#2 /tmp/tmp91wkbo94.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmp91wkbo94.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function($carry, $digit) use ($n) {\n            return $carry && ($n % $digit == 0);\n        }, true);\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpgn8533mq.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmpgn8533mq.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmpgn8533mq.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmpgn8533mq.php(13): divisible_by_digits(1, 100)\n#5 {main}\n  thrown in /tmp/tmpgn8533mq.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmppfdnjlws.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmppfdnjlws.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmppfdnjlws.php(16): divisible_by_digits(10, 20)\n#3 {main}\n  thrown in /tmp/tmppfdnjlws.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = [];\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\nprint_r(divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp_ojhl3jf.php:9\nStack trace:\n#0 /tmp/tmp_ojhl3jf.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmp_ojhl3jf.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum divisible by the digits it contains are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 100 and 1000 divisible by the digits it contains are: \nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpele4su7x.php:9\nStack trace:\n#0 /tmp/tmpele4su7x.php(24): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpele4su7x.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $is_divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $is_divisible = false;\n                break;\n            }\n        }\n        if ($is_divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum divisible by every digit it contains are: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpkouxx49q.php:9\nStack trace:\n#0 /tmp/tmpkouxx49q.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpkouxx49q.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = (int)($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"The numbers between $startnum and $endnum which are divisible by the digits they contain are: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 100 and 1000 which are divisible by the digits they contain are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function ($num) {\n        $digits = str_split($num);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($num % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpexblq3_5.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpexblq3_5.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpexblq3_5.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpexblq3_5.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $str = (string)$i;\n        $flag = true;\n        for ($j = 0; $j < strlen($str); $j++) {\n            if ($i % (int)$str[$j] != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\nprint_r(divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpn8m281xn.php:9\nStack trace:\n#0 /tmp/tmpn8m281xn.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpn8m281xn.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($number) {\n        $digits = str_split($number);\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1,100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp2bv3sgdr.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmp2bv3sgdr.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmp2bv3sgdr.php(16): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmp2bv3sgdr.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($num) {\n        $digits = str_split($num);\n        foreach ($digits as $digit) {\n            if ($num % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpqu0z_pc1.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpqu0z_pc1.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpqu0z_pc1.php(16): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpqu0z_pc1.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $digits = str_split($i);\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum that are divisible by every digit it contains: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp2evitdgy.php:9\nStack trace:\n#0 /tmp/tmp2evitdgy.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmp2evitdgy.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $rem = $num % 10;\n            if ($rem == 0 || $i % $rem != 0) {\n                $flag = false;\n                break;\n            }\n            $num = $num / 10;\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum which are divisible by the digits they contain are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 100 and 1000 which are divisible by the digits they contain are: \nDeprecated: Implicit conversion from float 10.1 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 10.2 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 10.4 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 10.5 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 11.1 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 1.1099999999999999 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 0.11099999999999999 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 11.2 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 1.1199999999999999 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 0.11199999999999999 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 11.5 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 1.15 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 0.11499999999999999 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 12.1 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 12.2 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 1.22 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 0.122 to int loses precision in /tmp/tmp51_nbtm6.php on line 9\n\nDeprecated: Implicit conversion from float 12.3 to int loses precision in /tmp/tmp51_n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum divisible by each digit: \" . implode(', ', $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpelzl9eqo.php:9\nStack trace:\n#0 /tmp/tmpelzl9eqo.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpelzl9eqo.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $digits = str_split($i);\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpkoyudj8i.php:9\nStack trace:\n#0 /tmp/tmpkoyudj8i.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmpkoyudj8i.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $num = $i;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0) {\n                $flag = false;\n                break;\n            }\n            if ($i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = (int) ($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum which are divisible by every digit it contains are: \";\necho implode(', ', $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "Numbers between 100 and 1000 which are divisible by every digit it contains are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $divisible = true;\n        $digits = str_split($i);\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\nprint_r($result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp0hrblayj.php:9\nStack trace:\n#0 /tmp/tmp0hrblayj.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmp0hrblayj.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmposuof1eh.php:9\nStack trace:\n#0 /tmp/tmposuof1eh.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmposuof1eh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\necho \"Divisible by digits: \" . implode(', ', divisible_by_digits(1, 100)) . \"\\n\";\n\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmprra73zya.php:9\nStack trace:\n#0 /tmp/tmprra73zya.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmprra73zya.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmposuof1eh.php:9\nStack trace:\n#0 /tmp/tmposuof1eh.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmposuof1eh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = $num / 10;\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n$startnum = 100;\n$endnum = 1000;\necho \"Numbers between $startnum and $endnum divisible by digits are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "Numbers between 100 and 1000 divisible by digits are: \nDeprecated: Implicit conversion from float 10.1 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 10.2 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 10.4 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 10.5 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 11.1 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 1.1099999999999999 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 0.11099999999999999 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 11.2 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 1.1199999999999999 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 0.11199999999999999 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 11.5 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 1.15 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 0.11499999999999999 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 12.1 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 12.2 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 1.22 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 0.122 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated: Implicit conversion from float 12.3 to int loses precision in /tmp/tmp223xrpo0.php on line 9\n\nDeprecated:",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = range($startnum, $endnum);\n    $result = array_filter($numbers, function($number) {\n        $digits = str_split($number);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpqdswamv3.php:9\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpqdswamv3.php(15): array_filter(Array, Object(Closure))\n#2 /tmp/tmpqdswamv3.php(19): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpqdswamv3.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"The numbers between $startnum and $endnum which are divisible by every digit it contains are: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp9hjj1i1z.php:9\nStack trace:\n#0 /tmp/tmp9hjj1i1z.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmp9hjj1i1z.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        return $n % array_product(str_split($n)) == 0;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(100, 1000));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp1dpr404n.php:5\nStack trace:\n#0 [internal function]: {closure}(100)\n#1 /tmp/tmp1dpr404n.php(6): array_filter(Array, Object(Closure))\n#2 /tmp/tmp1dpr404n.php(10): divisible_by_digits(100, 1000)\n#3 {main}\n  thrown in /tmp/tmp1dpr404n.php on line 5\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\necho \"Divisible by digits: \" . implode(\", \", divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpyx5t9_79.php:9\nStack trace:\n#0 /tmp/tmpyx5t9_79.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmpyx5t9_79.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function($carry, $digit) use ($n) {\n            return $carry && $n % $digit == 0;\n        }, true);\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpph3cbo8n.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmpph3cbo8n.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmpph3cbo8n.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmpph3cbo8n.php(13): divisible_by_digits(10, 20)\n#5 {main}\n  thrown in /tmp/tmpph3cbo8n.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $digits = str_split($i);\n        foreach ($digits as $digit) {\n            if ($digit != 0 && $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 10\n    [10] => 11\n    [11] => 12\n    [12] => 15\n    [13] => 20\n    [14] => 22\n    [15] => 24\n    [16] => 30\n    [17] => 33\n    [18] => 36\n    [19] => 40\n    [20] => 44\n    [21] => 48\n    [22] => 50\n    [23] => 55\n    [24] => 60\n    [25] => 66\n    [26] => 70\n    [27] => 77\n    [28] => 80\n    [29] => 88\n    [30] => 90\n    [31] => 99\n    [32] => 100\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7sfgnmpw.php:27\nStack trace:\n#0 /tmp/tmp7sfgnmpw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp7sfgnmpw.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            array_push($result, $i);\n        }\n    }\n    return $result;\n}\n\n$startnum = 1;\n$endnum = 100;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum divisible by every digit it contains: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmprjgyuhm3.php:9\nStack trace:\n#0 /tmp/tmprjgyuhm3.php(23): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmprjgyuhm3.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($num) {\n        $digits = str_split($num);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($num % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpzovnfwwd.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpzovnfwwd.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpzovnfwwd.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpzovnfwwd.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = range($startnum, $endnum);\n    $result = array_filter($numbers, function($number) {\n        $digits = str_split($number);\n        $is_divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $is_divisible = false;\n                break;\n            }\n        }\n        return $is_divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmprblal8w5.php:9\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmprblal8w5.php(15): array_filter(Array, Object(Closure))\n#2 /tmp/tmprblal8w5.php(19): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmprblal8w5.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function($carry, $digit) use ($n) {\n            return $carry && $n % $digit == 0;\n        }, true);\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(100, 200));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp_c5nn7sl.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmp_c5nn7sl.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(100)\n#3 /tmp/tmp_c5nn7sl.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmp_c5nn7sl.php(12): divisible_by_digits(100, 200)\n#5 {main}\n  thrown in /tmp/tmp_c5nn7sl.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $digits = str_split($i);\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum which are divisible by every digit it contains: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpm62826l_.php:9\nStack trace:\n#0 /tmp/tmpm62826l_.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmpm62826l_.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = (int) ($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum which are divisible by their digits are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 100 and 1000 which are divisible by their digits are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = 0;\n        $num = $i;\n        while ($num != 0) {\n            $rem = $num % 10;\n            if ($rem == 0) {\n                $flag = 1;\n                break;\n            }\n            if ($i % $rem != 0) {\n                $flag = 1;\n                break;\n            }\n            $num = $num / 10;\n        }\n        if ($flag == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum that are divisible by the digits they contain are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 100 and 1000 that are divisible by the digits they contain are: \nDeprecated: Implicit conversion from float 10.1 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 10.2 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 10.4 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 10.5 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 11.1 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 1.1099999999999999 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 0.11099999999999999 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 11.2 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 1.1199999999999999 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 0.11199999999999999 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 11.5 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 1.15 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 0.11499999999999999 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 12.1 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 12.2 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 1.22 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 0.122 to int loses precision in /tmp/tmpcaiyq20m.php on line 9\n\nDeprecated: Implicit conversion from float 12.3 to int loses precision in /tmp/tmpcaiyq",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $rem = $num % 10;\n            if ($rem == 0) {\n                $flag = false;\n                break;\n            }\n            if ($i % $rem != 0) {\n                $flag = false;\n                break;\n            }\n            $num = $num / 10;\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum which are divisible by every digit it contains are : \";\necho implode(', ', $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nDeprecated: Implicit conversion from float 10.1 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 10.2 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 10.4 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 10.5 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 11.1 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 1.1099999999999999 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 0.11099999999999999 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 11.2 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 1.1199999999999999 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 0.11199999999999999 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 11.5 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 1.15 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 0.11499999999999999 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 12.1 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 12.2 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 1.22 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 0.122 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 12.3 to int loses precision in /tmp/tmpomavu8ki.php on line 9\n\nDeprecated: Implicit conversion from float 12.4 to int loses prec",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $num = $i;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = (int) ($num / 10);\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum which are divisible by the sum of their digits are: \";\necho implode(', ', divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 100 and 1000 which are divisible by the sum of their digits are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $divisible = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n            $num = floor($num / 10);\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9] => 11\n    [10] => 12\n    [11] => 15\n    [12] => 22\n    [13] => 24\n    [14] => 33\n    [15] => 36\n    [16] => 44\n    [17] => 48\n    [18] => 55\n    [19] => 66\n    [20] => 77\n    [21] => 88\n    [22] => 99\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($number) {\n        $digits = str_split($number);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpaem3m_t9.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpaem3m_t9.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpaem3m_t9.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpaem3m_t9.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $flag = true;\n        $digits = str_split($i);\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpkoyudj8i.php:9\nStack trace:\n#0 /tmp/tmpkoyudj8i.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmpkoyudj8i.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpmnshy2ng.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpmnshy2ng.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpmnshy2ng.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpmnshy2ng.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = range($startnum, $endnum);\n    $result = array_filter($numbers, function($number) {\n        $digits = str_split($number);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpqdswamv3.php:9\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpqdswamv3.php(15): array_filter(Array, Object(Closure))\n#2 /tmp/tmpqdswamv3.php(19): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpqdswamv3.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $rem = $num % 10;\n            if ($rem == 0 || $i % $rem != 0) {\n                $flag = false;\n                break;\n            }\n            $num = $num / 10;\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"The numbers between $startnum and $endnum are divisible by their digits are: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nDeprecated: Implicit conversion from float 10.1 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 10.2 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 10.4 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 10.5 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 11.1 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 1.1099999999999999 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 0.11099999999999999 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 11.2 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 1.1199999999999999 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 0.11199999999999999 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 11.5 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 1.15 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 0.11499999999999999 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 12.1 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 12.2 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 1.22 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 0.122 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 12.3 to int loses precision in /tmp/tmpoefutu_i.php on line 9\n\nDeprecated: Implicit conversion from float 12.4 to int loses prec",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function($carry, $digit) use ($n) {\n            return $carry && $n % $digit == 0;\n        }, true);\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp72yljb6o.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmp72yljb6o.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmp72yljb6o.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmp72yljb6o.php(13): divisible_by_digits(1, 100)\n#5 {main}\n  thrown in /tmp/tmp72yljb6o.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit == 0 || $i % $digit != 0) {\n                $flag = false;\n                break;\n            }\n            $num = (int)($num / 10);\n        }\n        if ($flag) {\n            array_push($result, $i);\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\necho \"The numbers between $startnum and $endnum are divisible by the digits they contain are: \";\necho implode(\", \", divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "The numbers between 100 and 1000 are divisible by the digits they contain are: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n\t$result = array_filter(range($startnum, $endnum), function($num) {\n\t\t$digits = str_split($num);\n\t\t$divisible = true;\n\t\tforeach($digits as $digit) {\n\t\t\tif($num % $digit != 0) {\n\t\t\t\t$divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn $divisible;\n\t});\n\treturn $result;\n}\n\necho \"divisible_by_digits(1, 100) = \";\nprint_r(divisible_by_digits(1, 100));\necho \"<br>\";\necho \"divisible_by_digits(100, 1000) = \";\nprint_r(divisible_by_digits(100, 1000));\necho \"<br>\";\necho \"divisible_by_digits(1000, 10000) = \";\nprint_r(divisible_by_digits(1000, 10000));\necho \"<br>\";\necho \"divisible_by_digits(10000, 100000) = \";\nprint_r(divisible_by_digits(10000, 100000));\necho \"<br>\";\necho \"divisible_by_digits(100000, 1000000) = \";\nprint_r(divisible_by_digits(100000, 1000000));\necho \"<br>\";\necho \"divisible_by_digits(1000000, 10000000) = \";\nprint_r(divisible_by_digits(1000000, 10000000));\necho \"<br>\";\necho \"divisible_by_digits(10000000, 100000000) = \";\nprint_r(divisible_by_digits(10000000, 100000000));\necho \"<br>\";\necho \"divisible_by_digits(100000000, 1000000000) = \";\nprint_r(divisible_by_digits(100000000, 1000000000));\necho \"<br>\";\necho \"divisible_by_digits(1000000000, 10000000000) = \";\nprint_r(divisible_by_digits(1000000000, 10000000000));\necho \"<br>\";\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "divisible_by_digits(1, 100) = \nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp9ig90vm0.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmp9ig90vm0.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmp9ig90vm0.php(19): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmp9ig90vm0.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function ($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function ($carry, $digit) use ($n) {\n            return $carry && $n % $digit == 0;\n        }, true);\n    });\n    return $result;\n}\nprint_r(divisible_by_digits(10, 30));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpl7kwwrfc.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmpl7kwwrfc.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmpl7kwwrfc.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmpl7kwwrfc.php(12): divisible_by_digits(10, 30)\n#5 {main}\n  thrown in /tmp/tmpl7kwwrfc.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($num) {\n        $digits = str_split($num);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($num % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpzovnfwwd.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpzovnfwwd.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpzovnfwwd.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpzovnfwwd.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        return array_reduce($digits, function($carry, $digit) use ($n) {\n            return $carry && ($n % $digit == 0);\n        }, true);\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpgn8533mq.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmpgn8533mq.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmpgn8533mq.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmpgn8533mq.php(13): divisible_by_digits(1, 100)\n#5 {main}\n  thrown in /tmp/tmpgn8533mq.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($n) {\n        $digits = str_split($n);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($n % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpmnshy2ng.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpmnshy2ng.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpmnshy2ng.php(18): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpmnshy2ng.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n  $result = array_filter(range($startnum, $endnum), function($n) {\n    $digits = str_split($n);\n    foreach ($digits as $digit) {\n      if ($n % $digit != 0) {\n        return false;\n      }\n    }\n    return true;\n  });\n  return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpa7uw9icp.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpa7uw9icp.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpa7uw9icp.php(16): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpa7uw9icp.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($num) {\n        $digits = str_split($num);\n        $is_divisible = true;\n        foreach ($digits as $digit) {\n            if ($num % $digit != 0) {\n                $is_divisible = false;\n                break;\n            }\n        }\n        return $is_divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpkem__bmf.php:8\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpkem__bmf.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpkem__bmf.php(18): divisible_by_digits(10, 20)\n#3 {main}\n  thrown in /tmp/tmpkem__bmf.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $numbers = range($startnum, $endnum);\n    $result = array_filter($numbers, function($number) {\n        $digits = str_split($number);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        return $divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpqdswamv3.php:9\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpqdswamv3.php(15): array_filter(Array, Object(Closure))\n#2 /tmp/tmpqdswamv3.php(19): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpqdswamv3.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $divisible = true;\n        $digits = str_split($i);\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 500;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum that are divisible by every digit it contains are: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp8dvda4pl.php:9\nStack trace:\n#0 /tmp/tmp8dvda4pl.php(23): divisible_by_digits(100, 500)\n#1 {main}\n  thrown in /tmp/tmp8dvda4pl.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($number) {\n        $digits = str_split($number);\n        $is_divisible = true;\n        foreach ($digits as $digit) {\n            if ($number % $digit != 0) {\n                $is_divisible = false;\n                break;\n            }\n        }\n        return $is_divisible;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(100, 200));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpsqmmirwh.php:8\nStack trace:\n#0 [internal function]: {closure}(100)\n#1 /tmp/tmpsqmmirwh.php(14): array_filter(Array, Object(Closure))\n#2 /tmp/tmpsqmmirwh.php(18): divisible_by_digits(100, 200)\n#3 {main}\n  thrown in /tmp/tmpsqmmirwh.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $num = $i;\n        $flag = true;\n        while ($num > 0) {\n            $rem = $num % 10;\n            if ($rem == 0 || $i % $rem != 0) {\n                $flag = false;\n                break;\n            }\n            $num = $num / 10;\n        }\n        if ($flag) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nprint_r(divisible_by_digits(100, 200));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nDeprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmp421ehmso.php on line 9\n\nDeprecated: Implicit conversion from float 0.2 to int loses precision in /tmp/tmp421ehmso.php on line 9\n\nDeprecated: Implicit conversion from float 0.3 to int loses precision in /tmp/tmp421ehmso.php on line 9\n\nDeprecated: Implicit conversion from float 0.4 to int loses precision in /tmp/tmp421ehmso.php on line 9\n\nDeprecated: Implicit conversion from float 0.5 to int loses precision in /tmp/tmp421ehmso.php on line 9\n\nDeprecated: Implicit conversion from float 0.6 to int loses precision in /tmp/tmp421ehmso.php on line 9\n\nDeprecated: Implicit conversion from float 0.7 to int loses precision in /tmp/tmp421ehmso.php on line 9\n\nDeprecated: Implicit conversion from float 0.8 to int loses precision in /tmp/tmp421ehmso.php on line 9\n\nDeprecated: Implicit conversion from float 0.9 to int loses precision in /tmp/tmp421ehmso.php on line 9\n\nDeprecated: Implicit conversion from float 1.1 to int loses precision in /tmp/",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $str = (string)$i;\n        $flag = true;\n        for ($j = 0; $j < strlen($str); $j++) {\n            if ($str[$j] == 0) {\n                $flag = false;\n                break;\n            }\n            if ($i % $str[$j] != 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            array_push($result, $i);\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\n$result = divisible_by_digits($startnum, $endnum);\necho \"Numbers between $startnum and $endnum divisible by every digit it contains: \";\necho implode(\", \", $result);\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "Numbers between 100 and 1000 divisible by every digit it contains: 111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184, 212, 216, 222, 224, 244, 248, 264, 288, 312, 315, 324, 333, 336, 366, 384, 396, 412, 424, 432, 444, 448, 488, 515, 555, 612, 624, 636, 648, 666, 672, 728, 735, 777, 784, 816, 824, 848, 864, 888, 936, 999",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\necho \"<pre>\";\nprint_r(divisible_by_digits(10, 20));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "<pre>\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpk5hl5c4a.php:9\nStack trace:\n#0 /tmp/tmpk5hl5c4a.php(22): divisible_by_digits(10, 20)\n#1 {main}\n  thrown in /tmp/tmpk5hl5c4a.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmposuof1eh.php:9\nStack trace:\n#0 /tmp/tmposuof1eh.php(21): divisible_by_digits(1, 100)\n#1 {main}\n  thrown in /tmp/tmposuof1eh.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$startnum = 100;\n$endnum = 1000;\nprint_r(divisible_by_digits($startnum, $endnum));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp0h5j4uqv.php:9\nStack trace:\n#0 /tmp/tmp0h5j4uqv.php(23): divisible_by_digits(100, 1000)\n#1 {main}\n  thrown in /tmp/tmp0h5j4uqv.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($num) {\n        $digits = str_split($num);\n        return array_reduce($digits, function($carry, $digit) use ($num) {\n            return $carry && $num % $digit == 0;\n        }, true);\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122601,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp9mgs4s1w.php:7\nStack trace:\n#0 [internal function]: {closure}(true, '0')\n#1 /tmp/tmp9mgs4s1w.php(8): array_reduce(Array, Object(Closure), true)\n#2 [internal function]: {closure}(10)\n#3 /tmp/tmp9mgs4s1w.php(9): array_filter(Array, Object(Closure))\n#4 /tmp/tmp9mgs4s1w.php(13): divisible_by_digits(1, 100)\n#5 {main}\n  thrown in /tmp/tmp9mgs4s1w.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $digits = str_split($i);\n        $divisible = true;\n        foreach ($digits as $digit) {\n            if ($i % $digit != 0) {\n                $divisible = false;\n                break;\n            }\n        }\n        if ($divisible) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(divisible_by_digits(10, 20));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666122600,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmphfg29j_3.php:9\nStack trace:\n#0 /tmp/tmphfg29j_3.php(21): divisible_by_digits(10, 20)\n#1 {main}\n  thrown in /tmp/tmphfg29j_3.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n    $result = array_filter(range($startnum, $endnum), function($num) {\n        $digits = str_split($num);\n        foreach ($digits as $digit) {\n            if ($num % $digit != 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $result;\n}\n\nprint_r(divisible_by_digits(1, 100));\nfunction candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665509862,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpqu0z_pc1.php:7\nStack trace:\n#0 [internal function]: {closure}(10)\n#1 /tmp/tmpqu0z_pc1.php(12): array_filter(Array, Object(Closure))\n#2 /tmp/tmpqu0z_pc1.php(16): divisible_by_digits(1, 100)\n#3 {main}\n  thrown in /tmp/tmpqu0z_pc1.php on line 7\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}