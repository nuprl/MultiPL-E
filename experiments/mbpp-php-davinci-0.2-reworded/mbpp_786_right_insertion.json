{
  "name": "mbpp_786_right_insertion",
  "language": "php",
  "prompt": "<?php\n// Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion($a, $x) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return right_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l < $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 9;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 11;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 0;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 5;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19];\n$x = 4;\n$result = right_insertion($a, $x);\necho $result;",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n$x = 11;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n$x = 0;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 3, 5, 7, 9];\necho right_insertion($a, 4); // 2\necho right_insertion($a, 5); // 2\necho right_insertion($a, 10); // 5",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\necho right_insertion($a, $x);",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "\t$left = 0;\n\t$right = count($a) - 1;\n\twhile ($left <= $right) {\n\t\t$mid = floor(($left + $right) / 2);\n\t\tif ($a[$mid] == $x) {\n\t\t\treturn $mid;\n\t\t} else if ($a[$mid] < $x) {\n\t\t\t$left = $mid + 1;\n\t\t} else {\n\t\t\t$right = $mid - 1;\n\t\t}\n\t}\n\treturn $left;\n}\n",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$i = right_insertion($a, $x);\necho $i;",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $i = 0;\n    $j = count($a) - 1;\n    while ($i < $j) {\n        $m = (int)(($i + $j) / 2);\n        if ($a[$m] < $x) {\n            $i = $m + 1;\n        } else {\n            $j = $m;\n        }\n    }\n    if ($a[$i] < $x) {\n        return $i + 1;\n    } else {\n        return $i;\n    }\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = $l + ($r - $l) / 2;\n    if ($a[$m] == $x) {\n      return $m;\n    } elseif ($x < $a[$m]) {\n      $r = $m - 1;\n    } else {\n      $l = $m + 1;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($a[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\necho right_insertion($a, $x);",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        }\n        if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        }\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 7;\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l < $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x) . PHP_EOL;\n$x = 11;\necho right_insertion($a, $x) . PHP_EOL;\n$x = 0;\necho right_insertion($a, $x) . PHP_EOL;\n$x = 4;\necho right_insertion($a, $x) . PHP_EOL;\n$x = 6;\necho right_insertion($a, $x) . PHP_EOL;",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 11;\n\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = intval(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\necho right_insertion($a, 11);\necho PHP_EOL;\necho right_insertion($a, 1);\necho PHP_EOL;\necho right_insertion($a, 5);\necho PHP_EOL;\necho right_insertion($a, 6);\necho PHP_EOL;\necho right_insertion($a, 10);\necho PHP_EOL;",
    "\t$i = 0;\n\t$j = count($a);\n\twhile ($i < $j) {\n\t\t$m = intval(($i + $j) / 2);\n\t\tif ($a[$m] <= $x) {\n\t\t\t$i = $m + 1;\n\t\t} else {\n\t\t\t$j = $m;\n\t\t}\n\t}\n\treturn $i;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho right_insertion($a, $x);",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        }\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] <= $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "  $left = 0;\n  $right = count($a) - 1;\n  while ($left < $right) {\n    $mid = ($left + $right) / 2;\n    if ($x < $a[$mid]) {\n      $right = $mid - 1;\n    } else {\n      $left = $mid + 1;\n    }\n  }\n  return $left;\n}\n\n$a = [1, 2, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9];\n$x = 3;\n\necho right_insertion($a, $x);",
    "  $n = count($a);\n  $l = 0;\n  $r = $n - 1;\n  while ($l <= $r) {\n    $m = (int)(($l + $r) / 2);\n    if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$i = right_insertion($a, $x);\necho \"right_insertion({$x}) = {$i}\\n\";",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    if ($n == 0) {\n        return 0;\n    }\n    $left = 0;\n    $right = $n - 1;\n    while ($left < $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($a[$mid] <= $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid;\n        }\n    }\n    if ($a[$left] <= $x) {\n        return $left + 1;\n    } else {\n        return $left;\n    }\n}\n\n$a = [1, 3, 5, 7, 9];\n$x = 6;\n$r = right_insertion($a, $x);\necho $r . PHP_EOL;",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = $left + ($right - $left) / 2;\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 11;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 8;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho right_insertion($a, $x);",
    "    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($a[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "  $l = 0;\n  $r = count($a);\n  while ($l < $r) {\n    $m = (int)(($l + $r) / 2);\n    if ($a[$m] <= $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);\necho \"\\n\";\n$x = 11;\necho right_insertion($a, $x);\necho \"\\n\";",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $left;\n}\n",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "\t$left = 0;\n\t$right = count($a) - 1;\n\twhile ($left <= $right) {\n\t\t$mid = $left + ($right - $left) / 2;\n\t\tif ($a[$mid] <= $x) {\n\t\t\t$left = $mid + 1;\n\t\t} else {\n\t\t\t$right = $mid - 1;\n\t\t}\n\t}\n\treturn $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] == $x) {\n      return $m;\n    } else if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nfor ($i = 0; $i < 11; $i++) {\n  echo \"right_insertion([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], $i) = \" . right_insertion($a, $i) . \"\\n\";\n}",
    "    $lo = 0;\n    $hi = count($a) - 1;\n    while ($lo <= $hi) {\n        $mid = (int)(($lo + $hi) / 2);\n        if ($x < $a[$mid]) {\n            $hi = $mid - 1;\n        } else if ($x > $a[$mid]) {\n            $lo = $mid + 1;\n        } else {\n            return $mid;\n        }\n    }\n    return $lo;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$index = right_insertion($a, $x);\necho $index;",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] == $x) {\n      return $m;\n    } else if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = (int)(($l + $r) / 2);\n    if ($a[$m] == $x) {\n      return $m;\n    } else if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 11;\necho right_insertion($a, $x);",
    "\t$low = 0;\n\t$high = count($a) - 1;\n\twhile ($low <= $high) {\n\t\t$mid = floor(($low + $high) / 2);\n\t\tif ($a[$mid] == $x) {\n\t\t\treturn $mid;\n\t\t} else if ($a[$mid] < $x) {\n\t\t\t$low = $mid + 1;\n\t\t} else {\n\t\t\t$high = $mid - 1;\n\t\t}\n\t}\n\treturn $low;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\n$result = right_insertion($a, $x);\necho $result;",
    "    $i = 0;\n    $j = count($a) - 1;\n    while ($i <= $j) {\n        $m = (int)(($i + $j) / 2);\n        if ($a[$m] < $x) {\n            $i = $m + 1;\n        } else {\n            $j = $m - 1;\n        }\n    }\n    return $i;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } elseif ($a[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 11;\necho right_insertion($a, $x);",
    "  $left = 0;\n  $right = count($a) - 1;\n  while ($left <= $right) {\n    $mid = (int)(($left + $right) / 2);\n    if ($x == $a[$mid]) {\n      return $mid;\n    } else if ($x < $a[$mid]) {\n      $right = $mid - 1;\n    } else {\n      $left = $mid + 1;\n    }\n  }\n  return $left;\n}\n",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = intval(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = $l + ($r - $l) / 2;\n    if ($a[$m] == $x) {\n      return $m;\n    } else if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n",
    "    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($a[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = $l + ($r - $l) / 2;\n        if ($a[$m] == $x) {\n            return $m;\n        }\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 2;\n$r = right_insertion($a, $x);\necho $r;",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] <= $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19];\n$x = 4;\n$i = right_insertion($a, $x);\necho $i;",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = intval(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$r = right_insertion($a, $x);\necho $r;",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = (int) (($l + $r) / 2);\n    if ($a[$m] == $x) {\n      return $m;\n    }\n    if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\necho right_insertion($a, $x);",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = $left + intval(($right - $left) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 11;\necho right_insertion($a, $x);",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = $left + ($right - $left) / 2;\n        if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] == $x) {\n      return $m;\n    } else if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$result = right_insertion($a, $x);\necho $result;",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] <= $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] == $x) {\n      return $m;\n    } else if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        }\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($x < $a[$m]) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 10;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($a[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n\n$a = [1, 3, 5, 7, 9, 11];\n$x = 4;\necho right_insertion($a, $x);",
    "  $low = 0;\n  $high = count($a) - 1;\n  while ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    if ($a[$mid] < $x) {\n      $low = $mid + 1;\n    } else {\n      $high = $mid - 1;\n    }\n  }\n  return $low;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$y = 11;\n\necho right_insertion($a, $x) . \"\\n\";\necho right_insertion($a, $y) . \"\\n\";",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\necho right_insertion($a, 5);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\necho right_insertion($a, $x);",
    "  $lo = 0;\n  $hi = count($a) - 1;\n  while ($lo <= $hi) {\n    $mid = (int)(($lo + $hi) / 2);\n    if ($x < $a[$mid]) {\n      $hi = $mid - 1;\n    } else if ($x > $a[$mid]) {\n      $lo = $mid + 1;\n    } else {\n      return $mid;\n    }\n  }\n  return $lo;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);\necho \"\\n\";\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 11;\necho right_insertion($a, $x);\necho \"\\n\";\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 0;\necho right_insertion($a, $x);\necho \"\\n\";\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho right_insertion($a, $x);\necho \"\\n\";\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 7;\necho right_insertion($a, $x);\necho \"\\n\";\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 10;\necho right_insertion($a, $x);\necho \"\\n\";\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 1;\necho right_insertion($a, $x);\necho \"\\n\";",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 9;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 11;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 0;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\n$result = right_insertion($a, $x);\necho $result;",
    "  $lo = 0;\n  $hi = count($a) - 1;\n  while ($lo <= $hi) {\n    $mid = floor(($lo + $hi) / 2);\n    if ($x < $a[$mid]) {\n      $hi = $mid - 1;\n    } else {\n      $lo = $mid + 1;\n    }\n  }\n  return $lo;\n}\n\n$a = [1, 3, 5, 7, 9];\n$x = 6;\n$result = right_insertion($a, $x);\nprint_r($result);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\necho right_insertion($a, $x);",
    "  $n = count($a);\n  if ($n == 0 || $a[$n - 1] <= $x) {\n    return $n;\n  }\n  $left = 0;\n  $right = $n - 1;\n  while ($left < $right) {\n    $mid = $left + (($right - $left) >> 1);\n    if ($a[$mid] <= $x) {\n      $left = $mid + 1;\n    } else {\n      $right = $mid;\n    }\n  }\n  return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "  $i = 0;\n  while ($i < count($a) && $a[$i] < $x) {\n    $i++;\n  }\n  return $i;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } elseif ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n",
    "\t$n = count($a);\n\tif ($n == 0) return 0;\n\tif ($x < $a[0]) return 0;\n\tif ($x > $a[$n-1]) return $n;\n\t$l = 0;\n\t$r = $n - 1;\n\twhile ($l < $r) {\n\t\t$m = floor(($l + $r) / 2);\n\t\tif ($a[$m] < $x) {\n\t\t\t$l = $m + 1;\n\t\t} else {\n\t\t\t$r = $m;\n\t\t}\n\t}\n\treturn $l;\n}\n\n$a = [1, 3, 5, 7, 9];\n$x = 5;\n$i = right_insertion($a, $x);\necho $i;",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        }\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\necho right_insertion($a, 5);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\n\necho right_insertion($a, $x);",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\necho right_insertion($a, 10);",
    "  $n = count($a);\n  if ($n == 0 || $a[$n - 1] <= $x) {\n    return $n;\n  }\n  $l = 0;\n  $u = $n - 1;\n  while ($l < $u) {\n    $m = floor(($l + $u) / 2);\n    if ($a[$m] <= $x) {\n      $l = $m + 1;\n    } else {\n      $u = $m;\n    }\n  }\n  return $l;\n}\n",
    "  $lo = 0;\n  $hi = count($a) - 1;\n  while ($lo <= $hi) {\n    $mid = (int)(($lo + $hi) / 2);\n    if ($a[$mid] < $x) {\n      $lo = $mid + 1;\n    } else {\n      $hi = $mid - 1;\n    }\n  }\n  return $lo;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho right_insertion($a, $x);\n",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l < $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 4;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        }\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "  $n = count($a);\n  if ($n == 0 || $x > $a[$n - 1]) {\n    return $n;\n  }\n  $left = 0;\n  $right = $n - 1;\n  while ($left < $right) {\n    $mid = floor(($left + $right) / 2);\n    if ($x <= $a[$mid]) {\n      $right = $mid;\n    } else {\n      $left = $mid + 1;\n    }\n  }\n  return $left;\n}\n\nassert_options(ASSERT_BAIL, 1);\n\n$tests = array(\n  array(array(), 1, 0),\n  array(array(1), 1, 0),\n  array(array(1), 2, 1),\n  array(array(1, 2), 1, 0),\n  array(array(1, 2), 2, 1),\n  array(array(1, 2), 3, 2),\n  array(array(1, 2, 3), 1, 0),\n  array(array(1, 2, 3), 2, 1),\n  array(array(1, 2, 3), 3, 2),\n  array(array(1, 2, 3), 4, 3),\n  array(array(1, 2, 3, 4), 1, 0),\n  array(array(1, 2, 3, 4), 2, 1),\n  array(array(1, 2, 3, 4), 3, 2),\n  array(array(1, 2, 3, 4), 4, 3),\n  array(array(1, 2, 3, 4), 5, 4),\n);\n\nforeach ($tests as $test) {\n  list($a, $x, $expected) = $test;\n  $result = right_insertion($a, $x);\n  assert($result === $expected);\n}",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 10;\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] == $x) {\n      return $m;\n    } else if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n",
    "    $start = 0;\n    $end = count($a) - 1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($a[$mid] <= $x) {\n            $start = $mid + 1;\n        } else {\n            $end = $mid - 1;\n        }\n    }\n    return $start;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);\necho \"\\n\";\n$x = 11;\necho right_insertion($a, $x);\necho \"\\n\";\n$x = 0;\necho right_insertion($a, $x);\necho \"\\n\";",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] <= $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = $left + ($right - $left) / 2;\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\necho right_insertion($a, 10);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] <= $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $lo = 0;\n    $hi = count($a) - 1;\n    while ($lo <= $hi) {\n        $mid = (int)(($lo + $hi) / 2);\n        if ($x < $a[$mid]) {\n            $hi = $mid - 1;\n        } else {\n            $lo = $mid + 1;\n        }\n    }\n    return $lo;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] <= $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 9;\necho right_insertion($a, $x);",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n",
    "    $n = count($a);\n    $lo = 0;\n    $hi = $n - 1;\n    while ($lo <= $hi) {\n        $mid = (int)(($lo + $hi) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } elseif ($a[$mid] < $x) {\n            $lo = $mid + 1;\n        } else {\n            $hi = $mid - 1;\n        }\n    }\n    return $lo;\n}\n",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] == $x) {\n      return $m;\n    } else if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 0;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 11;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 6;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 4;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 7;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 8;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 9;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 10;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 1;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 2",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 11;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 0;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5.5;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";",
    "  $left = 0;\n  $right = count($a) - 1;\n  while ($left <= $right) {\n    $mid = (int)(($left + $right) / 2);\n    if ($a[$mid] == $x) {\n      return $mid;\n    } else if ($a[$mid] < $x) {\n      $left = $mid + 1;\n    } else {\n      $right = $mid - 1;\n    }\n  }\n  return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 10;\n$index = right_insertion($a, $x);\necho \"The right insertion point for $x is $index.\\n\";",
    "\t$i = 0;\n\t$j = count($a) - 1;\n\twhile ($i < $j) {\n\t\t$m = floor(($i + $j) / 2);\n\t\tif ($a[$m] <= $x) {\n\t\t\t$i = $m + 1;\n\t\t} else {\n\t\t\t$j = $m;\n\t\t}\n\t}\n\treturn $i;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = intval(($l + $r) / 2);\n    if ($a[$m] == $x) {\n      return $m;\n    } else if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\n$result = right_insertion($a, $x);\necho $result;",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($a[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\n$i = right_insertion($a, $x);\necho $i;",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n",
    "    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x < $a[$mid]) {\n            $high = $mid - 1;\n        } elseif ($x > $a[$mid]) {\n            $low = $mid + 1;\n        } else {\n            return $mid;\n        }\n    }\n    return $low;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$index = right_insertion($a, $x);\necho $index;",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 3, 5, 7, 9];\n$x = 4;\n$r = right_insertion($a, $x);\necho $r;",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$r = right_insertion($a, $x);\necho $r;",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\necho right_insertion($a, $x) . \"\\n\";",
    "    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } elseif ($a[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n\n$a = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99];\n$x = 100;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($x < $a[$m]) {\n      $r = $m - 1;\n    } else if ($x > $a[$m]) {\n      $l = $m + 1;\n    } else {\n      return $m;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x in \" . implode(',', $a) . \" is $i\\n\";\n$x = 11;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x in \" . implode(',', $a) . \" is $i\\n\";\n$x = 0;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x in \" . implode(',', $a) . \" is $i\\n\";\n$x = 5;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x in \" . implode(',', $a) . \" is $i\\n\";\n$x = 6;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x in \" . implode(',', $a) . \" is $i\\n\";\n$x = 4;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x in \" . implode(',', $a) . \" is $i\\n\";\n$x = 5;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x in \" . implode(',', $a) . \" is $i\\n\";\n$x = 5;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x in \" .",
    "    $n = count($a);\n    $l = 0;\n    $r = $n;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] <= $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = (int)(($l + $r) / 2);\n    if ($a[$m] <= $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $lo = 0;\n    $hi = count($a) - 1;\n    while ($lo <= $hi) {\n        $mid = floor(($lo + $hi) / 2);\n        if ($x < $a[$mid]) {\n            $hi = $mid - 1;\n        } elseif ($x > $a[$mid]) {\n            $lo = $mid + 1;\n        } else {\n            return $mid;\n        }\n    }\n    return $lo;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$i = right_insertion($a, $x);\necho \"right_insertion({$x}) = {$i}\\n\";\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 0;\n$i = right_insertion($a, $x);\necho \"right_insertion({$x}) = {$i}\\n\";\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 11;\n$i = right_insertion($a, $x);\necho \"right_insertion({$x}) = {$i}\\n\";\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 6;\n$i = right_insertion($a, $x);\necho \"right_insertion({$x}) = {$i}\\n\";",
    "\t$i = 0;\n\t$j = count($a) - 1;\n\twhile ($i < $j) {\n\t\t$m = floor(($i + $j) / 2);\n\t\tif ($a[$m] <= $x) {\n\t\t\t$i = $m + 1;\n\t\t} else {\n\t\t\t$j = $m;\n\t\t}\n\t}\n\treturn $i;\n}\n\n$a = array(1, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho right_insertion($a, $x);",
    "\t$n = count($a);\n\tif ($n == 0) return 0;\n\tif ($x < $a[0]) return 0;\n\tif ($x > $a[$n-1]) return $n;\n\t$l = 0;\n\t$r = $n - 1;\n\twhile ($l < $r) {\n\t\t$m = (int)(($l + $r) / 2);\n\t\tif ($a[$m] < $x) {\n\t\t\t$l = $m + 1;\n\t\t} else {\n\t\t\t$r = $m;\n\t\t}\n\t}\n\treturn $l;\n}\n\n$a = [1, 2, 3, 5, 6, 7, 8, 9];\n$x = 4;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x in \" . implode(',', $a) . \" is $i\\n\";",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] == $x) {\n      return $m;\n    } elseif ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\necho right_insertion($a, 5) . \"\\n\";\necho right_insertion($a, 6) . \"\\n\";\necho right_insertion($a, 7) . \"\\n\";\necho right_insertion($a, 8) . \"\\n\";\necho right_insertion($a, 9) . \"\\n\";\necho right_insertion($a, 10) . \"\\n\";\necho right_insertion($a, 11) . \"\\n\";\necho right_insertion($a, 0) . \"\\n\";\necho right_insertion($a, 1) . \"\\n\";",
    "    $n = count($a);\n    if ($n == 0) {\n        return 0;\n    }\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] <= $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    if ($a[$l] <= $x) {\n        return $l + 1;\n    } else {\n        return $l;\n    }\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 10;\necho right_insertion($a, $x);",
    "  $i = 0;\n  $j = count($a) - 1;\n  while ($i < $j) {\n    $m = ($i + $j) / 2;\n    if ($a[$m] < $x) {\n      $i = $m + 1;\n    } else {\n      $j = $m;\n    }\n  }\n  return $i;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] == $x) {\n      return $m;\n    } elseif ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$i = right_insertion($a, $x);\necho \"right_insertion({$x}) = {$i}\\n\";\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 11;\n$i = right_insertion($a, $x);\necho \"right_insertion({$x}) = {$i}\\n\";\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 0;\n$i = right_insertion($a, $x);\necho \"right_insertion({$x}) = {$i}\\n\";",
    "\t$n = count($a);\n\tif ($n == 0 || $x > $a[$n - 1]) {\n\t\treturn $n;\n\t}\n\t$l = 0;\n\t$u = $n - 1;\n\twhile ($l < $u) {\n\t\t$m = floor(($l + $u) / 2);\n\t\tif ($x > $a[$m]) {\n\t\t\t$l = $m + 1;\n\t\t} else {\n\t\t\t$u = $m;\n\t\t}\n\t}\n\treturn $l;\n}\n",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "  $low = 0;\n  $high = count($a) - 1;\n  while ($low <= $high) {\n    $mid = (int)(($low + $high) / 2);\n    if ($a[$mid] < $x) {\n      $low = $mid + 1;\n    } else {\n      $high = $mid - 1;\n    }\n  }\n  return $low;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$result = right_insertion($a, $x);\necho \"The right insertion point for $x is $result\\n\";",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] <= $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l < $r) {\n        $m = (int) (($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\necho right_insertion($a, 5);\necho \"\\n\";\necho right_insertion($a, 6);\necho \"\\n\";\necho right_insertion($a, 11);\necho \"\\n\";\necho right_insertion($a, 0);\necho \"\\n\";",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] <= $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99];\n$x = 50;\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = (int)(($l + $r) / 2);\n    if ($a[$m] == $x) {\n      return $m;\n    } else if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$r = right_insertion($a, $x);\necho $r;",
    "\t$lo = 0;\n\t$hi = count($a) - 1;\n\twhile ($lo <= $hi) {\n\t\t$mid = (int) (($lo + $hi) / 2);\n\t\tif ($x < $a[$mid]) {\n\t\t\t$hi = $mid - 1;\n\t\t} else {\n\t\t\t$lo = $mid + 1;\n\t\t}\n\t}\n\treturn $lo;\n}\n",
    "\t$n = count($a);\n\t$l = 0;\n\t$r = $n - 1;\n\twhile ($l <= $r) {\n\t\t$m = floor(($l + $r) / 2);\n\t\tif ($a[$m] <= $x) {\n\t\t\t$l = $m + 1;\n\t\t} else {\n\t\t\t$r = $m - 1;\n\t\t}\n\t}\n\treturn $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$i = right_insertion($a, $x);\necho $i . PHP_EOL;\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 11;\n$i = right_insertion($a, $x);\necho $i . PHP_EOL;\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 0;\n$i = right_insertion($a, $x);\necho $i . PHP_EOL;\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\n$i = right_insertion($a, $x);\necho $i . PHP_EOL;\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 7;\n$i = right_insertion($a, $x);\necho $i . PHP_EOL;\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 1;\n$i = right_insertion($a, $x);\necho $i . PHP_EOL;\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 10;\n$i = right_insertion($a, $x);\necho $i . PHP_EOL;",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 11;\necho right_insertion($a, $x);",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = $left + (($right - $left) >> 1);\n        if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 10;\n$index = right_insertion($a, $x);\necho $index;",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 3, 5, 7, 9];\n$x = 6;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } elseif ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($x < $a[$mid]) {\n            $right = $mid - 1;\n        } elseif ($x > $a[$mid]) {\n            $left = $mid + 1;\n        } else {\n            return $mid;\n        }\n    }\n    return $left;\n}\n",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = intval(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        }\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($a[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = (int)(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\necho right_insertion($a, 3);\necho \"\\n\";\necho right_insertion($a, 4);\necho \"\\n\";\necho right_insertion($a, 11);\necho \"\\n\";\necho right_insertion($a, 0);\necho \"\\n\";\necho right_insertion($a, 1);\necho \"\\n\";\necho right_insertion($a, 10);\necho \"\\n\";\necho right_insertion($a, 9);\necho \"\\n\";",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$x = 5;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n        if ($a[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n\n$a = [1, 2, 4, 5, 6, 7, 8, 9, 10];\n$x = 3;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l < $r) {\n    $m = (int)(($l + $r) / 2);\n    if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nassert(right_insertion($a, 0) == 0);\nassert(right_insertion($a, 1) == 1);\nassert(right_insertion($a, 2) == 2);\nassert(right_insertion($a, 3) == 3);\nassert(right_insertion($a, 4) == 4);\nassert(right_insertion($a, 5) == 5);\nassert(right_insertion($a, 6) == 6);\nassert(right_insertion($a, 7) == 7);\nassert(right_insertion($a, 8) == 8);\nassert(right_insertion($a, 9) == 9);\nassert(right_insertion($a, 10) == 10);\nassert(right_insertion($a, 11) == 10);\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nassert(right_insertion($a, 0) == 0);\nassert(right_insertion($a, 1) == 1);\nassert(right_insertion($a, 2) == 2);\nassert(right_insertion($a, 3) == 3);\nassert(right_insertion($a, 4) == 4);\nassert(right_insertion($a, 5) == 5);\nassert(right_insertion($a, 6) == 6);\nassert(right_insertion($a, 7) == 7);\nassert(right_insertion($a, 8) == 8);\nassert(right_insertion($a, 9) == 9);\nassert(right_insertion($a, 10) == 10);\nassert(right_insertion($a, 11) == 10);",
    "    $left = 0;\n    $right = count($a) - 1;\n    while ($left <= $right) {\n        $mid = floor(($left + $right) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } elseif ($a[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 8;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = floor(($l + $r) / 2);\n    if ($a[$m] <= $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a);\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] <= $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($x < $a[$mid]) {\n            $high = $mid - 1;\n        } elseif ($x > $a[$mid]) {\n            $low = $mid + 1;\n        } else {\n            return $mid;\n        }\n    }\n    return $low;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);\n",
    "    $i = 0;\n    $j = count($a) - 1;\n    while ($i < $j) {\n        $m = (int)(($i + $j) / 2);\n        if ($a[$m] < $x) {\n            $i = $m + 1;\n        } else {\n            $j = $m;\n        }\n    }\n    return $i;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 7;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l < $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] <= $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}\n",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\necho right_insertion($a, $x);",
    "  $l = 0;\n  $r = count($a);\n  while ($l < $r) {\n    $m = $l + ($r - $l) / 2;\n    if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m;\n    }\n  }\n  return $l;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\n$i = right_insertion($a, $x);\necho \"right_insertion({$x}) = {$i}\\n\";\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 10;\n$i = right_insertion($a, $x);\necho \"right_insertion({$x}) = {$i}\\n\";\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 0;\n$i = right_insertion($a, $x);\necho \"right_insertion({$x}) = {$i}\\n\";\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 4.5;\n$i = right_insertion($a, $x);\necho \"right_insertion({$x}) = {$i}\\n\";",
    "  $l = 0;\n  $r = count($a) - 1;\n  while ($l <= $r) {\n    $m = (int)(($l + $r) / 2);\n    if ($a[$m] < $x) {\n      $l = $m + 1;\n    } else {\n      $r = $m - 1;\n    }\n  }\n  return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n$x = 0;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n$x = 11;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n$x = 5.5;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "\t$low = 0;\n\t$high = count($a) - 1;\n\twhile ($low <= $high) {\n\t\t$mid = (int)(($low + $high) / 2);\n\t\tif ($a[$mid] < $x) {\n\t\t\t$low = $mid + 1;\n\t\t} else {\n\t\t\t$high = $mid - 1;\n\t\t}\n\t}\n\treturn $low;\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$x = 5;\necho right_insertion($a, $x);",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = (int)(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$x = 5;\necho right_insertion($a, $x);",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n",
    "    $n = count($a);\n    $l = 0;\n    $r = $n - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } elseif ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\necho right_insertion($a, $x);",
    "    $low = 0;\n    $high = count($a) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($a[$mid] == $x) {\n            return $mid;\n        } else if ($a[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $low;\n}\n",
    "    $l = 0;\n    $r = count($a) - 1;\n    while ($l <= $r) {\n        $m = floor(($l + $r) / 2);\n        if ($a[$m] == $x) {\n            return $m;\n        } else if ($a[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$x = 5;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 11;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";\n\n$x = 0;\n$i = right_insertion($a, $x);\necho \"Right insertion point for $x is $i\\n\";"
  ]
}