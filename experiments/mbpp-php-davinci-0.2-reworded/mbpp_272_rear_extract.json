{
  "name": "mbpp_272_rear_extract",
  "language": "php",
  "prompt": "<?php\n// Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\nfunction rear_extract($test_list) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return rear_extract(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, \"Rash\", 21), array(2, \"Varsha\", 20), array(3, \"Kil\", 19))) !== array(21, 20, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, \"Sai\", 36), array(2, \"Ayesha\", 25), array(3, \"Salman\", 45))) !== array(36, 25, 45)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, \"Sudeep\", 14), array(2, \"Vandana\", 36), array(3, \"Dawood\", 56))) !== array(14, 36, 56)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "\t$rear_list = array();\n\tforeach ($test_list as $test_array) {\n\t\t$rear_list[] = end($test_array);\n\t}\n\treturn $rear_list;\n}\n",
    "    $result = array();\n    foreach ($test_list as $sub_list) {\n        $result[] = $sub_list[count($sub_list) - 1];\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(rear_extract($test_list));\n",
    "    $result = array();\n    foreach ($test_list as $sub_array) {\n        $result[] = end($sub_array);\n    }\n    return $result;\n}\n",
    "    $result = array();\n    foreach($test_list as $test) {\n        $result[] = $test[count($test) - 1];\n    }\n    return $result;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\nprint_r(rear_extract($test_list));",
    "    $result = [];\n    foreach($test_list as $test_array) {\n        $result[] = end($test_array);\n    }\n    return $result;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$result = rear_extract($test_list);\nprint_r($result);",
    "    $result = [];\n    foreach ($test_list as $test) {\n        $result[] = $test[count($test) - 1];\n    }\n    return $result;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nprint_r(rear_extract($test_list));\n",
    "    $rear_list = array();\n    foreach ($test_list as $test) {\n        array_push($rear_list, array_pop($test));\n    }\n    return $rear_list;\n}\n\n$test_list = array(\n    array(1, 2, 3, 4, 5),\n    array(6, 7, 8, 9, 10),\n    array(11, 12, 13, 14, 15),\n    array(16, 17, 18, 19, 20)\n);\n\nprint_r(rear_extract($test_list));",
    "    $result = [];\n    foreach ($test_list as $sub_array) {\n        $result[] = $sub_array[count($sub_array) - 1];\n    }\n    return $result;\n}\n",
    "\t$result = array();\n\tforeach ($test_list as $key => $value) {\n\t\t$result[] = $value[count($value) - 1];\n\t}\n\treturn $result;\n}\n",
    "\t$result = array();\n\tforeach ($test_list as $test) {\n\t\t$result[] = end($test);\n\t}\n\treturn $result;\n}\n",
    "    $rear_list = [];\n    foreach ($test_list as $sub_list) {\n        $rear_list[] = $sub_list[count($sub_list) - 1];\n    }\n    return $rear_list;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nprint_r(rear_extract($test_list));",
    "    $rear_list = array();\n    foreach ($test_list as $sub_list) {\n        array_push($rear_list, $sub_list[count($sub_list) - 1]);\n    }\n    return $rear_list;\n}\n",
    "    $result = [];\n    foreach ($test_list as $test_array) {\n        $result[] = $test_array[count($test_array) - 1];\n    }\n    return $result;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nprint_r(rear_extract($test_list));",
    "    $result = [];\n    foreach ($test_list as $item) {\n        $result[] = $item[count($item) - 1];\n    }\n    return $result;\n}\n",
    "\t$rear_list = array();\n\tforeach ($test_list as $test_array) {\n\t\t$rear_list[] = $test_array[count($test_array) - 1];\n\t}\n\treturn $rear_list;\n}\n",
    "    $result = [];\n    foreach ($test_list as $array) {\n        $result[] = end($array);\n    }\n    return $result;\n}\n",
    "    $rear_list = array();\n    foreach ($test_list as $test_array) {\n        $rear_list[] = end($test_array);\n    }\n    return $rear_list;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n    array(10, 11, 12),\n);\n\n$rear_list = rear_extract($test_list);\nprint_r($rear_list);\n",
    "    $rear_list = [];\n    foreach ($test_list as $test_array) {\n        $rear_list[] = $test_array[count($test_array) - 1];\n    }\n    return $rear_list;\n}\n\n$test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nprint_r(rear_extract($test_list));\n",
    "    $rear_list = array();\n    foreach ($test_list as $test_array) {\n        $rear_list[] = array_pop($test_array);\n    }\n    return $rear_list;\n}\n\n$test_list = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9),\n);\n\nprint_r(rear_extract($test_list));",
    "    $result = [];\n    foreach ($test_list as $test) {\n        $result[] = end($test);\n    }\n    return $result;\n}\n"
  ]
}