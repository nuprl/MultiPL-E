{
  "name": "mbpp_799_left_rotate",
  "language": "php",
  "prompt": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    return (($n << $d) | ($n >> (32 - $d)));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d % $bits;\n    return (($n << $d) | ($n >> ($bits - $d))) & $mask;\n}\n",
    "\t$left = $n << $d;\n\t$right = $n >> (32 - $d);\n\treturn $left | $right;\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\treturn (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        if ($i < $d) {\n            $mask = $mask | (1 << $i);\n        }\n    }\n    $mask = ~$mask;\n    $left = $n & $mask;\n    $left = $left >> ($bits - $d);\n    $n = $n << $d;\n    $n = $n | $left;\n    return $n;\n}\n\necho left_rotate(16, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 100;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\n$n = left_rotate($n, $d);\necho decbin($n);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\treturn $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = decbin($n);\n\t$bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n\t$bits = substr($bits, $d) . substr($bits, 0, $d);\n\treturn bindec($bits);\n}\n\necho left_rotate(15, 2);\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\treturn (($n << $d) & $mask) | (($n >> ($bits - $d)) & $mask);\n}\n\necho left_rotate(1, 1);",
    "\t$bits = 32;\n\t$mask = (1 << $d) - 1;\n\t$mask = $mask << ($bits - $d);\n\t$n = $n & $mask;\n\t$n = $n >> ($bits - $d);\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask);\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(1, 1);",
    "\treturn ($n << $d) | ($n >> (32 - $d));\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\treturn (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | (($n >> $bits) & $mask);\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "    $mask = 0x80000000;\n    $mask = $mask >> ($d-1);\n    $mask = ~$mask;\n    $mask = $mask & 0xffffffff;\n    $n = $n & $mask;\n    $n = $n << $d;\n    return $n;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n"
  ]
}