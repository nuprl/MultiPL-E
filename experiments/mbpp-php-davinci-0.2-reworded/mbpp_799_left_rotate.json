{
  "name": "mbpp_799_left_rotate",
  "language": "php",
  "prompt": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    return (($n << $d) | ($n >> (32 - $d)));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d % $bits;\n    return (($n << $d) | ($n >> ($bits - $d))) & $mask;\n}\n",
    "\t$left = $n << $d;\n\t$right = $n >> (32 - $d);\n\treturn $left | $right;\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\treturn (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        if ($i < $d) {\n            $mask = $mask | (1 << $i);\n        }\n    }\n    $mask = ~$mask;\n    $left = $n & $mask;\n    $left = $left >> ($bits - $d);\n    $n = $n << $d;\n    $n = $n | $left;\n    return $n;\n}\n\necho left_rotate(16, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 100;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\n$n = left_rotate($n, $d);\necho decbin($n);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\treturn $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = decbin($n);\n\t$bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n\t$bits = substr($bits, $d) . substr($bits, 0, $d);\n\treturn bindec($bits);\n}\n\necho left_rotate(15, 2);\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\treturn (($n << $d) & $mask) | (($n >> ($bits - $d)) & $mask);\n}\n\necho left_rotate(1, 1);",
    "\t$bits = 32;\n\t$mask = (1 << $d) - 1;\n\t$mask = $mask << ($bits - $d);\n\t$n = $n & $mask;\n\t$n = $n >> ($bits - $d);\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask);\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(1, 1);",
    "\treturn ($n << $d) | ($n >> (32 - $d));\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\treturn (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | (($n >> $bits) & $mask);\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "    $mask = 0x80000000;\n    $mask = $mask >> ($d-1);\n    $mask = ~$mask;\n    $mask = $mask & 0xffffffff;\n    $n = $n & $mask;\n    $n = $n << $d;\n    return $n;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $n = $n & $mask;\n    $n = $n << $d;\n    $n = $n & $mask;\n    return $n;\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, \"0\", STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\n$res = left_rotate($n, $d);\necho $res;",
    "    $bits = 32;\n    $mask = (1 << $d) - 1;\n    $mask = $mask << ($bits - $d);\n    $n = $n & $mask;\n    $n = $n >> ($bits - $d);\n    return $n;\n}\n\n$n = 12;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(0b1101, 2);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);\necho \"\\n\";\necho left_rotate(10, 3);\necho \"\\n\";\necho left_rotate(10, 4);\necho \"\\n\";\n",
    "\t$bits = 32;\n\t$mask = ($n >> ($bits - $d)) & ((1 << $d) - 1);\n\t$mask = $mask << ($bits - $d);\n\treturn ($n << $d) | $mask;\n}\n",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$d = $d % $bits;\n\t$n = ($n << $d) & $mask;\n\t$n = $n | ($n >> $bits - $d);\n\treturn $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 10;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$mask = (1 << $d) - 1;\n\t$mask = $mask << (32 - $d);\n\t$n = $n & $mask;\n\t$n = $n >> (32 - $d);\n\treturn $n;\n}\n\n$n = 0b11010101;\n$d = 3;\necho left_rotate($n, $d);",
    "\treturn ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\tif ($i < $d) {\n\t\t\t$mask |= (1 << $i);\n\t\t}\n\t}\n\t$left = $n << $d;\n\t$right = $n >> ($bits - $d);\n\treturn ($left | $right) & ~$mask;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\t$n = $n & $mask;\n\treturn $n;\n}\n",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        if ($i < $d) {\n            $mask = $mask | (1 << $i);\n        }\n    }\n    $left = $n << $d;\n    $right = $n >> ($bits - $d);\n    $right = $right & $mask;\n    return $left | $right;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);\necho \"\\n\";\necho left_rotate(5, 3);\necho \"\\n\";\necho left_rotate(5, 4);\necho \"\\n\";\necho left_rotate(5, 5);\necho \"\\n\";\necho left_rotate(5, 6);\necho \"\\n\";\necho left_rotate(5, 7);\necho \"\\n\";\necho left_rotate(5, 8);\necho \"\\n\";\necho left_rotate(5, 9);\necho \"\\n\";\necho left_rotate(5, 10);\necho \"\\n\";\necho left_rotate(5, 11);\necho \"\\n\";\necho left_rotate(5, 12);\necho \"\\n\";\necho left_rotate(5, 13);\necho \"\\n\";\necho left_rotate(5, 14);\necho \"\\n\";\necho left_rotate(5, 15);\necho \"\\n\";\necho left_rotate(5, 16);\necho \"\\n\";\necho left_rotate(5, 17);\necho \"\\n\";\necho left_rotate(5, 18);\necho \"\\n\";\necho left_rotate(5, 19);\necho \"\\n\";\necho left_rotate(5, 20);\necho \"\\n\";\necho left_rotate(5, 21);\necho \"\\n\";\necho left_rotate(5, 22);\necho \"\\n\";\necho left_rotate(5, 23);\necho \"\\n\";\necho left_rotate(5, 24);\necho \"\\n\";\necho left_rotate(5, 25);\necho \"\\n\";\necho left_rotate(5, 26);\necho \"\\n\";\necho left_rotate(5, 27);\necho \"\\n\";\necho left_rotate(5, 28);\necho \"\\n\";\necho left_rotate(5, 29);\necho \"\\n\";\necho",
    "    $bits = 32;\n    $left_rotate = ($n << $d) | ($n >> ($bits - $d));\n    return $left_rotate;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, \"0\", STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(1, 1);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = ($n & $mask) >> ($bits - $d);\n\treturn $n;\n}\n\necho left_rotate(1, 1);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask);\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 12;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n",
    "\t$bits = decbin($n);\n\t$bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n\t$bits = substr($bits, $d) . substr($bits, 0, $d);\n\treturn bindec($bits);\n}\n\necho left_rotate(16, 2);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $d; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $mask = ~$mask;\n    $left = $n << $d;\n    $right = $n >> ($bits - $d);\n    $right = $right & $mask;\n    return $left | $right;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 3;\n$result = left_rotate($n, $d);\necho \"Left Rotate $d bits of $n is $result\\n\";",
    "\t$bits = 32;\n\t$left_rotate = ($n << $d) | ($n >> ($bits - $d));\n\treturn $left_rotate;\n}\n\necho left_rotate(5, 2);",
    "\t$mask = (1 << $d) - 1;\n\t$mask = $mask << (32 - $d);\n\t$n = $n & $mask;\n\t$n = $n >> (32 - $d);\n\treturn $n;\n}\n\n$n = 15;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask << 1;\n        $mask = $mask | 1;\n    }\n    $n = $n & $mask;\n    $n = $n << $d;\n    $n = $n & $mask;\n    return $n;\n}\n\n$n = 10;\n$d = 2;\necho left_rotate($n, $d);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0b11010101;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n << $d) & $mask;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d % $bits;\n    return (($n << $d) | ($n >> ($bits - $d))) & $mask;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $n = $n & $mask;\n    $n = $n << $d;\n    $n = $n & $mask;\n    return $n;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask);\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = ($n & $mask) >> ($bits - $d);\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\necho left_rotate($n, $d);\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | (($n >> $bits) & $mask);\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);\necho \"\\n\";\necho left_rotate(10, 3);\necho \"\\n\";\necho left_rotate(10, 4);\necho \"\\n\";\n",
    "    $bits = 32;\n    return ($n << $d) | ($n >> ($bits - $d));\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 10;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "    $bits = decbin($n);\n    $bits_len = strlen($bits);\n    $bits = str_pad($bits, 32, \"0\", STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(1, 1);\necho PHP_EOL;\necho left_rotate(1, 2);\necho PHP_EOL;\necho left_rotate(1, 3);\necho PHP_EOL;\necho left_rotate(1, 4);\necho PHP_EOL;\necho left_rotate(1, 5);\necho PHP_EOL;\necho left_rotate(1, 6);\necho PHP_EOL;\necho left_rotate(1, 7);\necho PHP_EOL;\necho left_rotate(1, 8);\necho PHP_EOL;\necho left_rotate(1, 9);\necho PHP_EOL;\necho left_rotate(1, 10);\necho PHP_EOL;\necho left_rotate(1, 11);\necho PHP_EOL;\necho left_rotate(1, 12);\necho PHP_EOL;\necho left_rotate(1, 13);\necho PHP_EOL;\necho left_rotate(1, 14);\necho PHP_EOL;\necho left_rotate(1, 15);\necho PHP_EOL;\necho left_rotate(1, 16);\necho PHP_EOL;\necho left_rotate(1, 17);\necho PHP_EOL;\necho left_rotate(1, 18);\necho PHP_EOL;\necho left_rotate(1, 19);\necho PHP_EOL;\necho left_rotate(1, 20);\necho PHP_EOL;\necho left_rotate(1, 21);\necho PHP_EOL;\necho left_rotate(1, 22);\necho PHP_EOL;\necho left_rotate(1, 23);\necho PHP_EOL;\necho left_rotate(1, 24);\necho PHP_EOL;\n",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\t$n = $n & $mask;\n\treturn $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 5;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d & $mask;\n    return (($n << $d) | ($n >> ($bits - $d))) & $mask;\n}\n\necho left_rotate(8, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n << $d) & $mask;\n\t$n = $n >> ($bits - $d);\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = ~(~0 << $bits);\n    $d = $d % $bits;\n    $n = ($n << $d) & $mask;\n    $n = ($n >> $bits - $d) & $mask;\n    return $n;\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$d = $d % $bits;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = ($n & $mask) >> ($bits - $d);\n    return $n;\n}\n\necho left_rotate(3, 2);",
    "\t$n = $n & 0xFFFFFFFF;\n\t$d = $d % 32;\n\treturn ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 0xFFFFFFFF;\n$d = 4;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n & $mask;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(1, 1);\necho \"\\n\";\necho left_rotate(1, 2);\necho \"\\n\";\necho left_rotate(1, 3);\necho \"\\n\";\necho left_rotate(1, 4);\necho \"\\n\";\necho left_rotate(1, 5);\necho \"\\n\";\necho left_rotate(1, 6);\necho \"\\n\";\necho left_rotate(1, 7);\necho \"\\n\";\necho left_rotate(1, 8);\necho \"\\n\";\necho left_rotate(1, 9);\necho \"\\n\";\necho left_rotate(1, 10);\necho \"\\n\";\necho left_rotate(1, 11);\necho \"\\n\";\necho left_rotate(1, 12);\necho \"\\n\";\necho left_rotate(1, 13);\necho \"\\n\";\necho left_rotate(1, 14);\necho \"\\n\";\necho left_rotate(1, 15);\necho \"\\n\";\necho left_rotate(1, 16);\necho \"\\n\";\necho left_rotate(1, 17);\necho \"\\n\";\necho left_rotate(1, 18);\necho \"\\n\";\necho left_rotate(1, 19);\necho \"\\n\";\necho left_rotate(1, 20);\necho \"\\n\";\necho left_rotate(1, 21);\necho \"\\n\";\necho left_rotate(1, 22);\necho \"\\n\";\necho left_rotate(1, 23);\necho \"\\n\";\necho left_rotate(1, 24);\necho \"\\n\";\necho left_rotate(1, 25);\necho \"\\n\";\necho left_rotate(1, 26);\necho \"\\n\";\necho left_rotate(1, 27);\necho \"\\n\";\necho left_rotate(1, 28",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\n$res = left_rotate($n, $d);\necho decbin($res);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 10;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n << $d) & $mask;\n\t$n = $n >> ($bits - $d);\n\treturn $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | (($n >> $bits) & $mask);\n    return $n;\n}\n",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(1, 1);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\necho left_rotate(1, 1);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(12, 2);\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\necho left_rotate(8, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(1, 1);",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $d; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$mask = ~$mask;\n\t$left = $n << $d;\n\t$right = $n & $mask;\n\t$right = $right >> ($bits - $d);\n\treturn $left | $right;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(2, 3);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask);\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "\treturn ($n << $d) | ($n >> (32 - $d));\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 0b1101;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $n = ($n << $d) & $mask;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    $n = $n & $mask;\n    return $n;\n}\n\necho left_rotate(10, 2);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $d) - 1;\n\t$mask = $mask << ($bits - $d);\n\t$mask = ~$mask;\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n << $d) & $mask;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = ($n & $mask) >> ($bits - $d);\n    return $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        if ($i < $d) {\n            $mask = $mask | (1 << $i);\n        }\n    }\n    $left = $n << $d;\n    $right = $n >> ($bits - $d);\n    $right = $right & $mask;\n    return $left | $right;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(1, 1);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d % $bits;\n    return (($n << $d) | ($n >> ($bits - $d))) & $mask;\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 12;\n$d = 2;\necho left_rotate($n, $d);",
    "  $bits = 32;\n  $mask = 0;\n  for ($i = 0; $i < $bits; $i++) {\n    $mask = $mask | (1 << $i);\n  }\n  $n = $n & $mask;\n  $n = ($n << $d) | ($n >> ($bits - $d));\n  return $n;\n}\n\n$n = 0b111000111;\n$d = 3;\necho left_rotate($n, $d) . PHP_EOL;\n",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\tif ($i < $d) {\n\t\t\t$mask = $mask | (1 << $i);\n\t\t}\n\t}\n\t$mask = ~$mask;\n\t$left = $n << $d;\n\t$right = $n & $mask;\n\t$right = $right >> ($bits - $d);\n\treturn $left | $right;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(1, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = ($n & $mask) << $d;\n\t$n = $n & $mask;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 1;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = ($n & $mask) >> ($bits - $d);\n\treturn $n;\n}\n\necho left_rotate(0b11010101010101010101010101010101, 4);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$mask = $mask >> ($bits - $d);\n\t$mask = ~$mask;\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\treturn $n;\n}\n",
    "    $mask = (1 << $d) - 1;\n    $mask = $mask << (32 - $d);\n    $n = $n & ~$mask;\n    $n = $n << $d;\n    return $n;\n}\n\n$n = 0b11010101010101010101010101010101;\n$d = 4;\n$res = left_rotate($n, $d);\necho decbin($res);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(1, 1);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    $n = $n & $mask;\n    return (($n << $d) | ($n >> ($bits - $d))) & $mask;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = ($n & $mask) >> ($bits - $d);\n\treturn $n;\n}\n\n$n = 15;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$d = $d & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(2, 1);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $n = $n & $mask;\n    $n = $n << $d;\n    $n = $n & $mask;\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\treturn (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n << $d) & $mask;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    $n = ($n & $mask) << $d;\n    $n = ($n & $mask) >> ($bits - $d);\n    return $n;\n}\n",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$n = $n & $mask;\n\t$n = $n << $d;\n\t$n = $n & $mask;\n\treturn $n;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n & $mask;\n    $n = $n >> ($bits - $d);\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | (($n >> ($bits - $d)) & $mask);\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $d) - 1;\n\t$mask = $mask << ($bits - $d);\n\t$n = $n & $mask;\n\t$n = $n >> ($bits - $d);\n\treturn $n;\n}\n\n$n = 10;\n$d = 3;\necho left_rotate($n, $d);",
    "\t$mask = (1 << $d) - 1;\n\t$mask = ~$mask;\n\t$mask = $mask & $n;\n\t$mask = $mask << $d;\n\t$n = $n >> (32 - $d);\n\t$n = $n | $mask;\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n & $mask;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\necho left_rotate($n, $d);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask);\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 1;\necho left_rotate($n, $d);\necho \"\\n\";\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\necho left_rotate($n, $d);\necho \"\\n\";\n\n$n = 0b11111111111111111111111111111111;\n$d = 3;\necho left_rotate($n, $d);\necho \"\\n\";\n\n$n = 0b11111111111111111111111111111111;\n$d = 4;\necho left_rotate($n, $d);\necho \"\\n\";\n\n$n = 0b11111111111111111111111111111111;\n$d = 5;\necho left_rotate($n, $d);\necho \"\\n\";\n\n$n = 0b11111111111111111111111111111111;\n$d = 6;\necho left_rotate($n, $d);\necho \"\\n\";\n\n$n = 0b11111111111111111111111111111111;\n$d = 7;\necho left_rotate($n, $d);\necho \"\\n\";\n\n$n = 0b11111111111111111111111111111111;\n$d = 8;\necho left_rotate($n, $d);\necho \"\\n\";\n\n$n = 0b11111111111111111111111111111111;\n$d = 9;\necho left_rotate($n, $d);\necho \"\\n\";\n\n$n = 0b11111111111111111111111111111111;\n$d = 10;\necho left_rotate($n, $d);\necho \"\\n\";\n\n$n = 0b11111111111111111111111111111111;\n$d = 11;\necho left_rotate($n, $d);\necho \"\\n\";\n\n$n = 0b11111111111111111111111111111111;\n$d = 12;",
    "  $bits = 32;\n  $mask = 0;\n  for ($i = 0; $i < $d; $i++) {\n    $mask = ($mask << 1) | 1;\n  }\n  $mask = ~$mask;\n  $n = ($n << $d) & $mask;\n  $n = $n | (($mask << $d) & $n);\n  return $n;\n}\n",
    "    $bits = 32;\n    $mask = ($n >> $d) & ((1 << ($bits - $d)) - 1);\n    $mask = $mask << ($bits - $d);\n    $mask = $mask | ($n << $d);\n    return $mask;\n}\n\necho left_rotate(16, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n & $mask;\n    return $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);\n",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$d = $d % $bits;\n\treturn (($n << $d) | ($n >> ($bits - $d))) & $mask;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    return (($n << $d) | ($n >> ($bits - $d))) & $mask;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\treturn (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask);\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d % $bits;\n    $left = $n << $d;\n    $right = $n >> ($bits - $d);\n    return $left | $right;\n}\n\n$n = 11;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d % $bits;\n    return (($n << $d) | ($n >> ($bits - $d))) & $mask;\n}\n\n$n = 10;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d % $bits;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $d = $d % $bits;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(4, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n &= $mask;\n\t$d &= $bits - 1;\n\treturn ($n << $d) | ($n >> ($bits - $d));\n}\n\necho left_rotate(10, 2);\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    return (($n << $d) & $mask) | ($n >> ($bits - $d));\n}\n",
    "\t$mask = (1 << $d) - 1;\n\t$mask = $mask << (32 - $d);\n\t$n = $n & $mask;\n\t$n = $n >> (32 - $d);\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = 0;\n    for ($i = 0; $i < $bits; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    $n = $n & $mask;\n    $n = $n << $d;\n    $n = $n & $mask;\n    return $n;\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);\necho \"\\n\";\necho left_rotate(5, 3);\necho \"\\n\";\necho left_rotate(5, 4);\necho \"\\n\";\necho left_rotate(5, 5);\necho \"\\n\";\necho left_rotate(5, 6);\necho \"\\n\";\necho left_rotate(5, 7);\necho \"\\n\";\necho left_rotate(5, 8);\necho \"\\n\";\necho left_rotate(5, 9);\necho \"\\n\";\necho left_rotate(5, 10);\necho \"\\n\";\necho left_rotate(5, 11);\necho \"\\n\";\necho left_rotate(5, 12);\necho \"\\n\";\necho left_rotate(5, 13);\necho \"\\n\";\necho left_rotate(5, 14);\necho \"\\n\";\necho left_rotate(5, 15);\necho \"\\n\";\necho left_rotate(5, 16);\necho \"\\n\";\necho left_rotate(5, 17);\necho \"\\n\";\necho left_rotate(5, 18);\necho \"\\n\";\necho left_rotate(5, 19);\necho \"\\n\";\necho left_rotate(5, 20);\necho \"\\n\";\necho left_rotate(5, 21);\necho \"\\n\";\necho left_rotate(5, 22);\necho \"\\n\";\necho left_rotate(5, 23);\necho \"\\n\";\necho left_rotate(5, 24);\necho \"\\n\";\necho left_rotate(5, 25);\necho \"\\n\";\necho left_rotate(5, 26);\necho \"\\n\";\necho left_rotate(5, 27);\necho \"\\n\";\necho left_rotate(5, 28);\necho \"\\n\";\necho left_rotate(",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "    $bits = 32;\n    $left_rotate = ($n << $d) | ($n >> ($bits - $d));\n    return $left_rotate;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$d = $d % $bits;\n\t$n = ($n << $d) & $mask;\n\t$n = $n | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(1, 1);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = ($n & $mask) >> ($bits - $d);\n\treturn $n;\n}\n\necho left_rotate(1, 1) . PHP_EOL;\necho left_rotate(2, 1) . PHP_EOL;\necho left_rotate(3, 1) . PHP_EOL;\necho left_rotate(4, 1) . PHP_EOL;\necho left_rotate(5, 1) . PHP_EOL;\necho left_rotate(6, 1) . PHP_EOL;\necho left_rotate(7, 1) . PHP_EOL;\necho left_rotate(8, 1) . PHP_EOL;\necho left_rotate(9, 1) . PHP_EOL;\necho left_rotate(10, 1) . PHP_EOL;\necho left_rotate(11, 1) . PHP_EOL;\necho left_rotate(12, 1) . PHP_EOL;\necho left_rotate(13, 1) . PHP_EOL;\necho left_rotate(14, 1) . PHP_EOL;\necho left_rotate(15, 1) . PHP_EOL;\necho left_rotate(16, 1) . PHP_EOL;\necho left_rotate(17, 1) . PHP_EOL;\necho left_rotate(18, 1) . PHP_EOL;\necho left_rotate(19, 1) . PHP_EOL;\necho left_rotate(20, 1) . PHP_EOL;\necho left_rotate(21, 1) . PHP_EOL;\necho left_rotate(22, 1) . PHP_EOL;\necho left_rotate(23, 1) . PHP_EOL;\necho left_rotate(24, 1) . PHP_EOL;\necho left_rotate(25, 1) . PHP_EOL;\necho left_rotate(26, 1) . PHP_EOL;\necho left_rotate(",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $mask = $mask >> ($bits - $d);\n    $mask = ~$mask;\n    $n = $n & $mask;\n    $n = $n << $d;\n    return $n;\n}\n\n$n = 10;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n & $mask;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\necho left_rotate(5, 2);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $d; $i++) {\n\t\t$mask = ($mask << 1) | 1;\n\t}\n\t$mask = ~$mask;\n\t$left = ($n << $d) & $mask;\n\t$right = $n >> ($bits - $d);\n\treturn $left | $right;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask);\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    $n = ($n & $mask);\n    return $n;\n}\n",
    "\t$bits = 32;\n\t$mask = (1 << $d) - 1;\n\t$mask = $mask << ($bits - $d);\n\t$n = $n & $mask;\n\t$n = $n >> ($bits - $d);\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n & $mask;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\n$n = 16;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = ($n & $mask) >> ($bits - $d);\n    return $n;\n}\n\n$n = 0b10000000000000000000000000000001;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "    return ($n << $d) | ($n >> (32 - $d));\n}\n\necho left_rotate(5, 2);",
    "\t$mask = 0;\n\tfor ($i = 0; $i < $d; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$mask = ~$mask;\n\t$left = $n & $mask;\n\t$right = $n & (~$mask);\n\t$left = $left << $d;\n\t$right = $right >> (32 - $d);\n\treturn $left | $right;\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\necho decbin(left_rotate($n, $d)) . PHP_EOL;\n",
    "\t$bits = decbin($n);\n\t$bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n\t$bits = substr($bits, $d) . substr($bits, 0, $d);\n\treturn bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask);\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\n$n = 2;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\treturn (($n << $d) & $mask) | (($n >> ($bits - $d)) & $mask);\n}\n\n$n = 0b11111111111111111111111111111111;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | ($n >> $bits);\n\treturn $n;\n}\n\necho left_rotate(5, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$d = $d % $bits;\n\treturn (($n << $d) & $mask) | (($n >> ($bits - $d)) & $mask);\n}\n\necho left_rotate(0b1101, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d % $bits;\n    $n = ($n << $d) | ($n >> ($bits - $d));\n    return $n;\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n << $d) & $mask;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\n$n = 10;\n$d = 2;\necho left_rotate($n, $d);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) | ($n >> ($bits - $d));\n\treturn $n;\n}\n\necho left_rotate(10, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = $n & $mask;\n\t$n = ($n << $d) & $mask;\n\t$n = ($n >> $bits - $d) & $mask;\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(10, 2);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = $n & $mask;\n    $d = $d & $mask;\n    $d = $d % $bits;\n    $n = $n << $d;\n    $n = $n & $mask;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n",
    "\t$bits = 32;\n\t$mask = 0;\n\tfor ($i = 0; $i < $bits; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$d = $d % $bits;\n\t$n = ($n << $d) & $mask;\n\t$n = $n | ($n >> $bits - $d);\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = 32;\n    $mask = (1 << $bits) - 1;\n    $n = ($n & $mask) << $d;\n    $n = $n | ($n >> $bits);\n    return $n;\n}\n\n$n = 0b1101;\n$d = 2;\necho left_rotate($n, $d);",
    "    $bits = decbin($n);\n    $bits = str_pad($bits, 32, '0', STR_PAD_LEFT);\n    $bits = substr($bits, $d) . substr($bits, 0, $d);\n    return bindec($bits);\n}\n\necho left_rotate(8, 2);",
    "\t$bits = 32;\n\t$mask = (1 << $bits) - 1;\n\t$n = ($n & $mask) << $d;\n\t$n = $n | (($n >> $bits) & $mask);\n\treturn $n;\n}\n\n$n = 5;\n$d = 2;\necho left_rotate($n, $d);"
  ]
}