{
  "name": "mbpp_562_Find_Max_Length",
  "language": "php",
  "prompt": "<?php\n// Write a phpthon function to find the length of the longest subarrays.\nfunction Find_Max_Length($lst) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return Find_Max_Length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1), array(1, 4), array(5, 6, 7, 8))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0, 1), array(2, 2), array(3, 2, 1))) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7), array(22, 23), array(13, 14, 15), array(10, 20, 30, 40, 50))) !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $max_length = 0;\n    $current_length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n && $j < $n) {\n        if ($lst[$j] - $lst[$i] == $j - $i) {\n            $current_length = $j - $i + 1;\n            if ($current_length > $max_length) {\n                $max_length = $current_length;\n            }\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 56, 58, 57, 90, 92, 94, 93, 91, 45);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length++;\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n        }\n        $i++;\n    }\n    return $max_length;\n}\n$lst = array(1, 0, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $len = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $len = 0;\n        }\n        else {\n            $len++;\n            if ($len > $max_len) {\n                $max_len = $len;\n            }\n        }\n        $i++;\n    }\n    return $max_len;\n}\n\n$lst = [1,0,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length = 0;\n            while ($lst[$i] == 1) {\n                $length++;\n                $i++;\n            }\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n        }\n        $i++;\n    }\n    return $max_length;\n}\n$lst = [0, 1, 1, 0, 1, 1, 1, 0, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $curr_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len++;\n            $max_len = max($max_len, $curr_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1);\n$max_len = Find_Max_Length($lst);\necho $max_len;",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i;\n            while ($lst[$j] == 0 && $j < $n) {\n                $length++;\n                $j++;\n            }\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $i = $j;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 0, 1, 1, 0, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length++;\n            $max_length = max($max_length, $length);\n        }\n        $i++;\n    }\n    return $max_length;\n}\n$lst = array(0, 1, 1, 0, 1, 1, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $current_length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $current_length++;\n        } else {\n            $current_length = 0;\n        }\n        if ($current_length > $max_length) {\n            $max_length = $current_length;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $count = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 1) {\n            $count++;\n        } else {\n            $count = 0;\n        }\n        $max_length = max($max_length, $count);\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i + 1;\n            while ($j < count($lst)) {\n                if ($lst[$j] == 1) {\n                    $length++;\n                    $j++;\n                } else {\n                    break;\n                }\n            }\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $i = $j;\n        } else {\n            $i++;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_len = 0;\n    $count = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $count++;\n        } else {\n            $count = 0;\n        }\n        if ($count > $max_len) {\n            $max_len = $count;\n        }\n    }\n    return $max_len;\n}\n$lst = array(1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_len = 0;\n    $len = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $len = 0;\n        } else {\n            $len++;\n            if ($len > $max_len) {\n                $max_len = $len;\n            }\n        }\n        $i++;\n    }\n    return $max_len;\n}\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $curr_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len++;\n            $max_len = max($max_len, $curr_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 1) {\n            $length = 0;\n            while ($lst[$i] != 0) {\n                $length++;\n                $i++;\n            }\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $curr_sum = 0;\n    $sum = 0;\n    $hash = array();\n    for ($i = 0; $i < count($lst); $i++) {\n        $sum += $lst[$i];\n        if ($sum == 0) {\n            $curr_length = $i + 1;\n            if ($curr_length > $max_length) {\n                $max_length = $curr_length;\n            }\n        }\n        if (array_key_exists($sum, $hash)) {\n            $curr_length = $i - $hash[$sum];\n            if ($curr_length > $max_length) {\n                $max_length = $curr_length;\n            }\n        } else {\n            $hash[$sum] = $i;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(15, -2, 2, -8, 1, 7, 10, 23);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count == 0) {\n            $max_length = max($max_length, $i - $j + 1);\n        }\n        if ($count < 0) {\n            $j = $i + 1;\n            $count = 0;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n$lst = array(1, 0, 0, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $prev = 0;\n    $curr = 0;\n    for ($i=0; $i < count($lst); $i++) { \n        if ($lst[$i] == 0) {\n            $curr = 1;\n        }\n        else {\n            $curr = 0;\n        }\n        if ($curr == $prev) {\n            $length++;\n        }\n        else {\n            $length = 1;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $prev = $curr;\n    }\n    return $max_length;\n}\n$lst = array(1,1,1,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i;\n            while ($j < $n) {\n                if ($lst[$j] == 1) {\n                    break;\n                }\n                $length++;\n                $j++;\n            }\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $i = $j;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(0, 0, 1, 0, 1, 1, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $count = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $count = 0;\n        } else {\n            $count++;\n            $max_length = max($max_length, $count);\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length += 1;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i += 1;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $prev_zero = -1;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $max_length = max($max_length, $i - $prev_zero - 1);\n            $prev_zero = $i;\n        }\n    }\n    $max_length = max($max_length, $n - $prev_zero - 1);\n    return $max_length;\n}\n$lst = array(1, 0, 0, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $count = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $count = 0;\n        } else {\n            $count++;\n            $max_length = max($max_length, $count);\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $count = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $count = 0;\n        } else {\n            $count++;\n            $max_length = max($max_length, $count);\n        }\n        $i++;\n    }\n    return $max_length;\n}\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length++;\n            $max_length = max($max_length, $length);\n        }\n        $i++;\n    }\n    return $max_length;\n}\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $cur_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $cur_len = 0;\n        } else {\n            $cur_len++;\n            $max_len = max($max_len, $cur_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "\t$max_length = 0;\n\t$length = 0;\n\t$i = 0;\n\t$j = 0;\n\t$n = count($lst);\n\twhile ($i < $n) {\n\t\tif ($lst[$i] == 0) {\n\t\t\t$length = 0;\n\t\t\t$j = $i;\n\t\t\twhile ($j < $n) {\n\t\t\t\tif ($lst[$j] == 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$length++;\n\t\t\t\t$j++;\n\t\t\t}\n\t\t\tif ($length > $max_length) {\n\t\t\t\t$max_length = $length;\n\t\t\t}\n\t\t\t$i = $j;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $max_length;\n}\n\n$lst = array(1, 0, 0, 1, 1, 0, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "\t$max = 0;\n\t$count = 0;\n\tforeach ($lst as $value) {\n\t\tif ($value == 1) {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count = 0;\n\t\t}\n\t\tif ($count > $max) {\n\t\t\t$max = $count;\n\t\t}\n\t}\n\treturn $max;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length++;\n            $max_length = max($max_length, $length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $count = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $count = 0;\n        }\n        else {\n            $count++;\n            $max_len = max($max_len, $count);\n        }\n    }\n    return $max_len;\n}\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $len = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n && $j < $n) {\n        if ($lst[$j] == 0) {\n            $j++;\n            $len = $j - $i;\n        } else {\n            $j++;\n            $i = $j;\n            $len = 0;\n        }\n        if ($len > $max_len) {\n            $max_len = $len;\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 0, 0, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $count = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $count++;\n        } else {\n            $count = 0;\n        }\n        if ($count > $max_length) {\n            $max_length = $count;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length++;\n            $max_length = max($max_length, $length);\n        }\n    }\n    return $max_length;\n}\n$lst = array(1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $current_length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $current_length = 0;\n        } else {\n            $current_length += 1;\n            $max_length = max($max_length, $current_length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $count = 0;\n    $size = sizeof($lst);\n    for ($i = 0; $i < $size; $i++) {\n        if ($lst[$i] == 1) {\n            $count++;\n        } else {\n            $count = 0;\n        }\n        if ($count > $max_length) {\n            $max_length = $count;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i + 1;\n            while ($j < count($lst)) {\n                if ($lst[$j] == 1) {\n                    $length++;\n                    $j++;\n                } else {\n                    break;\n                }\n            }\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $current_length = 0;\n    $current_sum = 0;\n    $sum_array = array();\n    $sum_array[0] = -1;\n    for ($i = 0; $i < count($lst); $i++) {\n        $current_sum += $lst[$i];\n        if (array_key_exists($current_sum, $sum_array)) {\n            $current_length = $i - $sum_array[$current_sum];\n        } else {\n            $sum_array[$current_sum] = $i;\n        }\n        if ($current_length > $max_length) {\n            $max_length = $current_length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 0, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $cur_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $cur_len = 0;\n        } else {\n            $cur_len++;\n            $max_len = max($max_len, $cur_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max = 0;\n    $count = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $count = 0;\n        } else {\n            $count++;\n            $max = max($max, $count);\n        }\n    }\n    return $max;\n}\n\n$lst = array(1, 0, 0, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $curr_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len++;\n            $max_len = max($max_len, $curr_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(0, 0, 1, 0, 1, 1, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $cur_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $cur_len = 0;\n        } else {\n            $cur_len++;\n            $max_len = max($max_len, $cur_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        $j = $i + 1;\n        $length = 1;\n        while ($j < $n) {\n            if ($lst[$j] > $lst[$j - 1]) {\n                $length++;\n            } else {\n                break;\n            }\n            $j++;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i = $i + $length;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst) - 1) {\n        if ($lst[$i] < $lst[$i + 1]) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n            $j = $i;\n        }\n        $i++;\n    }\n    return $j - $max_length + 1;\n}\n\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$lst1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);\n$lst2 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,",
    "    $max_length = 0;\n    $curr_length = 0;\n    $len = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        if ($lst[$i] == 1) {\n            $curr_length++;\n        } else {\n            $curr_length = 0;\n        }\n        if ($curr_length > $max_length) {\n            $max_length = $curr_length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_length = 0;\n        } else {\n            $curr_length += 1;\n            $max_length = max($max_length, $curr_length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1);\necho \"The length of the longest subarray is: \" . Find_Max_Length($lst);",
    "    $max_len = 0;\n    $max_len_arr = [];\n    $len = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        $max_len_arr[$i] = 1;\n        for ($j = 0; $j < $i; $j++) {\n            if ($lst[$j] < $lst[$i]) {\n                $max_len_arr[$i] = max($max_len_arr[$i], $max_len_arr[$j] + 1);\n            }\n        }\n        $max_len = max($max_len, $max_len_arr[$i]);\n    }\n    return $max_len;\n}\n\n$lst = [10, 22, 9, 33, 21, 50, 41, 60];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $current_length = 0;\n    $prev_element = -1;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] > $prev_element) {\n            $current_length++;\n        } else {\n            $current_length = 1;\n        }\n        $max_length = max($max_length, $current_length);\n        $prev_element = $lst[$i];\n    }\n    return $max_length;\n}\n\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        while ($j < $n) {\n            if ($lst[$j] == 1) {\n                $curr_length++;\n            } else {\n                break;\n            }\n            $j++;\n        }\n        $max_length = max($max_length, $curr_length);\n        $curr_length = 0;\n        $i = $j;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length += 1;\n            $max_length = max($max_length, $length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $count = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $count = 0;\n        } else {\n            $count++;\n            $max_length = max($max_length, $count);\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $len = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $len = 0;\n            $j = $i;\n            while ($j < $n) {\n                if ($lst[$j] == 1) {\n                    break;\n                }\n                $len += 1;\n                $j += 1;\n            }\n            $i = $j;\n        }\n        else {\n            $len = 0;\n            $j = $i;\n            while ($j < $n) {\n                if ($lst[$j] == 0) {\n                    break;\n                }\n                $len += 1;\n                $j += 1;\n            }\n            $i = $j;\n        }\n        if ($len > $max_len) {\n            $max_len = $len;\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $curr_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len++;\n            $max_len = max($max_len, $curr_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = [0, 1, 1, 0, 1, 1, 1, 0, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $current_length = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $current_length++;\n        } else {\n            $current_length = 0;\n        }\n        if ($current_length > $max_length) {\n            $max_length = $current_length;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $cur_length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $cur_length += 1;\n        } else {\n            $cur_length = 0;\n        }\n        if ($cur_length > $max_length) {\n            $max_length = $cur_length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max = 0;\n    $count = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $count = 0;\n        } else {\n            $count++;\n            $max = max($max, $count);\n        }\n    }\n    return $max;\n}\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $lst_len = count($lst);\n    for ($i = 0; $i < $lst_len; $i++) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i + 1;\n            while ($j < count($lst)) {\n                if ($lst[$j] == 1) {\n                    $length++;\n                    if ($length > $max_length) {\n                        $max_length = $length;\n                    }\n                }\n                $j++;\n            }\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $count = count($lst);\n    for ($i = 0; $i < $count; $i++) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length++;\n            $max_length = max($max_length, $length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n && $j < $n) {\n        if ($lst[$j] == 0) {\n            $j++;\n            $length = $j - $i;\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n        } else {\n            $i = $j + 1;\n            $j = $i;\n        }\n    }\n    return $max_length;\n}\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_length = 0;\n        } else {\n            $curr_length++;\n            $max_length = max($max_length, $curr_length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $cur_len = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $cur_len = 0;\n        } else {\n            $cur_len += 1;\n            $max_len = max($max_len, $cur_len);\n        }\n        $i += 1;\n    }\n    return $max_len;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\nprint_r(Find_Max_Length($lst));",
    "    $max_len = 0;\n    $curr_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len++;\n            $max_len = max($max_len, $curr_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i + 1;\n            while ($j < $n) {\n                if ($lst[$j] == 1) {\n                    $length += 1;\n                } else {\n                    break;\n                }\n                $j += 1;\n            }\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i += 1;\n    }\n    return $max_length;\n}\n\n$lst = [0, 0, 1, 0, 1, 1, 1, 0, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i + 1;\n            while ($j < $n) {\n                if ($lst[$j] == 1) {\n                    $length += 1;\n                } else {\n                    break;\n                }\n                $j += 1;\n            }\n            $i = $j;\n        } else {\n            $i += 1;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 0, 0, 1, 1, 0, 1, 0, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $curr_length = 0;\n        } else {\n            $curr_length += 1;\n            if ($curr_length > $max_length) {\n                $max_length = $curr_length;\n            }\n        }\n        $i += 1;\n    }\n    return $max_length;\n}\n\n$lst = [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n && $j < $n) {\n        if ($lst[$j] - $lst[$i] == $j - $i) {\n            $length = $j - $i + 1;\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 56, 58, 57, 90, 92, 94, 93, 91, 45];\n$max_length = Find_Max_Length($lst);\necho $max_length;",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n            $i++;\n        } else {\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $length = 0;\n            $i++;\n        }\n    }\n    return $max_length;\n}\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length++;\n            $max_length = max($max_length, $length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length++;\n            $max_length = max($max_length, $length);\n        }\n    }\n    return $max_length;\n}\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $count = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $count = 0;\n        } else {\n            $count++;\n            $max_length = max($max_length, $count);\n        }\n    }\n    return $max_length;\n}\n$lst = array(1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $curr_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len++;\n            $max_len = max($max_len, $curr_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max = 0;\n    $count = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $count++;\n        } else {\n            $count = 0;\n        }\n        if ($count > $max) {\n            $max = $count;\n        }\n    }\n    return $max;\n}\n$lst = array(1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n && $j < $n) {\n        if ($lst[$j] - $lst[$i] == $j - $i) {\n            $length = $j - $i + 1;\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 56, 58, 57, 90, 92, 94, 93, 91, 45);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $curr_length = 0;\n        } else {\n            $curr_length++;\n            if ($curr_length > $max_length) {\n                $max_length = $curr_length;\n            }\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $curr_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len += 1;\n            $max_len = max($max_len, $curr_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $cur_len = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $cur_len = 0;\n        } else {\n            $cur_len += 1;\n            $max_len = max($max_len, $cur_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $cur_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $cur_len = 0;\n        } else {\n            $cur_len++;\n            $max_len = max($max_len, $cur_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        }\n        else {\n            $length += 1;\n            $max_length = max($max_length, $length);\n        }\n        $i += 1;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $lst_length = count($lst);\n    for ($i = 0; $i < $lst_length; $i++) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length += 1;\n            $max_length = max($max_length, $length);\n        }\n        $i += 1;\n    }\n    return $max_length;\n}\n\n$lst = [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $curr_length = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 1) {\n            $curr_length += 1;\n        } else {\n            $curr_length = 0;\n        }\n        if ($curr_length > $max_length) {\n            $max_length = $curr_length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_len = 0;\n    $len = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        $curr_len = 0;\n        for ($j = $i; $j < $len; $j++) {\n            if ($lst[$j] == 0) {\n                break;\n            }\n            $curr_len++;\n        }\n        $max_len = max($max_len, $curr_len);\n    }\n    return $max_len;\n}\n\n$lst = [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $count = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $count++;\n        } else {\n            $count = 0;\n        }\n        if ($count > $max_length) {\n            $max_length = $count;\n        }\n    }\n    return $max_length;\n}\n$lst = array(1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_length = 0;\n    $current_length = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $current_length = 0;\n        } else {\n            $current_length++;\n            $max_length = max($max_length, $current_length);\n        }\n    }\n    return $max_length;\n}\n",
    "    $max_length = 0;\n    $cur_length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $cur_length += 1;\n        } else {\n            if ($cur_length > $max_length) {\n                $max_length = $cur_length;\n            }\n            $cur_length = 0;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 1) {\n            $curr_length++;\n        } else {\n            $curr_length = 0;\n        }\n        if ($curr_length > $max_length) {\n            $max_length = $curr_length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $current_length = 0;\n    $len = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        if ($lst[$i] != 0) {\n            $current_length++;\n            if ($current_length > $max_length) {\n                $max_length = $current_length;\n            }\n        } else {\n            $current_length = 0;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $count = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $count = 0;\n        } else {\n            $count++;\n            $max_length = max($max_length, $count);\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $current_length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $current_length++;\n        } else {\n            $max_length = max($max_length, $current_length);\n            $current_length = 0;\n        }\n        $i++;\n    }\n    return max($max_length, $current_length);\n}\n\n$lst = array(1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n$lst = [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $length += 1;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $current_length = 0;\n    $count = 0;\n    $current_sum = 0;\n    $max_sum = 0;\n    $current_sum = 0;\n    $max_sum = 0;\n    $count = 0;\n    $current_length = 0;\n    $max_length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        $current_sum += $lst[$i];\n        $current_length++;\n        if ($current_sum == 0) {\n            $current_length = 0;\n            $current_sum = 0;\n        }\n        if ($current_sum > $max_sum) {\n            $max_sum = $current_sum;\n            $max_length = $current_length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length++;\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while($i < $n) {\n        if($lst[$i] == 0) {\n            $length = 0;\n            $j = $i + 1;\n            while($j < $n) {\n                if($lst[$j] == 1) {\n                    $length += 1;\n                    $j += 1;\n                }\n                else {\n                    break;\n                }\n            }\n            if($length > $max_length) {\n                $max_length = $length;\n            }\n            $i = $j;\n        }\n        else {\n            $i += 1;\n        }\n    }\n    return $max_length;\n}\n$lst = array(1,0,1,1,1,0,0);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i + 1;\n            while ($j < count($lst)) {\n                if ($lst[$j] == 1) {\n                    $length++;\n                    if ($length > $max_length) {\n                        $max_length = $length;\n                    }\n                }\n                $j++;\n            }\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $current_length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $current_length++;\n        }\n        else {\n            if ($current_length > $max_length) {\n                $max_length = $current_length;\n            }\n            $current_length = 0;\n        }\n    }\n    return $max_length;\n}\n$lst = array(1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i + 1;\n            while ($j < $n) {\n                if ($lst[$j] == 1) {\n                    $length += 1;\n                }\n                else {\n                    break;\n                }\n                $j += 1;\n            }\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $i = $j;\n        }\n        else {\n            $i += 1;\n        }\n    }\n    return $max_length;\n}\n$lst = array(1,0,1,1,1,0,0);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $curr_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len += 1;\n            $max_len = max($max_len, $curr_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 0, 0, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $curr_sum = 0;\n    $sum = 0;\n    $map = array();\n    for ($i = 0; $i < count($lst); $i++) {\n        $sum += $lst[$i];\n        if ($sum == 0) {\n            $curr_length = $i + 1;\n            if ($curr_length > $max_length) {\n                $max_length = $curr_length;\n            }\n        }\n        if (array_key_exists($sum, $map)) {\n            $curr_length = $i - $map[$sum];\n            if ($curr_length > $max_length) {\n                $max_length = $curr_length;\n            }\n        } else {\n            $map[$sum] = $i;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(15, -2, 2, -8, 1, 7, 10, 23);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $cur_length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n && $j < $n) {\n        if ($lst[$j] == 0) {\n            $cur_length = 0;\n            $j++;\n        } else {\n            $cur_length++;\n            $j++;\n            $max_length = max($max_length, $cur_length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $cur_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $cur_len = 0;\n        } else {\n            $cur_len++;\n            $max_len = max($max_len, $cur_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $curr_length = 0;\n            $j = $i + 1;\n            while ($j < $n && $lst[$j] == 1) {\n                $curr_length++;\n                $j++;\n            }\n            $i = $j;\n        } else {\n            $i++;\n        }\n        if ($curr_length > $max_length) {\n            $max_length = $curr_length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1];\necho Find_Max_Length($lst);\n",
    "    $max_length = 0;\n    $current_length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $current_length = 0;\n        } else {\n            $current_length++;\n            if ($current_length > $max_length) {\n                $max_length = $current_length;\n            }\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i;\n            while ($j < $n) {\n                if ($lst[$j] == 1) {\n                    $length++;\n                } else {\n                    break;\n                }\n                $j++;\n            }\n            $i = $j;\n        } else {\n            $length++;\n            $i++;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length += 1;\n        } else {\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $length = 0;\n        }\n        $i += 1;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $current_length = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 1) {\n            $current_length += 1;\n        } else {\n            $max_length = max($max_length, $current_length);\n            $current_length = 0;\n        }\n    }\n    $max_length = max($max_length, $current_length);\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i;\n            while ($j < $n && $lst[$j] == 0) {\n                $length++;\n                $j++;\n            }\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $i = $j;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 0, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n$lst = array(1, 1, 0, 0, 1, 1, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $count = 0;\n    foreach ($lst as $value) {\n        if ($value == 1) {\n            $count++;\n        } else {\n            $count = 0;\n        }\n        if ($count > $max_length) {\n            $max_length = $count;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length++;\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n        }\n        $i++;\n    }\n    return $max_length;\n}\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $len = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        while ($j < $n) {\n            if ($lst[$j] == 1) {\n                $len++;\n            }\n            else {\n                break;\n            }\n            $j++;\n        }\n        if ($len > $max_len) {\n            $max_len = $len;\n        }\n        $len = 0;\n        $i = $j;\n    }\n    return $max_len;\n}\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max = 0;\n    $count = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $count = 0;\n        } else {\n            $count++;\n            $max = max($max, $count);\n        }\n    }\n    return $max;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i;\n            while ($j < $n) {\n                if ($lst[$j] == 1) {\n                    break;\n                }\n                $length++;\n                $j++;\n            }\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $i = $j;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $cur_length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $cur_length += 1;\n        } else {\n            $cur_length = 0;\n        }\n        if ($cur_length > $max_length) {\n            $max_length = $cur_length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $len = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        $cur_len = 0;\n        for ($j = $i; $j < $len; $j++) {\n            if ($lst[$j] == 1) {\n                $cur_len++;\n            } else {\n                break;\n            }\n        }\n        if ($cur_len > $max_len) {\n            $max_len = $cur_len;\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $cur_len = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $cur_len = 0;\n        } else {\n            $cur_len++;\n            $max_len = max($max_len, $cur_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length++;\n            $max_length = max($max_length, $length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $length = 0;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 1) {\n            $length = 0;\n            while ($i < $n && $lst[$i] == 1) {\n                $length++;\n                $i++;\n            }\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 0, 1, 1, 0, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length++;\n            $max_length = max($max_length, $length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_len = 0;\n    $len = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $len = 0;\n            $i++;\n            $j = $i;\n        } else {\n            $len++;\n            $i++;\n        }\n        if ($len > $max_len) {\n            $max_len = $len;\n        }\n    }\n    return $max_len;\n}\n$lst = array(1,1,1,0,0,0,1,1,1,1,0,1,1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $cur_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $cur_len = 0;\n        } else {\n            $cur_len++;\n            $max_len = max($max_len, $cur_len);\n        }\n    }\n    return $max_len;\n}\n$lst = array(1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $len = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $len = 0;\n        } else {\n            $len++;\n            $max_len = max($max_len, $len);\n        }\n    }\n    return $max_len;\n}\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $curr_length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $curr_length = 0;\n        } else {\n            $curr_length += 1;\n            $max_length = max($max_length, $curr_length);\n        }\n        $i += 1;\n    }\n    return $max_length;\n}\n\n$lst = [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i;\n            while ($j < $n) {\n                if ($lst[$j] == 1) {\n                    break;\n                }\n                $length++;\n                $j++;\n            }\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $i = $j;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n$lst = array(1, 0, 0, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n        } else {\n            $length = 0;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n$lst = array(1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        $j = $i + 1;\n        $length = 1;\n        while ($j < $n) {\n            if ($lst[$j] > $lst[$j - 1]) {\n                $length++;\n            } else {\n                break;\n            }\n            $j++;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i = $i + $length;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n            $i++;\n        } else {\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $length = 0;\n            $i++;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $curr_sum = 0;\n    $max_sum = 0;\n    $start = 0;\n    $end = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        $curr_sum += $lst[$i];\n        $curr_length++;\n        if ($curr_sum == $max_sum) {\n            if ($curr_length > $max_length) {\n                $max_length = $curr_length;\n                $end = $i;\n            }\n        }\n        if ($curr_sum > $max_sum) {\n            $max_sum = $curr_sum;\n            $max_length = $curr_length;\n            $end = $i;\n        }\n        if ($curr_sum < 0) {\n            $curr_sum = 0;\n            $curr_length = 0;\n        }\n    }\n    $start = $end - $max_length + 1;\n    echo \"Max sum is \" . $max_sum . \"<br>\";\n    echo \"Max length is \" . $max_length . \"<br>\";\n    echo \"Start index is \" . $start . \"<br>\";\n    echo \"End index is \" . $end . \"<br>\";\n}\n\n$lst = array(-2, -3, 4, -1, -2, 1, 5, -3);\nFind_Max_Length($lst);",
    "    $max_len = 0;\n    $curr_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len++;\n            $max_len = max($max_len, $curr_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $curr_length = 0;\n        }\n        else {\n            $curr_length++;\n            if ($curr_length > $max_length) {\n                $max_length = $curr_length;\n            }\n        }\n    }\n    return $max_length;\n}\n$lst = array(1,0,1,1,1,0,0,1,1,1,1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $cur_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 1) {\n            $cur_len++;\n        } else {\n            $max_len = max($max_len, $cur_len);\n            $cur_len = 0;\n        }\n    }\n    return max($max_len, $cur_len);\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1);\necho Find_Max_Length($lst);\n",
    "    $max_length = 0;\n    $curr_length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $curr_length++;\n            $max_length = max($max_length, $curr_length);\n        } else {\n            $curr_length = 0;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 0, 1, 1, 1, 0, 1, 0);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $len = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $len = 0;\n            $j = $i;\n            while ($j < $n && $lst[$j] == 0) {\n                $len++;\n                $j++;\n            }\n            if ($len > $max_len) {\n                $max_len = $len;\n            }\n            $i = $j;\n        } else {\n            $i++;\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $curr_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len++;\n            $max_len = max($max_len, $curr_len);\n        }\n    }\n    return $max_len;\n}\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n        } else {\n            $length = 0;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length += 1;\n            $max_length = max($max_length, $length);\n        }\n        $i += 1;\n    }\n    return $max_length;\n}\n\n$lst = [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $last_elem = null;\n    foreach ($lst as $elem) {\n        if ($last_elem == null || $last_elem < $elem) {\n            $curr_length++;\n        } else {\n            $curr_length = 1;\n        }\n        $max_length = max($max_length, $curr_length);\n        $last_elem = $elem;\n    }\n    return $max_length;\n}\n\n$lst = [1, 2, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length += 1;\n            $max_length = max($max_length, $length);\n        }\n        $i += 1;\n    }\n    return $max_length;\n}\n\n$lst = [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $curr_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len++;\n            $max_len = max($max_len, $curr_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $current_length = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $current_length = 0;\n        } else {\n            $current_length++;\n            $max_length = max($max_length, $current_length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 0, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length += 1;\n            $max_length = max($max_length, $length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length++;\n            $max_length = max($max_length, $length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length++;\n            $max_length = max($max_length, $length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_length = 0;\n        } else {\n            $curr_length += 1;\n            $max_length = max($max_length, $curr_length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $curr_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len++;\n            $max_len = max($max_len, $curr_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_len = 0;\n    $curr_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len++;\n            $max_len = max($max_len, $curr_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i + 1;\n            while ($j < $n) {\n                if ($lst[$j] == 1) {\n                    $length += 1;\n                } else {\n                    break;\n                }\n                $j += 1;\n            }\n            $i = $j;\n        } else {\n            $length += 1;\n            $i += 1;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $curr_len = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len++;\n            $max_len = max($max_len, $curr_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n && $j < $n) {\n        if ($lst[$j] - $lst[$i] == $j - $i) {\n            $length = $j - $i + 1;\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 56, 58, 57, 90, 92, 94, 93, 91, 45];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst)) {\n        $j = $i;\n        while ($j < count($lst) && $lst[$j] == 1) {\n            $length++;\n            $j++;\n        }\n        $i = $j;\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $length = 0;\n    }\n    return $max_length;\n}\n\n$lst = [0, 1, 1, 0, 1, 1, 1, 0, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $cur_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 1) {\n            $cur_len++;\n        } else {\n            $cur_len = 0;\n        }\n        if ($cur_len > $max_len) {\n            $max_len = $cur_len;\n        }\n    }\n    return $max_len;\n}\n\n$lst = array(0, 0, 1, 0, 1, 1, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max = 0;\n    $count = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $count++;\n        } else {\n            $count = 0;\n        }\n        if ($count > $max) {\n            $max = $count;\n        }\n    }\n    return $max;\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 1) {\n            $curr_length++;\n        } else {\n            $curr_length = 0;\n        }\n        if ($curr_length > $max_length) {\n            $max_length = $curr_length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $length = 0;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n && $j < $n) {\n        if ($lst[$j] - $lst[$i] == $j - $i) {\n            $length = $j - $i + 1;\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $j++;\n        }\n        else {\n            $i++;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 56, 58, 57, 90, 92, 94, 93, 91, 45);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $curr_length = 0;\n            $i++;\n        } else {\n            $j = $i;\n            while ($j < $n && $lst[$j] == 1) {\n                $curr_length++;\n                $j++;\n            }\n            $i = $j;\n        }\n        if ($curr_length > $max_length) {\n            $max_length = $curr_length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        $j = $i + 1;\n        $length = 1;\n        while ($j < $n) {\n            if ($lst[$j] > $lst[$j - 1]) {\n                $length++;\n            } else {\n                break;\n            }\n            $j++;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i = $i + $length;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 2, 3, 2, 3, 4, 5, 3, 4, 5, 6);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $size = count($lst);\n    while ($i < $size) {\n        $j = $i + 1;\n        while ($j < $size) {\n            if ($lst[$i] == $lst[$j]) {\n                $length = $j - $i;\n                if ($length > $max_length) {\n                    $max_length = $length;\n                }\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n$lst = array(1, 2, 3, 2, 1, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length++;\n            $max_length = max($max_length, $length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n            $i++;\n        } else {\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $length = 0;\n            $i++;\n        }\n    }\n    return $max_length;\n}\n$lst = array(0, 1, 1, 0, 1, 1, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "\t$max_length = 0;\n\t$length = 0;\n\t$i = 0;\n\t$j = 0;\n\twhile ($i < count($lst)) {\n\t\tif ($lst[$i] == 0) {\n\t\t\t$length = 0;\n\t\t\t$j = $i + 1;\n\t\t\twhile ($j < count($lst)) {\n\t\t\t\tif ($lst[$j] == 1) {\n\t\t\t\t\t$length++;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$j++;\n\t\t\t}\n\t\t\tif ($length > $max_length) {\n\t\t\t\t$max_length = $length;\n\t\t\t}\n\t\t}\n\t\t$i++;\n\t}\n\treturn $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $current_length = 0;\n    $lst_len = count($lst);\n    for ($i = 0; $i < $lst_len; $i++) {\n        if ($lst[$i] == 0) {\n            $current_length = 0;\n        } else {\n            $current_length += 1;\n            if ($current_length > $max_length) {\n                $max_length = $current_length;\n            }\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $length = 0;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "\t$max_length = 0;\n\t$length = 0;\n\t$i = 0;\n\t$j = 0;\n\t$n = count($lst);\n\twhile ($i < $n) {\n\t\tif ($lst[$i] == 0) {\n\t\t\t$length = 0;\n\t\t\t$j = $i;\n\t\t\twhile ($j < $n) {\n\t\t\t\tif ($lst[$j] == 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$length++;\n\t\t\t\t$j++;\n\t\t\t}\n\t\t\tif ($length > $max_length) {\n\t\t\t\t$max_length = $length;\n\t\t\t}\n\t\t\t$i = $j;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $max_length;\n}\n\n$lst = array(1, 0, 0, 1, 1, 0, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $cur_length = 0;\n    $prev_value = 0;\n    $cur_value = 0;\n    $prev_value = $lst[0];\n    $cur_value = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] > $prev_value) {\n            $cur_value = $lst[$i];\n            $cur_length++;\n        } else {\n            if ($cur_length > $max_length) {\n                $max_length = $cur_length;\n            }\n            $cur_length = 0;\n            $prev_value = $lst[$i];\n            $cur_value = $lst[$i];\n        }\n    }\n    if ($cur_length > $max_length) {\n        $max_length = $cur_length;\n    }\n    return $max_length;\n}\n\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 1) {\n            $length++;\n            $i++;\n        }\n        else {\n            $j = $i + 1;\n            while ($j < $n && $lst[$j] == 0) {\n                $j++;\n            }\n            $i = $j;\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n && $j < $n) {\n        if ($lst[$j] - $lst[$i] == $j - $i) {\n            $length = $j - $i + 1;\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 56, 58, 57, 90, 92, 94, 93, 91, 45];\necho Find_Max_Length($lst);",
    "\t$max_length = 0;\n\t$length = 0;\n\t$i = 0;\n\twhile ($i < count($lst)) {\n\t\tif ($lst[$i] == 1) {\n\t\t\t$length++;\n\t\t} else {\n\t\t\t$length = 0;\n\t\t}\n\t\tif ($length > $max_length) {\n\t\t\t$max_length = $length;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $count = 0;\n    $len = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        if ($lst[$i] == 1) {\n            $count++;\n        } else {\n            $count = 0;\n        }\n        if ($count > $max_length) {\n            $max_length = $count;\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 0, 1, 1, 1, 0, 0];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $len = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i + 1;\n            while ($j < $n) {\n                if ($lst[$j] == 1) {\n                    $length += 1;\n                } else {\n                    break;\n                }\n                $j += 1;\n            }\n            $i = $j;\n        } else {\n            $i += 1;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 1) {\n            $length++;\n        } else {\n            $length = 0;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n        $i++;\n    }\n    return $max_length;\n}\n$lst = array(1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_length = 0;\n    $count = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $count = 0;\n        } else {\n            $count++;\n            $max_length = max($max_length, $count);\n        }\n    }\n    return $max_length;\n}\n\n$lst = [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $cur_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 1) {\n            $cur_len++;\n        } else {\n            $cur_len = 0;\n        }\n        if ($cur_len > $max_len) {\n            $max_len = $cur_len;\n        }\n    }\n    return $max_len;\n}\n\n$lst = [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n        } else {\n            $length += 1;\n            $max_length = max($max_length, $length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 1) {\n            $curr_length++;\n        } else {\n            $curr_length = 0;\n        }\n        if ($curr_length > $max_length) {\n            $max_length = $curr_length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n) {\n        if ($lst[$i] == 0) {\n            $length = 0;\n            $j = $i + 1;\n            while ($j < $n) {\n                if ($lst[$j] == 1) {\n                    $length += 1;\n                } else {\n                    break;\n                }\n                $j += 1;\n            }\n            $i = $j;\n        } else {\n            $i += 1;\n        }\n        if ($length > $max_length) {\n            $max_length = $length;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 0, 0, 1, 0, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $curr_len = 0;\n    $i = 0;\n    while ($i < count($lst)) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len += 1;\n            $max_len = max($max_len, $curr_len);\n        }\n        $i += 1;\n    }\n    return $max_len;\n}\n\n$lst = [0, 1, 1, 0, 1, 1, 1, 0, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $curr_len = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == 0) {\n            $curr_len = 0;\n        } else {\n            $curr_len += 1;\n            $max_len = max($max_len, $curr_len);\n        }\n    }\n    return $max_len;\n}\n\n$lst = [0, 1, 1, 0, 1, 1, 1, 0, 1, 1];\necho Find_Max_Length($lst);",
    "    $max_len = 0;\n    $cur_len = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $cur_len = 0;\n        } else {\n            $cur_len++;\n            $max_len = max($max_len, $cur_len);\n        }\n    }\n    return $max_len;\n}\n",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n && $j < $n) {\n        if ($lst[$j] - $lst[$i] == $j - $i) {\n            $length = $j - $i + 1;\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 56, 58, 57, 90, 92, 94, 93, 91, 45);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $curr_length = 0;\n    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] == 0) {\n            $curr_length = 0;\n        } else {\n            $curr_length++;\n            $max_length = max($max_length, $curr_length);\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $count = 0;\n    $len = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        if ($lst[$i] == 1) {\n            $count++;\n        } else {\n            if ($count > $max_length) {\n                $max_length = $count;\n            }\n            $count = 0;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1);\necho Find_Max_Length($lst);",
    "    $max_length = 0;\n    $length = 0;\n    $i = 0;\n    $j = 0;\n    $n = count($lst);\n    while ($i < $n && $j < $n) {\n        if ($lst[$j] - $lst[$i] == $j - $i) {\n            $length = $j - $i + 1;\n            if ($length > $max_length) {\n                $max_length = $length;\n            }\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    return $max_length;\n}\n\n$lst = array(1, 56, 58, 57, 90, 92, 94, 93, 91, 45);\necho Find_Max_Length($lst);"
  ]
}