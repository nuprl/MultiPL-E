{
  "name": "mbpp_119_search",
  "language": "php",
  "prompt": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\n$n = count($arr);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510203,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    $mid = 0;\n    while($low <= $high) {\n        $mid = floor(($low + $high)/2);\n        if($arr[$mid] != $arr[$mid-1] && $arr[$mid] != $arr[$mid+1]) {\n            return $arr[$mid];\n        }\n        else if($arr[$mid] == $arr[$mid-1]) {\n            if(($mid-1)%2 == 0) {\n                $low = $mid + 1;\n            }\n            else {\n                $high = $mid - 1;\n            }\n        }\n        else if($arr[$mid] == $arr[$mid+1]) {\n            if(($mid+1)%2 == 0) {\n                $low = $mid + 1;\n            }\n            else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1,1,2,2,3,3,4,50,50,65,65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "4\nWarning: Undefined array key -1 in /tmp/tmpg4p3l0xp.php on line 9\n\nWarning: Undefined array key -1 in /tmp/tmpg4p3l0xp.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg4p3l0xp.php:39\nStack trace:\n#0 /tmp/tmpg4p3l0xp.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpg4p3l0xp.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if (($mid - 1) % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "2\nWarning: Undefined array key 5 in /tmp/tmpkl939070.php on line 10\n\nWarning: Undefined array key 11 in /tmp/tmpkl939070.php on line 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n) {\n        if ($arr[$i] != $arr[$i+1] && $arr[$i] != $arr[$i-1]) {\n            return $arr[$i];\n        }\n        $i++;\n    }\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmpkdvis_5l.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmpkdvis_5l.php on line 7\n\nWarning: Undefined array key -1 in /tmp/tmpkdvis_5l.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $count = 0;\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] == $arr[$i + 1]) {\n            $count++;\n        } else {\n            if ($count == 0) {\n                return $arr[$i];\n            }\n            $count = 0;\n        }\n    }\n}\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\n$n = count($arr);\necho \"Element that appears only once is \" . search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "Element that appears only once is 4\nWarning: Undefined array key 5 in /tmp/tmpmdkxz430.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmpmdkxz430.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        } else if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\n$n = count($arr);\n$result = search($arr);\nif ($result == -1) {\n    echo \"Not found\";\n} else {\n    echo \"The element with single occurrence is \" . $result;\n}\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "The element with single occurrence is 4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    $mid = 0;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$mid];\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510203,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $len = count($arr);\n    if ($len == 1) {\n        return $arr[0];\n    }\n    $mid = $len / 2;\n    if ($arr[$mid] == $arr[$mid - 1]) {\n        if ($mid % 2 == 0) {\n            return search(array_slice($arr, $mid + 1));\n        } else {\n            return search(array_slice($arr, $mid));\n        }\n    } else if ($arr[$mid] == $arr[$mid + 1]) {\n        if ($mid % 2 == 0) {\n            return search(array_slice($arr, $mid));\n        } else {\n            return search(array_slice($arr, $mid + 1));\n        }\n    } else {\n        return $arr[$mid];\n    }\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmpa4ikc3_4.php on line 9\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpa4ikc3_4.php on line 9\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmpa4ikc3_4.php on line 10\n\nDeprecated: Implicit conversion from float 5.5 to int loses precision in /tmp/tmpa4ikc3_4.php on line 13\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpa4ikc3_4.php on line 9\n\nDeprecated: Implicit conversion from float 0.5 to int loses precision in /tmp/tmpa4ikc3_4.php on line 9\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpa4ikc3_4.php on line 15\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmpa4ikc3_4.php on line 15\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpa4ikc3_4.php on line 16\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in ",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while($i < $n - 1) {\n        if($arr[$i] == $arr[$i + 1]) {\n            $i += 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n    return $arr[$n - 1];\n}\n\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $count = count($arr);\n    $i = 0;\n    while($i < $count) {\n        if($arr[$i] == $arr[$i+1]) {\n            $i = $i + 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmp95vkkgvq.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmp95vkkgvq.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] != $arr[$i - 1] && $arr[$i] != $arr[$i + 1]) {\n            return $arr[$i];\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "\nWarning: Undefined array key -1 in /tmp/tmpvg8g1cow.php on line 6\n4\nWarning: Undefined array key -1 in /tmp/tmpvg8g1cow.php on line 6\n\nWarning: Undefined array key 5 in /tmp/tmpvg8g1cow.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmpvg8g1cow.php on line 6\n\nWarning: Undefined array key 11 in /tmp/tmpvg8g1cow.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmpvg8g1cow.php on line 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510203,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n) {\n        if ($arr[$i] != $arr[$i+1]) {\n            return $arr[$i];\n        }\n        $i += 2;\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmpgjp6l5u7.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmpgjp6l5u7.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510203,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n - 1) {\n        if ($arr[$i] == $arr[$i + 1]) {\n            $i += 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n    return $arr[$n - 1];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123264,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123264,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 2, 3, 4, 4, 5, 5);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}\n\n$arr = [1, 1, 2, 2, 3, 4, 4, 5, 5];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if (($mid - 1) % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] != $arr[$i + 1] && $arr[$i] != $arr[$i - 1]) {\n            return $arr[$i];\n        }\n    }\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmpgnz1m16w.php on line 6\n\nWarning: Undefined array key 11 in /tmp/tmpgnz1m16w.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmpgnz1m16w.php on line 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\n$n = count($arr);\necho \"Element occurring once is \" . search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n\t$n = count($arr);\n\t$i = 0;\n\twhile($i < $n - 1) {\n\t\tif($arr[$i] != $arr[$i + 1]) {\n\t\t\treturn $arr[$i];\n\t\t}\n\t\t$i += 2;\n\t}\n\treturn $arr[$n - 1];\n}\n\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $len = count($arr);\n    $i = 0;\n    while($i < $len) {\n        if($arr[$i] != $arr[$i+1] && $arr[$i] != $arr[$i-1]) {\n            return $arr[$i];\n        }\n        $i++;\n    }\n}\n\n$arr = array(1,1,2,2,3,3,4,50,50,65,65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmp6ndmd8a9.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmp6ndmd8a9.php on line 7\n\nWarning: Undefined array key -1 in /tmp/tmp6ndmd8a9.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] == $arr[$i + 1]) {\n            $i++;\n        } else {\n            return $arr[$i];\n        }\n    }\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2\nWarning: Undefined array key 5 in /tmp/tmp2smk7u5l.php on line 6\n\nWarning: Undefined array key 11 in /tmp/tmp2smk7u5l.php on line 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmpca7jhz9e.php on line 10\n\nWarning: Undefined array key 11 in /tmp/tmpca7jhz9e.php on line 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $arr_size = count($arr);\n    $low = 0;\n    $high = $arr_size - 1;\n    while ($low <= $high) {\n        if ($low == $high) {\n            return $arr[$low];\n        }\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n - 1) {\n        if ($arr[$i] != $arr[$i + 1]) {\n            return $arr[$i];\n        }\n        $i += 2;\n    }\n    return $arr[$n - 1];\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $size = sizeof($arr);\n    $low = 0;\n    $high = $size - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $size - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 2;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        } else if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else if ($arr[$mid] == $arr[$mid + 1]) {\n            if (($mid + 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsc5kdw61.php:38\nStack trace:\n#0 /tmp/tmpsc5kdw61.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpsc5kdw61.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if($mid % 2 == 0) {\n            if($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmpmck6_jrp.php on line 9\n\nWarning: Undefined array key 11 in /tmp/tmpmck6_jrp.php on line 9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2\nWarning: Undefined array key 5 in /tmp/tmpixomd2x5.php on line 9\n\nWarning: Undefined array key 11 in /tmp/tmpixomd2x5.php on line 9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "6\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2qrnb_t.php:39\nStack trace:\n#0 /tmp/tmpp2qrnb_t.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpp2qrnb_t.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    $mid = 0;\n    while ($low <= $high) {\n        $mid = floor(($low + $high)/2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n        if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if (($mid - 1) % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    $mid = 0;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while($low <= $high) {\n        $mid = ($low + $high) / 2;\n        $mid = floor($mid);\n        if($mid % 2 == 0) {\n            if($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        } else if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while($i < $n - 1) {\n        if($arr[$i] != $arr[$i + 1]) {\n            return $arr[$i];\n        }\n        $i += 2;\n    }\n    return $arr[$n - 1];\n}\n\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if($arr[$mid] == $arr[$mid - 1]) {\n            if(($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if(($mid - 1) % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    if($n == 1) {\n        return $arr[0];\n    }\n    for($i = 0; $i < $n; $i++) {\n        if($i == 0) {\n            if($arr[$i] != $arr[$i+1]) {\n                return $arr[$i];\n            }\n        } else if($i == $n-1) {\n            if($arr[$i] != $arr[$i-1]) {\n                return $arr[$i];\n            }\n        } else {\n            if($arr[$i] != $arr[$i-1] && $arr[$i] != $arr[$i+1]) {\n                return $arr[$i];\n            }\n        }\n    }\n}\n\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n) {\n        if ($arr[$i] == $arr[$i+1]) {\n            $i = $i + 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmpi6nrvckz.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmpi6nrvckz.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if (($mid - 1) % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n}\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmph2iaj75z.php on line 10\n\nWarning: Undefined array key 11 in /tmp/tmph2iaj75z.php on line 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n) {\n        if ($arr[$i] == $arr[$i+1]) {\n            $i += 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n}\n\n$arr = array(1, 1, 2, 2, 3, 4, 4, 5, 5);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "3\nWarning: Undefined array key 5 in /tmp/tmpei8qthkh.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmpei8qthkh.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $start = 0;\n    $end = count($arr) - 1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $start = $mid + 2;\n            } else {\n                $end = $mid - 2;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $start = $mid + 1;\n            } else {\n                $end = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $i = 0;\n    $j = count($arr) - 1;\n    while ($i < $j) {\n        $mid = floor(($i + $j) / 2);\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $j = $mid - 2;\n            } else {\n                $i = $mid + 1;\n            }\n        } else if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $j = $mid - 1;\n            } else {\n                $i = $mid + 2;\n            }\n        } else {\n            return $arr[$mid];\n        }\n    }\n    return $arr[$i];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "\nWarning: Undefined array key 9 in /tmp/tmp1sngt3bj.php on line 24\n\nWarning: Undefined array key -1 in /tmp/tmp1sngt3bj.php on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1sngt3bj.php:34\nStack trace:\n#0 /tmp/tmp1sngt3bj.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1sngt3bj.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                return $arr[$mid];\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                return $arr[$mid];\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\n$n = sizeof($arr);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "50\nWarning: Undefined array key 5 in /tmp/tmp4vvv3g_j.php on line 10\n\nWarning: Undefined array key 11 in /tmp/tmp4vvv3g_j.php on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4vvv3g_j.php:36\nStack trace:\n#0 /tmp/tmp4vvv3g_j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp4vvv3g_j.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $len = count($arr);\n    $low = 0;\n    $high = $len - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $len - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 2;\n            }\n        } else {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_lt4hld6.php:39\nStack trace:\n#0 /tmp/tmp_lt4hld6.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_lt4hld6.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n) {\n        if ($arr[$i] == $arr[$i + 1]) {\n            $i += 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmp744vr_5x.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmp744vr_5x.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 2;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    $mid = 0;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n        if ($arr[$mid] == $arr[$mid + 1]) {\n            if (($mid + 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpmvodsw.php:41\nStack trace:\n#0 /tmp/tmpqpmvodsw.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpqpmvodsw.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if (($mid - 1) % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n) {\n        if ($arr[$i] == $arr[$i+1]) {\n            $i = $i + 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmpen0tkwye.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmpen0tkwye.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n - 1) {\n        if ($arr[$i] != $arr[$i + 1]) {\n            return $arr[$i];\n        }\n        $i += 2;\n    }\n    return $arr[$n - 1];\n}\n\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n - 1) {\n        if ($arr[$i] == $arr[$i + 1]) {\n            $i += 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n    return $arr[$n - 1];\n}\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if($arr[$mid] == $arr[$mid - 1]) {\n            if(($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if(($mid - 1) % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n}\n\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmpca7jhz9e.php on line 10\n\nWarning: Undefined array key 11 in /tmp/tmpca7jhz9e.php on line 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if($arr[$mid] == $arr[$mid - 1]) {\n            if($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2\nWarning: Undefined array key 5 in /tmp/tmpnw3a8z3n.php on line 10\n\nWarning: Undefined array key 11 in /tmp/tmpnw3a8z3n.php on line 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if (($mid - 1) % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n        if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n) {\n        if ($arr[$i] != $arr[$i+1]) {\n            return $arr[$i];\n        }\n        $i = $i + 2;\n    }\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2\nWarning: Undefined array key 5 in /tmp/tmp87_rs7oo.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmp87_rs7oo.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $start = 0;\n    $end = count($arr) - 1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $start = $mid + 2;\n            } else {\n                $end = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $start = $mid + 1;\n            } else {\n                $end = $mid - 1;\n            }\n        }\n    }\n    return $arr[$start];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tmp/tmpt87k2d9d.php on line 10\n\nWarning: Undefined array key 5 in /tm",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if (($mid - 1) % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        } else if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] != $arr[$i - 1] && $arr[$i] != $arr[$i + 1]) {\n            return $arr[$i];\n        }\n    }\n}\n\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "\nWarning: Undefined array key -1 in /tmp/tmpmvgv5k78.php on line 6\n4\nWarning: Undefined array key -1 in /tmp/tmpmvgv5k78.php on line 6\n\nWarning: Undefined array key 5 in /tmp/tmpmvgv5k78.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmpmvgv5k78.php on line 6\n\nWarning: Undefined array key 11 in /tmp/tmpmvgv5k78.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmpmvgv5k78.php on line 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n        if ($arr[$mid] == $arr[$mid + 1]) {\n            if (($mid + 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplt9q_d48.php:38\nStack trace:\n#0 /tmp/tmplt9q_d48.php(43): test()\n#1 {main}\n  thrown in /tmp/tmplt9q_d48.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $start = 0;\n    $end = count($arr) - 1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $start = $mid + 2;\n            } else {\n                $end = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $start = $mid + 1;\n            } else {\n                $end = $mid - 1;\n            }\n        }\n    }\n    return $arr[$start];\n}\n\n$arr = [1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 4, 4, 5, 5];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2\nWarning: Undefined array key 5 in /tmp/tmpnw3a8z3n.php on line 10\n\nWarning: Undefined array key 11 in /tmp/tmpnw3a8z3n.php on line 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510203,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if (($mid - 1) % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    $mid = 0;\n    while($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if($arr[$mid] == $arr[$mid - 1]) {\n            if(($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n        if($arr[$mid] == $arr[$mid + 1]) {\n            if(($mid + 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key -1 in /tmp/tmpgzr0e87d.php on line 9\n\nWarning: Undefined array key -1 in /tmp/tmpgzr0e87d.php on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgzr0e87d.php:37\nStack trace:\n#0 /tmp/tmpgzr0e87d.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpgzr0e87d.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n - 1) {\n        if ($arr[$i] != $arr[$i + 1]) {\n            return $arr[$i];\n        }\n        $i += 2;\n    }\n    return $arr[$n - 1];\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] != $arr[$i + 1] && $arr[$i] != $arr[$i - 1]) {\n            return $arr[$i];\n        }\n    }\n}\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmpgwa5m0p2.php on line 6\n\nWarning: Undefined array key 11 in /tmp/tmpgwa5m0p2.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmpgwa5m0p2.php on line 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    $mid = 0;\n\n    while($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n\n        if($mid % 2 == 0) {\n            if($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$mid];\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2\nWarning: Undefined array key 5 in /tmp/tmpibzdaz_t.php on line 13\n\nWarning: Undefined array key 11 in /tmp/tmpibzdaz_t.php on line 13\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $start = 0;\n    $end = count($arr) - 1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $start = $mid + 2;\n            } else {\n                $end = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $start = $mid + 1;\n            } else {\n                $end = $mid - 1;\n            }\n        }\n    }\n    return $arr[$start];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n) {\n        if ($arr[$i] == $arr[$i + 1]) {\n            $i = $i + 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n    return -1;\n}\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\n$n = count($arr);\necho \"The element with single occurrence is \" . search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "The element with single occurrence is 4\nWarning: Undefined array key 5 in /tmp/tmppq8tgram.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmppq8tgram.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $len = count($arr);\n    $i = 0;\n    while($i < $len) {\n        if($arr[$i] == $arr[$i+1]) {\n            $i = $i + 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n}\n\n$arr = array(1,1,2,2,3,3,4,50,50,65,65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmphbnj5qc1.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmphbnj5qc1.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n        if ($arr[$mid] == $arr[$mid + 1]) {\n            if (($mid + 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjmd3uipx.php:39\nStack trace:\n#0 /tmp/tmpjmd3uipx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjmd3uipx.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2\nWarning: Undefined array key 5 in /tmp/tmpplu1zqnb.php on line 10\n\nWarning: Undefined array key 11 in /tmp/tmpplu1zqnb.php on line 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    $mid = 0;\n    while($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if($mid % 2 == 0) {\n            if($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 2;\n            }\n        } else {\n            if($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 4, 4, 5, 5];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "3\nWarning: Undefined array key 5 in /tmp/tmpyrha5xjo.php on line 9\n\nWarning: Undefined array key 11 in /tmp/tmpyrha5xjo.php on line 9\n\nWarning: Undefined array key -1 in /tmp/tmpyrha5xjo.php on line 9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] != $arr[$i - 1] && $arr[$i] != $arr[$i + 1]) {\n            return $arr[$i];\n        }\n    }\n}\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "\nWarning: Undefined array key -1 in /tmp/tmp169yfnzw.php on line 6\n4\nWarning: Undefined array key -1 in /tmp/tmp169yfnzw.php on line 6\n\nWarning: Undefined array key 5 in /tmp/tmp169yfnzw.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmp169yfnzw.php on line 6\n\nWarning: Undefined array key 11 in /tmp/tmp169yfnzw.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmp169yfnzw.php on line 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n) {\n        if ($arr[$i] == $arr[$i+1]) {\n            $i += 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmplyj9f1qm.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmplyj9f1qm.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510203,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] != $arr[$i - 1] && $arr[$i] != $arr[$i + 1]) {\n            return $arr[$i];\n        }\n    }\n}\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "\nWarning: Undefined array key -1 in /tmp/tmp169yfnzw.php on line 6\n4\nWarning: Undefined array key -1 in /tmp/tmp169yfnzw.php on line 6\n\nWarning: Undefined array key 5 in /tmp/tmp169yfnzw.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmp169yfnzw.php on line 6\n\nWarning: Undefined array key 11 in /tmp/tmp169yfnzw.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmp169yfnzw.php on line 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n) {\n        if ($arr[$i] == $arr[$i+1]) {\n            $i = $i + 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmpi6nrvckz.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmpi6nrvckz.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $i = 0;\n    while ($i < $n) {\n        if ($arr[$i] == $arr[$i+1]) {\n            $i += 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmp3sd49szb.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmp3sd49szb.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n) {\n        if ($arr[$i] == $arr[$i + 1]) {\n            $i += 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmpgisuxcz8.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmpgisuxcz8.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        } else if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmpen2obrnh.php on line 8\n\nWarning: Undefined array key 11 in /tmp/tmpen2obrnh.php on line 8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $len = count($arr);\n    $i = 0;\n    while($i < $len) {\n        if($arr[$i] != $arr[$i+1] && $arr[$i] != $arr[$i-1]) {\n            return $arr[$i];\n        }\n        $i++;\n    }\n}\n\n$arr = array(1,1,2,2,3,3,4,50,50,65,65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmp6ndmd8a9.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmp6ndmd8a9.php on line 7\n\nWarning: Undefined array key -1 in /tmp/tmp6ndmd8a9.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if($mid % 2 == 0) {\n            if($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp8xzmnn8b.php on line 9\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp8xzmnn8b.php on line 16\n\nDeprecated: Implicit conversion from float 0.5 to int loses precision in /tmp/tmp8xzmnn8b.php on line 16\n\nDeprecated: Implicit conversion from float 2.75 to int loses precision in /tmp/tmp8xzmnn8b.php on line 9\n\nDeprecated: Implicit conversion from float 2.75 to int loses precision in /tmp/tmp8xzmnn8b.php on line 10\n\nDeprecated: Implicit conversion from float 3.75 to int loses precision in /tmp/tmp8xzmnn8b.php on line 10\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmp8xzmnn8b.php on line 23\n2\nWarning: Undefined array key 5 in /tmp/tmp8xzmnn8b.php on line 10\n\nWarning: Undefined array key 11 in /tmp/tmp8xzmnn8b.php on line 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] != $arr[$i - 1] && $arr[$i] != $arr[$i + 1]) {\n            return $arr[$i];\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "\nWarning: Undefined array key -1 in /tmp/tmpvg8g1cow.php on line 6\n4\nWarning: Undefined array key -1 in /tmp/tmpvg8g1cow.php on line 6\n\nWarning: Undefined array key 5 in /tmp/tmpvg8g1cow.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmpvg8g1cow.php on line 6\n\nWarning: Undefined array key 11 in /tmp/tmpvg8g1cow.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmpvg8g1cow.php on line 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if($mid % 2 == 0) {\n            if($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmp22h1x_f2.php on line 10\n\nWarning: Undefined array key 11 in /tmp/tmp22h1x_f2.php on line 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    $mid = 0;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        } elseif ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } elseif ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123266,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    $mid = 0;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n        if ($arr[$mid] == $arr[$mid + 1]) {\n            if (($mid + 1) % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123266,
      "stdout": "-1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6bxwnjh7.php:40\nStack trace:\n#0 /tmp/tmp6bxwnjh7.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6bxwnjh7.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        if ($low == $high) {\n            return $arr[$low];\n        }\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123266,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    $mid = 0;\n    while($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if($arr[$mid] == $arr[$mid - 1]) {\n            if(($mid - 1) % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } elseif($arr[$mid] == $arr[$mid + 1]) {\n            if(($mid + 1) % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            return $arr[$mid];\n        }\n    }\n    return $arr[$mid];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123266,
      "stdout": "1\nWarning: Undefined array key -1 in /tmp/tmpykxy3xfp.php on line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpykxy3xfp.php:35\nStack trace:\n#0 /tmp/tmpykxy3xfp.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpykxy3xfp.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2\nWarning: Undefined array key 5 in /tmp/tmpplu1zqnb.php on line 10\n\nWarning: Undefined array key 11 in /tmp/tmpplu1zqnb.php on line 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if (($mid - 1) % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 4, 4, 5, 5];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123281,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2\nWarning: Undefined array key 5 in /tmp/tmpixomd2x5.php on line 9\n\nWarning: Undefined array key 11 in /tmp/tmpixomd2x5.php on line 9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if($mid % 2 == 0) {\n            if($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123266,
      "stdout": "2\nWarning: Undefined array key 5 in /tmp/tmp39qson0t.php on line 10\n\nWarning: Undefined array key 11 in /tmp/tmp39qson0t.php on line 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    $mid = 0;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\n$n = sizeof($arr);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123266,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = sizeof($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123281,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    if($n == 1) {\n        return $arr[0];\n    }\n    if($arr[0] != $arr[1]) {\n        return $arr[0];\n    }\n    if($arr[$n-1] != $arr[$n-2]) {\n        return $arr[$n-1];\n    }\n    for($i=1; $i<$n-1; $i++) {\n        if($arr[$i] != $arr[$i-1] && $arr[$i] != $arr[$i+1]) {\n            return $arr[$i];\n        }\n    }\n}\n\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123266,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n - 1) {\n        if ($arr[$i] == $arr[$i + 1]) {\n            $i += 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n    return $arr[$n - 1];\n}\n\n$arr = array(1, 1, 2, 2, 3, 4, 4, 5, 5);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123266,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $i = 0;\n    $j = count($arr) - 1;\n    while ($i < $j) {\n        $mid = floor(($i + $j) / 2);\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $i = $mid + 1;\n            } else {\n                $j = $mid - 2;\n            }\n        } else if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $i = $mid + 2;\n            } else {\n                $j = $mid - 1;\n            }\n        } else {\n            return $arr[$mid];\n        }\n    }\n    return $arr[$i];\n}\n\n$arr = [1, 1, 2, 2, 3, 4, 4, 5, 5];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123266,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\n$n = sizeof($arr);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123281,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if (($mid - 1) % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if (($mid + 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\n$n = sizeof($arr);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbza779cc.php:39\nStack trace:\n#0 /tmp/tmpbza779cc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbza779cc.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while($i < $n) {\n        if($arr[$i] == $arr[$i+1]) {\n            $i = $i + 2;\n        }\n        else {\n            return $arr[$i];\n        }\n    }\n}\n$arr = array(1,1,2,2,3,3,4,50,50,65,65);\n$n = count($arr);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmptay_cqd0.php on line 7\n\nWarning: Undefined array key 11 in /tmp/tmptay_cqd0.php on line 7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510203,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "2\nWarning: Undefined array key 5 in /tmp/tmpf0xwjrpf.php on line 9\n\nWarning: Undefined array key 11 in /tmp/tmpf0xwjrpf.php on line 9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] != $arr[$i - 1] && $arr[$i] != $arr[$i + 1]) {\n            return $arr[$i];\n        }\n    }\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\n$n = sizeof($arr);\necho \"The element with single occurrence is \" . search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "\nWarning: Undefined array key -1 in /tmp/tmpe0xa47nc.php on line 6\nThe element with single occurrence is 4\nWarning: Undefined array key -1 in /tmp/tmpe0xa47nc.php on line 6\n\nWarning: Undefined array key 5 in /tmp/tmpe0xa47nc.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmpe0xa47nc.php on line 6\n\nWarning: Undefined array key 11 in /tmp/tmpe0xa47nc.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmpe0xa47nc.php on line 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n        if ($arr[$mid] == $arr[$mid + 1]) {\n            if (($mid + 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8cd5wgp.php:39\nStack trace:\n#0 /tmp/tmpx8cd5wgp.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpx8cd5wgp.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $size = sizeof($arr);\n    $low = 0;\n    $high = $size - 1;\n    while($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if($mid % 2 == 0) {\n            if($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] != $arr[$i - 1] && $arr[$i] != $arr[$i + 1]) {\n            return $arr[$i];\n        }\n    }\n}\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "\nWarning: Undefined array key -1 in /tmp/tmp169yfnzw.php on line 6\n4\nWarning: Undefined array key -1 in /tmp/tmp169yfnzw.php on line 6\n\nWarning: Undefined array key 5 in /tmp/tmp169yfnzw.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmp169yfnzw.php on line 6\n\nWarning: Undefined array key 11 in /tmp/tmp169yfnzw.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmp169yfnzw.php on line 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $i = 0;\n    $j = count($arr) - 1;\n    while ($i < $j) {\n        $mid = floor(($i + $j) / 2);\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $j = $mid - 2;\n            } else {\n                $i = $mid + 1;\n            }\n        } else if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $i = $mid + 2;\n            } else {\n                $j = $mid - 1;\n            }\n        } else {\n            return $arr[$mid];\n        }\n    }\n    return $arr[$i];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510203,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 2, 3, 4, 4, 5, 5);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "3\nWarning: Undefined array key 5 in /tmp/tmprky6ccju.php on line 10\n\nWarning: Undefined array key 11 in /tmp/tmprky6ccju.php on line 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] != $arr[$i - 1] && $arr[$i] != $arr[$i + 1]) {\n            return $arr[$i];\n        }\n    }\n}\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\n$n = sizeof($arr);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "\nWarning: Undefined array key -1 in /tmp/tmp4ftzxbhj.php on line 6\n4\nWarning: Undefined array key -1 in /tmp/tmp4ftzxbhj.php on line 6\n\nWarning: Undefined array key 5 in /tmp/tmp4ftzxbhj.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmp4ftzxbhj.php on line 6\n\nWarning: Undefined array key 11 in /tmp/tmp4ftzxbhj.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmp4ftzxbhj.php on line 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "4\nWarning: Undefined array key 5 in /tmp/tmpca7jhz9e.php on line 10\n\nWarning: Undefined array key 11 in /tmp/tmpca7jhz9e.php on line 10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $size = count($arr);\n    $low = 0;\n    $high = $size - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $size - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        } else if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\n$result = search($arr);\necho $result;\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510203,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\n\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    $mid = 0;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n        if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        } else if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = array(1, 1, 2, 2, 3, 4, 4, 5, 5);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n - 1) {\n        if ($arr[$i] == $arr[$i + 1]) {\n            $i = $i + 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n    return $arr[$n - 1];\n}\n\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = ($low + $high) / 2;\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if (($mid - 1) % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 4, 4, 5, 5, 6, 6];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123265,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        } else if ($arr[$mid] == $arr[$mid - 1]) {\n            if (($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else if ($arr[$mid] == $arr[$mid + 1]) {\n            if (($mid + 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9o0o6frx.php:37\nStack trace:\n#0 /tmp/tmp9o0o6frx.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp9o0o6frx.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510188,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while($i < $n-1) {\n        if($arr[$i] != $arr[$i+1]) {\n            return $arr[$i];\n        }\n        $i += 2;\n    }\n    return $arr[$n-1];\n}\n\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n) {\n        if ($i == $n - 1) {\n            return $arr[$i];\n        }\n        if ($arr[$i] != $arr[$i + 1]) {\n            return $arr[$i];\n        }\n        $i += 2;\n    }\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $start = 0;\n    $end = count($arr) - 1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr[$mid] == $arr[$mid + 1]) {\n                $start = $mid + 2;\n            } else {\n                $end = $mid;\n            }\n        } else {\n            if ($arr[$mid] == $arr[$mid - 1]) {\n                $start = $mid + 1;\n            } else {\n                $end = $mid - 1;\n            }\n        }\n    }\n    return $arr[$start];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $low = 0;\n    $high = sizeof($arr) - 1;\n    while($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if($mid % 2 == 0) {\n            if($arr[$mid] == $arr[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if($arr[$mid] == $arr[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return $arr[$low];\n}\n\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "2\nWarning: Undefined array key 5 in /tmp/tmpq35gm1h6.php on line 9\n\nWarning: Undefined array key 11 in /tmp/tmpq35gm1h6.php on line 9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $i = 0;\n    while ($i < $n - 1) {\n        if ($arr[$i] == $arr[$i + 1]) {\n            $i = $i + 2;\n        } else {\n            return $arr[$i];\n        }\n    }\n    return $arr[$n - 1];\n}\n$arr = array(1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] != $arr[$i-1] && $arr[$i] != $arr[$i+1]) {\n            return $arr[$i];\n        }\n    }\n    return -1;\n}\n$arr = array(1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "\nWarning: Undefined array key -1 in /tmp/tmp7oowtnnn.php on line 6\n4\nWarning: Undefined array key -1 in /tmp/tmp7oowtnnn.php on line 6\n\nWarning: Undefined array key 5 in /tmp/tmp7oowtnnn.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmp7oowtnnn.php on line 6\n\nWarning: Undefined array key 11 in /tmp/tmp7oowtnnn.php on line 6\n\nWarning: Undefined array key -1 in /tmp/tmp7oowtnnn.php on line 6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = sizeof($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n$arr = array(1, 1, 2, 4, 4, 5, 5, 6, 6);\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "2",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $len = count($arr);\n    $i = 0;\n    while ($i < $len - 1) {\n        if ($arr[$i] != $arr[$i + 1]) {\n            return $arr[$i];\n        }\n        $i = $i + 2;\n    }\n    return $arr[$len - 1];\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $n = count($arr);\n    $low = 0;\n    $high = $n - 1;\n    while ($low <= $high) {\n        $mid = floor(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n    $start = 0;\n    $end = count($arr) - 1;\n    while ($start <= $end) {\n        $mid = floor(($start + $end) / 2);\n        if ($mid == 0 || $mid == count($arr) - 1) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] != $arr[$mid - 1] && $arr[$mid] != $arr[$mid + 1]) {\n            return $arr[$mid];\n        }\n        if ($arr[$mid] == $arr[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $start = $mid + 1;\n            } else {\n                $end = $mid - 1;\n            }\n        }\n        if ($arr[$mid] == $arr[$mid + 1]) {\n            if ($mid % 2 == 0) {\n                $end = $mid - 1;\n            } else {\n                $start = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\n$arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\necho search($arr);\nfunction candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123280,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0lljggl.php:39\nStack trace:\n#0 /tmp/tmpf0lljggl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpf0lljggl.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}