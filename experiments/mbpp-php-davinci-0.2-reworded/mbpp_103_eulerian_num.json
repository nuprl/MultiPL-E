{
  "name": "mbpp_103_eulerian_num",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the Eulerian number a(n, m).\nfunction eulerian_num($n, $m) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return eulerian_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 1) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 1) !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 26) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    if ($m > $n) {\n        return 0;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - $m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } elseif ($m == 0) {\n        return 0;\n    } elseif ($n == $m) {\n        return 1;\n    } else {\n        return eulerian_num($n - 1, $m - 1) + ($n + 1) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n < $m) {\n        return 0;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n        $eulerian_num[$i][$i + 1] = 1;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $i; $j++) {\n            $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i + 1 - $j) * $eulerian_num[$i - 1][$j];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    $eulerian_num = 0;\n    for ($i = 0; $i <= $m; $i++) {\n        $eulerian_num += (-1)**$i * binomial_coefficient($m, $i) * binomial_coefficient($n + $i, $n);\n    }\n    return $eulerian_num;\n}\n",
    "    $eulerian_num = 0;\n    if ($n > $m) {\n        $eulerian_num = 0;\n    } elseif ($n == $m) {\n        $eulerian_num = 1;\n    } elseif ($n == 0) {\n        $eulerian_num = 1;\n    } else {\n        $eulerian_num = ($m - $n + 1) * eulerian_num($n - 1, $m) + ($n + 1) * eulerian_num($n, $m - 1);\n    }\n    return $eulerian_num;\n}\n",
    "\tif ($n == 0 || $m == 0) {\n\t\treturn 1;\n\t}\n\tif ($n == $m) {\n\t\treturn 0;\n\t}\n\treturn ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    $numerator = factorial($n + $m);\n    $denominator = factorial($n) * factorial($m);\n    return $numerator / $denominator;\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0) {\n                $eulerian_num[$i][$j] = 1;\n            } elseif ($j == 0) {\n                $eulerian_num[$i][$j] = 0;\n            } else {\n                $eulerian_num[$i][$j] = ($i - $j + 1) * $eulerian_num[$i - 1][$j] + ($j + 1) * $eulerian_num[$i - 1][$j - 1];\n            }\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($m > $n) {\n        return 0;\n    }\n    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    if ($n > $m) {\n        return 0;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n + 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i + 1) * $eulerian_num[$i][$j - 1];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return ($n - 1) * eulerian_num($n, $m - 1) + ($m - 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $a = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $a[$i] = array();\n        for ($j = 0; $j <= $m; $j++) {\n            $a[$i][$j] = 0;\n        }\n    }\n    $a[0][0] = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $a[$i][$j] = $a[$i - 1][$j - 1] + ($i - 1) * $a[$i - 1][$j];\n        }\n    }\n    return $a[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0 || $n < $m) {\n        return 0;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    $eulerian_num = array();\n    $eulerian_num[0] = array(1);\n    for ($i = 1; $i <= $n; $i++) {\n        $eulerian_num[$i] = array();\n        $eulerian_num[$i][0] = 1;\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i + 1) * $eulerian_num[$i - 1][$j];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return ($n + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($j = 1; $j <= $m; $j++) {\n        $eulerian[0][$j] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = ($i - $j) * $eulerian[$i - 1][$j] + $eulerian[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n\n$n = 5;\n$m = 3;\necho eulerian_num($n, $m);",
    "    if ($m > $n) {\n        return 0;\n    }\n    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian_num = 1;\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num = $eulerian_num * ($n - $i + 1) / $i;\n    }\n    return $eulerian_num;\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    if ($m > $n) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + 1 - $m) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n < $m) {\n        return 0;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian_num = 0;\n    for ($i = 0; $i <= $m; $i++) {\n        $eulerian_num += (-1) ** $i * binomial_coefficient($m, $i) * binomial_coefficient($n + $i, $n);\n    }\n    return $eulerian_num;\n}\n",
    "    $result = 1;\n    for ($i = 0; $i < $m; $i++) {\n        $result *= ($n - $i);\n    }\n    return $result;\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $num = 1;\n    for ($i = 1; $i <= $m; $i++) {\n        $num *= ($n + 1 - $i) / $i;\n    }\n    return $num;\n}\n",
    "    if ($m > $n) {\n        return 0;\n    } elseif ($m == $n) {\n        return 1;\n    } else {\n        return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n    }\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n        $eulerian[$i][$i] = 1;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j < $i; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i - 1) * $eulerian[$i - 1][$j];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n\n$n = 5;\n$m = 3;\necho eulerian_num($n, $m);",
    "    if ($n == 0) {\n        return 1;\n    } elseif ($n == 1) {\n        return $m + 1;\n    } else {\n        return ($m + 1) * eulerian_num($n - 1, $m) + $m * eulerian_num($n - 1, $m - 1);\n    }\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = ($i - $j) * $eulerian[$i - 1][$j] + $eulerian[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return eulerian_num($n - 1, $m) + eulerian_num($n, $m - 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n\necho eulerian_num(5, 3);",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0 || $j == 0) {\n                $eulerian_num[$i][$j] = 1;\n            } else {\n                $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i + 1) * $eulerian_num[$i][$j - 1];\n            }\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n\necho eulerian_num(2, 2);",
    "    if ($n == 0) {\n        return 1;\n    } elseif ($n == 1) {\n        return 0;\n    } elseif ($m == 0) {\n        return 0;\n    } elseif ($m == 1) {\n        return 1;\n    } elseif ($m > $n) {\n        return 0;\n    } else {\n        return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n    }\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0) {\n                $eulerian[$i][$j] = 1;\n            } elseif ($j == 0) {\n                $eulerian[$i][$j] = 0;\n            } else {\n                $eulerian[$i][$j] = ($i - $j + 1) * $eulerian[$i - 1][$j] + $j * $eulerian[$i - 1][$j - 1];\n            }\n        }\n    }\n    return $eulerian[$n][$m];\n}\n\necho eulerian_num(5, 3);",
    "    $eulerian_num = 1;\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num *= ($n + 1 - $i) / $i;\n    }\n    return $eulerian_num;\n}\n",
    "    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - $m) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n < 0 || $m < 0 || $n < $m) {\n        return 0;\n    }\n    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 0; $i <= $m; $i++) {\n        $eulerian[0][$i] = 1;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - $m) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($m > $n)\n        return 0;\n    if ($m == 0 || $m == $n)\n        return 1;\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n < 0 || $m < 0 || $n < $m) {\n        return 0;\n    }\n    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    } else {\n        return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - $m) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = ($i - $j) * $eulerian_num[$i - 1][$j] + $eulerian_num[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n\necho eulerian_num(5, 3);",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n + 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($m == 0 || $n == $m) {\n        return 1;\n    }\n    return ($m * eulerian_num($n - 1, $m) + ($n - $m + 1) * eulerian_num($n - 1, $m - 1));\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n < $m) {\n        return 0;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0 || $n < $m) {\n        return 0;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    $a = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $a[$i] = array();\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0 || $j == 0) {\n                $a[$i][$j] = 1;\n            } else {\n                $a[$i][$j] = $a[$i - 1][$j - 1] + $a[$i][$j - 1] * ($i + 1);\n            }\n        }\n    }\n    return $a[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return ($n + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i] = array();\n        for ($j = 0; $j <= $m; $j++) {\n            $eulerian[$i][$j] = 0;\n        }\n    }\n    $eulerian[0][0] = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = ($i - 1) * $eulerian[$i - 1][$j - 1] + ($j + 1) * $eulerian[$i - 1][$j];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    $result = 0;\n    for ($i = 0; $i <= $m; $i++) {\n        $result += eulerian_num($n - 1, $m - $i) * factorial($n) / factorial($i);\n    }\n    return $result;\n}\n",
    "    if ($m == 0 || $m == $n) {\n        return 1;\n    } else {\n        return eulerian_num($n - 1, $m - 1) + ($n - $m) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n        $eulerian[$i][$i + 1] = 1;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $i; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i - 1][$j];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n\necho eulerian_num(5, 3);",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($m == 0 || $n == $m) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $result = 0;\n    if ($n == 0) {\n        $result = 1;\n    } elseif ($m == 0) {\n        $result = 0;\n    } elseif ($n == $m) {\n        $result = 1;\n    } elseif ($n > $m) {\n        $result = eulerian_num($n - 1, $m - 1) + ($n - 1) * eulerian_num($n - 1, $m);\n    }\n    return $result;\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = ($eulerian_num[$i - 1][$j - 1] + ($i - 1) * $eulerian_num[$i - 1][$j]);\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\necho eulerian_num(3, 2);",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    } else {\n        return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - $m) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0) {\n                $eulerian_num[$i][$j] = 1;\n            } else if ($j == 0) {\n                $eulerian_num[$i][$j] = 0;\n            } else {\n                $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i + 1) * $eulerian_num[$i][$j - 1];\n            }\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - 1) * eulerian_num($n, $m - 1);\n}\n",
    "\tif ($m == 0 || $m == $n) {\n\t\treturn 1;\n\t}\n\treturn eulerian_num($n - 1, $m - 1) + ($n - $m) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i] = array();\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0) {\n                $eulerian[$i][$j] = 1;\n            } else if ($j == 0) {\n                $eulerian[$i][$j] = 0;\n            } else {\n                $eulerian[$i][$j] = ($i - $j + 1) * $eulerian[$i - 1][$j] + $j * $eulerian[$i - 1][$j - 1];\n            }\n        }\n    }\n    return $eulerian[$n][$m];\n}\n\n$n = 4;\n$m = 3;\necho eulerian_num($n, $m);",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian = array();\n    $eulerian[0] = array_fill(0, $m + 1, 1);\n    for ($i = 1; $i <= $n; $i++) {\n        $eulerian[$i] = array_fill(0, $m + 1, 0);\n        for ($j = 0; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($j + 1) * $eulerian[$i - 1][$j];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return eulerian_num($n - 1, $m) + eulerian_num($n, $m - 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($j = 1; $j <= $m; $j++) {\n        $eulerian[0][$j] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = ($i - $j) * $eulerian[$i - 1][$j] + $eulerian[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($m > $n) {\n        return 0;\n    }\n    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - $m) * eulerian_num($n - 1, $m);\n}\n",
    "    $arr = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $arr[$i][0] = 1;\n        $arr[$i][$i] = 1;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j < $i; $j++) {\n            $arr[$i][$j] = $arr[$i - 1][$j - 1] + ($i - 1) * $arr[$i - 1][$j];\n        }\n    }\n    return $arr[$n][$m];\n}\n",
    "    if ($n < 0 || $m < 0) {\n        return 0;\n    }\n    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    if ($n == 0 || $m == 0) {\n        return 0;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - $m) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "\t$eulerian = array();\n\tfor ($i = 0; $i <= $n; $i++) {\n\t\t$eulerian[$i][0] = 1;\n\t\tfor ($j = 1; $j <= $m; $j++) {\n\t\t\t$eulerian[$i][$j] = $eulerian[$i][$j - 1] * ($i - $j + 1) / $j;\n\t\t}\n\t}\n\treturn $eulerian[$n][$m];\n}\n",
    "    $eulerian_num = array();\n    $eulerian_num[0][0] = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 0;\n        for ($j = 1; $j <= $i; $j++) {\n            $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i - 1) * $eulerian_num[$i - 1][$j];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } elseif ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    if ($n < $m) {\n        return 0;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($m == 0 || $n == $m) {\n        return 1;\n    }\n    return ($m + 1) * eulerian_num($n, $m - 1) + ($n - $m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    } else if ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    } else {\n        return eulerian_num($n - 1, $m) + eulerian_num($n, $m - 1);\n    }\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } elseif ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    }\n    return $n * eulerian_num($n - 1, $m - 1) + ($n - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else if ($n == $m) {\n        return 1;\n    } else {\n        return eulerian_num($n - 1, $m - 1) + ($n + 1) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    if ($n < $m) {\n        return 0;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n < 0 || $m < 0) {\n        return 0;\n    } else if ($n == 0 || $m == 0) {\n        return 1;\n    } else {\n        return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } elseif ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian_num = 1;\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num *= ($n + 1 - $i) / $i;\n    }\n    return $eulerian_num;\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return ($n + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n\necho eulerian_num(2, 3);",
    "    if ($m == 0 || $n == $m) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - $m) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return eulerian_num($n - 1, $m) + eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian_num = 0;\n    for ($i = 0; $i <= $m; $i++) {\n        $eulerian_num += pow(-1, $i) * comb($m, $i) * comb($n + $m - $i, $n);\n    }\n    return $eulerian_num;\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = ($i - $j) * $eulerian[$i - 1][$j] + $eulerian[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    $eulerian = array();\n    $eulerian[0][0] = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $eulerian[$i][0] = $eulerian[$i][$i] = 1;\n        for ($j = 1; $j < $i; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i - $j) * $eulerian[$i - 1][$j];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + 1 - $m) * eulerian_num($n - 1, $m) + $m * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($m == 0 || $n == $m) {\n        return 1;\n    }\n    return ($m + 1) * eulerian_num($n, $m - 1) + ($n - $m) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i < $n + 1; $i++) {\n        $eulerian[$i] = array();\n        for ($j = 0; $j < $m + 1; $j++) {\n            $eulerian[$i][$j] = 0;\n        }\n    }\n    for ($i = 0; $i < $n + 1; $i++) {\n        for ($j = 0; $j < $m + 1; $j++) {\n            if ($i == 0 || $j == 0) {\n                $eulerian[$i][$j] = 1;\n            } else {\n                $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + $i * $eulerian[$i - 1][$j];\n            }\n        }\n    }\n    return $eulerian[$n][$m];\n}\n\necho eulerian_num(5, 3);",
    "    $result = 0;\n    for ($k = 0; $k <= $m; $k++) {\n        $result += pow(-1, $k) * binomial($m, $k) * binomial($n + $m - $k, $n);\n    }\n    return $result;\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    } elseif ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    } else {\n        return eulerian_num($n - 1, $m) + ($n - 1) * eulerian_num($n - 1, $m - 1);\n    }\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($i = 0; $i <= $m; $i++) {\n        $eulerian_num[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = ($eulerian_num[$i - 1][$j - 1] + ($i - 1) * $eulerian_num[$i - 1][$j]);\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "\tif ($n == 0 || $m == 0) {\n\t\treturn 1;\n\t}\n\tif ($n == 1) {\n\t\treturn $m + 1;\n\t}\n\tif ($m == 1) {\n\t\treturn $n + 1;\n\t}\n\treturn eulerian_num($n - 1, $m) + eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n < $m) {\n        return 0;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n < 0 || $m < 0) {\n        return 0;\n    }\n    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    if ($n == 0 || $m == 0) {\n        return 0;\n    }\n    return ($m + 1) * eulerian_num($n - 1, $m) + ($n - $m) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return ($n + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($j = 0; $j <= $m; $j++) {\n        $eulerian[0][$j] = 1;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + $i * $eulerian[$i - 1][$j];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    $eulerian_num = 1;\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num *= ($n + 1 - $i) / $i;\n    }\n    return $eulerian_num;\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i + 1) * $eulerian_num[$i][$j - 1];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n\necho eulerian_num(5, 3);",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + 1 - $m) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - $m) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($m == 0 || $n == $m) {\n        return 1;\n    }\n    return ($m * eulerian_num($n - 1, $m)) + ($n - $m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\tif ($m == 0) {\n\t\treturn 0;\n\t}\n\treturn ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - $m) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = ($i - $j) * $eulerian[$i - 1][$j] + $eulerian[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n        $eulerian[$i][$i] = 1;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j < $i; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i - 1) * $eulerian[$i - 1][$j];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = ($i - $j) * $eulerian_num[$i - 1][$j] + $eulerian_num[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    if ($n == 0 && $m == 0) {\n        return 1;\n    } elseif ($n == 0 || $m == 0) {\n        return 0;\n    } else {\n        return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n    }\n}\n",
    "    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - $m) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } elseif ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($j = 0; $j <= $m; $j++) {\n        $eulerian[0][$j] = 1;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n\necho eulerian_num(5, 5);",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0 || $j == 0) {\n                $eulerian_num[$i][$j] = 1;\n            } else {\n                $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i + 1) * $eulerian_num[$i][$j - 1];\n            }\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    } else {\n        return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + $j * $eulerian[$i - 1][$j];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    $eulerian_num = 0;\n    for ($k = 0; $k <= $m; $k++) {\n        $eulerian_num += pow(-1, $k) * binomial_coefficient($m, $k) * binomial_coefficient($n + $k, $n);\n    }\n    return $eulerian_num;\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    if ($n < $m) {\n        return 0;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return ($n + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i] = array();\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0 || $j == 0) {\n                $eulerian[$i][$j] = 1;\n            } else {\n                $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n            }\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n < $m) {\n        return 0;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } elseif ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    if ($m == 0) {\n        return 1;\n    } else if ($n == 0) {\n        return 0;\n    } else {\n        return ($m + 1) * eulerian_num($n - 1, $m) + ($n - $m) * eulerian_num($n - 1, $m - 1);\n    }\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m;\n    }\n    return eulerian_num($n - 1, $m) + $m * eulerian_num($n, $m - 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i] = array();\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0 || $j == 0) {\n                $eulerian[$i][$j] = 1;\n            } else {\n                $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + $j * $eulerian[$i - 1][$j];\n            }\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } else if ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    if ($n < 0 || $m < 0 || $n < $m) {\n        return 0;\n    }\n    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    $eulerian = array_fill(0, $n + 1, array_fill(0, $m + 1, 0));\n    for ($i = 0; $i <= $n; $i++) {\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0 || $j == 0) {\n                $eulerian[$i][$j] = 1;\n            } else {\n                $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + $j * $eulerian[$i - 1][$j];\n            }\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    $eulerian_num = 1;\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num *= ($n + 1 - $i) / $i;\n    }\n    return $eulerian_num;\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } elseif ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    if ($n < $m) {\n        return 0;\n    }\n    if ($n == $m || $m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($j = 1; $j <= $m; $j++) {\n        $eulerian[0][$j] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = ($i - $j) * $eulerian[$i - 1][$j] + $eulerian[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    return ($m + 1) * eulerian_num($n - 1, $m) + $m * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n == 0) return 1;\n    if ($m == 0) return 0;\n    return ($n - $m + 1) * eulerian_num($n - 1, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian[$i][$j] = $eulerian[$i - 1][$j - 1] + ($i + 1) * $eulerian[$i][$j - 1];\n        }\n    }\n    return $eulerian[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } elseif ($m == 0) {\n        return 0;\n    } else {\n        return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i] = array();\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0 || $j == 0) {\n                $eulerian_num[$i][$j] = 1;\n            } else {\n                $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + $i * $eulerian_num[$i - 1][$j];\n            }\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n\necho eulerian_num(5, 3);",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n < 0 || $m < 0 || $n < $m) {\n        return 0;\n    }\n    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = ($eulerian_num[$i - 1][$j - 1] + ($i - 1) * $eulerian_num[$i - 1][$j]);\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n\necho eulerian_num(5, 3);",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0 || $n < $m) {\n        return 0;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = ($i - $j) * $eulerian_num[$i - 1][$j] + $eulerian_num[$i - 1][$j - 1];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $m + 1;\n    }\n    if ($m == 1) {\n        return $n + 1;\n    }\n    return ($m + 1) * eulerian_num($n - 1, $m) + ($n - $m) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    if ($n < $m) {\n        return 0;\n    } else if ($n == $m || $m == 0) {\n        return 1;\n    } else {\n        return eulerian_num($n - 1, $m - 1) + ($n - 1) * eulerian_num($n - 1, $m);\n    }\n}\n",
    "    if ($n < 0 || $m < 0 || $n < $m) {\n        return 0;\n    }\n    if ($n == 0 && $m == 0) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n;\n    }\n    if ($n < $m) {\n        return 0;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - 1) * eulerian_num($n - 1, $m);\n}\n"
  ]
}