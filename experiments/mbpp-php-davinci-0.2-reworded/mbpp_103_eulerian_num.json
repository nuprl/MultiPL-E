{
  "name": "mbpp_103_eulerian_num",
  "language": "php",
  "prompt": "<?php\n// Write a function to find the Eulerian number a(n, m).\nfunction eulerian_num($n, $m) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return eulerian_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 1) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 1) !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 26) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    if ($m > $n) {\n        return 0;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n - $m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    } elseif ($m == 0) {\n        return 0;\n    } elseif ($n == $m) {\n        return 1;\n    } else {\n        return eulerian_num($n - 1, $m - 1) + ($n + 1) * eulerian_num($n, $m - 1);\n    }\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n - 1, $m);\n}\n",
    "    if ($n < $m) {\n        return 0;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n        $eulerian_num[$i][$i + 1] = 1;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $i; $j++) {\n            $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i + 1 - $j) * $eulerian_num[$i - 1][$j];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    $eulerian_num = 0;\n    for ($i = 0; $i <= $m; $i++) {\n        $eulerian_num += (-1)**$i * binomial_coefficient($m, $i) * binomial_coefficient($n + $i, $n);\n    }\n    return $eulerian_num;\n}\n",
    "    $eulerian_num = 0;\n    if ($n > $m) {\n        $eulerian_num = 0;\n    } elseif ($n == $m) {\n        $eulerian_num = 1;\n    } elseif ($n == 0) {\n        $eulerian_num = 1;\n    } else {\n        $eulerian_num = ($m - $n + 1) * eulerian_num($n - 1, $m) + ($n + 1) * eulerian_num($n, $m - 1);\n    }\n    return $eulerian_num;\n}\n",
    "\tif ($n == 0 || $m == 0) {\n\t\treturn 1;\n\t}\n\tif ($n == $m) {\n\t\treturn 0;\n\t}\n\treturn ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n - 1, $m - 1);\n}\n",
    "    $numerator = factorial($n + $m);\n    $denominator = factorial($n) * factorial($m);\n    return $numerator / $denominator;\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        for ($j = 0; $j <= $m; $j++) {\n            if ($i == 0) {\n                $eulerian_num[$i][$j] = 1;\n            } elseif ($j == 0) {\n                $eulerian_num[$i][$j] = 0;\n            } else {\n                $eulerian_num[$i][$j] = ($i - $j + 1) * $eulerian_num[$i - 1][$j] + ($j + 1) * $eulerian_num[$i - 1][$j - 1];\n            }\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m - 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($m > $n) {\n        return 0;\n    }\n    if ($m == 0 || $m == $n) {\n        return 1;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    return ($n + $m - 1) * eulerian_num($n - 1, $m) + ($n + $m) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == 1 || $m == 1) {\n        return $n + $m - 1;\n    }\n    return ($n - $m) * eulerian_num($n - 1, $m) + ($m + 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0 || $m == 0) {\n        return 1;\n    }\n    if ($n == $m) {\n        return 1;\n    }\n    if ($n > $m) {\n        return 0;\n    }\n    return eulerian_num($n - 1, $m - 1) + ($n + 1) * eulerian_num($n, $m - 1);\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n",
    "    $eulerian_num = array();\n    for ($i = 0; $i <= $n; $i++) {\n        $eulerian_num[$i][0] = 1;\n    }\n    for ($i = 1; $i <= $m; $i++) {\n        $eulerian_num[0][$i] = 0;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $m; $j++) {\n            $eulerian_num[$i][$j] = $eulerian_num[$i - 1][$j - 1] + ($i + 1) * $eulerian_num[$i][$j - 1];\n        }\n    }\n    return $eulerian_num[$n][$m];\n}\n",
    "    if ($n == 0) {\n        return 1;\n    }\n    if ($m == 0) {\n        return 0;\n    }\n    return ($n - $m + 1) * eulerian_num($n, $m - 1) + ($m + 1) * eulerian_num($n, $m + 1);\n}\n"
  ]
}