{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "php",
  "prompt": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count == 0) {\n        return $result;\n    }\n    $minHeap = new SplMinHeap();\n    $minHeap->insert([$nums1[0] + $nums2[0], 0, 0]);\n    while ($k > 0 && !$minHeap->isEmpty()) {\n        $k--;\n        $node = $minHeap->extract();\n        $result[] = [$nums1[$node[1]], $nums2[$node[2]]];\n        if ($node[1] + 1 < count($nums1)) {\n            $minHeap->insert([$nums1[$node[1] + 1] + $nums2[$node[2]], $node[1] + 1, $node[2]]);\n        }\n        if ($node[1] == 0 && $node[2] + 1 < count($nums2)) {\n            $minHeap->insert([$nums1[$node[1]] + $nums2[$node[2] + 1], $node[1], $node[2] + 1]);\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    $queue = new SplPriorityQueue();\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $queue->insert([$nums1[$i], $nums2[$j]], -($nums1[$i] + $nums2[$j]));\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp206lkcro.php:35\nStack trace:\n#0 /tmp/tmp206lkcro.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp206lkcro.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1) * count($nums2);\n    if ($k >= $count) {\n        foreach ($nums1 as $num1) {\n            foreach ($nums2 as $num2) {\n                $result[] = [$num1, $num2];\n            }\n        }\n        return $result;\n    }\n    $queue = new SplPriorityQueue();\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $queue->insert([$num1, $num2], -($num1 + $num2));\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5yw211g.php:36\nStack trace:\n#0 /tmp/tmpu5yw211g.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpu5yw211g.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = 0;\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[$count] = [$nums1[$i], $nums2[$j]];\n            $count++;\n        }\n    }\n    $result = array_map(function ($item) {\n        return $item[0] + $item[1];\n    }, $result);\n    array_multisort($result, SORT_ASC, $result);\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 5\n    [2] => 7\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0pubzbu.php:28\nStack trace:\n#0 /tmp/tmpr0pubzbu.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpr0pubzbu.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count == 0) {\n        return $result;\n    }\n    $count = $count > $k ? $k : $count;\n    $queue = new SplPriorityQueue();\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $queue->insert([$nums1[$i], $nums2[$j]], $nums1[$i] + $nums2[$j]);\n        }\n    }\n    for ($i = 0; $i < $count; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 11\n            [1] => 6\n        )\n\n    [1] => Array\n        (\n            [0] => 11\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnlogvwsg.php:31\nStack trace:\n#0 /tmp/tmpnlogvwsg.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpnlogvwsg.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = 0;\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b){\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pairs[] = [$n1, $n2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = [];\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min && !in_array([$j, $l], $min_index)) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = [$j, $l];\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index[0]], $nums2[$min_index[1]]];\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnc5l6e7x.php:34\nStack trace:\n#0 /tmp/tmpnc5l6e7x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpnc5l6e7x.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $length1 = count($nums1);\n    $length2 = count($nums2);\n    if ($length1 == 0 || $length2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $length1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $length1; $i++) {\n            if ($index[$i] < $length2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "array(3) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(2)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(6)\n  }\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $i = 0;\n    $j = 0;\n    while ($i < $len1 && $j < $len2 && count($result) < $k) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($i == $len1 - 1) {\n            $j++;\n        } elseif ($j == $len2 - 1) {\n            $i++;\n        } elseif ($nums1[$i + 1] + $nums2[$j] < $nums1[$i] + $nums2[$j + 1]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1,2,4,5,6];\n$nums2 = [3,5,7,9];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 3\n        )\n\n    [2] => Array\n        (\n            [0] => 2\n            [1] => 5\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplsiwz7lq.php:35\nStack trace:\n#0 /tmp/tmplsiwz7lq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplsiwz7lq.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    $queue = new SplPriorityQueue();\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $queue->insert([$nums1[$i], $nums2[$j]], -($nums1[$i] + $nums2[$j]));\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8ywcvqz.php:35\nStack trace:\n#0 /tmp/tmpf8ywcvqz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpf8ywcvqz.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $pairs[$i];\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\n\n$nums1 = [1,1,2];\n$nums2 = [1,2,3];\n$k = 2;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\n\n$nums1 = [1,2];\n$nums2 = [3];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n)\n\nWarning: Undefined array key 2 in /tmp/tmp8o29m4n7.php on line 15\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 3\n        )\n\n    [2] => \n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $i = 0;\n    $j = 0;\n    while ($i < $len1 && $j < $len2 && count($result) < $k) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($j == $len2 - 1) {\n            $i++;\n            $j = 0;\n        } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0ldpoqq.php:32\nStack trace:\n#0 /tmp/tmpj0ldpoqq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpj0ldpoqq.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "array(3) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(2)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(6)\n  }\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $size1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $heap = new SplMaxHeap();\n    $heap->insert([$nums1[0] + $nums2[0], 0, 0]);\n    for ($i = 0; $i < $k; $i++) {\n        if ($heap->isEmpty()) {\n            break;\n        }\n        $pair = $heap->extract();\n        $result[] = [$nums1[$pair[1]], $nums2[$pair[2]]];\n        if ($pair[1] + 1 < $len1) {\n            $heap->insert([$nums1[$pair[1] + 1] + $nums2[$pair[2]], $pair[1] + 1, $pair[2]]);\n        }\n        if ($pair[1] == 0 && $pair[2] + 1 < $len2) {\n            $heap->insert([$nums1[$pair[1]] + $nums2[$pair[2] + 1], $pair[1], $pair[2] + 1]);\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 7\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 11\n            [1] => 2\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hjx9ifc.php:37\nStack trace:\n#0 /tmp/tmp6hjx9ifc.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6hjx9ifc.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] >= $size2) {\n                continue;\n            }\n            if ($nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] >= $size2) {\n                continue;\n            }\n            if ($nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = 0;\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $count++;\n            if ($count == $k) {\n                return $result;\n            }\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9rllrth0.php:30\nStack trace:\n#0 /tmp/tmp9rllrth0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9rllrth0.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - ($b[0] + $b[1]);\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $index = 0;\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($m = 0; $m < count($nums2); $m++) {\n                if ($nums1[$j] + $nums2[$m] < $min) {\n                    $min = $nums1[$j] + $nums2[$m];\n                    $index = $j;\n                }\n            }\n        }\n        $result[] = [$nums1[$index], $nums2[0]];\n        array_splice($nums1, $index, 1);\n        array_splice($nums2, 0, 1);\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 7\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 11\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsz03p1zq.php:36\nStack trace:\n#0 /tmp/tmpsz03p1zq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsz03p1zq.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $result[] = [$n1, $n2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $result[] = [$n1, $n2];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] >= $size2) {\n                continue;\n            }\n            if ($nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $pairs = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $pairs[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = $pairs[0][0] + $pairs[0][1];\n        $index = 0;\n        for ($j = 1; $j < count($pairs); $j++) {\n            $sum = $pairs[$j][0] + $pairs[$j][1];\n            if ($sum < $min) {\n                $min = $sum;\n                $index = $j;\n            }\n        }\n        $result[] = $pairs[$index];\n        array_splice($pairs, $index, 1);\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0) {\n        return $result;\n    }\n    $minHeap = new SplMinHeap();\n    $minHeap->insert([$nums1[0] + $nums2[0], 0, 0]);\n    for ($i = 0; $i < $k; $i++) {\n        if ($minHeap->isEmpty()) {\n            break;\n        }\n        $pair = $minHeap->extract();\n        $result[] = [$nums1[$pair[1]], $nums2[$pair[2]]];\n        if ($pair[1] + 1 < $size1) {\n            $minHeap->insert([$nums1[$pair[1] + 1] + $nums2[$pair[2]], $pair[1] + 1, $pair[2]]);\n        }\n        if ($pair[1] == 0 && $pair[2] + 1 < $size2) {\n            $minHeap->insert([$nums1[$pair[1]] + $nums2[$pair[2] + 1], $pair[1], $pair[2] + 1]);\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while (count($result) < $k) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] >= $size2) {\n                continue;\n            }\n            if ($nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] >= $len2) {\n                continue;\n            }\n            if ($nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "array(3) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(2)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(6)\n  }\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    $visited = [];\n    $visited[0] = [0 => true];\n    for ($i = 0; $i < $k && !$pq->isEmpty(); $i++) {\n        $top = $pq->extract();\n        $result[$i] = [$nums1[$top['data'][0]], $nums2[$top['data'][1]]];\n        if ($top['data'][0] + 1 < $len1 && !isset($visited[$top['data'][0] + 1][$top['data'][1]])) {\n            $pq->insert([$top['data'][0] + 1, $top['data'][1]], -($nums1[$top['data'][0] + 1] + $nums2[$top['data'][1]]));\n            $visited[$top['data'][0] + 1][$top['data'][1]] = true;\n        }\n        if ($top['data'][1] + 1 < $len2 && !isset($visited[$top['data'][0]][$top['data'][1] + 1])) {\n            $pq->insert([$top['data'][0], $top['data'][1] + 1], -($nums1[$top['data'][0]] + $nums2[$top['data'][1] + 1]));\n            $visited[$top['data'][0]][$top['data'][1] + 1] = true;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmpna53aqmf.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $heap = new SplMinHeap();\n    for ($i = 0; $i < $len1; $i++) {\n        $heap->insert([$nums1[$i] + $nums2[0], $i, 0]);\n    }\n    while ($k > 0 && $heap->count() > 0) {\n        $pair = $heap->extract();\n        $result[] = [$nums1[$pair[1]], $nums2[$pair[2]]];\n        if ($pair[2] < $len2 - 1) {\n            $heap->insert([$nums1[$pair[1]] + $nums2[$pair[2] + 1], $pair[1], $pair[2] + 1]);\n        }\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while (count($result) < $k) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    while ($k > 0 && !$pq->isEmpty()) {\n        $k--;\n        $pair = $pq->extract();\n        $result[] = [$nums1[$pair['data'][0]], $nums2[$pair['data'][1]]];\n        if ($pair['data'][0] + 1 < $len1) {\n            $pq->insert([$pair['data'][0] + 1, $pair['data'][1]], -($nums1[$pair['data'][0] + 1] + $nums2[$pair['data'][1]]));\n        }\n        if ($pair['data'][0] == 0 && $pair['data'][1] + 1 < $len2) {\n            $pq->insert([$pair['data'][0], $pair['data'][1] + 1], -($nums1[$pair['data'][0]] + $nums2[$pair['data'][1] + 1]));\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcv8n7joj.php:36\nStack trace:\n#0 /tmp/tmpcv8n7joj.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpcv8n7joj.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pairs[] = [$n1, $n2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = 0;\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    if (count($nums1) == 0 || count($nums2) == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pq->insert([$num1, $num2], -($num1 + $num2));\n        }\n    }\n    while ($k > 0 && !$pq->isEmpty()) {\n        $result[] = $pq->extract();\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpetb3vcaj.php:32\nStack trace:\n#0 /tmp/tmpetb3vcaj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpetb3vcaj.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = [0, 0];\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = [$j, $l];\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index[0]], $nums2[$min_index[1]]];\n        unset($nums1[$min_index[0]]);\n        unset($nums2[$min_index[1]]);\n        $nums1 = array_values($nums1);\n        $nums2 = array_values($nums2);\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\n\necho \"<pre>\";\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 7\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 11\n            [1] => 6\n        )\n\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf784rug9.php:41\nStack trace:\n#0 /tmp/tmpf784rug9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpf784rug9.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pairs[] = [$n1, $n2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k && $i < count($nums1) && $j < count($nums2)) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($i == count($nums1) - 1) {\n            $j++;\n        } else if ($j == count($nums2) - 1) {\n            $i++;\n        } else if ($nums1[$i + 1] + $nums2[$j] < $nums1[$i] + $nums2[$j + 1]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsqv1dpu0.php:35\nStack trace:\n#0 /tmp/tmpsqv1dpu0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsqv1dpu0.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = [];\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = [$j, $l];\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index[0]], $nums2[$min_index[1]]];\n        unset($nums1[$min_index[0]]);\n        unset($nums2[$min_index[1]]);\n        $nums1 = array_values($nums1);\n        $nums2 = array_values($nums2);\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "array(3) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(2)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(7)\n    [1]=>\n    int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(11)\n    [1]=>\n    int(6)\n  }\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8a3fzcq.php:38\nStack trace:\n#0 /tmp/tmph8a3fzcq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmph8a3fzcq.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    for ($i = 0; $i < $size1; $i++) {\n        for ($j = 0; $j < $size2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    for ($i = 0; $i < $size1; $i++) {\n        for ($j = 0; $j < $size2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = [];\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min && !in_array([$j, $l], $min_index)) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = [$j, $l];\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index[0]], $nums2[$min_index[1]]];\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp75257gz.php:34\nStack trace:\n#0 /tmp/tmpp75257gz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp75257gz.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $result[] = [$n1, $n2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $res = [];\n    if ($len1 == 0 || $len2 == 0) {\n        return $res;\n    }\n    $heap = new SplMinHeap();\n    for ($i = 0; $i < $len1; $i++) {\n        $heap->insert([$nums1[$i] + $nums2[0], $i, 0]);\n    }\n    while ($k > 0 && $heap->count() > 0) {\n        $cur = $heap->extract();\n        $res[] = [$nums1[$cur[1]], $nums2[$cur[2]]];\n        $k--;\n        if ($cur[2] + 1 < $len2) {\n            $heap->insert([$nums1[$cur[1]] + $nums2[$cur[2] + 1], $cur[1], $cur[2] + 1]);\n        }\n    }\n    return $res;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $i = 0;\n    $j = 0;\n    while ($i < $len1 && $j < $len2 && count($result) < $k) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($i == $len1 - 1) {\n            $j++;\n        } else if ($j == $len2 - 1) {\n            $i++;\n        } else if ($nums1[$i + 1] + $nums2[$j] < $nums1[$i] + $nums2[$j + 1]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpooaii_j2.php:35\nStack trace:\n#0 /tmp/tmpooaii_j2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpooaii_j2.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = [];\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if (!in_array($j, $min_index) && !in_array($l, $min_index)) {\n                    if ($nums1[$j] + $nums2[$l] < $min) {\n                        $min = $nums1[$j] + $nums2[$l];\n                        $min_index = [$j, $l];\n                    }\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index[0]], $nums2[$min_index[1]]];\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppunokbdo.php:36\nStack trace:\n#0 /tmp/tmppunokbdo.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppunokbdo.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k && $i < count($nums1) && $j < count($nums2)) {\n        if ($nums1[$i] + $nums2[$j] < $nums1[$i + 1] + $nums2[$j]) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $i++;\n        } else {\n            $result[] = [$nums1[$i + 1], $nums2[$j]];\n            $j++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "\nWarning: Undefined array key 3 in /tmp/tmp8l4y6wq_.php on line 9\n\nWarning: Undefined array key 3 in /tmp/tmp8l4y6wq_.php on line 13\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 7\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => \n            [1] => 2\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8l4y6wq_.php:30\nStack trace:\n#0 /tmp/tmp8l4y6wq_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8l4y6wq_.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n\n    return array_slice($pairs, 0, $k);\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\nprint_r(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3));\nprint_r(k_smallest_pairs([1, 1, 2], [1, 2, 3], 2));\nprint_r(k_smallest_pairs([1, 2], [3], 3));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n)\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 3\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $nums1_length = count($nums1);\n    $nums2_length = count($nums2);\n    if ($nums1_length == 0 || $nums2_length == 0) {\n        return $result;\n    }\n    $indexes = array_fill(0, $nums1_length, 0);\n    while ($k > 0) {\n        $min_value = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $nums1_length; $i++) {\n            if ($indexes[$i] < $nums2_length && $nums1[$i] + $nums2[$indexes[$i]] < $min_value) {\n                $min_value = $nums1[$i] + $nums2[$indexes[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$indexes[$min_index]]];\n        $indexes[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    for ($i = 0; $i < $len1; $i++) {\n        $pq->insert([$nums1[$i], $nums2[0], 0], -$nums1[$i] - $nums2[0]);\n    }\n    for ($i = 0; $i < $k && !$pq->isEmpty(); $i++) {\n        $cur = $pq->extract();\n        $result[] = [$cur[0], $cur[1]];\n        if ($cur[2] == $len2 - 1) {\n            continue;\n        }\n        $pq->insert([$cur[0], $nums2[$cur[2] + 1], $cur[2] + 1], -$cur[0] - $nums2[$cur[2] + 1]);\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpatacgt1y.php:34\nStack trace:\n#0 /tmp/tmpatacgt1y.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpatacgt1y.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $len = $len1 * $len2;\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($count < $k && $i < $len1 && $j < $len2) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        $count++;\n        if ($i == $len1 - 1) {\n            $j++;\n        } elseif ($j == $len2 - 1) {\n            $i++;\n        } elseif ($nums1[$i] + $nums2[$j + 1] < $nums1[$i + 1] + $nums2[$j]) {\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfpd7aiv2.php:36\nStack trace:\n#0 /tmp/tmpfpd7aiv2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfpd7aiv2.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $heap = new SplMinHeap();\n    $heap->insert([$nums1[0] + $nums2[0], 0, 0]);\n    $count = 0;\n    while (!$heap->isEmpty() && $count < $k) {\n        $node = $heap->extract();\n        $result[] = [$nums1[$node[1]], $nums2[$node[2]]];\n        $count++;\n        if ($node[1] + 1 < $len1) {\n            $heap->insert([$nums1[$node[1] + 1] + $nums2[$node[2]], $node[1] + 1, $node[2]]);\n        }\n        if ($node[1] == 0 && $node[2] + 1 < $len2) {\n            $heap->insert([$nums1[$node[1]] + $nums2[$node[2] + 1], $node[1], $node[2] + 1]);\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    $visited = [];\n    $visited[] = [0, 0];\n    while (!$pq->isEmpty() && $k > 0) {\n        $k--;\n        $node = $pq->extract();\n        $result[] = [$nums1[$node['data'][0]], $nums2[$node['data'][1]]];\n        if ($node['data'][0] + 1 < $len1 && !in_array([$node['data'][0] + 1, $node['data'][1]], $visited)) {\n            $pq->insert([$node['data'][0] + 1, $node['data'][1]], -($nums1[$node['data'][0] + 1] + $nums2[$node['data'][1]]));\n            $visited[] = [$node['data'][0] + 1, $node['data'][1]];\n        }\n        if ($node['data'][1] + 1 < $len2 && !in_array([$node['data'][0], $node['data'][1] + 1], $visited)) {\n            $pq->insert([$node['data'][0], $node['data'][1] + 1], -($nums1[$node['data'][0]] + $nums2[$node['data'][1] + 1]));\n            $visited[] = [$node['data'][0], $node['data'][1] + 1];\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp7atpd8id.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pq->insert([$n1, $n2], -($n1 + $n2));\n        }\n    }\n    while ($k-- > 0 && !$pq->isEmpty()) {\n        $result[] = $pq->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsprge5zh.php:27\nStack trace:\n#0 /tmp/tmpsprge5zh.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpsprge5zh.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k) {\n        if ($i < count($nums1) && $j < count($nums2)) {\n            if ($nums1[$i] < $nums2[$j]) {\n                $result[] = [$nums1[$i], $nums2[$j]];\n                $i++;\n            } else {\n                $result[] = [$nums1[$i], $nums2[$j]];\n                $j++;\n            }\n        } else if ($i < count($nums1)) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $i++;\n        } else if ($j < count($nums2)) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $j++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 7\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 4\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxmlhpeva.php:38\nStack trace:\n#0 /tmp/tmpxmlhpeva.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxmlhpeva.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for($i = 0; $i < $count; $i++) {\n        for($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k) {\n        $sum = $nums1[$i] + $nums2[$j];\n        if ($i < count($nums1) && $j < count($nums2)) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $count++;\n            if ($i < count($nums1) - 1 && $j < count($nums2) - 1) {\n                if ($nums1[$i + 1] + $nums2[$j] < $nums1[$i] + $nums2[$j + 1]) {\n                    $i++;\n                } else {\n                    $j++;\n                }\n            } elseif ($i < count($nums1) - 1) {\n                $i++;\n            } else {\n                $j++;\n            }\n        } else {\n            break;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nWarning: Undefined array key 3 in /tmp/tmpkje1ebbh.php on line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkje1ebbh.php:42\nStack trace:\n#0 /tmp/tmpkje1ebbh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkje1ebbh.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $i = 0;\n    $j = 0;\n    while ($i < $len1 && $j < $len2 && count($result) < $k) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($i + 1 < $len1 && $j + 1 < $len2) {\n            if ($nums1[$i + 1] + $nums2[$j] < $nums1[$i] + $nums2[$j + 1]) {\n                $i++;\n            } else {\n                $j++;\n            }\n        } elseif ($i + 1 < $len1) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttm7_aor.php:37\nStack trace:\n#0 /tmp/tmpttm7_aor.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpttm7_aor.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $size1; $i++) {\n        $index[$i] = 0;\n    }\n    while (count($result) < $k) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] > $b[0] + $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmpbj1vqu5t.php on line 14\narray(3) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(2)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(6)\n  }\n}\n\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmpbj1vqu5t.php on line 14\n\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmpbj1vqu5t.php on line 14\n\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmpbj1vqu5t.php on line 14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = 0;\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = $j;\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[0]];\n        array_splice($nums1, $min_index, 1);\n        array_splice($nums2, 0, 1);\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 7\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 11\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqrggynqq.php:36\nStack trace:\n#0 /tmp/tmpqrggynqq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqrggynqq.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $max = $len1 * $len2;\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k && $count < $max) {\n        if ($i < $len1 && $j < $len2) {\n            if ($nums1[$i] + $nums2[$j] < $nums1[$i + 1] + $nums2[$j]) {\n                $result[] = [$nums1[$i], $nums2[$j]];\n                $i++;\n            } else {\n                $result[] = [$nums1[$i], $nums2[$j]];\n                $j++;\n            }\n        } elseif ($i < $len1) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $i++;\n        } elseif ($j < $len2) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $j++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "\nWarning: Undefined array key 3 in /tmp/tmpz4so6ckd.php on line 13\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 7\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 11\n            [1] => 2\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4so6ckd.php:41\nStack trace:\n#0 /tmp/tmpz4so6ckd.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpz4so6ckd.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1);\n    $count2 = count($nums2);\n    $index = array_fill(0, $count, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = 0;\n        for ($i = 0; $i < $count; $i++) {\n            if ($index[$i] < $count2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "array(3) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(2)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(6)\n  }\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count == 0) {\n        return $result;\n    }\n    if ($k > $count) {\n        $k = $count;\n    }\n    $nums1_count = count($nums1);\n    $nums2_count = count($nums2);\n    $nums1_index = 0;\n    $nums2_index = 0;\n    $nums1_value = $nums1[$nums1_index];\n    $nums2_value = $nums2[$nums2_index];\n    $nums1_value_next = $nums1[$nums1_index + 1];\n    $nums2_value_next = $nums2[$nums2_index + 1];\n    for ($i = 0; $i < $k; $i++) {\n        if ($nums1_value + $nums2_value <= $nums1_value_next + $nums2_value_next) {\n            $result[] = [$nums1_value, $nums2_value];\n            if ($nums2_index < $nums2_count - 1) {\n                $nums2_index++;\n                $nums2_value = $nums2[$nums2_index];\n                $nums2_value_next = $nums2[$nums2_index + 1];\n            } else {\n                $nums1_index++;\n                $nums1_value = $nums1[$nums1_index];\n                $nums1_value_next = $nums1[$nums1_index + 1];\n                $nums2_index = 0;\n                $nums2_value = $nums2[$nums2_index];\n                $nums2_value_next = $nums2[$nums2_index + 1];\n            }\n        } else {\n            $result[] = [$nums1_value_next, $nums2_value_next];\n            if ($n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpf2oob09y.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\nprint_r(k_smallest_pairs([1,7,11], [2,4,6], 3));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index1 = 0;\n    $index2 = 0;\n    $count = 0;\n    while ($count < $k) {\n        $count++;\n        $sum = $nums1[$index1] + $nums2[$index2];\n        $result[] = [$nums1[$index1], $nums2[$index2]];\n        if ($index1 + 1 < $len1 && $index2 + 1 < $len2) {\n            $sum1 = $nums1[$index1 + 1] + $nums2[$index2];\n            $sum2 = $nums1[$index1] + $nums2[$index2 + 1];\n            if ($sum1 < $sum2) {\n                $index1++;\n            } else {\n                $index2++;\n            }\n        } else if ($index1 + 1 < $len1) {\n            $index1++;\n        } else {\n            $index2++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "array(3) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(2)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(6)\n  }\n}\n\nWarning: Undefined array key 3 in /tmp/tmpx8_t3wrv.php on line 15\n\nWarning: Undefined array key 3 in /tmp/tmpx8_t3wrv.php on line 16\n\nWarning: Undefined array key 4 in /tmp/tmpx8_t3wrv.php on line 15\n\nWarning: Undefined array key 4 in /tmp/tmpx8_t3wrv.php on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8_t3wrv.php:45\nStack trace:\n#0 /tmp/tmpx8_t3wrv.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpx8_t3wrv.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        foreach ($nums1 as $num1) {\n            foreach ($nums2 as $num2) {\n                $result[] = [$num1, $num2];\n            }\n        }\n    } else {\n        $result = [];\n        $count = 0;\n        $i = 0;\n        $j = 0;\n        while ($count < $k) {\n            $count++;\n            $result[] = [$nums1[$i], $nums2[$j]];\n            if ($j < count($nums2) - 1) {\n                $j++;\n            } else {\n                $i++;\n                $j = 0;\n            }\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_3od92m3.php:42\nStack trace:\n#0 /tmp/tmp_3od92m3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_3od92m3.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for($i = 0; $i < $count; $i++) {\n        for($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 1, 2];\n$nums2 = [1, 2, 3];\n$k = 10;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [3] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [4] => Array\n        (\n            [0] => 2\n            [1] => 1\n        )\n\n    [5] => Array\n        (\n            [0] => 1\n            [1] => 3\n        )\n\n    [6] => Array\n        (\n            [0] => 1\n            [1] => 3\n        )\n\n    [7] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n    [8] => Array\n        (\n            [0] => 2\n            [1] => 3\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $result[] = [$nums1[$i], $nums2[$j]];\n            }\n        }\n    } else {\n        $count = 0;\n        $i = 0;\n        $j = 0;\n        while ($count < $k) {\n            if ($nums1[$i] < $nums2[$j]) {\n                $result[] = [$nums1[$i], $nums2[$j]];\n                $i++;\n            } else {\n                $result[] = [$nums1[$i], $nums2[$j]];\n                $j++;\n            }\n            $count++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 7\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => 4\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_exqg8t.php:40\nStack trace:\n#0 /tmp/tmpk_exqg8t.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpk_exqg8t.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $count = 0;\n    $i = $j = 0;\n    while ($count < $k) {\n        $count++;\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($j == $len2 - 1) {\n            $i++;\n        } elseif ($i == 0 || $nums1[$i] > $nums2[$j + 1]) {\n            $j++;\n        } else {\n            $i++;\n        }\n        if ($i == $len1 || $j == $len2) {\n            break;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5u632hxq.php:40\nStack trace:\n#0 /tmp/tmp5u632hxq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5u632hxq.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] >= $size2) {\n                continue;\n            }\n            if ($nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = sizeof($nums1);\n    $size2 = sizeof($nums2);\n    for ($i = 0; $i < $size1; $i++) {\n        for ($j = 0; $j < $size2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $minHeap = new SplMinHeap();\n    $minHeap->insert([$nums1[0] + $nums2[0], 0, 0]);\n    for ($i = 0; $i < $k; $i++) {\n        if ($minHeap->isEmpty()) {\n            break;\n        }\n        $node = $minHeap->extract();\n        $result[] = [$nums1[$node[1]], $nums2[$node[2]]];\n        if ($node[1] + 1 < $len1) {\n            $minHeap->insert([$nums1[$node[1] + 1] + $nums2[$node[2]], $node[1] + 1, $node[2]]);\n        }\n        if ($node[1] == 0 && $node[2] + 1 < $len2) {\n            $minHeap->insert([$nums1[$node[1]] + $nums2[$node[2] + 1], $node[1], $node[2] + 1]);\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $result[] = [$n1, $n2];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count < $k) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = $j;\n                }\n            }\n        }\n        array_push($result, [$nums1[$min_index], $nums2[$l]]);\n        unset($nums1[$min_index]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "\nWarning: Undefined array key 3 in /tmp/tmppejjbkpe.php on line 20\n\nWarning: Undefined array key 0 in /tmp/tmppejjbkpe.php on line 14\n\nWarning: Undefined array key 0 in /tmp/tmppejjbkpe.php on line 15\n\nWarning: Undefined array key 0 in /tmp/tmppejjbkpe.php on line 14\n\nWarning: Undefined array key 0 in /tmp/tmppejjbkpe.php on line 14\n\nWarning: Undefined array key 0 in /tmp/tmppejjbkpe.php on line 20\n\nWarning: Undefined array key 3 in /tmp/tmppejjbkpe.php on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppejjbkpe.php:31\nStack trace:\n#0 /tmp/tmppejjbkpe.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppejjbkpe.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $minHeap = new SplMinHeap();\n    for ($i = 0; $i < $len1; $i++) {\n        $minHeap->insert([$nums1[$i] + $nums2[0], $i, 0]);\n    }\n    for ($i = 0; $i < $k && !$minHeap->isEmpty(); $i++) {\n        $node = $minHeap->extract();\n        $result[] = [$nums1[$node[1]], $nums2[$node[2]]];\n        if ($node[2] + 1 < $len2) {\n            $minHeap->insert([$nums1[$node[1]] + $nums2[$node[2] + 1], $node[1], $node[2] + 1]);\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "array(3) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(2)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(6)\n  }\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $len = min($len1, $len2);\n    if ($len == 0) {\n        return $result;\n    }\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k) {\n        $count++;\n        if ($nums1[$i] + $nums2[$j] < $nums1[$i + 1] + $nums2[$j + 1]) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            if ($j == $len - 1) {\n                $i++;\n            } else {\n                $j++;\n            }\n        } else {\n            $result[] = [$nums1[$i + 1], $nums2[$j + 1]];\n            if ($i == $len - 1) {\n                $j++;\n            } else {\n                $i++;\n            }\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "\nWarning: Undefined array key 3 in /tmp/tmp36xxvtc5.php on line 16\n\nWarning: Undefined array key 3 in /tmp/tmp36xxvtc5.php on line 24\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 7\n            [1] => \n        )\n\n)\n\nWarning: Undefined array key 3 in /tmp/tmp36xxvtc5.php on line 16\n\nWarning: Undefined array key 3 in /tmp/tmp36xxvtc5.php on line 24\n\nWarning: Undefined array key 3 in /tmp/tmp36xxvtc5.php on line 16\n\nWarning: Undefined array key 3 in /tmp/tmp36xxvtc5.php on line 24\n\nWarning: Undefined array key 3 in /tmp/tmp36xxvtc5.php on line 16\n\nWarning: Undefined array key 3 in /tmp/tmp36xxvtc5.php on line 16\n\nWarning: Undefined array key 3 in /tmp/tmp36xxvtc5.php on line 24\n\nWarning: Undefined array key 3 in /tmp/tmp36xxvtc5.php on line 24\n\nWarning: Undefined array key 3 in /tmp/tmp36xxvtc5.php on line 16\n\nWarning: Undefined array key 3 in /tm",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = sizeof($nums1);\n    $size2 = sizeof($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] >= $size2) {\n                continue;\n            }\n            if ($nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\n\necho \"<pre>\";\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k && $i < $len1 && $j < $len2) {\n        $sum = $nums1[$i] + $nums2[$j];\n        if ($sum < $nums1[$i + 1] + $nums2[$j]) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $count++;\n            $j++;\n        } else {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $count++;\n            $i++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll5hom8i.php:39\nStack trace:\n#0 /tmp/tmpll5hom8i.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpll5hom8i.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    if (count($nums1) == 0 || count($nums2) == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pq->insert([$num1, $num2], -($num1 + $num2));\n        }\n    }\n    for ($i = 0; $i < $k && !$pq->isEmpty(); $i++) {\n        $result[] = $pq->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\n\n$nums1 = [1, 1, 2];\n$nums2 = [1, 2, 3];\n$k = 2;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\n\n$nums1 = [1, 2];\n$nums2 = [3];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 1\n        )\n\n)\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 3\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjr2j29sf.php:41\nStack trace:\n#0 /tmp/tmpjr2j29sf.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjr2j29sf.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] > $b[0] + $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmpbw1zcl45.php on line 12\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmpbw1zcl45.php on line 12\n\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmpbw1zcl45.php on line 12\n\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmpbw1zcl45.php on line 12\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $res = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $res[] = [$n1, $n2];\n        }\n    }\n    usort($res, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($res, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    for ($i = 0; $i < $len1; $i++) {\n        for ($j = 0; $j < $len2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $count = count($nums1) * count($nums2);\n    $result = [];\n    if ($count <= $k) {\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $result[] = [$nums1[$i], $nums2[$j]];\n            }\n        }\n    } else {\n        $result = [];\n        $arr = [];\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $arr[] = $nums1[$i] + $nums2[$j];\n            }\n        }\n        sort($arr);\n        $arr = array_slice($arr, 0, $k);\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                if (in_array($nums1[$i] + $nums2[$j], $arr)) {\n                    $result[] = [$nums1[$i], $nums2[$j]];\n                }\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqjqxzqi7.php:38\nStack trace:\n#0 /tmp/tmpqjqxzqi7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpqjqxzqi7.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count < $k) {\n        $k = $count;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = 0;\n        for ($j = 0; $j < count($nums1); $j++) {\n            for ($l = 0; $l < count($nums2); $l++) {\n                if ($nums1[$j] + $nums2[$l] < $min) {\n                    $min = $nums1[$j] + $nums2[$l];\n                    $min_index = $j;\n                }\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[0]];\n        array_splice($nums1, $min_index, 1);\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 7\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 11\n            [1] => 2\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp920_i1nx.php:35\nStack trace:\n#0 /tmp/tmp920_i1nx.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp920_i1nx.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $result[] = [$nums1[$i], $nums2[$j]];\n            }\n        }\n    } else {\n        $result = [];\n        $count = 0;\n        $map = [];\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $sum = $nums1[$i] + $nums2[$j];\n                if (!isset($map[$sum])) {\n                    $map[$sum] = [];\n                }\n                $map[$sum][] = [$nums1[$i], $nums2[$j]];\n            }\n        }\n        ksort($map);\n        foreach ($map as $key => $value) {\n            for ($i = 0; $i < count($value); $i++) {\n                if ($count >= $k) {\n                    break;\n                }\n                $result[] = $value[$i];\n                $count++;\n            }\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $res = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $res[] = [$n1, $n2];\n        }\n    }\n    usort($res, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($res, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    for ($i = 0; $i < $len1; $i++) {\n        for ($j = 0; $j < $len2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $minHeap = new SplMinHeap();\n    for ($i = 0; $i < $len1; $i++) {\n        $minHeap->insert([$nums1[$i] + $nums2[0], $i, 0]);\n    }\n    while ($k > 0 && $minHeap->count() > 0) {\n        $pair = $minHeap->extract();\n        $result[] = [$nums1[$pair[1]], $nums2[$pair[2]]];\n        $k--;\n        if ($pair[2] + 1 < $len2) {\n            $minHeap->insert([$nums1[$pair[1]] + $nums2[$pair[2] + 1], $pair[1], $pair[2] + 1]);\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    $result = array_map(function ($item) {\n        return $item[0] + $item[1];\n    }, $result);\n    sort($result);\n    $result = array_slice($result, 0, $k);\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => 3\n    [1] => 5\n    [2] => 7\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzvicd271.php:29\nStack trace:\n#0 /tmp/tmpzvicd271.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzvicd271.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    $queue = new SplPriorityQueue();\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $sum = $nums1[$i] + $nums2[$j];\n            $queue->insert([$nums1[$i], $nums2[$j]], -$sum);\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5qu_24z.php:36\nStack trace:\n#0 /tmp/tmpb5qu_24z.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpb5qu_24z.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    for ($i = 0; $i < $k; $i++) {\n        if ($pq->isEmpty()) {\n            break;\n        }\n        $pair = $pq->extract();\n        $result[] = [$nums1[$pair['data'][0]], $nums2[$pair['data'][1]]];\n        if ($pair['data'][0] + 1 < $len1) {\n            $pq->insert([$pair['data'][0] + 1, $pair['data'][1]], -($nums1[$pair['data'][0] + 1] + $nums2[$pair['data'][1]]));\n        }\n        if ($pair['data'][0] == 0 && $pair['data'][1] + 1 < $len2) {\n            $pq->insert([$pair['data'][0], $pair['data'][1] + 1], -($nums1[$pair['data'][0]] + $nums2[$pair['data'][1] + 1]));\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ciqwnyd.php:38\nStack trace:\n#0 /tmp/tmp4ciqwnyd.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp4ciqwnyd.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $result[] = [$nums1[$i], $nums2[$j]];\n            }\n        }\n    } else {\n        $arr = [];\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $arr[] = $nums1[$i] + $nums2[$j];\n            }\n        }\n        sort($arr);\n        $arr = array_slice($arr, 0, $k);\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                if (in_array($nums1[$i] + $nums2[$j], $arr)) {\n                    $result[] = [$nums1[$i], $nums2[$j]];\n                }\n            }\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64t8xf60.php:41\nStack trace:\n#0 /tmp/tmp64t8xf60.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp64t8xf60.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $nums1_length = count($nums1);\n    $nums2_length = count($nums2);\n    $i = 0;\n    $j = 0;\n    while ($i < $nums1_length && $j < $nums2_length && count($result) < $k) {\n        $sum = $nums1[$i] + $nums2[$j];\n        if ($sum <= $nums1[$i + 1] + $nums2[$j]) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $j++;\n        } else {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $i++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7d0iqg6h.php:33\nStack trace:\n#0 /tmp/tmp7d0iqg6h.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7d0iqg6h.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0) {\n        return $result;\n    }\n    $index = new SplMaxHeap();\n    for ($i = 0; $i < $size1; $i++) {\n        $index->insert([$nums1[$i] + $nums2[0], $i, 0]);\n    }\n    while ($k-- > 0 && !$index->isEmpty()) {\n        $node = $index->extract();\n        $result[] = [$nums1[$node[1]], $nums2[$node[2]]];\n        if ($node[2] == $size2 - 1) {\n            continue;\n        }\n        $index->insert([$nums1[$node[1]] + $nums2[$node[2] + 1], $node[1], $node[2] + 1]);\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\n\n$nums1 = [1, 1, 2];\n$nums2 = [1, 2, 3];\n$k = 2;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\n\n$nums1 = [1, 2];\n$nums2 = [3];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 11\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 11\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 11\n            [1] => 6\n        )\n\n)\nArray\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n)\nArray\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] => 3\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 3\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpct8t3j3k.php:44\nStack trace:\n#0 /tmp/tmpct8t3j3k.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpct8t3j3k.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pairs[] = [$n1, $n2];\n        }\n    }\n    usort($pairs, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $size1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] >= $size2) {\n                continue;\n            }\n            if ($nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    $queue = new SplPriorityQueue();\n    $queue->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $queue->insert([$num1, $num2], -($num1 + $num2));\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $queue->extract()['data'];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6xit1bl.php:32\nStack trace:\n#0 /tmp/tmpi6xit1bl.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpi6xit1bl.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([$nums1[0] + $nums2[0], 0, 0], -($nums1[0] + $nums2[0]));\n    for ($i = 0; $i < $k; $i++) {\n        if ($pq->isEmpty()) {\n            break;\n        }\n        $top = $pq->extract();\n        $result[] = [$nums1[$top['data'][1]], $nums2[$top['data'][2]]];\n        if ($top['data'][1] + 1 < $len1 && $top['data'][2] + 1 < $len2) {\n            $pq->insert([$nums1[$top['data'][1] + 1] + $nums2[$top['data'][2]], $top['data'][1] + 1, $top['data'][2]], -($nums1[$top['data'][1] + 1] + $nums2[$top['data'][2]]));\n            $pq->insert([$nums1[$top['data'][1]] + $nums2[$top['data'][2] + 1], $top['data'][1], $top['data'][2] + 1], -($nums1[$top['data'][1]] + $nums2[$top['data'][2] + 1]));\n        } else if ($top['data'][1] + 1 < $len1) {\n            $pq->insert([$nums1[$top['data'][1] + 1] + $nums2[$top['data'][2]], $top['data'][1] + 1, $top['data'][2]], -($\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpkbak__dy.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, $len1, 0);\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $t = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $t = $i;\n            }\n        }\n        if ($t == -1) {\n            break;\n        }\n        $result[] = [$nums1[$t], $nums2[$index[$t]]];\n        $index[$t]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n$result = k_smallest_pairs($nums1, $nums2, $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $res = [];\n    if ($len1 == 0 || $len2 == 0) {\n        return $res;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    for ($i = 0; $i < $k; $i++) {\n        if ($pq->isEmpty()) {\n            break;\n        }\n        $top = $pq->extract();\n        $res[] = [$nums1[$top['data'][0]], $nums2[$top['data'][1]]];\n        if ($top['data'][0] + 1 < $len1) {\n            $pq->insert([$top['data'][0] + 1, $top['data'][1]], -($nums1[$top['data'][0] + 1] + $nums2[$top['data'][1]]));\n        }\n        if ($top['data'][0] == 0 && $top['data'][1] + 1 < $len2) {\n            $pq->insert([$top['data'][0], $top['data'][1] + 1], -($nums1[$top['data'][0]] + $nums2[$top['data'][1] + 1]));\n        }\n    }\n    return $res;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw9bak9ih.php:38\nStack trace:\n#0 /tmp/tmpw9bak9ih.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpw9bak9ih.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k && $i < count($nums1) && $j < count($nums2)) {\n        if ($nums1[$i] + $nums2[$j] < $nums1[$i + 1] + $nums2[$j]) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $i++;\n        } else {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $j++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "\nWarning: Undefined array key 3 in /tmp/tmp9oe7gb4z.php on line 9\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 7\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 11\n            [1] => 2\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9oe7gb4z.php:30\nStack trace:\n#0 /tmp/tmp9oe7gb4z.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9oe7gb4z.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $nums1_length = count($nums1);\n    $nums2_length = count($nums2);\n    if ($nums1_length == 0 || $nums2_length == 0 || $k <= 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $nums1_length; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min_val = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $nums1_length; $i++) {\n            if ($index[$i] < $nums2_length && $nums1[$i] + $nums2[$index[$i]] < $min_val) {\n                $min_val = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach($nums1 as $num1) {\n        foreach($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $heap = new SplMinHeap();\n    for ($i = 0; $i < $len1; $i++) {\n        $heap->insert([$nums1[$i] + $nums2[0], $i, 0]);\n    }\n    while ($k > 0 && $heap->count() > 0) {\n        $node = $heap->extract();\n        $result[] = [$nums1[$node[1]], $nums2[$node[2]]];\n        if ($node[2] < $len2 - 1) {\n            $heap->insert([$nums1[$node[1]] + $nums2[$node[2] + 1], $node[1], $node[2] + 1]);\n        }\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    $count = count($nums1) * count($nums2);\n    if ($count < $k) {\n        $k = $count;\n    }\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $pairs[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $length1 = count($nums1);\n    $length2 = count($nums2);\n    if ($length1 == 0 || $length2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $length1; $i++) {\n        $index[$i] = 0;\n    }\n    while (count($result) < $k) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $length1; $i++) {\n            if ($index[$i] < $length2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $i = 0;\n    $j = 0;\n    while ($i < $len1 && $j < $len2 && count($result) < $k) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($i == $len1 - 1) {\n            $j++;\n        } elseif ($j == $len2 - 1) {\n            $i++;\n        } elseif ($nums1[$i + 1] + $nums2[$j] < $nums1[$i] + $nums2[$j + 1]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7zh6f287.php:35\nStack trace:\n#0 /tmp/tmp7zh6f287.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7zh6f287.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        foreach ($nums1 as $num1) {\n            foreach ($nums2 as $num2) {\n                $result[] = [$num1, $num2];\n            }\n        }\n    } else {\n        $heap = new SplMinHeap();\n        foreach ($nums1 as $num1) {\n            foreach ($nums2 as $num2) {\n                $heap->insert([$num1, $num2]);\n            }\n        }\n        for ($i = 0; $i < $k; $i++) {\n            $result[] = $heap->extract();\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3l60yukn.php:37\nStack trace:\n#0 /tmp/tmp3l60yukn.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp3l60yukn.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) return $result;\n    $pq = new SplPriorityQueue();\n    for ($i = 0; $i < $len1; $i++) {\n        $pq->insert([$nums1[$i], $nums2[0], 0], -$nums1[$i] - $nums2[0]);\n    }\n    for ($i = 0; $i < $k && !$pq->isEmpty(); $i++) {\n        $cur = $pq->extract();\n        $result[] = [$cur[0], $cur[1]];\n        if ($cur[2] == $len2 - 1) continue;\n        $pq->insert([$cur[0], $nums2[$cur[2] + 1], $cur[2] + 1], -$cur[0] - $nums2[$cur[2] + 1]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyoyh967f.php:26\nStack trace:\n#0 /tmp/tmpyoyh967f.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyoyh967f.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    $k = min($k, $count);\n    if ($k == 0) {\n        return $result;\n    }\n    $index = array_fill(0, count($nums1), 0);\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < count($nums1); $i++) {\n            if ($index[$i] < count($nums2) && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nvar_dump(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "array(3) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(2)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(6)\n  }\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $result[] = [$nums1[$i], $nums2[$j]];\n            }\n        }\n    } else {\n        $temp = [];\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                $temp[] = $nums1[$i] + $nums2[$j];\n            }\n        }\n        sort($temp);\n        $temp = array_slice($temp, 0, $k);\n        for ($i = 0; $i < count($nums1); $i++) {\n            for ($j = 0; $j < count($nums2); $j++) {\n                if (in_array($nums1[$i] + $nums2[$j], $temp)) {\n                    $result[] = [$nums1[$i], $nums2[$j]];\n                }\n            }\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmw6t_3l1.php:41\nStack trace:\n#0 /tmp/tmpmw6t_3l1.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpmw6t_3l1.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while (count($result) < $k) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123020,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count <= $k) {\n        foreach ($nums1 as $n1) {\n            foreach ($nums2 as $n2) {\n                $result[] = [$n1, $n2];\n            }\n        }\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    foreach ($nums1 as $n1) {\n        foreach ($nums2 as $n2) {\n            $pq->insert([$n1, $n2], -($n1 + $n2));\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $pq->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpznv2ff4j.php:37\nStack trace:\n#0 /tmp/tmpznv2ff4j.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpznv2ff4j.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $size1 = count($nums1);\n    $size2 = count($nums2);\n    if ($size1 == 0 || $size2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $size1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $size1; $i++) {\n            if ($index[$i] < $size2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    if (count($nums1) == 0 || count($nums2) == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([$nums1[0] + $nums2[0], 0, 0], -($nums1[0] + $nums2[0]));\n    $visited = [];\n    $visited[0][0] = true;\n    while (!$pq->isEmpty() && $k > 0) {\n        $k--;\n        $top = $pq->extract();\n        $result[] = [$nums1[$top['data'][1]], $nums2[$top['data'][2]]];\n        if ($top['data'][1] + 1 < count($nums1) && !isset($visited[$top['data'][1] + 1][$top['data'][2]])) {\n            $pq->insert([$nums1[$top['data'][1] + 1] + $nums2[$top['data'][2]], $top['data'][1] + 1, $top['data'][2]], -($nums1[$top['data'][1] + 1] + $nums2[$top['data'][2]]));\n            $visited[$top['data'][1] + 1][$top['data'][2]] = true;\n        }\n        if ($top['data'][2] + 1 < count($nums2) && !isset($visited[$top['data'][1]][$top['data'][2] + 1])) {\n            $pq->insert([$nums1[$top['data'][1]] + $nums2[$top['data'][2] + 1], $top['data'][1], $top['data'][2] + 1], -($nums1[$top['data'][1]] + $nums2[$top['data'][2\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmpidibpkfd.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    for ($i = 0; $i < $len1; $i++) {\n        $pq->insert([$nums1[$i], $nums2[0], 0], -$nums1[$i] - $nums2[0]);\n    }\n    for ($i = 0; $i < $k && !$pq->isEmpty(); $i++) {\n        $cur = $pq->extract();\n        $result[] = [$cur[0], $cur[1]];\n        if ($cur[2] == $len2 - 1) {\n            continue;\n        }\n        $pq->insert([$cur[0], $nums2[$cur[2] + 1], $cur[2] + 1], -$cur[0] - $nums2[$cur[2] + 1]);\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvc79s0si.php:34\nStack trace:\n#0 /tmp/tmpvc79s0si.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpvc79s0si.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k) {\n        if ($i < count($nums1) && $j < count($nums2)) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $count++;\n            if ($i < count($nums1) - 1) {\n                $i++;\n            } else {\n                $j++;\n            }\n        } else {\n            break;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 7\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 11\n            [1] => 2\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgadx_emf.php:35\nStack trace:\n#0 /tmp/tmpgadx_emf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgadx_emf.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] > $b[0] + $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmppagglf_s.php on line 12\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmppagglf_s.php on line 12\n\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmppagglf_s.php on line 12\n\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmppagglf_s.php on line 12\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $min_heap = new SplMinHeap();\n    $min_heap->insert([$nums1[0] + $nums2[0], 0, 0]);\n    $count = 0;\n    while ($count < $k && !$min_heap->isEmpty()) {\n        $node = $min_heap->extract();\n        $result[] = [$nums1[$node[1]], $nums2[$node[2]]];\n        if ($node[1] + 1 < $len1) {\n            $min_heap->insert([$nums1[$node[1] + 1] + $nums2[$node[2]], $node[1] + 1, $node[2]]);\n        }\n        if ($node[1] == 0 && $node[2] + 1 < $len2) {\n            $min_heap->insert([$nums1[$node[1]] + $nums2[$node[2] + 1], $node[1], $node[2] + 1]);\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n    $pq->insert([0, 0], -($nums1[0] + $nums2[0]));\n    while (!$pq->isEmpty() && $k > 0) {\n        $k--;\n        $pair = $pq->extract();\n        $result[] = [$nums1[$pair['data'][0]], $nums2[$pair['data'][1]]];\n        if ($pair['data'][0] + 1 < $len1) {\n            $pq->insert([$pair['data'][0] + 1, $pair['data'][1]], -($nums1[$pair['data'][0] + 1] + $nums2[$pair['data'][1]]));\n        }\n        if ($pair['data'][0] == 0 && $pair['data'][1] + 1 < $len2) {\n            $pq->insert([$pair['data'][0], $pair['data'][1] + 1], -($nums1[$pair['data'][0]] + $nums2[$pair['data'][1] + 1]));\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0p0piioa.php:36\nStack trace:\n#0 /tmp/tmp0p0piioa.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0p0piioa.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1) * count($nums2);\n    if ($count == 0) {\n        return $result;\n    }\n    if ($k > $count) {\n        $k = $count;\n    }\n    $index = [];\n    for ($i = 0; $i < count($nums1); $i++) {\n        $index[$i] = 0;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($j = 0; $j < count($nums1); $j++) {\n            if ($index[$j] < count($nums2) && $nums1[$j] + $nums2[$index[$j]] < $min) {\n                $min = $nums1[$j] + $nums2[$index[$j]];\n                $min_index = $j;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    if (empty($nums1) || empty($nums2)) {\n        return $result;\n    }\n    $count = count($nums1) * count($nums2);\n    if ($k > $count) {\n        $k = $count;\n    }\n    $queue = new SplPriorityQueue();\n    for ($i = 0; $i < count($nums1); $i++) {\n        for ($j = 0; $j < count($nums2); $j++) {\n            $queue->insert([$nums1[$i], $nums2[$j]], -($nums1[$i] + $nums2[$j]));\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp206lkcro.php:35\nStack trace:\n#0 /tmp/tmp206lkcro.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp206lkcro.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\n$result = k_smallest_pairs($nums1, $nums2, $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] > $b[0] + $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmpl55wtqd4.php on line 14\nArray\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmpl55wtqd4.php on line 14\n\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmpl55wtqd4.php on line 14\n\nDeprecated: usort(): Returning bool from comparison function is deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmpl55wtqd4.php on line 14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $result[] = [$num1, $num2];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = 0;\n    for ($i=0; $i < count($nums1); $i++) { \n        for ($j=0; $j < count($nums2); $j++) { \n            if ($count < $k) {\n                $result[] = [$nums1[$i], $nums2[$j]];\n                $count++;\n            }\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1,7,11];\n$nums2 = [2,4,6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8mavq1gs.php:28\nStack trace:\n#0 /tmp/tmp8mavq1gs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8mavq1gs.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $pairs = [];\n    foreach ($nums1 as $num1) {\n        foreach ($nums2 as $num2) {\n            $pairs[] = [$num1, $num2];\n        }\n    }\n    usort($pairs, function($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($pairs, 0, $k);\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $i = 0;\n    $j = 0;\n    while ($i < $len1 && $j < $len2 && count($result) < $k) {\n        $result[] = [$nums1[$i], $nums2[$j]];\n        if ($i == $len1 - 1) {\n            $j++;\n        } else if ($j == $len2 - 1) {\n            $i++;\n        } else if ($nums1[$i + 1] + $nums2[$j] < $nums1[$i] + $nums2[$j + 1]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph1x22rva.php:31\nStack trace:\n#0 /tmp/tmph1x22rva.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph1x22rva.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    $i = 0;\n    $j = 0;\n    while ($i < $len1 && $j < $len2 && count($result) < $k) {\n        if ($nums1[$i] + $nums2[$j] < $nums1[$i + 1] + $nums2[$j]) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $j++;\n        } else {\n            $result[] = [$nums1[$i + 1], $nums2[$j]];\n            $i++;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt94x_hra.php:32\nStack trace:\n#0 /tmp/tmpt94x_hra.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt94x_hra.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = count($nums1);\n    $count2 = count($nums2);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $count = 0;\n    $i = 0;\n    $j = 0;\n    while ($count < $k) {\n        if ($i < count($nums1) && $j < count($nums2)) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n            $count++;\n            if ($i < count($nums1) - 1) {\n                $i++;\n            } else {\n                $j++;\n            }\n        } else {\n            break;\n        }\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 7\n            [1] => 2\n        )\n\n    [2] => Array\n        (\n            [0] => 11\n            [1] => 2\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_1w5y0b.php:33\nStack trace:\n#0 /tmp/tmp1_1w5y0b.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1_1w5y0b.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    for ($i = 0; $i < $len1; $i++) {\n        for ($j = 0; $j < $len2; $j++) {\n            $result[] = [$nums1[$i], $nums2[$j]];\n        }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] + $a[1] - $b[0] - $b[1];\n    });\n    return array_slice($result, 0, $k);\n}\n\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    $result = [];\n    $len1 = count($nums1);\n    $len2 = count($nums2);\n    if ($len1 == 0 || $len2 == 0 || $k == 0) {\n        return $result;\n    }\n    $index = [];\n    for ($i = 0; $i < $len1; $i++) {\n        $index[$i] = 0;\n    }\n    while ($k > 0) {\n        $min = PHP_INT_MAX;\n        $min_index = -1;\n        for ($i = 0; $i < $len1; $i++) {\n            if ($index[$i] < $len2 && $nums1[$i] + $nums2[$index[$i]] < $min) {\n                $min = $nums1[$i] + $nums2[$index[$i]];\n                $min_index = $i;\n            }\n        }\n        if ($min_index == -1) {\n            break;\n        }\n        $result[] = [$nums1[$min_index], $nums2[$index[$min_index]]];\n        $index[$min_index]++;\n        $k--;\n    }\n    return $result;\n}\n\n$nums1 = [1, 7, 11];\n$nums2 = [2, 4, 6];\n$k = 3;\nprint_r(k_smallest_pairs($nums1, $nums2, $k));\nfunction candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123021,
      "stdout": "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 6\n        )\n\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}