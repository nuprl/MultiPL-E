{
  "name": "mbpp_607_find_literals",
  "language": "php",
  "prompt": "<?php\n// Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfunction find_literals($text, $pattern) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return find_literals(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\") !== array(\"fox\", 16, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Its been a very crazy procedure right\", \"crazy\") !== array(\"crazy\", 16, 21)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hardest choices required strongest will\", \"will\") !== array(\"will\", 35, 39)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($result) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $start = 0;\n    while (true) {\n        $pos = strpos($text, $pattern, $start);\n        if ($pos === false) {\n            break;\n        }\n        $result[] = array(\n            'start' => $pos,\n            'end' => $pos + strlen($pattern) - 1,\n            'text' => $pattern,\n        );\n        $start = $pos + 1;\n    }\n    return $result;\n}\n",
    "    $result = array();\n    $start = 0;\n    while (true) {\n        $pos = strpos($text, $pattern, $start);\n        if ($pos === false) {\n            break;\n        }\n        $result[] = array(\n            'substring' => $pattern,\n            'start' => $pos,\n            'end' => $pos + strlen($pattern) - 1\n        );\n        $start = $pos + 1;\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    } else {\n        return false;\n    }\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\necho \"Text: $text\\n\";\necho \"Pattern: $pattern\\n\";\necho \"Match: {$result['match']}\\n\";\necho \"Start: {$result['start']}\\n\";\necho \"End: {$result['end']}\\n\";\n\n$pattern = '/slow/';\n$result = find_literals($text, $pattern);\necho \"Text: $text\\n\";\necho \"Pattern: $pattern\\n\";\nif ($result) {\n    echo \"Match: {$result['match']}\\n\";\n    echo \"Start: {$result['start']}\\n\";\n    echo \"End: {$result['end']}\\n\";\n} else {\n    echo \"No match found.\\n\";\n}",
    "    $matches = [];\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $pattern_len = strlen($pattern);\n    $text_len = strlen($text);\n    for ($i = 0; $i < $text_len; $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i + $pattern_len;\n            $match = substr($text, $start, $pattern_len);\n            if ($match == $pattern) {\n                $matches[] = [\n                    'match' => $match,\n                    'start' => $start,\n                    'end' => $end\n                ];\n            }\n        }\n    }\n    return $matches;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $match = preg_match($pattern, $text, $result);\n    if ($match) {\n        return array(\n            'match' => $result[0],\n            'start' => $result[1],\n            'end' => $result[2]\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found '{$result['match']}' at {$result['start']} to {$result['end']}\";\n} else {\n    echo 'Not found';\n}\n\necho \"\\n\";\n\n$pattern = '/lazy/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found '{$result['match']}' at {$result['start']} to {$result['end']}\";\n} else {\n    echo 'Not found';\n}\n\necho \"\\n\";\n\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found '{$result['match']}' at {$result['start']} to {$result['end']}\";\n} else {\n    echo 'Not found';\n}\n\necho \"\\n\";\n\n$pattern = '/lazy/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found '{$result['match']}' at {$result['start']} to {$result['end']}\";\n} else {\n    echo 'Not found';\n}\n\necho \"\\n\";\n\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found '{$result['match']}' at {$result['start']} to {$result['end']}\";\n} else {\n    echo 'Not found';\n}\n\necho \"\\n\";\n\n$pattern = '/lazy/';\n$result = find_",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return array(null, null, null);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = [];\n    $matches = [];\n    $start = 0;\n    $end = 0;\n    $found = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($found) {\n        $start = $matches[0][1];\n        $end = $start + strlen($matches[0][0]);\n        $result = [\n            'match' => $matches[0][0],\n            'start' => $start,\n            'end' => $end\n        ];\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$match = find_literals($text, $pattern);\nif ($match) {\n    echo \"Found '{$match['match']}' at {$match['start']} to {$match['end']}\";\n} else {\n    echo 'No match found';\n}\n",
    "    $matches = array();\n    $start = 0;\n    while (true) {\n        $pos = strpos($text, $pattern, $start);\n        if ($pos === false) {\n            break;\n        }\n        $matches[] = array(\n            'substring' => $pattern,\n            'start' => $pos,\n            'end' => $pos + strlen($pattern) - 1\n        );\n        $start = $pos + 1;\n    }\n    return $matches;\n}\n",
    "    $matches = [];\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return [$matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0])];\n    }\n    return false;\n}\n",
    "\t$matches = array();\n\t$match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n\tif ($match) {\n\t\treturn array(\n\t\t\t\"match\" => $matches[0][0],\n\t\t\t\"start\" => $matches[0][1],\n\t\t\t\"end\" => $matches[0][1] + strlen($matches[0][0])\n\t\t);\n\t}\n\treturn false;\n}\n",
    "    $result = array();\n    $start = 0;\n    while (true) {\n        $pos = strpos($text, $pattern, $start);\n        if ($pos === false) {\n            break;\n        }\n        $result[] = array(\n            'substring' => substr($text, $pos, strlen($pattern)),\n            'start' => $pos,\n            'end' => $pos + strlen($pattern)\n        );\n        $start = $pos + 1;\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return null;\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = preg_match($pattern, $text, $result, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $start = $result[0][1];\n        $end = $start + strlen($result[0][0]);\n    }\n    return array($result[0][0], $start, $end);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = '';\n    while (preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE, $start)) {\n        $match = $matches[0][0];\n        $start = $matches[0][1];\n        $end = $start + strlen($match);\n        $result[] = array($match, $start, $end);\n        $start = $end;\n    }\n    return $result;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"/[a-z]{5}/\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n",
    "\t$matches = array();\n\t$start = 0;\n\t$end = 0;\n\t$match = \"\";\n\t$match_start = 0;\n\t$match_end = 0;\n\t$match_length = 0;\n\t$pattern_length = strlen($pattern);\n\t$text_length = strlen($text);\n\t$i = 0;\n\t$j = 0;\n\twhile ($i < $text_length) {\n\t\tif ($text[$i] == $pattern[$j]) {\n\t\t\tif ($j == 0) {\n\t\t\t\t$match_start = $i;\n\t\t\t}\n\t\t\t$match .= $text[$i];\n\t\t\t$j++;\n\t\t\tif ($j == $pattern_length) {\n\t\t\t\t$match_end = $i;\n\t\t\t\t$match_length = $match_end - $match_start + 1;\n\t\t\t\t$matches[] = array($match, $match_start, $match_end);\n\t\t\t\t$match = \"\";\n\t\t\t\t$j = 0;\n\t\t\t}\n\t\t} else {\n\t\t\t$match = \"\";\n\t\t\t$j = 0;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $matches;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    } else {\n        return array(null, null, null);\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return array(null, null, null);\n}\n",
    "    $matches = array();\n    $match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match_count === false) {\n        return false;\n    }\n    $result = array();\n    for ($i = 0; $i < $match_count; $i++) {\n        $result[] = array(\n            'match' => $matches[0][$i][0],\n            'start' => $matches[0][$i][1],\n            'end' => $matches[0][$i][1] + strlen($matches[0][$i][0]) - 1\n        );\n    }\n    return $result;\n}\n\n$text = 'This is a test. This is only a test.';\n$pattern = '/is/';\n$matches = find_literals($text, $pattern);\nif ($matches === false) {\n    echo 'Error: invalid pattern.';\n} else {\n    foreach ($matches as $match) {\n        echo \"Match: {$match['match']}, start: {$match['start']}, end: {$match['end']}\\n\";\n    }\n}",
    "    $result = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($result === 1) {\n        return [$matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0])];\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\n\necho '<pre>';\nprint_r($result);\necho '</pre>';\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    } else {\n        return array(false, false, false);\n    }\n}\n",
    "    $result = array();\n    $matches = array();\n    $match_count = preg_match_all($pattern, $text, $matches);\n    for ($i = 0; $i < $match_count; $i++) {\n        $result[] = array(\n            'match' => $matches[0][$i],\n            'start' => $matches[1][$i],\n            'end' => $matches[2][$i]\n        );\n    }\n    return $result;\n}\n",
    "    $result = [];\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    $match_start = 0;\n    $match_end = 0;\n    for ($i = 0; $i < $text_length; $i++) {\n        $match_start = $i;\n        for ($j = 0; $j < $pattern_length; $j++) {\n            if ($text[$i + $j] != $pattern[$j]) {\n                break;\n            }\n            $match_end = $i + $j;\n        }\n        if ($match_end - $match_start == $pattern_length - 1) {\n            $result[] = [\n                'match' => substr($text, $match_start, $pattern_length),\n                'start' => $match_start,\n                'end' => $match_end\n            ];\n        }\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "\t$matches = array();\n\t$match = preg_match($pattern, $text, $matches);\n\tif ($match) {\n\t\treturn array(\n\t\t\t\"match\" => $matches[0],\n\t\t\t\"start\" => strpos($text, $matches[0]),\n\t\t\t\"end\" => strpos($text, $matches[0]) + strlen($matches[0])\n\t\t);\n\t}\n\treturn false;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"/fox/\";\n$result = find_literals($text, $pattern);\necho \"The pattern '$pattern' was found in the string '$text' at index \" . $result[\"start\"] . \" and ends at index \" . $result[\"end\"] . \".\";\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $i = 0;\n    while ($i < strlen($text)) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $j = 0;\n            while ($j < strlen($pattern)) {\n                if ($text[$i] == $pattern[$j]) {\n                    $match .= $text[$i];\n                    $i++;\n                    $j++;\n                } else {\n                    $match = \"\";\n                    $i = $start + 1;\n                    break;\n                }\n            }\n            if ($match == $pattern) {\n                $end = $i - 1;\n                $matches[] = array($match, $start, $end);\n                $match = \"\";\n            }\n        } else {\n            $i++;\n        }\n    }\n    return $matches;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return null;\n}\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    } else {\n        return array(null, null, null);\n    }\n}\n",
    "    $matches = array();\n    $match = array();\n    $start = 0;\n    $end = 0;\n    $length = 0;\n    $result = array();\n    $result['match'] = '';\n    $result['start'] = 0;\n    $result['end'] = 0;\n    $result['length'] = 0;\n    $result['matches'] = array();\n    $result['count'] = 0;\n    $result['pattern'] = $pattern;\n    $result['text'] = $text;\n    $result['error'] = '';\n    $result['error_code'] = 0;\n    $result['error_message'] = '';\n    $result['error_details'] = '';\n    $result['error_line'] = 0;\n    $result['error_column'] = 0;\n    $result['error_offset'] = 0;\n    $result['error_cursor'] = '';\n    $result['error_cursor_before'] = '';\n    $result['error_cursor_after'] = '';\n    $result['error_cursor_line'] = '';\n    $result['error_cursor_column'] = '';\n    $result['error_cursor_offset'] = '';\n    $result['error_cursor_length'] = '';\n    $result['error_cursor_before_length'] = '';\n    $result['error_cursor_after_length'] = '';\n    $result['error_cursor_line_length'] = '';\n    $result['error_cursor_column_length'] = '';\n    $result['error_cursor_offset_length'] = '';\n    $result['error_cursor_before_lines'] = '';\n    $result['error_cursor_after_lines'] = '';\n    $result['error_cursor_line_lines'] = '';\n    $result['error_cursor_column_lines'] = '';\n    $result['error_cursor_offset_lines'] = '';\n    $result['error_cursor_before_lines_length'] = '';\n    $result['error_cursor_after_",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $len = strlen($text);\n    $i = 0;\n    while ($i < $len) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i;\n            $match = $text[$i];\n            $j = 1;\n            $k = $i + 1;\n            while ($j < strlen($pattern) && $k < $len) {\n                if ($text[$k] == $pattern[$j]) {\n                    $match .= $text[$k];\n                    $j++;\n                    $k++;\n                    $end++;\n                } else {\n                    break;\n                }\n            }\n            if ($j == strlen($pattern)) {\n                $matches[] = array($match, $start, $end);\n            }\n        }\n        $i++;\n    }\n    return $matches;\n}\n\n$text = \"This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => $matches[1],\n            'end' => $matches[2]\n        );\n    } else {\n        return false;\n    }\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\necho \"The pattern '$pattern' was found in the string '$text' at index {$result['start']} and ends at index {$result['end']}.\\n\";\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/slow/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"The pattern '$pattern' was found in the string '$text' at index {$result['start']} and ends at index {$result['end']}.\\n\";\n} else {\n    echo \"The pattern '$pattern' was not found in the string '$text'.\\n\";\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = [];\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $A = 0;\n    $B = 0;\n    $C = 0;\n    $D = 0;\n    $E = 0;\n    $F = 0;\n    $G = 0;\n    $H = 0;\n    $I = 0;\n    $J = 0;\n    $K = 0;\n    $L = 0;\n    $M = 0;\n    $N = 0;\n    $O = 0;\n    $P = 0;\n    $Q = 0;\n    $R = 0;\n    $S = 0;\n    $T = 0;\n    $U = 0;\n    $V = 0;\n    $W = 0;\n    $X = 0;\n    $Y = 0;\n    $Z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        $match = '';\n        for ($j = 0; $j < $pattern_length; $j++) {\n            if ($text[$i + $j] == $pattern[$j]) {\n                $match .= $text[$i + $j];\n            } else {\n                break;\n            }\n        }\n        if ($match == $pattern) {\n            $start = $i;\n            $end = $i + $pattern_length;\n            $result[] = array('match' => $match, 'start' => $start, 'end' => $end);\n        }\n    }\n    return $result;\n}\n\n$text = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc sed lorem ac nisi dignissim accumsan. Nullam sit amet interdum magna. Morbi quis faucibus nisi. Vestibulum mollis purus quis eros adipiscing tristique. Proin posuere semper tellus, id placerat augue dapibus ornare. Aenean leo metus, tempus in nisl eget, accumsan interdum dui. Pellentesque sollicitudin volutpat ullamcorper.';\n$pattern = 'amet';\n$result = find_literals($text, $pattern);\n\nforeach ($result as $value) {\n    echo '<pre>';\n    print_r($value);\n    echo '</pre>';\n}",
    "    $result = array();\n    $matches = array();\n    $start = 0;\n    $end = 0;\n\n    while (preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE, $start)) {\n        $result[] = $matches[0][0];\n        $start = $matches[0][1] + strlen($matches[0][0]);\n        $end = $start + strlen($matches[0][0]);\n    }\n\n    return array($result, $start, $end);\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"/[a-z]+/\";\n\nlist($result, $start, $end) = find_literals($text, $pattern);\n\nprint_r($result);\necho \"Start: $start, End: $end\\n\";",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]/';\n$result = find",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'substring' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$match = find_literals($text, $pattern);\necho $match['substring'] . '<br>';\necho $match['start'] . '<br>';\necho $match['end'] . '<br>';\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches);\n  if ($match) {\n    return array(\n      'match' => $matches[0],\n      'start' => strpos($text, $matches[0]),\n      'end' => strpos($text, $matches[0]) + strlen($matches[0])\n    );\n  }\n  return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = [];\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return [$matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0])];\n    }\n    return false;\n}\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches);\n  if ($match) {\n    return array(\n      'match' => $matches[0],\n      'start' => strpos($text, $matches[0]),\n      'end' => strpos($text, $matches[0]) + strlen($matches[0])\n    );\n  }\n  return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return $matches[0];\n    } else {\n        return false;\n    }\n}\n",
    "\t$matches = array();\n\t$match = array();\n\t$start = 0;\n\t$end = 0;\n\t$i = 0;\n\t$j = 0;\n\t$k = 0;\n\t$l = 0;\n\t$m = 0;\n\t$n = 0;\n\t$o = 0;\n\t$p = 0;\n\t$q = 0;\n\t$r = 0;\n\t$s = 0;\n\t$t = 0;\n\t$u = 0;\n\t$v = 0;\n\t$w = 0;\n\t$x = 0;\n\t$y = 0;\n\t$z = 0;\n\t$a = 0;\n\t$b = 0;\n\t$c = 0;\n\t$d = 0;\n\t$e = 0;\n\t$f = 0;\n\t$g = 0;\n\t$h = 0;\n\t$i = 0;\n\t$j = 0;\n\t$k = 0;\n\t$l = 0;\n\t$m = 0;\n\t$n = 0;\n\t$o = 0;\n\t$p = 0;\n\t$q = 0;\n\t$r = 0;\n\t$s = 0;\n\t$t = 0;\n\t$u = 0;\n\t$v = 0;\n\t$w = 0;\n\t$x = 0;\n\t$y = 0;\n\t$z = 0;\n\t$a = 0;\n\t$b = 0;\n\t$c = 0;\n\t$d = 0;\n\t$e = 0;\n\t$f = 0;\n\t$g = 0;\n\t$h = 0;\n\t$i = 0;\n\t$j = 0;\n\t$k = 0;\n\t$l = 0;\n\t$m = 0;\n\t$n = 0;\n\t$o = 0;\n\t$p = 0;\n\t$q = 0;\n\t$r = 0;\n\t$s = 0;\n\t$t = 0;\n\t$u = 0;\n\t$v = 0;\n\t$w = 0;\n\t$x = 0;\n\t$y = 0;",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\necho \"Matching '$pattern' in '$text':\\n\";\necho \"  Match: {$result['match']}\\n\";\necho \"  Start: {$result['start']}\\n\";\necho \"  End: {$result['end']}\\n\";\n\n$pattern = '/slow/';\n$result = find_literals($text, $pattern);\necho \"Matching '$pattern' in '$text':\\n\";\nif ($result) {\n    echo \"  Match: {$result['match']}\\n\";\n    echo \"  Start: {$result['start']}\\n\";\n    echo \"  End: {$result['end']}\\n\";\n} else {\n    echo \"  No match found.\\n\";\n}",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $found = false;\n    $pattern_length = strlen($pattern);\n    for ($i = 0; $i < strlen($text); $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i + $pattern_length;\n            $match = substr($text, $start, $pattern_length);\n            if ($match == $pattern) {\n                $found = true;\n                break;\n            }\n        }\n    }\n    if ($found) {\n        $result['match'] = $match;\n        $result['start'] = $start;\n        $result['end'] = $end;\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => $matches[1],\n            'end' => $matches[2]\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$match = find_literals($text, $pattern);\necho $match['match'];\necho $match['start'];\necho $match['end'];\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = preg_match($pattern, $text, $result, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $start = $result[0][1];\n        $end = $start + strlen($result[0][0]);\n    }\n    return array($result[0][0], $start, $end);\n}\n\n$text = \"This is a test\";\n$pattern = \"/test/\";\nlist($match, $start, $end) = find_literals($text, $pattern);\necho \"Match: $match, start: $start, end: $end\\n\";\n\n$text = \"This is a test\";\n$pattern = \"/[a-z]+/\";\nlist($match, $start, $end) = find_literals($text, $pattern);\necho \"Match: $match, start: $start, end: $end\\n\";\n\n$text = \"This is a test\";\n$pattern = \"/[a-z]+/\";\nlist($match, $start, $end) = find_literals($text, $pattern);\necho \"Match: $match, start: $start, end: $end\\n\";\n\n$text = \"This is a test\";\n$pattern = \"/[a-z]+/\";\nlist($match, $start, $end) = find_literals($text, $pattern);\necho \"Match: $match, start: $start, end: $end\\n\";\n\n$text = \"This is a test\";\n$pattern = \"/[a-z]+/\";\nlist($match, $start, $end) = find_literals($text, $pattern);\necho \"Match: $match, start: $start, end: $end\\n\";\n\n$text = \"This is a test\";\n$pattern = \"/[a-z]+/\";\nlist($match, $start, $end) = find_literals($text, $pattern);\necho \"Match: $match, start: $start, end: $end\\n\";\n\n$text = \"This is a test\";\n$pattern = \"/[a-",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match === false) {\n        return false;\n    }\n    if ($match === 0) {\n        return null;\n    }\n    return array(\n        'match' => $matches[0][0],\n        'start' => $matches[0][1],\n        'end' => $matches[0][1] + strlen($matches[0][0])\n    );\n}\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $i = 0;\n    while ($i < strlen($text)) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $match = $text[$i];\n            $j = 1;\n            while ($j < strlen($pattern)) {\n                if ($text[$i + $j] == $pattern[$j]) {\n                    $match .= $text[$i + $j];\n                    $j++;\n                } else {\n                    break;\n                }\n            }\n            if ($match == $pattern) {\n                $end = $i + $j - 1;\n                $matches[] = array($match, $start, $end);\n            }\n        }\n        $i++;\n    }\n    return $matches;\n}\n\n$text = \"This is a test string. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It has a lot of text in it. It",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $found = array();\n    $start = 0;\n    $end = 0;\n    $match = preg_match($pattern, $text, $found, PREG_OFFSET_CAPTURE, $start);\n    if ($match) {\n        $start = $found[0][1];\n        $end = $start + strlen($found[0][0]);\n    }\n    return array($found, $start, $end);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'text' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo 'Match: ' . $result['match'] . \"\\n\";\n    echo 'Start: ' . $result['start'] . \"\\n\";\n    echo 'End: ' . $result['end'] . \"\\n\";\n}\n",
    "    $start = 0;\n    $end = 0;\n    $match = '';\n    $match_start = 0;\n    $match_end = 0;\n    $match_found = false;\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        $start = $i;\n        $end = $i + $pattern_length;\n        if ($end <= $text_length) {\n            $match = substr($text, $start, $pattern_length);\n            if ($match === $pattern) {\n                $match_found = true;\n                $match_start = $start;\n                $match_end = $end;\n                break;\n            }\n        }\n    }\n    if ($match_found) {\n        return [$match, $match_start, $match_end];\n    }\n    return false;\n}\n",
    "    $result = array();\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        $j = 0;\n        while ($j < $pattern_length && $text[$i + $j] == $pattern[$j]) {\n            $j++;\n        }\n        if ($j == $pattern_length) {\n            $result[] = array(\n                'match' => substr($text, $i, $j),\n                'start' => $i,\n                'end' => $i + $j - 1\n            );\n        }\n    }\n    return $result;\n}\n\n$text = 'This is a test string.';\n$pattern = 'is';\n$result = find_literals($text, $pattern);\nvar_dump($result);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"/quick/\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5}/\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5,}/\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5,7}/\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5,7}?/\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5,7}?/\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5,7}?/\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5,7}?/\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5,7}?/\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5,7}?/\";\n$result = find_literals($text, $pattern);\nprint_r",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $found = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($found) {\n        $match = $matches[0][0];\n        $start = $matches[0][1];\n        $end = $start + strlen($match);\n    }\n    $result['match'] = $match;\n    $result['start'] = $start;\n    $result['end'] = $end;\n    return $result;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$pattern = '/fox/';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$pattern = '/dog/';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$pattern = '/cat/';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$pattern = '/The/';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$pattern = '/the/';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$pattern = '/the/i';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$pattern = '/the/m';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho",
    "    $result = [];\n    $start = 0;\n    $end = 0;\n    $length = strlen($text);\n    while ($start < $length) {\n        $end = strpos($text, $pattern, $start);\n        if ($end === false) {\n            break;\n        }\n        $result[] = substr($text, $start, $end - $start);\n        $start = $end + 1;\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $match_start = 0;\n    $match_end = 0;\n    $match_found = false;\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        $match_found = false;\n        $match = \"\";\n        $match_start = $i;\n        for ($j = 0; $j < $pattern_length; $j++) {\n            if ($text[$i + $j] == $pattern[$j]) {\n                $match .= $text[$i + $j];\n                $match_end = $i + $j;\n                $match_found = true;\n            } else {\n                $match_found = false;\n                break;\n            }\n        }\n        if ($match_found) {\n            $matches[] = $match;\n            $start = $match_start;\n            $end = $match_end;\n        }\n    }\n    return array($matches, $start, $end);\n}\n\n$text = \"This is a test string\";\n$pattern = \"test\";\nlist($matches, $start, $end) = find_literals($text, $pattern);\necho \"Matches: \" . implode(\", \", $matches) . \"\\n\";\necho \"Start: \" . $start . \"\\n\";\necho \"End: \" . $end . \"\\n\";\n",
    "    $matches = [];\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            for ($j = 0; $j < $pattern_length; $j++) {\n                if ($text[$i + $j] == $pattern[$j]) {\n                    $match .= $text[$i + $j];\n                    $end = $i + $j;\n                } else {\n                    $match = '';\n                    break;\n                }\n            }\n            if ($match == $pattern) {\n                $matches[] = [\n                    'match' => $match,\n                    'start' => $start,\n                    'end' => $end\n                ];\n            }\n        }\n    }\n    return $matches;\n}\n\n$text = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla quis lorem ut libero malesuada feugiat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec rutrum congue leo eget malesuada.';\n$pattern = 'Lorem';\n\n$matches = find_literals($text, $pattern);\n\nforeach ($matches as $match) {\n    echo \"Match: {$match['match']}<br>\";\n    echo \"Start: {$match['start']}<br>\";\n    echo \"End: {$match['end']}<br>\";\n    echo \"<br>\";\n}",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$pattern = '/[A-Z]/';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$pattern = '/[A-Z]/';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$pattern = '/[A-Z]/';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$pattern = '/[A-Z]/';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$pattern = '/[A-Z]/';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$pattern = '/[A-Z]/';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\n$pattern = '/[A-Z]/';\n$result = find_literals($text, $pattern);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n",
    "    $matches = [];\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return [\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        ];\n    } else {\n        return null;\n    }\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $found = false;\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i + $pattern_length - 1;\n            if ($end < $text_length) {\n                for ($j = 1; $j < $pattern_length; $j++) {\n                    if ($text[$i + $j] != $pattern[$j]) {\n                        break;\n                    }\n                }\n                if ($j == $pattern_length) {\n                    $found = true;\n                    break;\n                }\n            }\n        }\n    }\n    if ($found) {\n        $result['substring'] = substr($text, $start, $pattern_length);\n        $result['start'] = $start;\n        $result['end'] = $end;\n    }\n    return $result;\n}\n\n$text = \"This is a test string\";\n$pattern = \"test\";\n$result = find_literals($text, $pattern);\necho \"Text: $text\\n\";\necho \"Pattern: $pattern\\n\";\necho \"Substring: {$result['substring']}\\n\";\necho \"Start: {$result['start']}\\n\";\necho \"End: {$result['end']}\\n\";",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    } else {\n        return array(null, null, null);\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n\n$text = 'This is a test string.';\n$pattern = '/test/';\n$result = find_literals($text, $pattern);\necho \"Matching substring: {$result['match']}\\n\";\necho \"Start index: {$result['start']}\\n\";\necho \"End index: {$result['end']}\\n\";\n",
    "\t$result = array();\n\t$start = 0;\n\t$end = 0;\n\t$match = \"\";\n\t$match_start = 0;\n\t$match_end = 0;\n\t$match_found = false;\n\t$pattern_length = strlen($pattern);\n\t$text_length = strlen($text);\n\tfor ($i = 0; $i < $text_length; $i++) {\n\t\tif ($text[$i] == $pattern[$start]) {\n\t\t\tif ($start == 0) {\n\t\t\t\t$match_start = $i;\n\t\t\t}\n\t\t\t$start++;\n\t\t\t$match .= $text[$i];\n\t\t\tif ($start == $pattern_length) {\n\t\t\t\t$match_end = $i;\n\t\t\t\t$match_found = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\t$start = 0;\n\t\t\t$match = \"\";\n\t\t}\n\t}\n\tif ($match_found) {\n\t\t$result[\"match\"] = $match;\n\t\t$result[\"start\"] = $match_start;\n\t\t$result[\"end\"] = $match_end;\n\t}\n\treturn $result;\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $len = strlen($text);\n    $i = 0;\n    while ($i < $len) {\n        $start = strpos($text, $pattern, $i);\n        if ($start === false) {\n            break;\n        }\n        $end = $start + strlen($pattern);\n        $result[] = array(\n            'substring' => substr($text, $start, $end - $start),\n            'start' => $start,\n            'end' => $end\n        );\n        $i = $end;\n    }\n    return $result;\n}\n\n$text = 'This is a test. This is a programming test. This is a programming test in any language.';\n$pattern = 'test';\n$result = find_literals($text, $pattern);\nprint_r($result);",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return null;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array($matches[0], $matches[1], $matches[2]);\n    }\n    return false;\n}\n",
    "\t$matches = array();\n\t$match = preg_match($pattern, $text, $matches);\n\tif ($match) {\n\t\treturn array(\n\t\t\t'match' => $matches[0],\n\t\t\t'start' => strpos($text, $matches[0]),\n\t\t\t'end' => strpos($text, $matches[0]) + strlen($matches[0])\n\t\t);\n\t}\n\treturn null;\n}\n",
    "\t$matches = array();\n\t$match = preg_match($pattern, $text, $matches);\n\tif ($match) {\n\t\treturn $matches[0];\n\t}\n\treturn false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$match = find_literals($text, $pattern);\necho $match['match'] . '<br>';\necho $match['start'] . '<br>';\necho $match['end'] . '<br>';\n",
    "    $match = array();\n    $match['text'] = '';\n    $match['start'] = -1;\n    $match['end'] = -1;\n    $match['length'] = 0;\n    $match['pattern'] = $pattern;\n    $match['text'] = $text;\n    $match['start'] = strpos($text, $pattern);\n    if ($match['start'] !== false) {\n        $match['end'] = $match['start'] + strlen($pattern);\n        $match['length'] = strlen($pattern);\n    }\n    return $match;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return null;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"/quick/\";\n$result = find_literals($text, $pattern);\necho \"The pattern '$pattern' was found in the text '$text' from index \" . $result['start'] . \" to index \" . $result['end'] . \".\";\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$match = find_literals($text, $pattern);\nprint_r($match);\n\n$pattern = '/[a-z]/';\n$match = find_literals($text, $pattern);\nprint_r($match);\n\n$pattern = '/[a-z]+/';\n$match = find_literals($text, $pattern);\nprint_r($match);\n\n$pattern = '/[a-z]{3}/';\n$match = find_literals($text, $pattern);\nprint_r($match);\n\n$pattern = '/[a-z]{3,5}/';\n$match = find_literals($text, $pattern);\nprint_r($match);\n\n$pattern = '/[a-z]{3,}/';\n$match = find_literals($text, $pattern);\nprint_r($match);\n\n$pattern = '/[a-z]{,5}/';\n$match = find_literals($text, $pattern);\nprint_r($match);\n\n$pattern = '/[a-z]{3,5}?/';\n$match = find_literals($text, $pattern);\nprint_r($match);\n\n$pattern = '/[a-z]{3,5}+/';\n$match = find_literals($text, $pattern);\nprint_r($match);\n\n$pattern = '/[a-z]{3,5}*/';\n$match = find_literals($text, $pattern);\nprint_r($match);\n\n$pattern = '/[a-z]{3,5}/';\n$",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $matching_substring = $matches[0][0];\n        $start_index = $matches[0][1];\n        $end_index = $start_index + strlen($matching_substring);\n        return array($matching_substring, $start_index, $end_index);\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = '/quick/';\n$match = find_literals($text, $pattern);\necho \"Match: {$match['match']}\\n\";\necho \"Start: {$match['start']}\\n\";\necho \"End: {$match['end']}\\n\";\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = '/The/';\n$match = find_literals($text, $pattern);\necho \"Match: {$match['match']}\\n\";\necho \"Start: {$match['start']}\\n\";\necho \"End: {$match['end']}\\n\";\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = '/dog/';\n$match = find_literals($text, $pattern);\necho \"Match: {$match['match']}\\n\";\necho \"Start: {$match['start']}\\n\";\necho \"End: {$match['end']}\\n\";\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = '/cat/';\n$match = find_literals($text, $pattern);\necho \"Match: {$match['match']}\\n\";\necho \"Start: {$match['start']}\\n\";\necho \"End: {$match['end']}\\n\";",
    "\t$result = array();\n\t$start = 0;\n\t$end = 0;\n\t$match = \"\";\n\t$len = strlen($text);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t$char = $text[$i];\n\t\tif ($char == $pattern[0]) {\n\t\t\t$start = $i;\n\t\t\t$match = $char;\n\t\t\t$end = $i;\n\t\t\tfor ($j = 1; $j < strlen($pattern); $j++) {\n\t\t\t\tif ($text[$i + $j] == $pattern[$j]) {\n\t\t\t\t\t$match .= $text[$i + $j];\n\t\t\t\t\t$end = $i + $j;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($match == $pattern) {\n\t\t\t\t$result[] = array($match, $start, $end);\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\n$text = \"This is a test string. It has a lot of words in it. It also has a lot of punctuation. This is a test string. It has a lot of words in it. It also has a lot of punctuation.\";\n$pattern = \"test\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $length = strlen($text);\n    $pattern_length = strlen($pattern);\n    for ($i = 0; $i < $length; $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i + $pattern_length;\n            $match = true;\n            for ($j = 0; $j < $pattern_length; $j++) {\n                if ($text[$i + $j] != $pattern[$j]) {\n                    $match = false;\n                    break;\n                }\n            }\n            if ($match) {\n                $result[] = array(\n                    'start' => $start,\n                    'end' => $end,\n                    'match' => substr($text, $start, $end - $start)\n                );\n            }\n        }\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $match_text = $matches[0][0];\n        $match_start = $matches[0][1];\n        $match_end = $match_start + strlen($match_text);\n        return array($match_text, $match_start, $match_end);\n    }\n    return false;\n}\n",
    "    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $match_found = false;\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i + $pattern_length;\n            $match = substr($text, $start, $pattern_length);\n            if ($match == $pattern) {\n                $match_found = true;\n                break;\n            }\n        }\n    }\n    if ($match_found) {\n        return array($match, $start, $end);\n    } else {\n        return false;\n    }\n}\n",
    "\t$matches = array();\n\t$match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n\tif ($match) {\n\t\treturn array(\n\t\t\t\"match\" => $matches[0][0],\n\t\t\t\"start\" => $matches[0][1],\n\t\t\t\"end\" => $matches[0][1] + strlen($matches[0][0])\n\t\t);\n\t}\n\treturn false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n\n$text = 'This is a test';\n$pattern = '/\\bis\\b/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found '{$result['match']}' at {$result['start']} to {$result['end']}\";\n} else {\n    echo 'Not found';\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        $start = strpos($text, $matches[0]);\n        $end = $start + strlen($matches[0]);\n        return array($matches[0], $start, $end);\n    }\n    return false;\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    while(($start = strpos($text, $pattern, $start)) !== false) {\n        $end = $start + strlen($pattern);\n        $result[] = array(\n            'match' => substr($text, $start, $end - $start),\n            'start' => $start,\n            'end' => $end\n        );\n        $start = $end;\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $matches = array();\n    $match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match_count > 0) {\n        for ($i = 0; $i < $match_count; $i++) {\n            $result[] = array(\n                'match' => $matches[0][$i][0],\n                'start' => $matches[0][$i][1],\n                'end' => $matches[0][$i][1] + strlen($matches[0][$i][0]) - 1\n            );\n        }\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text = 'This is a test';\n$pattern = '/is/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$text =",
    "\t$result = array();\n\t$offset = 0;\n\t$length = strlen($text);\n\twhile ($offset < $length) {\n\t\t$match = array();\n\t\tif (preg_match($pattern, $text, $match, PREG_OFFSET_CAPTURE, $offset)) {\n\t\t\t$result[] = array(\n\t\t\t\t'start' => $match[0][1],\n\t\t\t\t'end' => $match[0][1] + strlen($match[0][0]),\n\t\t\t\t'text' => $match[0][0]\n\t\t\t);\n\t\t\t$offset = $match[0][1] + strlen($match[0][0]);\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = array();\n    while (preg_match($pattern, $text, $match, PREG_OFFSET_CAPTURE, $start)) {\n        $result[] = $match[0][0];\n        $start = $match[0][1] + strlen($match[0][0]);\n    }\n    return $result;\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"/[a-z]+/\";\n$result = find_literals($text, $pattern);\nprint_r($result);",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $result = [];\n    $matches = [];\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $result['match'] = $matches[0][0];\n        $result['start'] = $matches[0][1];\n        $result['end'] = $matches[0][1] + strlen($matches[0][0]);\n    }\n    return $result;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"/quick/\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5}/\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5}/i\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5}/i\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5}/i\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5}/i\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5}/i\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5}/i\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5}/i\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/[a-z]{5}/i\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"/",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches);\n  if ($match) {\n    return array(\n      'match' => $matches[0],\n      'start' => strpos($text, $matches[0]),\n      'end' => strpos($text, $matches[0]) + strlen($matches[0])\n    );\n  }\n  return false;\n}\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $found = false;\n    for ($i = 0; $i < strlen($text); $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i;\n            $match = \"\";\n            $found = true;\n            for ($j = 0; $j < strlen($pattern); $j++) {\n                if ($text[$i] == $pattern[$j]) {\n                    $match .= $text[$i];\n                    $end++;\n                    $i++;\n                } else {\n                    $found = false;\n                    break;\n                }\n            }\n            if ($found) {\n                $matches[] = array(\"match\" => $match, \"start\" => $start, \"end\" => $end);\n            }\n        }\n    }\n    return $matches;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/fox/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "\t$matches = array();\n\t$match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n\tif ($match) {\n\t\t$match = $matches[0];\n\t\treturn array(\n\t\t\t'start' => $match[1],\n\t\t\t'end' => $match[1] + strlen($match[0]),\n\t\t\t'match' => $match[0]\n\t\t);\n\t}\n\treturn false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = array();\n    $start = 0;\n    $end = 0;\n    $i = 0;\n    while (preg_match($pattern, $text, $match, PREG_OFFSET_CAPTURE, $start)) {\n        $matches[$i]['match'] = $match[0][0];\n        $matches[$i]['start'] = $match[0][1];\n        $matches[$i]['end'] = $match[0][1] + strlen($match[0][0]) - 1;\n        $start = $match[0][1] + strlen($match[0][0]);\n        $i++;\n    }\n    return $matches;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"/[a-z]+/\";\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "  $result = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n  if ($result) {\n    return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n  }\n  return false;\n}\n",
    "\t$matches = array();\n\t$match = array();\n\t$start = 0;\n\t$end = 0;\n\t$match_start = 0;\n\t$match_end = 0;\n\t$match_text = \"\";\n\t$match_found = false;\n\t$pattern_length = strlen($pattern);\n\t$text_length = strlen($text);\n\tfor ($i = 0; $i < $text_length; $i++) {\n\t\t$match_found = false;\n\t\tif ($text[$i] == $pattern[0]) {\n\t\t\t$match_start = $i;\n\t\t\t$match_end = $i;\n\t\t\t$match_text = $text[$i];\n\t\t\tfor ($j = 1; $j < $pattern_length; $j++) {\n\t\t\t\tif ($text[$i+$j] == $pattern[$j]) {\n\t\t\t\t\t$match_end++;\n\t\t\t\t\t$match_text .= $text[$i+$j];\n\t\t\t\t\t$match_found = true;\n\t\t\t\t} else {\n\t\t\t\t\t$match_found = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($match_found) {\n\t\t\t\t$match = array(\"start\" => $match_start, \"end\" => $match_end, \"text\" => $match_text);\n\t\t\t\tarray_push($matches, $match);\n\t\t\t}\n\t\t}\n\t}\n\treturn $matches;\n}\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches);\n  if ($match) {\n    return $matches[0];\n  }\n  return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = array();\n    $i = 0;\n    while (preg_match($pattern, $text, $match, PREG_OFFSET_CAPTURE, $i)) {\n        $matches[] = $match[0];\n        $i = $match[0][1] + strlen($match[0][0]);\n    }\n    return $matches;\n}\n\n$text = \"This is a test. This is, too.\";\n$pattern = \"/is/\";\n$matches = find_literals($text, $pattern);\nprint_r($matches);",
    "    $result = array();\n    $start = 0;\n    while (true) {\n        $pos = strpos($text, $pattern, $start);\n        if ($pos === false) {\n            break;\n        }\n        $result[] = array(\n            'substring' => substr($text, $pos, strlen($pattern)),\n            'start' => $pos,\n            'end' => $pos + strlen($pattern) - 1\n        );\n        $start = $pos + strlen($pattern);\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        $match = '';\n        for ($j = 0; $j < $pattern_length; $j++) {\n            if ($text[$i + $j] === $pattern[$j]) {\n                $match .= $text[$i + $j];\n            } else {\n                break;\n            }\n        }\n        if ($match === $pattern) {\n            $start = $i;\n            $end = $i + $j - 1;\n            $result[] = array(\n                'match' => $match,\n                'start' => $start,\n                'end' => $end,\n            );\n        }\n    }\n    return $result;\n}\n\n$text = 'This is a test string. It is a test string. It is a test string.';\n$pattern = 'test';\n$result = find_literals($text, $pattern);\nprint_r($result);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return array(null, null, null);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$match = find_literals($text, $pattern);\necho \"Match: {$match['match']}\\n\";\necho \"Start: {$match['start']}\\n\";\necho \"End: {$match['end']}\\n\";\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return array(null, null, null);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return $matches[0];\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $match = [];\n    $result = preg_match($pattern, $text, $match);\n    if ($result) {\n        return $match[0];\n    } else {\n        return false;\n    }\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"/quick/\";\n$result = find_literals($text, $pattern);\necho $result;\n",
    "    $result = array();\n    $matches = array();\n    preg_match_all($pattern, $text, $matches);\n    foreach ($matches[0] as $match) {\n        $start = strpos($text, $match);\n        $end = $start + strlen($match);\n        $result[] = array(\n            'match' => $match,\n            'start' => $start,\n            'end' => $end\n        );\n    }\n    return $result;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/[a-z]{5}/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    } else {\n        return array(null, null, null);\n    }\n}\n",
    "    $start = strpos($text, $pattern);\n    $end = $start + strlen($pattern);\n    return array($start, $end);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return $matches[0];\n    } else {\n        return \"No match found.\";\n    }\n}\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches);\n  if ($match) {\n    return array(\n      'match' => $matches[0],\n      'start' => strpos($text, $matches[0]),\n      'end' => strpos($text, $matches[0]) + strlen($matches[0])\n    );\n  }\n  return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $matches = array();\n    preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    foreach ($matches[0] as $match) {\n        $result[] = array(\n            'match' => $match[0],\n            'start' => $match[1],\n            'end' => $match[1] + strlen($match[0])\n        );\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match_count === false) {\n        return false;\n    } else if ($match_count == 0) {\n        return array();\n    } else {\n        return $matches[0];\n    }\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = \"/quick|fox/\";\n$matches = find_literals($text, $pattern);\nprint_r($matches);",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return array(null, null, null);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            \"match\" => $matches[0][0],\n            \"start\" => $matches[0][1],\n            \"end\" => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"/quick/\";\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found '{$result['match']}' at {$result['start']} to {$result['end']}.\";\n} else {\n    echo \"No match found.\";\n}",
    "    $result = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($result) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return array(null, null, null);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]) - 1);\n    }\n    return null;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = \"\";\n    $len = strlen($text);\n    $i = 0;\n    while ($i < $len) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $j = 0;\n            while ($j < strlen($pattern)) {\n                if ($text[$i] == $pattern[$j]) {\n                    $match .= $text[$i];\n                    $i++;\n                    $j++;\n                } else {\n                    $match = \"\";\n                    $i = $start + 1;\n                    break;\n                }\n            }\n            if ($match == $pattern) {\n                $end = $i - 1;\n                $matches[] = array($match, $start, $end);\n                $match = \"\";\n            }\n        } else {\n            $i++;\n        }\n    }\n    return $matches;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"fox\";\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"dog\";\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"The\";\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"The quick brown fox jumps over the lazy dog.\";\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"The quick brown fox jumps over the lazy dog\";\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return $matches[0];\n    }\n    return null;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n",
    "\t$result = array();\n\t$matches = array();\n\t$match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n\tif ($match_count > 0) {\n\t\tfor ($i = 0; $i < $match_count; $i++) {\n\t\t\t$result[] = array(\n\t\t\t\t'substring' => $matches[0][$i][0],\n\t\t\t\t'start' => $matches[0][$i][1],\n\t\t\t\t'end' => $matches[0][$i][1] + strlen($matches[0][$i][0])\n\t\t\t);\n\t\t}\n\t}\n\treturn $result;\n}\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches);\n  if ($match) {\n    return array(\n      'match' => $matches[0],\n      'start' => strpos($text, $matches[0]),\n      'end' => strpos($text, $matches[0]) + strlen($matches[0])\n    );\n  }\n  return false;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"/quick/\";\n$match = find_literals($text, $pattern);\necho $match['match'] . \"\\n\";\necho $match['start'] . \"\\n\";\necho $match['end'] . \"\\n\";\n\n$pattern = \"/slow/\";\n$match = find_literals($text, $pattern);\necho $match . \"\\n\";\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $len = strlen($text);\n    $i = 0;\n    while ($i < $len) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i;\n            $j = 0;\n            while ($j < strlen($pattern) && $i < $len) {\n                if ($text[$i] == $pattern[$j]) {\n                    $end = $i;\n                    $i++;\n                    $j++;\n                } else {\n                    break;\n                }\n            }\n            if ($j == strlen($pattern)) {\n                $result[] = array($start, $end);\n            }\n        }\n        $i++;\n    }\n    return $result;\n}\n\n$text = \"The quick brown fox jumps over the lazy dog.\";\n$pattern = \"fox\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"the\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"dog\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"cat\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"The\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"the\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"The\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"The\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"The\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = \"The\";\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]) - 1);\n    }\n    return false;\n}\n",
    "    $matches = [];\n    $match = preg_match($pattern, $text, $matches);\n    if ($match === false) {\n        throw new Exception(preg_last_error_msg());\n    }\n    if ($match === 0) {\n        return null;\n    }\n    $start = strpos($text, $matches[0]);\n    $end = $start + strlen($matches[0]);\n    return [$matches[0], $start, $end];\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\n$pattern = '/quick/';\n$match = find_literals($text, $pattern);\necho \"Found '{$match['match']}' at {$match['start']} to {$match['end']}\\n\";\n\n$pattern = '/slow/';\n$match = find_literals($text, $pattern);\nif ($match === false) {\n    echo \"No match found\\n\";\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return $matches[0];\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $len = strlen($text);\n    $i = 0;\n    while ($i < $len) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i;\n            $j = 1;\n            while ($j < strlen($pattern) && $i + $j < $len) {\n                if ($text[$i + $j] == $pattern[$j]) {\n                    $end = $i + $j;\n                    $j++;\n                } else {\n                    break;\n                }\n            }\n            if ($j == strlen($pattern)) {\n                $result[] = array($start, $end);\n            }\n        }\n        $i++;\n    }\n    return $result;\n}\n\n$text = \"Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello world",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "  $result = array();\n  $start = 0;\n  $end = 0;\n  $match = \"\";\n  $pattern_length = strlen($pattern);\n  $text_length = strlen($text);\n  for ($i = 0; $i < $text_length; $i++) {\n    if ($text[$i] == $pattern[0]) {\n      $start = $i;\n      $end = $i + $pattern_length;\n      $match = substr($text, $start, $pattern_length);\n      if ($match == $pattern) {\n        $result[] = array($match, $start, $end);\n      }\n    }\n  }\n  return $result;\n}\n",
    "    $result = array();\n    $matches = array();\n    $match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    for ($i = 0; $i < $match_count; $i++) {\n        $result[] = array(\n            'match' => $matches[0][$i][0],\n            'start' => $matches[0][$i][1],\n            'end' => $matches[0][$i][1] + strlen($matches[0][$i][0])\n        );\n    }\n    return $result;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/[a-z]{5}/';\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($result) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "    $result = array();\n    $matches = array();\n    $match_count = preg_match_all($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match_count > 0) {\n        foreach ($matches[0] as $match) {\n            $result[] = array(\n                'match' => $match[0],\n                'start' => $match[1],\n                'end' => $match[1] + strlen($match[0])\n            );\n        }\n    }\n    return $result;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/[a-z]{5}/';\n$matches = find_literals($text, $pattern);\nprint_r($matches);\n",
    "    $matches = [];\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $pattern_length = strlen($pattern);\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++) {\n        if ($text[$i] === $pattern[0]) {\n            $start = $i;\n            $end = $i + $pattern_length - 1;\n            $match = substr($text, $start, $pattern_length);\n            if ($match === $pattern) {\n                $matches[] = [\n                    'match' => $match,\n                    'start' => $start,\n                    'end' => $end\n                ];\n            }\n        }\n    }\n    return $matches;\n}\n",
    "    $matches = array();\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $found = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($found) {\n        $match = $matches[0][0];\n        $start = $matches[0][1];\n        $end = $start + strlen($match);\n    }\n    return array($match, $start, $end);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return false;\n}\n",
    "    $result = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($result) {\n        return [$matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0])];\n    } else {\n        return false;\n    }\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = preg_match($pattern, $text, $result, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $start = $result[0][1];\n        $end = $start + strlen($result[0][0]);\n    }\n    return array($result[0][0], $start, $end);\n}\n\n$text = 'This is a test';\n$pattern = '/is/';\nlist($match, $start, $end) = find_literals($text, $pattern);\necho \"Match: $match, Start: $start, End: $end\\n\";\n\n$pattern = '/is/i';\nlist($match, $start, $end) = find_literals($text, $pattern);\necho \"Match: $match, Start: $start, End: $end\\n\";\n\n$pattern = '/is/m';\nlist($match, $start, $end) = find_literals($text, $pattern);\necho \"Match: $match, Start: $start, End: $end\\n\";\n\n$pattern = '/is/im';\nlist($match, $start, $end) = find_literals($text, $pattern);\necho \"Match: $match, Start: $start, End: $end\\n\";\n\n$pattern = '/is/g';\nlist($match, $start, $end) = find_literals($text, $pattern);\necho \"Match: $match, Start: $start, End: $end\\n\";\n\n$pattern = '/is/gm';\nlist($match, $start, $end) = find_literals($text, $pattern);\necho \"Match: $match, Start: $start, End: $end\\n\";\n\n$pattern = '/is/ig';\nlist($match, $start, $end) = find_literals($text, $pattern);\necho \"Match: $match, Start: $start, End: $end\\n\";\n\n$pattern = '/is/img';\nlist($match, $start, $end) = find_literals($text, $pattern);",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches);\n  if ($match) {\n    return array(\n      'match' => $matches[0],\n      'start' => strpos($text, $matches[0]),\n      'end' => strpos($text, $matches[0]) + strlen($matches[0])\n    );\n  }\n  return false;\n}\n",
    "  $matches = array();\n  $match = preg_match($pattern, $text, $matches);\n  if ($match) {\n    return array(\n      'match' => $matches[0],\n      'start' => strpos($text, $matches[0]),\n      'end' => strpos($text, $matches[0]) + strlen($matches[0])\n    );\n  }\n  return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    } else {\n        return false;\n    }\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/slow/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n\n$text = 'This is a test';\n$pattern = '/is/';\n$match = find_literals($text, $pattern);\nprint_r($match);\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return false;\n}\n",
    "    $match = array();\n    preg_match($pattern, $text, $match);\n    return $match;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$match = find_literals($text, $pattern);\necho \"Match: {$match['match']}\\n\";\necho \"Start: {$match['start']}\\n\";\necho \"End: {$match['end']}\\n\";\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/^The/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/dog\\.$/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-z]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[A-Z]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[0-9]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[a-zA-Z0-9]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[^a-zA-Z0-9]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[^a-zA-Z0-9]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[^a-zA-Z0-9]/';\n$result = find_literals($text, $pattern);\nprint_r($result);\n\n$pattern = '/[^a-zA-Z0-9]/';\n$result = find_literals($text,",
    "    $matches = [];\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return [\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0]) - 1\n        ];\n    }\n    return null;\n}\n",
    "\t$matches = array();\n\t$match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n\tif ($match) {\n\t\treturn array(\n\t\t\t'match' => $matches[0][0],\n\t\t\t'start' => $matches[0][1],\n\t\t\t'end' => $matches[0][1] + strlen($matches[0][0])\n\t\t);\n\t}\n\treturn false;\n}\n"
  ]
}