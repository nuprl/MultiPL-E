{
  "name": "mbpp_607_find_literals",
  "language": "php",
  "prompt": "<?php\n// Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfunction find_literals($text, $pattern) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return find_literals(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\") !== array(\"fox\", 16, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Its been a very crazy procedure right\", \"crazy\") !== array(\"crazy\", 16, 21)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hardest choices required strongest will\", \"will\") !== array(\"will\", 35, 39)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($result) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $start = 0;\n    while (true) {\n        $pos = strpos($text, $pattern, $start);\n        if ($pos === false) {\n            break;\n        }\n        $result[] = array(\n            'start' => $pos,\n            'end' => $pos + strlen($pattern) - 1,\n            'text' => $pattern,\n        );\n        $start = $pos + 1;\n    }\n    return $result;\n}\n",
    "    $result = array();\n    $start = 0;\n    while (true) {\n        $pos = strpos($text, $pattern, $start);\n        if ($pos === false) {\n            break;\n        }\n        $result[] = array(\n            'substring' => $pattern,\n            'start' => $pos,\n            'end' => $pos + strlen($pattern) - 1\n        );\n        $start = $pos + 1;\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches);\n    if ($match) {\n        return array(\n            'match' => $matches[0],\n            'start' => strpos($text, $matches[0]),\n            'end' => strpos($text, $matches[0]) + strlen($matches[0])\n        );\n    } else {\n        return false;\n    }\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\necho \"Text: $text\\n\";\necho \"Pattern: $pattern\\n\";\necho \"Match: {$result['match']}\\n\";\necho \"Start: {$result['start']}\\n\";\necho \"End: {$result['end']}\\n\";\n\n$pattern = '/slow/';\n$result = find_literals($text, $pattern);\necho \"Text: $text\\n\";\necho \"Pattern: $pattern\\n\";\nif ($result) {\n    echo \"Match: {$result['match']}\\n\";\n    echo \"Start: {$result['start']}\\n\";\n    echo \"End: {$result['end']}\\n\";\n} else {\n    echo \"No match found.\\n\";\n}",
    "    $matches = [];\n    $start = 0;\n    $end = 0;\n    $match = '';\n    $pattern_len = strlen($pattern);\n    $text_len = strlen($text);\n    for ($i = 0; $i < $text_len; $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $start = $i;\n            $end = $i + $pattern_len;\n            $match = substr($text, $start, $pattern_len);\n            if ($match == $pattern) {\n                $matches[] = [\n                    'match' => $match,\n                    'start' => $start,\n                    'end' => $end\n                ];\n            }\n        }\n    }\n    return $matches;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = array();\n    $match = preg_match($pattern, $text, $result);\n    if ($match) {\n        return array(\n            'match' => $result[0],\n            'start' => $result[1],\n            'end' => $result[2]\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumped over the lazy dog.';\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found '{$result['match']}' at {$result['start']} to {$result['end']}\";\n} else {\n    echo 'Not found';\n}\n\necho \"\\n\";\n\n$pattern = '/lazy/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found '{$result['match']}' at {$result['start']} to {$result['end']}\";\n} else {\n    echo 'Not found';\n}\n\necho \"\\n\";\n\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found '{$result['match']}' at {$result['start']} to {$result['end']}\";\n} else {\n    echo 'Not found';\n}\n\necho \"\\n\";\n\n$pattern = '/lazy/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found '{$result['match']}' at {$result['start']} to {$result['end']}\";\n} else {\n    echo 'Not found';\n}\n\necho \"\\n\";\n\n$pattern = '/quick/';\n$result = find_literals($text, $pattern);\nif ($result) {\n    echo \"Found '{$result['match']}' at {$result['start']} to {$result['end']}\";\n} else {\n    echo 'Not found';\n}\n\necho \"\\n\";\n\n$pattern = '/lazy/';\n$result = find_",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array($matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0]));\n    }\n    return array(null, null, null);\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $result = [];\n    $matches = [];\n    $start = 0;\n    $end = 0;\n    $found = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($found) {\n        $start = $matches[0][1];\n        $end = $start + strlen($matches[0][0]);\n        $result = [\n            'match' => $matches[0][0],\n            'start' => $start,\n            'end' => $end\n        ];\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return false;\n}\n\n$text = 'The quick brown fox jumps over the lazy dog.';\n$pattern = '/quick/';\n$match = find_literals($text, $pattern);\nif ($match) {\n    echo \"Found '{$match['match']}' at {$match['start']} to {$match['end']}\";\n} else {\n    echo 'No match found';\n}\n",
    "    $matches = array();\n    $start = 0;\n    while (true) {\n        $pos = strpos($text, $pattern, $start);\n        if ($pos === false) {\n            break;\n        }\n        $matches[] = array(\n            'substring' => $pattern,\n            'start' => $pos,\n            'end' => $pos + strlen($pattern) - 1\n        );\n        $start = $pos + 1;\n    }\n    return $matches;\n}\n",
    "    $matches = [];\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return [$matches[0][0], $matches[0][1], $matches[0][1] + strlen($matches[0][0])];\n    }\n    return false;\n}\n",
    "\t$matches = array();\n\t$match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n\tif ($match) {\n\t\treturn array(\n\t\t\t\"match\" => $matches[0][0],\n\t\t\t\"start\" => $matches[0][1],\n\t\t\t\"end\" => $matches[0][1] + strlen($matches[0][0])\n\t\t);\n\t}\n\treturn false;\n}\n",
    "    $result = array();\n    $start = 0;\n    while (true) {\n        $pos = strpos($text, $pattern, $start);\n        if ($pos === false) {\n            break;\n        }\n        $result[] = array(\n            'substring' => substr($text, $pos, strlen($pattern)),\n            'start' => $pos,\n            'end' => $pos + strlen($pattern)\n        );\n        $start = $pos + 1;\n    }\n    return $result;\n}\n",
    "    $matches = array();\n    $match = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        return array(\n            'match' => $matches[0][0],\n            'start' => $matches[0][1],\n            'end' => $matches[0][1] + strlen($matches[0][0])\n        );\n    }\n    return null;\n}\n",
    "    $result = array();\n    $start = 0;\n    $end = 0;\n    $match = preg_match($pattern, $text, $result, PREG_OFFSET_CAPTURE);\n    if ($match) {\n        $start = $result[0][1];\n        $end = $start + strlen($result[0][0]);\n    }\n    return array($result[0][0], $start, $end);\n}\n"
  ]
}