{
  "name": "mbpp_160_find_solution",
  "language": "php",
  "prompt": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($a * $x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\necho '<pre>';\nprint_r(find_solution(3, 5, 4));\necho '</pre>';\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "<pre></pre>",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y % 1 == 0) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "\nDeprecated: Implicit conversion from float 2.3333333333333335 to int loses precision in /tmp/tmpuoadbdhz.php on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuoadbdhz.php:21\nStack trace:\n#0 /tmp/tmpuoadbdhz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpuoadbdhz.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == (int) $y) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\n$a = 3;\n$b = 5;\n$n = 7;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 8;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 9;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 10;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 11;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 12;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 13;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 14;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 15;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\n$a = 3;\n$b = 5;\n$n = 16;\n\n$result = find\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpufhgmhtv.php on line 84\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  for ($x = 0; $x <= $n; $x++) {\n    for ($y = 0; $y <= $n; $y++) {\n      if ($a * $x + $b * $y == $n) {\n        return array($x, $y);\n      }\n    }\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    $found = false;\n    while ($x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            $found = true;\n            break;\n        }\n        $x++;\n    }\n    if ($found) {\n        return array($x, $y);\n    } else {\n        return null;\n    }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if (is_int($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($a * $x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    $x_inc = 1;\n    $y_inc = 1;\n    $found = false;\n    while ($x < $n && $y < $n) {\n        if ($x * $a + $y * $b == $n) {\n            $found = true;\n            break;\n        }\n        if ($x * $a + $y * $b < $n) {\n            $x += $x_inc;\n            $y += $y_inc;\n        } else {\n            $x_inc = -$x_inc;\n            $y_inc = -$y_inc;\n            $x += $x_inc;\n            $y += $y_inc;\n        }\n    }\n    if ($found) {\n        return array($x, $y);\n    } else {\n        return null;\n    }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n % $b == 0) {\n            return array(0, $n / $b);\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0 || $y != (int) $y) {\n        return null;\n    }\n    return array($x, $y);\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft_r7eb2.php:24\nStack trace:\n#0 /tmp/tmpft_r7eb2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpft_r7eb2.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n\nprint_r(find_solution(3, 5, 4));\nprint_r(find_solution(3, 5, 7));\nprint_r(find_solution(3, 5, 1));\nprint_r(find_solution(3, 5, 0));\nprint_r(find_solution(3, 5, -1));\nprint_r(find_solution(3, 5, -2));\nprint_r(find_solution(3, 5, -3));\nprint_r(find_solution(3, 5, -4));\nprint_r(find_solution(3, 5, -5));\nprint_r(find_solution(3, 5, -6));\nprint_r(find_solution(3, 5, -7));\nprint_r(find_solution(3, 5, -8));\nprint_r(find_solution(3, 5, -9));\nprint_r(find_solution(3, 5, -10));\nprint_r(find_solution(3, 5, -11));\nprint_r(find_solution(3, 5, -12));\nprint_r(find_solution(3, 5, -13));\nprint_r(find_solution(3, 5, -14));\nprint_r(find_solution(3, 5, -15));\nprint_r(find_solution(3, 5, -16));\nprint_r(find_solution(3, 5, -17));\nprint_r(find_solution(3, 5, -18));\nprint_r(find_solution(3, 5, -19));\nprint_r(find_solution(3, 5, -20));\nprint_r(find_solution(3, 5, -21));\nprint_r(find_solution(3, 5, -\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp7qgt1lcq.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    $x_max = $n / $a;\n    $y_max = $n / $b;\n    for ($x = 0; $x <= $x_max; $x++) {\n        for ($y = 0; $y <= $y_max; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n\n$a = 3;\n$b = 5;\n$n = 16;\n$result = find_solution($a, $b, $n);\nif ($result) {\n    echo \"x = $result[0], y = $result[1]\\n\";\n} else {\n    echo \"No solution\\n\";\n}\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "x = 2, y = 2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    $x_increment = $a;\n    $y_increment = $b;\n    while ($x_increment <= $n) {\n        while ($y_increment <= $n) {\n            if ($x_increment + $y_increment == $n) {\n                return array($x, $y);\n            }\n            $y++;\n            $y_increment += $b;\n        }\n        $x++;\n        $x_increment += $a;\n        $y = 0;\n        $y_increment = $b;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7nkwyz0o.php:29\nStack trace:\n#0 /tmp/tmp7nkwyz0o.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7nkwyz0o.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  $x_inc = $a;\n  $y_inc = $b;\n  while ($x_inc <= $n) {\n    $y = 0;\n    $y_inc = $b;\n    while ($y_inc <= $n) {\n      if ($x_inc + $y_inc == $n) {\n        return [$x, $y];\n      }\n      $y++;\n      $y_inc = $b * $y;\n    }\n    $x++;\n    $x_inc = $a * $x;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl9bfzjto.php:29\nStack trace:\n#0 /tmp/tmpl9bfzjto.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpl9bfzjto.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return [0, 0];\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($x != (int) $x || $y != (int) $y) {\n        return null;\n    }\n    return [$x, $y];\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzob71dob.php:24\nStack trace:\n#0 /tmp/tmpzob71dob.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpzob71dob.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  $x_inc = $a;\n  $y_inc = $b;\n  $x_max = $n;\n  $y_max = $n;\n  $x_min = 0;\n  $y_min = 0;\n  $solution = null;\n  while ($x <= $x_max && $y <= $y_max) {\n    if ($x * $a + $y * $b == $n) {\n      $solution = array($x, $y);\n      break;\n    }\n    if ($x * $a + $y * $b < $n) {\n      $x += $x_inc;\n      $y += $y_inc;\n    } else {\n      $x_inc = -$x_inc;\n      $y_inc = -$y_inc;\n      $x += $x_inc;\n      $y += $y_inc;\n    }\n  }\n  return $solution;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($a * $x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y >= 0 && $y == (int)$y) {\n      return [$x, $y];\n    }\n    $x++;\n  }\n  return null;\n}\n\necho find_solution(5, 3, 7)[0] . \"\\n\";\necho find_solution(5, 3, 7)[1] . \"\\n\";\necho find_solution(5, 3, 8) . \"\\n\";\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nWarning: Trying to access array offset on value of type null in /tmp/tmpts2wkqnw.php on line 16\n\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpts2wkqnw.php on line 17\n\n\nWarning: Array to string conversion in /tmp/tmpts2wkqnw.php on line 18\nArray\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y == (int)$y) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nprint_r(find_solution(3, 5, 4));\nprint_r(find_solution(3, 5, 7));\nprint_r(find_solution(3, 5, 9));\nprint_r(find_solution(3, 5, 10));\nprint_r(find_solution(3, 5, 11));\nprint_r(find_solution(3, 5, 12));\nprint_r(find_solution(3, 5, 13));\nprint_r(find_solution(3, 5, 14));\nprint_r(find_solution(3, 5, 15));\nprint_r(find_solution(3, 5, 16));\nprint_r(find_solution(3, 5, 17));\nprint_r(find_solution(3, 5, 18));\nprint_r(find_solution(3, 5, 19));\nprint_r(find_solution(3, 5, 20));\nprint_r(find_solution(3, 5, 21));\nprint_r(find_solution(3, 5, 22));\nprint_r(find_solution(3, 5, 23));\nprint_r(find_solution(3, 5, 24));\nprint_r(find_solution(3, 5, 25));\nprint_r(find_solution(3, 5, 26));\nprint_r(find_solution(3, 5, 27));\nprint_r(find_solution(3, 5, 28));\nprint_r(find_solution(3, 5, 29));\nprint_r(find_solution(3, 5, 30));\nprint_r(find_solution(3, 5, 31));\nprint_r(find_solution(3, 5, 32));\nprint_r(find_solution\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpaq0lseba.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\n$a = 2;\n$b = 3;\n$n = 10;\n$result = find_solution($a, $b, $n);\nprint_r($result);\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "Array\n(\n    [0] => 2\n    [1] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($a * $x <= $n) {\n    $y = ($n - $a * $x) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  for ($x = 0; $x <= $n; $x++) {\n    for ($y = 0; $y <= $n; $y++) {\n      if ($a * $x + $b * $y == $n) {\n        return array($x, $y);\n      }\n    }\n  }\n  return null;\n}\n\nprint_r(find_solution(3, 5, 10));\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "Array\n(\n    [0] => 0\n    [1] => 2\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nprint_r(find_solution(3, 5, 4));\nprint_r(find_solution(3, 5, 5));\nprint_r(find_solution(3, 5, 6));\nprint_r(find_solution(3, 5, 7));\nprint_r(find_solution(3, 5, 8));\nprint_r(find_solution(3, 5, 9));\nprint_r(find_solution(3, 5, 10));\nprint_r(find_solution(3, 5, 11));\nprint_r(find_solution(3, 5, 12));\nprint_r(find_solution(3, 5, 13));\nprint_r(find_solution(3, 5, 14));\nprint_r(find_solution(3, 5, 15));\nprint_r(find_solution(3, 5, 16));\nprint_r(find_solution(3, 5, 17));\nprint_r(find_solution(3, 5, 18));\nprint_r(find_solution(3, 5, 19));\nprint_r(find_solution(3, 5, 20));\nprint_r(find_solution(3, 5, 21));\nprint_r(find_solution(3, 5, 22));\nprint_r(find_solution(3, 5, 23));\nprint_r(find_solution(3, 5, 24));\nprint_r(find_solution(3, 5, 25));\nprint_r(find_solution(3, 5, 26));\nprint_r(find_solution(3, 5, 27));\nprint_r(find_solution(3, 5, 28));\nprint_r(find_solution(3, 5, 29));\nprint_r(find_solution(3, 5, 30));\nprint_r\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpamft84wp.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($a == 0) {\n    if ($b == 0) {\n      return null;\n    } else {\n      return [0, $n / $b];\n    }\n  } else {\n    return [$n / $a, 0];\n  }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6b_da9iw.php:20\nStack trace:\n#0 /tmp/tmp6b_da9iw.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6b_da9iw.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y == (int)$y) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y >= 0 && $y == (int) $y) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($a * $x <= $n) {\n    $y = ($n - $a * $x) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        return ($n % $b == 0) ? [0, $n / $b] : null;\n    }\n    $x = $n / $a;\n    $y = ($n - ($a * $x)) / $b;\n    if ($y >= 0 && $y % 1 == 0) {\n        return [$x, $y];\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3sm6lbd8.php:20\nStack trace:\n#0 /tmp/tmp3sm6lbd8.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp3sm6lbd8.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == (int)$y) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\n$a = 2;\n$b = 3;\n$n = 10;\n\n$result = find_solution($a, $b, $n);\nvar_dump($result);\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y % 1 == 0) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nDeprecated: Implicit conversion from float 2.3333333333333335 to int loses precision in /tmp/tmpecdqjl7w.php on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecdqjl7w.php:21\nStack trace:\n#0 /tmp/tmpecdqjl7w.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpecdqjl7w.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($a == 0) {\n    if ($n == 0) {\n      return [0, 0];\n    } else {\n      return null;\n    }\n  }\n  $x = $n / $a;\n  $y = ($n - $a * $x) / $b;\n  if ($y < 0 || $y != round($y)) {\n    return null;\n  } else {\n    return [$x, $y];\n  }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnewg1djf.php:25\nStack trace:\n#0 /tmp/tmpnewg1djf.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpnewg1djf.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y >= 0 && $y == (int)$y) {\n      return [$x, $y];\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return [0, 0];\n        } else {\n            return null;\n        }\n    } else {\n        $x = $n / $a;\n        $y = ($n - $a * $x) / $b;\n        if ($x == (int)$x && $y == (int)$y) {\n            return [$x, $y];\n        } else {\n            return null;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttu_9pox.php:26\nStack trace:\n#0 /tmp/tmpttu_9pox.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpttu_9pox.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nprint_r(find_solution(2, 3, 7));\nprint_r(find_solution(7, 2, 5));\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "Array\n(\n    [0] => 2\n    [1] => 1\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\nvar_dump(find_solution(1, 2, 3));\nvar_dump(find_solution(1, 2, 4));\nvar_dump(find_solution(1, 2, 5));\nvar_dump(find_solution(1, 2, 6));\nvar_dump(find_solution(1, 2, 7));\nvar_dump(find_solution(1, 2, 8));\nvar_dump(find_solution(1, 2, 9));\nvar_dump(find_solution(1, 2, 10));\nvar_dump(find_solution(1, 2, 11));\nvar_dump(find_solution(1, 2, 12));\nvar_dump(find_solution(1, 2, 13));\nvar_dump(find_solution(1, 2, 14));\nvar_dump(find_solution(1, 2, 15));\nvar_dump(find_solution(1, 2, 16));\nvar_dump(find_solution(1, 2, 17));\nvar_dump(find_solution(1, 2, 18));\nvar_dump(find_solution(1, 2, 19));\nvar_dump(find_solution(1, 2, 20));\nvar_dump(find_solution(1, 2, 21));\nvar_dump(find_solution(1, 2, 22));\nvar_dump(find_solution(1, 2, 23));\nvar_dump(find_solution(1, 2, 24));\nvar_dump(find_solution(1, 2, 25));\nvar_dump(find_solution(1, 2, 26));\nvar_dump(find_solution(1, 2, 27));\nvar_dump(find_solution(1, 2, 28));\nvar_dump(find\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp3utveqru.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y == (int)$y) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return array(0, 0);\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0) {\n        return null;\n    } else {\n        return array($x, $y);\n    }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppfrb5u_o.php:25\nStack trace:\n#0 /tmp/tmppfrb5u_o.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppfrb5u_o.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return array(0, 0);\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0 || $y != (int) $y) {\n        return null;\n    } else {\n        return array($x, $y);\n    }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplnb2fdt2.php:25\nStack trace:\n#0 /tmp/tmplnb2fdt2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmplnb2fdt2.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y == (int) $y) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\nvar_dump(find_solution(5, 3, 7)); // [1, 1]\nvar_dump(find_solution(5, 3, 8)); // [1, 2]\nvar_dump(find_solution(5, 3, 9)); // [2, 1]\nvar_dump(find_solution(5, 3, 10)); // [2, 2]\nvar_dump(find_solution(5, 3, 11)); // [3, 1]\nvar_dump(find_solution(5, 3, 12)); // [3, 2]\nvar_dump(find_solution(5, 3, 13)); // [4, 1]\nvar_dump(find_solution(5, 3, 14)); // [4, 2]\nvar_dump(find_solution(5, 3, 15)); // [5, 0]\nvar_dump(find_solution(5, 3, 16)); // null\nvar_dump(find_solution(5, 3, 17)); // null\nvar_dump(find_solution(5, 3, 18)); // null\nvar_dump(find_solution(5, 3, 19)); // null\nvar_dump(find_solution(5, 3, 20)); // null\nvar_dump(find_solution(5, 3, 21)); // null\nvar_dump(find_solution(5, 3, 22)); // null\nvar_dump(find_solution(5, 3, 23)); // null\nvar_dump(find_solution(5, 3, 24)); // null\nvar_dump(find_solution(5, 3, 25)); // null\nvar_dump(find_solution(5, 3, 26)); // null\nvar_dump(find_solution(5, 3, 27)); // null\nvar_dump(find_solution(5\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpg56rrqp4.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    $x_inc = 1;\n    $y_inc = 0;\n    $x_limit = $a;\n    $y_limit = $b;\n    $x_step = $a;\n    $y_step = $b;\n    while (true) {\n        $sum = $a * $x + $b * $y;\n        if ($sum == $n) {\n            return array($x, $y);\n        }\n        if ($sum > $n) {\n            if ($x_inc == 1) {\n                $x_limit = $x;\n                $y_limit = $y + 1;\n                $x_inc = 0;\n                $y_inc = 1;\n                $x_step = $a;\n                $y_step = $b;\n            } else {\n                $x_limit = $x + 1;\n                $y_limit = $y;\n                $x_inc = 1;\n                $y_inc = 0;\n                $x_step = $a;\n                $y_step = $b;\n            }\n        }\n        $x += $x_inc;\n        $y += $y_inc;\n        if ($x == $x_limit && $y == $y_limit) {\n            $x -= $x_step;\n            $y -= $y_step;\n            $x_step /= $a;\n            $y_step /= $b;\n            if ($x_step == 0 && $y_step == 0) {\n                return null;\n            }\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    $x_inc = 0;\n    $y_inc = 0;\n    $x_inc = $a;\n    $y_inc = $b;\n    $x = $x_inc;\n    $y = $y_inc;\n    while ($x_inc <= $n) {\n        if (($x_inc + $y_inc) == $n) {\n            return array($x, $y);\n        }\n        $x_inc += $a;\n        $y_inc += $b;\n        $x = $x_inc;\n        $y = $y_inc;\n    }\n    return null;\n}\n\n$a = 3;\n$b = 5;\n$n = 8;\n$result = find_solution($a, $b, $n);\necho \"a = $a, b = $b, n = $n\\n\";\necho \"x = $result[0], y = $result[1]\\n\";\n\n$a = 2;\n$b = 4;\n$n = 8;\n$result = find_solution($a, $b, $n);\necho \"a = $a, b = $b, n = $n\\n\";\necho \"x = $result[0], y = $result[1]\\n\";\n\n$a = 2;\n$b = 4;\n$n = 9;\n$result = find_solution($a, $b, $n);\necho \"a = $a, b = $b, n = $n\\n\";\nif ($result == null) {\n    echo \"No solution\\n\";\n} else {\n    echo \"x = $result[0], y = $result[1]\\n\";\n}\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "a = 3, b = 5, n = 8\nx = 3, y = 5\na = 2, b = 4, n = 8\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp90446b38.php on line 36\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp90446b38.php on line 36\nx = , y = \na = 2, b = 4, n = 9\nNo solution\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90446b38.php:53\nStack trace:\n#0 /tmp/tmp90446b38.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp90446b38.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($a * $x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return array(0, 0);\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0) {\n        return null;\n    } else {\n        return array($x, $y);\n    }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppfrb5u_o.php:25\nStack trace:\n#0 /tmp/tmppfrb5u_o.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppfrb5u_o.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\nvar_dump(find_solution(2, 3, 7));\nvar_dump(find_solution(2, 3, 10));\nvar_dump(find_solution(2, 3, 8));\nvar_dump(find_solution(2, 3, 9));\nvar_dump(find_solution(2, 3, 11));\nvar_dump(find_solution(2, 3, 12));\nvar_dump(find_solution(2, 3, 13));\nvar_dump(find_solution(2, 3, 14));\nvar_dump(find_solution(2, 3, 15));\nvar_dump(find_solution(2, 3, 16));\nvar_dump(find_solution(2, 3, 17));\nvar_dump(find_solution(2, 3, 18));\nvar_dump(find_solution(2, 3, 19));\nvar_dump(find_solution(2, 3, 20));\nvar_dump(find_solution(2, 3, 21));\nvar_dump(find_solution(2, 3, 22));\nvar_dump(find_solution(2, 3, 23));\nvar_dump(find_solution(2, 3, 24));\nvar_dump(find_solution(2, 3, 25));\nvar_dump(find_solution(2, 3, 26));\nvar_dump(find_solution(2, 3, 27));\nvar_dump(find_solution(2, 3, 28));\nvar_dump(find_solution(2, 3, 29));\nvar_dump(find_solution(2, 3, 30));\nvar_dump(find_solution(2, 3, 31));\nvar_dump(find_solution(2, 3, 32));\nvar_dump(find\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp5lycl8jr.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($a * $x <= $n) {\n    $y = ($n - $a * $x) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n % $b == 0) {\n            return [0, $n / $b];\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y % 1 == 0) {\n        return [$x, $y];\n    } else {\n        return null;\n    }\n}\n\nvar_dump(find_solution(1, 2, 3));\nvar_dump(find_solution(1, 2, 4));\nvar_dump(find_solution(1, 2, 5));\nvar_dump(find_solution(1, 2, 6));\nvar_dump(find_solution(1, 2, 7));\nvar_dump(find_solution(1, 2, 8));\nvar_dump(find_solution(1, 2, 9));\nvar_dump(find_solution(1, 2, 10));\nvar_dump(find_solution(1, 2, 11));\nvar_dump(find_solution(1, 2, 12));\nvar_dump(find_solution(1, 2, 13));\nvar_dump(find_solution(1, 2, 14));\nvar_dump(find_solution(1, 2, 15));\nvar_dump(find_solution(1, 2, 16));\nvar_dump(find_solution(1, 2, 17));\nvar_dump(find_solution(1, 2, 18));\nvar_dump(find_solution(1, 2, 19));\nvar_dump(find_solution(1, 2, 20));\nvar_dump(find_solution(1, 2, 21));\nvar_dump(find_solution(1, 2, 22));\nvar_dump(find_solution(1, 2, 23));\nvar_dump(find_solution(1, 2, 24));\nvar_dump(find_solution(1, 2, 25));\nvar_dump(find_solution(1, 2, 26));\nvar_dump(find_solution(1, 2\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpr11c1dsg.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($a * $x <= $n) {\n    $y = ($n - $a * $x) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\n$a = 3;\n$b = 5;\n$n = 17;\n$result = find_solution($a, $b, $n);\necho \"x = $result[0]\\n\";\necho \"y = $result[1]\\n\";\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "x = 4\ny = 1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($a == 0) {\n    if ($n == 0) {\n      return [0, 0];\n    } else {\n      return null;\n    }\n  }\n  $x = $n / $a;\n  $y = ($n - $a * $x) / $b;\n  if ($y < 0) {\n    return null;\n  }\n  return [$x, $y];\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ysi6jxj.php:24\nStack trace:\n#0 /tmp/tmp8ysi6jxj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8ysi6jxj.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y == (int)$y) {\n      return [$x, $y];\n    }\n    $x++;\n  }\n  return null;\n}\n\nvar_dump(find_solution(5, 3, 9));\nvar_dump(find_solution(5, 3, 10));\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "array(2) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(3)\n}\narray(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(0)\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($a * $x <= $n) {\n    $y = ($n - $a * $x) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  for ($x = 0; $x <= $n; $x++) {\n    for ($y = 0; $y <= $n; $y++) {\n      if ($a * $x + $b * $y == $n) {\n        return array($x, $y);\n      }\n    }\n  }\n  return null;\n}\n\nprint_r(find_solution(5, 7, 10));\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "Array\n(\n    [0] => 2\n    [1] => 0\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($a == 0) {\n    if ($n % $b == 0) {\n      return [0, $n / $b];\n    } else {\n      return null;\n    }\n  } else {\n    $x = find_solution($b % $a, $a, $n);\n    if ($x == null) {\n      return null;\n    } else {\n      return [$x[1] - floor($b / $a) * $x[0], $x[0]];\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj1pinnln.php:25\nStack trace:\n#0 /tmp/tmpj1pinnln.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpj1pinnln.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return [0, 0];\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0) {\n        return null;\n    }\n    if ($y != floor($y)) {\n        return null;\n    }\n    return [$x, $y];\n}\n\necho find_solution(2, 3, 7)[0] . \"\\n\";\necho find_solution(2, 3, 7)[1] . \"\\n\";\necho find_solution(2, 3, 7) . \"\\n\";\necho find_solution(2, 3, 8) . \"\\n\";\necho find_solution(2, 3, 9) . \"\\n\";\necho find_solution(2, 3, 10) . \"\\n\";\necho find_solution(2, 3, 11) . \"\\n\";\necho find_solution(2, 3, 12) . \"\\n\";\necho find_solution(2, 3, 13) . \"\\n\";\necho find_solution(2, 3, 14) . \"\\n\";\necho find_solution(2, 3, 15) . \"\\n\";\necho find_solution(2, 3, 16) . \"\\n\";\necho find_solution(2, 3, 17) . \"\\n\";\necho find_solution(2, 3, 18) . \"\\n\";\necho find_solution(2, 3, 19) . \"\\n\";\necho find_solution(2, 3, 20) . \"\\n\";\necho find_solution(2, 3, 21) . \"\\n\";\necho find_solution(2, 3, 22) . \"\\n\";\necho find_solution(2, 3, 23) . \"\\n\";\necho find_solution(2, 3, 24) . \"\\n\";\necho find_solution(2, 3, 25) . \"\\n\";\necho find_solution(2, 3, 26) . \"\\n\";\necho find_solution(2, 3, 27) .\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpepnqptz3.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if (is_int($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\necho find_solution(2, 3, 7)[0] . \"\\n\";\necho find_solution(2, 3, 7)[1] . \"\\n\";\necho find_solution(2, 3, 7) . \"\\n\";\necho find_solution(2, 3, 8) . \"\\n\";\necho find_solution(2, 3, 9) . \"\\n\";\necho find_solution(2, 3, 10) . \"\\n\";\necho find_solution(2, 3, 11) . \"\\n\";\necho find_solution(2, 3, 12) . \"\\n\";\necho find_solution(2, 3, 13) . \"\\n\";\necho find_solution(2, 3, 14) . \"\\n\";\necho find_solution(2, 3, 15) . \"\\n\";\necho find_solution(2, 3, 16) . \"\\n\";\necho find_solution(2, 3, 17) . \"\\n\";\necho find_solution(2, 3, 18) . \"\\n\";\necho find_solution(2, 3, 19) . \"\\n\";\necho find_solution(2, 3, 20) . \"\\n\";\necho find_solution(2, 3, 21) . \"\\n\";\necho find_solution(2, 3, 22) . \"\\n\";\necho find_solution(2, 3, 23) . \"\\n\";\necho find_solution(2, 3, 24) . \"\\n\";\necho find_solution(2, 3, 25) . \"\\n\";\necho find_solution(2, 3, 26) . \"\\n\";\necho find_solution(2, 3, 27) . \"\\n\";\necho find_solution(2, 3, 28) . \"\\n\";\necho find_solution(2, 3, 29) . \"\\n\";\necho find_solution(\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpueasd3eb.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - ($x * $a)) / $b;\n        if ($y % 1 == 0) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nDeprecated: Implicit conversion from float 2.3333333333333335 to int loses precision in /tmp/tmpr4htzoph.php on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4htzoph.php:21\nStack trace:\n#0 /tmp/tmpr4htzoph.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpr4htzoph.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y == (int)$y) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y % 1 == 0) {\n      return [$x, $y];\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nDeprecated: Implicit conversion from float 2.3333333333333335 to int loses precision in /tmp/tmp9665ratu.php on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9665ratu.php:21\nStack trace:\n#0 /tmp/tmp9665ratu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9665ratu.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return [0, 0];\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0 || $y != (int)$y) {\n        return null;\n    } else {\n        return [$x, $y];\n    }\n}\n\necho find_solution(5, 3, 4)[0];\necho find_solution(5, 3, 4)[1];\necho find_solution(5, 3, 7)[0];\necho find_solution(5, 3, 7)[1];\necho find_solution(5, 3, 10)[0];\necho find_solution(5, 3, 10)[1];\necho find_solution(5, 3, 11)[0];\necho find_solution(5, 3, 11)[1];\necho find_solution(5, 3, 12)[0];\necho find_solution(5, 3, 12)[1];\necho find_solution(5, 3, 13)[0];\necho find_solution(5, 3, 13)[1];\necho find_solution(5, 3, 14)[0];\necho find_solution(5, 3, 14)[1];\necho find_solution(5, 3, 15)[0];\necho find_solution(5, 3, 15)[1];\necho find_solution(5, 3, 16)[0];\necho find_solution(5, 3, 16)[1];\necho find_solution(5, 3, 17)[0];\necho find_solution(5, 3, 17)[1];\necho find_solution(5, 3, 18)[0];\necho find_solution(5, 3, 18)[1];\necho find_solution(5, 3, 19)[0];\necho find_solution(5, 3, 19)[1];\necho find_solution(5, 3, 20)[0];\necho find_solution(5, 3, 20)[1];\necho find_solution(\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpfezjavz3.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 1;\n    $y = 1;\n    while ($x * $a + $y * $b != $n) {\n        if ($x * $a + $y * $b > $n) {\n            $y++;\n        } else {\n            $x++;\n        }\n        if ($x > $n || $y > $n) {\n            return null;\n        }\n    }\n    return [$x, $y];\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 1;\n  $y = 1;\n  while ($x * $a + $y * $b != $n) {\n    if ($x * $a + $y * $b > $n) {\n      $y++;\n    } else {\n      $x++;\n    }\n    if ($x > $n || $y > $n) {\n      return null;\n    }\n  }\n  return array($x, $y);\n}\n\nprint_r(find_solution(3, 5, 10));\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  for ($x = 0; $x <= $n; $x++) {\n    for ($y = 0; $y <= $n; $y++) {\n      if ($a * $x + $b * $y == $n) {\n        return array($x, $y);\n      }\n    }\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if (is_int($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return [$x, $y];\n            }\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($n % gcd($a, $b) != 0) {\n        return null;\n    }\n    $x = 0;\n    $y = $n / $b;\n    while ($a * $x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y % 1 == 0) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmpayb6pce8.php:4\nStack trace:\n#0 /tmp/tmpayb6pce8.php(20): find_solution(2, 3, 7)\n#1 /tmp/tmpayb6pce8.php(24): candidate(2, 3, 7)\n#2 /tmp/tmpayb6pce8.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpayb6pce8.php on line 4\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return [0, 0];\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y == (int)$y) {\n        return [$x, $y];\n    } else {\n        return null;\n    }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpti5ja8m6.php:25\nStack trace:\n#0 /tmp/tmpti5ja8m6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpti5ja8m6.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 1;\n    $y = 1;\n    while ($x < $n) {\n        $y = 1;\n        while ($y < $n) {\n            if ($a * $x + $b * $y == $n) {\n                return [$x, $y];\n            }\n            $y++;\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    $x_inc = $a;\n    $y_inc = $b;\n    while ($x_inc <= $n) {\n        if (($n - $x_inc) % $b == 0) {\n            $x = $x_inc;\n            $y = ($n - $x_inc) / $b;\n            break;\n        }\n        $x_inc += $a;\n    }\n    if ($x == 0 && $y == 0) {\n        return null;\n    } else {\n        return array($x, $y);\n    }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4hjgcnju.php:28\nStack trace:\n#0 /tmp/tmp4hjgcnju.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4hjgcnju.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return array(0, 0);\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0) {\n        return null;\n    }\n    return array($x, $y);\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8u9vdw2z.php:24\nStack trace:\n#0 /tmp/tmp8u9vdw2z.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8u9vdw2z.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($n % gcd($a, $b) != 0) {\n    return null;\n  }\n  $x = 0;\n  $y = $n / $b;\n  $r = $b;\n  while ($r != 0) {\n    $q = $a / $r;\n    $t = $a % $r;\n    $a = $r;\n    $r = $t;\n    $t = $x;\n    $x = $y - $q * $x;\n    $y = $t;\n  }\n  return array($y, $n / $b - $a / $b * $y);\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmphmaslwil.php:4\nStack trace:\n#0 /tmp/tmphmaslwil.php(23): find_solution(2, 3, 7)\n#1 /tmp/tmphmaslwil.php(27): candidate(2, 3, 7)\n#2 /tmp/tmphmaslwil.php(32): test()\n#3 {main}\n  thrown in /tmp/tmphmaslwil.php on line 4\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while (true) {\n        if ($a * $x + $b * $y == $n) {\n            return array($x, $y);\n        }\n        if ($x > $n) {\n            return null;\n        }\n        $x++;\n        $y = ($n - $a * $x) / $b;\n    }\n}\n\nprint_r(find_solution(3, 5, 4));\nprint_r(find_solution(3, 5, 7));\nprint_r(find_solution(3, 5, 10));\nprint_r(find_solution(3, 5, 13));\nprint_r(find_solution(3, 5, 16));\nprint_r(find_solution(3, 5, 19));\nprint_r(find_solution(3, 5, 22));\nprint_r(find_solution(3, 5, 25));\nprint_r(find_solution(3, 5, 28));\nprint_r(find_solution(3, 5, 31));\nprint_r(find_solution(3, 5, 34));\nprint_r(find_solution(3, 5, 37));\nprint_r(find_solution(3, 5, 40));\nprint_r(find_solution(3, 5, 43));\nprint_r(find_solution(3, 5, 46));\nprint_r(find_solution(3, 5, 49));\nprint_r(find_solution(3, 5, 52));\nprint_r(find_solution(3, 5, 55));\nprint_r(find_solution(3, 5, 58));\nprint_r(find_solution(3, 5, 61));\nprint_r(find_solution(3, 5, 64));\nprint_r(find_solution(3, 5, 67));\nprint_r(find_solution(3, 5, 70));\nprint_r(find_solution(3, 5, 73));\nprint_r(find_solution(3, 5, 76));\nprint_r(find_solution(3,\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpx5sfl377.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 1;\n    $y = 1;\n    while ($x < $n) {\n        $y = 1;\n        while ($y < $n) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n            $y++;\n        }\n        $x++;\n    }\n    return null;\n}\n\nvar_dump(find_solution(5, 7, 10));\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "NULL\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($n % gcd($a, $b) == 0) {\n        $x = 0;\n        $y = $n / $b;\n        while ($a * $x + $b * $y != $n) {\n            if ($a * $x + $b * $y < $n) {\n                $x++;\n            } else {\n                $y--;\n            }\n        }\n        return [$x, $y];\n    } else {\n        return null;\n    }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmpllt6u7iz.php:4\nStack trace:\n#0 /tmp/tmpllt6u7iz.php(21): find_solution(2, 3, 7)\n#1 /tmp/tmpllt6u7iz.php(25): candidate(2, 3, 7)\n#2 /tmp/tmpllt6u7iz.php(30): test()\n#3 {main}\n  thrown in /tmp/tmpllt6u7iz.php on line 4\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($a == 0) {\n    if ($n == 0) {\n      return array(0, 0);\n    } else {\n      return null;\n    }\n  }\n  $x = $n / $a;\n  $y = ($n - $a * $x) / $b;\n  if ($y < 0) {\n    return null;\n  }\n  return array($x, $y);\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy8rqwt0p.php:24\nStack trace:\n#0 /tmp/tmpy8rqwt0p.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpy8rqwt0p.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 1;\n  $y = 1;\n  while ($x * $a + $y * $b != $n) {\n    if ($x * $a + $y * $b > $n) {\n      $y--;\n    } else {\n      $x++;\n    }\n    if ($x < 1 || $y < 1) {\n      return null;\n    }\n  }\n  return [$x, $y];\n}\n\nprint_r(find_solution(5, 7, 10));\nprint_r(find_solution(5, 7, 11));\nprint_r(find_solution(5, 7, 12));\nprint_r(find_solution(5, 7, 13));\nprint_r(find_solution(5, 7, 14));\nprint_r(find_solution(5, 7, 15));\nprint_r(find_solution(5, 7, 16));\nprint_r(find_solution(5, 7, 17));\nprint_r(find_solution(5, 7, 18));\nprint_r(find_solution(5, 7, 19));\nprint_r(find_solution(5, 7, 20));\nprint_r(find_solution(5, 7, 21));\nprint_r(find_solution(5, 7, 22));\nprint_r(find_solution(5, 7, 23));\nprint_r(find_solution(5, 7, 24));\nprint_r(find_solution(5, 7, 25));\nprint_r(find_solution(5, 7, 26));\nprint_r(find_solution(5, 7, 27));\nprint_r(find_solution(5, 7, 28));\nprint_r(find_solution(5, 7, 29));\nprint_r(find_solution(5, 7, 30));\nprint_r(find_solution(5, 7, 31));\nprint_r(find_solution(5, 7, 32));\nprint_r(find_solution(5, 7, 33));\nprint_r(find_solution(5, 7, 34));\nprint_\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp011jlmny.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  for ($x = 0; $x <= $n; $x++) {\n    for ($y = 0; $y <= $n; $y++) {\n      if ($a * $x + $b * $y == $n) {\n        return array($x, $y);\n      }\n    }\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  for ($x = 0; $x <= $n; $x++) {\n    $y = ($n - ($a * $x)) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      return array($x, $y);\n    }\n  }\n  return null;\n}\n\nprint_r(find_solution(3, 5, 4));\nprint_r(find_solution(3, 5, 5));\nprint_r(find_solution(3, 5, 6));\nprint_r(find_solution(3, 5, 7));\nprint_r(find_solution(3, 5, 8));\nprint_r(find_solution(3, 5, 9));\nprint_r(find_solution(3, 5, 10));\nprint_r(find_solution(3, 5, 11));\nprint_r(find_solution(3, 5, 12));\nprint_r(find_solution(3, 5, 13));\nprint_r(find_solution(3, 5, 14));\nprint_r(find_solution(3, 5, 15));\nprint_r(find_solution(3, 5, 16));\nprint_r(find_solution(3, 5, 17));\nprint_r(find_solution(3, 5, 18));\nprint_r(find_solution(3, 5, 19));\nprint_r(find_solution(3, 5, 20));\nprint_r(find_solution(3, 5, 21));\nprint_r(find_solution(3, 5, 22));\nprint_r(find_solution(3, 5, 23));\nprint_r(find_solution(3, 5, 24));\nprint_r(find_solution(3, 5, 25));\nprint_r(find_solution(3, 5, 26));\nprint_r(find_solution(3, 5, 27));\nprint_r(find_solution(3, 5, 28));\nprint_r(find_solution(3, 5, 29));\nprint_r(find_solution(3, 5, 30));\nprint_r\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpr9a79ir5.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  for ($x = 0; $x <= $n; $x++) {\n    for ($y = 0; $y <= $n; $y++) {\n      if ($a * $x + $b * $y == $n) {\n        return array($x, $y);\n      }\n    }\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - ($x * $a)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  for ($x = 0; $x <= $n; $x++) {\n    for ($y = 0; $y <= $n; $y++) {\n      if ($a * $x + $b * $y == $n) {\n        return array($x, $y);\n      }\n    }\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y % 1 == 0) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nprint_r(find_solution(3, 5, 4));\nprint_r(find_solution(3, 5, 14));\nprint_r(find_solution(3, 5, 16));\nprint_r(find_solution(3, 5, 17));\nprint_r(find_solution(3, 5, 18));\nprint_r(find_solution(3, 5, 19));\nprint_r(find_solution(3, 5, 20));\nprint_r(find_solution(3, 5, 21));\nprint_r(find_solution(3, 5, 22));\nprint_r(find_solution(3, 5, 23));\nprint_r(find_solution(3, 5, 24));\nprint_r(find_solution(3, 5, 25));\nprint_r(find_solution(3, 5, 26));\nprint_r(find_solution(3, 5, 27));\nprint_r(find_solution(3, 5, 28));\nprint_r(find_solution(3, 5, 29));\nprint_r(find_solution(3, 5, 30));\nprint_r(find_solution(3, 5, 31));\nprint_r(find_solution(3, 5, 32));\nprint_r(find_solution(3, 5, 33));\nprint_r(find_solution(3, 5, 34));\nprint_r(find_solution(3, 5, 35));\nprint_r(find_solution(3, 5, 36));\nprint_r(find_solution(3, 5, 37));\nprint_r(find_solution(3, 5, 38));\nprint_r(find_solution(3, 5, 39));\nprint_r(find_solution(3\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp1z35pl8k.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($a * $x <= $n) {\n    $y = ($n - $a * $x) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nprint_r(find_solution(3, 5, 4));\nprint_r(find_solution(3, 5, 5));\nprint_r(find_solution(3, 5, 7));\nprint_r(find_solution(3, 5, 9));\nprint_r(find_solution(3, 5, 10));\nprint_r(find_solution(3, 5, 11));\nprint_r(find_solution(3, 5, 12));\nprint_r(find_solution(3, 5, 13));\nprint_r(find_solution(3, 5, 14));\nprint_r(find_solution(3, 5, 15));\nprint_r(find_solution(3, 5, 16));\nprint_r(find_solution(3, 5, 17));\nprint_r(find_solution(3, 5, 18));\nprint_r(find_solution(3, 5, 19));\nprint_r(find_solution(3, 5, 20));\nprint_r(find_solution(3, 5, 21));\nprint_r(find_solution(3, 5, 22));\nprint_r(find_solution(3, 5, 23));\nprint_r(find_solution(3, 5, 24));\nprint_r(find_solution(3, 5, 25));\nprint_r(find_solution(3, 5, 26));\nprint_r(find_solution(3, 5, 27));\nprint_r(find_solution(3, 5, 28));\nprint_r(find_solution(3, 5, 29));\nprint_r(find_solution(3, 5, 30));\nprint_r(find_solution(3, 5, 31));\nprint_r(find\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpbowl8cw4.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - ($x * $a)) / $b;\n        if ($y % 1 == 0) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nDeprecated: Implicit conversion from float 2.3333333333333335 to int loses precision in /tmp/tmp2mmp4ke7.php on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2mmp4ke7.php:21\nStack trace:\n#0 /tmp/tmp2mmp4ke7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp2mmp4ke7.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 1;\n    $y = 1;\n    while ($x * $a + $y * $b != $n) {\n        if ($x * $a + $y * $b > $n) {\n            $y++;\n        } else {\n            $x++;\n        }\n        if ($x > $n || $y > $n) {\n            return null;\n        }\n    }\n    return [$x, $y];\n}\n\n$a = 3;\n$b = 5;\n$n = 17;\n\n$result = find_solution($a, $b, $n);\nif ($result) {\n    echo \"x = $result[0], y = $result[1]\";\n} else {\n    echo \"No solution\";\n}\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "x = 4, y = 1",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($a * $x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return [0, 0];\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0) {\n        return null;\n    }\n    if ($y != round($y)) {\n        return null;\n    }\n    return [$x, $y];\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx5tdcrk4.php:27\nStack trace:\n#0 /tmp/tmpx5tdcrk4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx5tdcrk4.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($a * $x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    $x_step = 1;\n    $y_step = 1;\n    if ($a < 0) {\n        $x_step = -1;\n    }\n    if ($b < 0) {\n        $y_step = -1;\n    }\n    while ($a * $x + $b * $y != $n) {\n        if ($a * $x + $b * $y < $n) {\n            $x += $x_step;\n        } else {\n            $y += $y_step;\n        }\n        if ($x > 100 || $y > 100) {\n            return null;\n        }\n    }\n    return array($x, $y);\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprguaamlz.php:32\nStack trace:\n#0 /tmp/tmprguaamlz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprguaamlz.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($a * $x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 1;\n  $y = 1;\n  while ($x * $a + $y * $b != $n) {\n    if ($x * $a + $y * $b > $n) {\n      $y++;\n    } else {\n      $x++;\n    }\n    if ($x > $n || $y > $n) {\n      return null;\n    }\n  }\n  return [$x, $y];\n}\n\n$a = 2;\n$b = 3;\n$n = 5;\n\nprint_r(find_solution($a, $b, $n));\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 1\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($a == 0) {\n    if ($n == 0) {\n      return array(0, 0);\n    } else {\n      return null;\n    }\n  }\n  $x = $n / $a;\n  $y = ($n - $a * $x) / $b;\n  if ($y < 0 || $y != round($y)) {\n    return null;\n  } else {\n    return array($x, $y);\n  }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbqlrfdtx.php:25\nStack trace:\n#0 /tmp/tmpbqlrfdtx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbqlrfdtx.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($a * $x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nprint_r(find_solution(1, 2, 3));\nprint_r(find_solution(1, 2, 4));\nprint_r(find_solution(1, 2, 5));\nprint_r(find_solution(1, 2, 6));\nprint_r(find_solution(1, 2, 7));\nprint_r(find_solution(1, 2, 8));\nprint_r(find_solution(1, 2, 9));\nprint_r(find_solution(1, 2, 10));\nprint_r(find_solution(1, 2, 11));\nprint_r(find_solution(1, 2, 12));\nprint_r(find_solution(1, 2, 13));\nprint_r(find_solution(1, 2, 14));\nprint_r(find_solution(1, 2, 15));\nprint_r(find_solution(1, 2, 16));\nprint_r(find_solution(1, 2, 17));\nprint_r(find_solution(1, 2, 18));\nprint_r(find_solution(1, 2, 19));\nprint_r(find_solution(1, 2, 20));\nprint_r(find_solution(1, 2, 21));\nprint_r(find_solution(1, 2, 22));\nprint_r(find_solution(1, 2, 23));\nprint_r(find_solution(1, 2, 24));\nprint_r(find_solution(1, 2, 25));\nprint_r(find_solution(1, 2, 26));\nprint_r(find_solution(1, 2, 27));\nprint_r(find_solution(1, 2, 28));\nprint_r(find\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpnby38vai.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return array(0, 0);\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0) {\n        return null;\n    }\n    if ($a * $x + $b * $y == $n) {\n        return array($x, $y);\n    } else {\n        return null;\n    }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwr6ch5iv.php:28\nStack trace:\n#0 /tmp/tmpwr6ch5iv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwr6ch5iv.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($a == 0) {\n    if ($b == 0) {\n      return null;\n    } else {\n      return [0, $n / $b];\n    }\n  }\n  $x = $n / $a;\n  $y = ($n - $a * $x) / $b;\n  if ($y < 0) {\n    return null;\n  }\n  return [$x, $y];\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrgc7_29.php:24\nStack trace:\n#0 /tmp/tmpjrgc7_29.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjrgc7_29.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  for ($x = 0; $x <= $n; $x++) {\n    $y = ($n - ($a * $x)) / $b;\n    if ($y >= 0 && is_int($y)) {\n      return array($x, $y);\n    }\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($a == 0) {\n    if ($n == 0) {\n      return [0, 0];\n    } else {\n      return null;\n    }\n  }\n  $x = $n / $a;\n  $y = ($n - ($a * $x)) / $b;\n  if ($y < 0) {\n    return null;\n  } else {\n    return [$x, $y];\n  }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp662s7muc.php:25\nStack trace:\n#0 /tmp/tmp662s7muc.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp662s7muc.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($a == 0) {\n    if ($n == 0) {\n      return [0, 0];\n    }\n    return null;\n  }\n  $x = $n / $a;\n  $y = ($n - ($a * $x)) / $b;\n  if ($y < 0) {\n    return null;\n  }\n  return [$x, $y];\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvebpjrd2.php:23\nStack trace:\n#0 /tmp/tmpvebpjrd2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvebpjrd2.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return array(0, 0);\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0) {\n        return null;\n    }\n    return array($x, $y);\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8u9vdw2z.php:24\nStack trace:\n#0 /tmp/tmp8u9vdw2z.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8u9vdw2z.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 1;\n  $y = 1;\n  while ($x * $a + $y * $b != $n) {\n    if ($x * $a + $y * $b > $n) {\n      $y++;\n    } else {\n      $x++;\n    }\n    if ($x > $n || $y > $n) {\n      return null;\n    }\n  }\n  return array($x, $y);\n}\n\nprint_r(find_solution(3, 5, 10));\nprint_r(find_solution(3, 5, 11));\nprint_r(find_solution(3, 5, 12));\nprint_r(find_solution(3, 5, 13));\nprint_r(find_solution(3, 5, 14));\nprint_r(find_solution(3, 5, 15));\nprint_r(find_solution(3, 5, 16));\nprint_r(find_solution(3, 5, 17));\nprint_r(find_solution(3, 5, 18));\nprint_r(find_solution(3, 5, 19));\nprint_r(find_solution(3, 5, 20));\nprint_r(find_solution(3, 5, 21));\nprint_r(find_solution(3, 5, 22));\nprint_r(find_solution(3, 5, 23));\nprint_r(find_solution(3, 5, 24));\nprint_r(find_solution(3, 5, 25));\nprint_r(find_solution(3, 5, 26));\nprint_r(find_solution(3, 5, 27));\nprint_r(find_solution(3, 5, 28));\nprint_r(find_solution(3, 5, 29));\nprint_r(find_solution(3, 5, 30));\nprint_r(find_solution(3, 5, 31));\nprint_r(find_solution(3, 5, 32));\nprint_r(find_solution(3, 5, 33));\nprint_r(find_solution(3, 5, 34));\nprint\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp6oaacdo_.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\n$a = 2;\n$b = 3;\n$n = 5;\n\nprint_r(find_solution($a, $b, $n));\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "Array\n(\n    [0] => 1\n    [1] => 1\n)\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\necho \"find_solution(2, 3, 7) = \";\nvar_dump(find_solution(2, 3, 7));\necho \"find_solution(2, 3, 10) = \";\nvar_dump(find_solution(2, 3, 10));\necho \"find_solution(2, 3, 11) = \";\nvar_dump(find_solution(2, 3, 11));\necho \"find_solution(2, 3, 12) = \";\nvar_dump(find_solution(2, 3, 12));\necho \"find_solution(2, 3, 13) = \";\nvar_dump(find_solution(2, 3, 13));\necho \"find_solution(2, 3, 14) = \";\nvar_dump(find_solution(2, 3, 14));\necho \"find_solution(2, 3, 15) = \";\nvar_dump(find_solution(2, 3, 15));\necho \"find_solution(2, 3, 16) = \";\nvar_dump(find_solution(2, 3, 16));\necho \"find_solution(2, 3, 17) = \";\nvar_dump(find_solution(2, 3, 17));\necho \"find_solution(2, 3, 18) = \";\nvar_dump(find_solution(2, 3, 18));\necho \"find_solution(2, 3, 19) = \";\nvar_dump(find_solution(2, 3, 19));\necho \"find_solution(2, 3, 20) = \";\nvar_dump(find_solution(2, 3, 20));\necho \"find_solution(2, 3, 21) = \";\nvar_dump(find_solution\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp7dez59bh.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($n % gcd($a, $b) != 0) {\n        return null;\n    }\n    $x = 0;\n    $y = $n / $b;\n    while ($a * $x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y >= 0 && $y == (int)$y) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmpofkoab31.php:4\nStack trace:\n#0 /tmp/tmpofkoab31.php(20): find_solution(2, 3, 7)\n#1 /tmp/tmpofkoab31.php(24): candidate(2, 3, 7)\n#2 /tmp/tmpofkoab31.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpofkoab31.php on line 4\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($a == 0) {\n    if ($n == 0) {\n      return array(0, 0);\n    } else {\n      return null;\n    }\n  }\n  $x = $n / $a;\n  $y = ($n - $a * $x) / $b;\n  if ($y < 0) {\n    return null;\n  }\n  return array($x, $y);\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy8rqwt0p.php:24\nStack trace:\n#0 /tmp/tmpy8rqwt0p.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpy8rqwt0p.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while($x * $a + $y * $b != $n) {\n        if($x * $a + $y * $b > $n) {\n            $y--;\n        } else {\n            $x++;\n        }\n    }\n    return array($x, $y);\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsoflwqqt.php:21\nStack trace:\n#0 /tmp/tmpsoflwqqt.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpsoflwqqt.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($a * $x <= $n) {\n    $y = ($n - $a * $x) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($a == 0) {\n    if ($n == 0) {\n      return array(0, 0);\n    } else {\n      return null;\n    }\n  }\n  $x = $n / $a;\n  $y = ($n - $a * $x) / $b;\n  if ($y < 0) {\n    return null;\n  } else {\n    return array($x, $y);\n  }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmb6gyxsg.php:25\nStack trace:\n#0 /tmp/tmpmb6gyxsg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmb6gyxsg.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($a == 0) {\n    if ($n == 0) {\n      return array(0, 0);\n    } else {\n      return null;\n    }\n  }\n  $x = $n / $a;\n  $y = ($n - $a * $x) / $b;\n  if ($y < 0) {\n    return null;\n  }\n  return array($x, $y);\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy8rqwt0p.php:24\nStack trace:\n#0 /tmp/tmpy8rqwt0p.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpy8rqwt0p.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n\t$x = 0;\n\t$y = 0;\n\twhile ($a * $x <= $n) {\n\t\t$y = ($n - ($a * $x)) / $b;\n\t\tif ($y == (int)$y) {\n\t\t\treturn array($x, $y);\n\t\t}\n\t\t$x++;\n\t}\n\treturn null;\n}\n\nprint_r(find_solution(3, 5, 4));\nprint_r(find_solution(3, 5, 7));\nprint_r(find_solution(3, 5, 8));\nprint_r(find_solution(3, 5, 9));\nprint_r(find_solution(3, 5, 10));\nprint_r(find_solution(3, 5, 11));\nprint_r(find_solution(3, 5, 12));\nprint_r(find_solution(3, 5, 13));\nprint_r(find_solution(3, 5, 14));\nprint_r(find_solution(3, 5, 15));\nprint_r(find_solution(3, 5, 16));\nprint_r(find_solution(3, 5, 17));\nprint_r(find_solution(3, 5, 18));\nprint_r(find_solution(3, 5, 19));\nprint_r(find_solution(3, 5, 20));\nprint_r(find_solution(3, 5, 21));\nprint_r(find_solution(3, 5, 22));\nprint_r(find_solution(3, 5, 23));\nprint_r(find_solution(3, 5, 24));\nprint_r(find_solution(3, 5, 25));\nprint_r(find_solution(3, 5, 26));\nprint_r(find_solution(3, 5, 27));\nprint_r(find_solution(3, 5, 28));\nprint_r(find_solution(3, 5, 29));\nprint_r(find_solution(3, 5, 30));\nprint_r(find_solution(3, 5, 31));\nprint_\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpjq2gy5x5.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y % 1 == 0) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\nprint_r(find_solution(5, 3, 7));\nprint_r(find_solution(5, 3, 8));\nprint_r(find_solution(5, 3, 9));\nprint_r(find_solution(5, 3, 10));\nprint_r(find_solution(5, 3, 11));\nprint_r(find_solution(5, 3, 12));\nprint_r(find_solution(5, 3, 13));\nprint_r(find_solution(5, 3, 14));\nprint_r(find_solution(5, 3, 15));\nprint_r(find_solution(5, 3, 16));\nprint_r(find_solution(5, 3, 17));\nprint_r(find_solution(5, 3, 18));\nprint_r(find_solution(5, 3, 19));\nprint_r(find_solution(5, 3, 20));\nprint_r(find_solution(5, 3, 21));\nprint_r(find_solution(5, 3, 22));\nprint_r(find_solution(5, 3, 23));\nprint_r(find_solution(5, 3, 24));\nprint_r(find_solution(5, 3, 25));\nprint_r(find_solution(5, 3, 26));\nprint_r(find_solution(5, 3, 27));\nprint_r(find_solution(5, 3, 28));\nprint_r(find_solution(5, 3, 29));\nprint_r(find_solution(5, 3, 30));\nprint_r(find_solution(5, 3, 31));\nprint_r(find_solution(5, 3, 32));\nprint_r(find_solution(5\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmph0f_ei3i.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a + $y * $b != $n) {\n        if ($x * $a + $y * $b > $n) {\n            $y--;\n        } else {\n            $x++;\n        }\n    }\n    return array($x, $y);\n}\n\n$a = 2;\n$b = 3;\n$n = 5;\n\nprint_r(find_solution($a, $b, $n));\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "Array\n(\n    [0] => 4\n    [1] => -1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4volyoei.php:26\nStack trace:\n#0 /tmp/tmp4volyoei.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4volyoei.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($a * $x <= $n) {\n    $y = ($n - $a * $x) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\necho find_solution(2, 3, 7) . \"\\n\";\necho find_solution(2, 3, 8) . \"\\n\";\necho find_solution(2, 3, 9) . \"\\n\";\necho find_solution(2, 3, 10) . \"\\n\";\necho find_solution(2, 3, 11) . \"\\n\";\necho find_solution(2, 3, 12) . \"\\n\";\necho find_solution(2, 3, 13) . \"\\n\";\necho find_solution(2, 3, 14) . \"\\n\";\necho find_solution(2, 3, 15) . \"\\n\";\necho find_solution(2, 3, 16) . \"\\n\";\necho find_solution(2, 3, 17) . \"\\n\";\necho find_solution(2, 3, 18) . \"\\n\";\necho find_solution(2, 3, 19) . \"\\n\";\necho find_solution(2, 3, 20) . \"\\n\";\necho find_solution(2, 3, 21) . \"\\n\";\necho find_solution(2, 3, 22) . \"\\n\";\necho find_solution(2, 3, 23) . \"\\n\";\necho find_solution(2, 3, 24) . \"\\n\";\necho find_solution(2, 3, 25) . \"\\n\";\necho find_solution(2, 3, 26) . \"\\n\";\necho find_solution(2, 3, 27) . \"\\n\";\necho find_solution(2, 3, 28) . \"\\n\";\necho find_solution(2, 3, 29) . \"\\n\";\necho find_solution(2, 3, 30) . \"\\n\";\necho find_solution(2, 3, 31) .\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmprs_lfed2.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($a * $x <= $n) {\n    $y = ($n - $a * $x) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 1;\n  $y = 1;\n  while ($x * $a + $y * $b != $n) {\n    if ($x * $a + $y * $b > $n) {\n      $y++;\n    } else {\n      $x++;\n    }\n    if ($x > $n || $y > $n) {\n      return null;\n    }\n  }\n  return [$x, $y];\n}\n\nprint_r(find_solution(3, 5, 4));\nprint_r(find_solution(3, 5, 10));\nprint_r(find_solution(3, 5, 7));\nprint_r(find_solution(3, 5, 100));\nprint_r(find_solution(3, 5, 101));\nprint_r(find_solution(3, 5, 102));\nprint_r(find_solution(3, 5, 103));\nprint_r(find_solution(3, 5, 104));\nprint_r(find_solution(3, 5, 105));\nprint_r(find_solution(3, 5, 106));\nprint_r(find_solution(3, 5, 107));\nprint_r(find_solution(3, 5, 108));\nprint_r(find_solution(3, 5, 109));\nprint_r(find_solution(3, 5, 110));\nprint_r(find_solution(3, 5, 111));\nprint_r(find_solution(3, 5, 112));\nprint_r(find_solution(3, 5, 113));\nprint_r(find_solution(3, 5, 114));\nprint_r(find_solution(3, 5, 115));\nprint_r(find_solution(3, 5, 116));\nprint_r(find_solution(3, 5, 117));\nprint_r(find_solution(3, 5, 118));\nprint_r(find_solution(3, 5, 119));\nprint_r(find_solution(3, 5, 120));\nprint_r(find_solution(3, 5, 121));\nprint\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmppkm4124s.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nvar_dump(find_solution(3, 5, 4)); // [1, -1]\nvar_dump(find_solution(3, 5, 5)); // [0, 1]\nvar_dump(find_solution(3, 5, 7)); // [2, -1]\nvar_dump(find_solution(3, 5, 8)); // null\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "NULL\narray(2) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n}\nNULL\narray(2) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(1)\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($a == 0) {\n    if ($n == 0) {\n      return array(0, 0);\n    } else {\n      return null;\n    }\n  }\n  $x = $n / $a;\n  $y = ($n - $a * $x) / $b;\n  if ($y < 0) {\n    return null;\n  }\n  return array($x, $y);\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy8rqwt0p.php:24\nStack trace:\n#0 /tmp/tmpy8rqwt0p.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpy8rqwt0p.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y % 1 == 0) {\n      return [$x, $y];\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nDeprecated: Implicit conversion from float 2.3333333333333335 to int loses precision in /tmp/tmp9665ratu.php on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9665ratu.php:21\nStack trace:\n#0 /tmp/tmp9665ratu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9665ratu.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y == (int)$y) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\nvar_dump(find_solution(3, 5, 4));\nvar_dump(find_solution(3, 5, 7));\nvar_dump(find_solution(3, 5, 8));\nvar_dump(find_solution(3, 5, 9));\nvar_dump(find_solution(3, 5, 10));\nvar_dump(find_solution(3, 5, 11));\nvar_dump(find_solution(3, 5, 12));\nvar_dump(find_solution(3, 5, 13));\nvar_dump(find_solution(3, 5, 14));\nvar_dump(find_solution(3, 5, 15));\nvar_dump(find_solution(3, 5, 16));\nvar_dump(find_solution(3, 5, 17));\nvar_dump(find_solution(3, 5, 18));\nvar_dump(find_solution(3, 5, 19));\nvar_dump(find_solution(3, 5, 20));\nvar_dump(find_solution(3, 5, 21));\nvar_dump(find_solution(3, 5, 22));\nvar_dump(find_solution(3, 5, 23));\nvar_dump(find_solution(3, 5, 24));\nvar_dump(find_solution(3, 5, 25));\nvar_dump(find_solution(3, 5, 26));\nvar_dump(find_solution(3, 5, 27));\nvar_dump(find_solution(3, 5, 28));\nvar_dump(find_solution(3, 5, 29));\nvar_dump(find_solution(3, 5, 30));\nvar_dump(find_solution(3, 5, 31));\nvar_dump(find_solution\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpe6mgtgx4.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 1;\n    $y = 1;\n    while ($x < $n) {\n        $y = 1;\n        while ($y < $n) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n            $y++;\n        }\n        $x++;\n    }\n    return null;\n}\n\nvar_dump(find_solution(3, 5, 7));\nvar_dump(find_solution(3, 5, 8));\nvar_dump(find_solution(3, 5, 9));\nvar_dump(find_solution(3, 5, 10));\nvar_dump(find_solution(3, 5, 11));\nvar_dump(find_solution(3, 5, 12));\nvar_dump(find_solution(3, 5, 13));\nvar_dump(find_solution(3, 5, 14));\nvar_dump(find_solution(3, 5, 15));\nvar_dump(find_solution(3, 5, 16));\nvar_dump(find_solution(3, 5, 17));\nvar_dump(find_solution(3, 5, 18));\nvar_dump(find_solution(3, 5, 19));\nvar_dump(find_solution(3, 5, 20));\nvar_dump(find_solution(3, 5, 21));\nvar_dump(find_solution(3, 5, 22));\nvar_dump(find_solution(3, 5, 23));\nvar_dump(find_solution(3, 5, 24));\nvar_dump(find_solution(3, 5, 25));\nvar_dump(find_solution(3, 5, 26));\nvar_dump(find_solution(3, 5, 27));\nvar_dump(find_solution(3, 5, 28));\nvar_dump(find_solution(3, 5, 29));\nvar_dump(find_solution(3, 5, 30));\nvar_dump(find_solution(3, 5, 31));\nvar_dump(find_solution(3, 5, 32\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpy1omc4ck.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  $solution = null;\n  while ($x <= $n) {\n    $y = ($n - ($a * $x)) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      $solution = [$x, $y];\n      break;\n    }\n    $x++;\n  }\n  return $solution;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 1;\n    $y = 1;\n    while ($x < $n) {\n        $y = 1;\n        while ($y < $n) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n            $y++;\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    $r = $n;\n    while ($r >= $b) {\n        $q = floor($r / $b);\n        $r = $r - $q * $b;\n        $x = $x + $q * $a;\n        $y = $y + $q;\n    }\n    if ($r == 0) {\n        return array($x, $y);\n    } else {\n        return null;\n    }\n}\n\n$a = 3;\n$b = 5;\n$n = 7;\n$solution = find_solution($a, $b, $n);\nif ($solution == null) {\n    echo \"No solution exists.\";\n} else {\n    echo \"x = \" . $solution[0] . \", y = \" . $solution[1];\n}\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "No solution exists.\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg6x63f__.php:34\nStack trace:\n#0 /tmp/tmpg6x63f__.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpg6x63f__.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y % 1 == 0) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nDeprecated: Implicit conversion from float 2.3333333333333335 to int loses precision in /tmp/tmpecdqjl7w.php on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecdqjl7w.php:21\nStack trace:\n#0 /tmp/tmpecdqjl7w.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpecdqjl7w.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y % 1 == 0) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nprint_r(find_solution(5, 3, 10));\nprint_r(find_solution(5, 3, 11));\nprint_r(find_solution(5, 3, 12));\nprint_r(find_solution(5, 3, 13));\nprint_r(find_solution(5, 3, 14));\nprint_r(find_solution(5, 3, 15));\nprint_r(find_solution(5, 3, 16));\nprint_r(find_solution(5, 3, 17));\nprint_r(find_solution(5, 3, 18));\nprint_r(find_solution(5, 3, 19));\nprint_r(find_solution(5, 3, 20));\nprint_r(find_solution(5, 3, 21));\nprint_r(find_solution(5, 3, 22));\nprint_r(find_solution(5, 3, 23));\nprint_r(find_solution(5, 3, 24));\nprint_r(find_solution(5, 3, 25));\nprint_r(find_solution(5, 3, 26));\nprint_r(find_solution(5, 3, 27));\nprint_r(find_solution(5, 3, 28));\nprint_r(find_solution(5, 3, 29));\nprint_r(find_solution(5, 3, 30));\nprint_r(find_solution(5, 3, 31));\nprint_r(find_solution(5, 3, 32));\nprint_r(find_solution(5, 3, 33));\nprint_r(find_solution(5, 3, 34));\nprint_r(find_solution(5, 3, 35));\nprint_r(find_solution(5\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpuwbjt3m3.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\nprint_r(find_solution(3, 5, 4));\nprint_r(find_solution(3, 5, 5));\nprint_r(find_solution(3, 5, 7));\nprint_r(find_solution(3, 5, 9));\nprint_r(find_solution(3, 5, 10));\nprint_r(find_solution(3, 5, 11));\nprint_r(find_solution(3, 5, 12));\nprint_r(find_solution(3, 5, 13));\nprint_r(find_solution(3, 5, 14));\nprint_r(find_solution(3, 5, 15));\nprint_r(find_solution(3, 5, 16));\nprint_r(find_solution(3, 5, 17));\nprint_r(find_solution(3, 5, 18));\nprint_r(find_solution(3, 5, 19));\nprint_r(find_solution(3, 5, 20));\nprint_r(find_solution(3, 5, 21));\nprint_r(find_solution(3, 5, 22));\nprint_r(find_solution(3, 5, 23));\nprint_r(find_solution(3, 5, 24));\nprint_r(find_solution(3, 5, 25));\nprint_r(find_solution(3, 5, 26));\nprint_r(find_solution(3, 5, 27));\nprint_r(find_solution(3, 5, 28));\nprint_r(find_solution(3, 5, 29));\nprint_r(find_solution(3, 5, 30));\nprint_r(find_solution(3, 5, 31));\nprint_r(find\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp_tllndse.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($a * $x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nprint_r(find_solution(2, 3, 7));\nprint_r(find_solution(2, 3, 8));\nprint_r(find_solution(2, 3, 9));\nprint_r(find_solution(2, 3, 10));\nprint_r(find_solution(2, 3, 11));\nprint_r(find_solution(2, 3, 12));\nprint_r(find_solution(2, 3, 13));\nprint_r(find_solution(2, 3, 14));\nprint_r(find_solution(2, 3, 15));\nprint_r(find_solution(2, 3, 16));\nprint_r(find_solution(2, 3, 17));\nprint_r(find_solution(2, 3, 18));\nprint_r(find_solution(2, 3, 19));\nprint_r(find_solution(2, 3, 20));\nprint_r(find_solution(2, 3, 21));\nprint_r(find_solution(2, 3, 22));\nprint_r(find_solution(2, 3, 23));\nprint_r(find_solution(2, 3, 24));\nprint_r(find_solution(2, 3, 25));\nprint_r(find_solution(2, 3, 26));\nprint_r(find_solution(2, 3, 27));\nprint_r(find_solution(2, 3, 28));\nprint_r(find_solution(2, 3, 29));\nprint_r(find_solution(2, 3, 30));\nprint_r(find_solution(2, 3, 31));\nprint_r(find_solution(2, 3, 32));\nprint_r(find\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp3dzfaogq.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        return ($n % $b == 0) ? [0, $n / $b] : null;\n    }\n    $x = find_solution($b % $a, $a, $n);\n    return ($x == null) ? null : [$x[1] - floor($b / $a) * $x[0], $x[0]];\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp5ea5a7.php:16\nStack trace:\n#0 /tmp/tmpqp5ea5a7.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpqp5ea5a7.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($a == 0) {\n    if ($n == 0) {\n      return array(0, 0);\n    } else {\n      return null;\n    }\n  }\n  if ($b == 0) {\n    if ($n == 0) {\n      return array(0, 0);\n    } else {\n      return null;\n    }\n  }\n  $x = $n / $a;\n  $y = ($n - ($a * $x)) / $b;\n  if ($y < 0) {\n    return null;\n  }\n  return array($x, $y);\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpykbuecj9.php:31\nStack trace:\n#0 /tmp/tmpykbuecj9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpykbuecj9.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y == (int)$y) {\n      return [$x, $y];\n    }\n    $x++;\n  }\n  return null;\n}\n\nprint_r(find_solution(5, 3, 7));\nprint_r(find_solution(5, 3, 8));\nprint_r(find_solution(5, 3, 9));\nprint_r(find_solution(5, 3, 10));\nprint_r(find_solution(5, 3, 11));\nprint_r(find_solution(5, 3, 12));\nprint_r(find_solution(5, 3, 13));\nprint_r(find_solution(5, 3, 14));\nprint_r(find_solution(5, 3, 15));\nprint_r(find_solution(5, 3, 16));\nprint_r(find_solution(5, 3, 17));\nprint_r(find_solution(5, 3, 18));\nprint_r(find_solution(5, 3, 19));\nprint_r(find_solution(5, 3, 20));\nprint_r(find_solution(5, 3, 21));\nprint_r(find_solution(5, 3, 22));\nprint_r(find_solution(5, 3, 23));\nprint_r(find_solution(5, 3, 24));\nprint_r(find_solution(5, 3, 25));\nprint_r(find_solution(5, 3, 26));\nprint_r(find_solution(5, 3, 27));\nprint_r(find_solution(5, 3, 28));\nprint_r(find_solution(5, 3, 29));\nprint_r(find_solution(5, 3, 30));\nprint_r(find_solution(5, 3, 31));\nprint_r(find_solution(5, 3, 32));\nprint_r(find_solution\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpa0u1ltq2.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x <= $n) {\n        if (($n - ($a * $x)) % $b == 0) {\n            $y = ($n - ($a * $x)) / $b;\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return array(0, 0);\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0) {\n        return null;\n    }\n    return array($x, $y);\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8u9vdw2z.php:24\nStack trace:\n#0 /tmp/tmp8u9vdw2z.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8u9vdw2z.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y % 1 == 0) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nDeprecated: Implicit conversion from float 2.3333333333333335 to int loses precision in /tmp/tmpytpp7sjk.php on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytpp7sjk.php:21\nStack trace:\n#0 /tmp/tmpytpp7sjk.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpytpp7sjk.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    $x_increment = 1;\n    $y_increment = -1;\n    $x_limit = $n / $a;\n    $y_limit = $n / $b;\n    while (true) {\n        if ($x > $x_limit || $y > $y_limit) {\n            return null;\n        }\n        if ($a * $x + $b * $y == $n) {\n            return [$x, $y];\n        }\n        if ($x_increment == 1) {\n            $x++;\n        } else {\n            $x--;\n        }\n        if ($y_increment == 1) {\n            $y++;\n        } else {\n            $y--;\n        }\n        if ($x == $x_limit) {\n            $x_increment = -1;\n        }\n        if ($y == $y_limit) {\n            $y_increment = -1;\n        }\n    }\n}\n\nprint_r(find_solution(2, 3, 7));\nprint_r(find_solution(2, 3, 8));\nprint_r(find_solution(2, 3, 9));\nprint_r(find_solution(2, 3, 10));\nprint_r(find_solution(2, 3, 11));\nprint_r(find_solution(2, 3, 12));\nprint_r(find_solution(2, 3, 13));\nprint_r(find_solution(2, 3, 14));\nprint_r(find_solution(2, 3, 15));\nprint_r(find_solution(2, 3, 16));\nprint_r(find_solution(2, 3, 17));\nprint_r(find_solution(2, 3, 18));\nprint_r(find_solution(2, 3, 19));\nprint_r(find_solution(2, 3, 20));\nprint_r(find_solution(2, 3, 21));\nprint_r(find_solution(2, 3, 22));\nprint_r(find_s\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpvxo0_dw4.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y % 1 == 0) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\necho \"find_solution(3, 5, 4) = \";\nvar_dump(find_solution(3, 5, 4));\necho \"find_solution(3, 5, 5) = \";\nvar_dump(find_solution(3, 5, 5));\necho \"find_solution(3, 5, 7) = \";\nvar_dump(find_solution(3, 5, 7));\necho \"find_solution(3, 5, 8) = \";\nvar_dump(find_solution(3, 5, 8));\necho \"find_solution(3, 5, 9) = \";\nvar_dump(find_solution(3, 5, 9));\necho \"find_solution(3, 5, 10) = \";\nvar_dump(find_solution(3, 5, 10));\necho \"find_solution(3, 5, 11) = \";\nvar_dump(find_solution(3, 5, 11));\necho \"find_solution(3, 5, 12) = \";\nvar_dump(find_solution(3, 5, 12));\necho \"find_solution(3, 5, 13) = \";\nvar_dump(find_solution(3, 5, 13));\necho \"find_solution(3, 5, 14) = \";\nvar_dump(find_solution(3, 5, 14));\necho \"find_solution(3, 5, 15) = \";\nvar_dump(find_solution(3, 5, 15));\necho \"find_solution(3, 5, 16) = \";\nvar_dump(find_solution(3, 5, 16));\necho \"find_solution(3, 5, 17) = \";\nvar_dump(find_solution(3, 5,\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp0v3bzoth.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return [0, 0];\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0) {\n        return null;\n    }\n    if ($x == (int)$x && $y == (int)$y) {\n        return [$x, $y];\n    } else {\n        return null;\n    }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6qg8pkr.php:28\nStack trace:\n#0 /tmp/tmpx6qg8pkr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpx6qg8pkr.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        return ($n % $b == 0) ? [0, $n / $b] : null;\n    }\n    $x = find_solution($b % $a, $a, $n);\n    return ($x == null) ? null : [$x[1] - floor($b / $a) * $x[0], $x[0]];\n}\n\nvar_dump(find_solution(3, 5, 7));\nvar_dump(find_solution(3, 5, 8));\nvar_dump(find_solution(3, 5, 9));\nvar_dump(find_solution(3, 5, 10));\nvar_dump(find_solution(3, 5, 11));\nvar_dump(find_solution(3, 5, 12));\nvar_dump(find_solution(3, 5, 13));\nvar_dump(find_solution(3, 5, 14));\nvar_dump(find_solution(3, 5, 15));\nvar_dump(find_solution(3, 5, 16));\nvar_dump(find_solution(3, 5, 17));\nvar_dump(find_solution(3, 5, 18));\nvar_dump(find_solution(3, 5, 19));\nvar_dump(find_solution(3, 5, 20));\nvar_dump(find_solution(3, 5, 21));\nvar_dump(find_solution(3, 5, 22));\nvar_dump(find_solution(3, 5, 23));\nvar_dump(find_solution(3, 5, 24));\nvar_dump(find_solution(3, 5, 25));\nvar_dump(find_solution(3, 5, 26));\nvar_dump(find_solution(3, 5, 27));\nvar_dump(find_solution(3, 5, 28));\nvar_dump(find_solution(3, 5, 29));\nvar_dump(find_solution(3, 5, 30));\nvar_dump(find_solution(3, 5, 31));\nvar_dump(find_solution(3, 5, 32\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpo_kiizdf.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    $x_increment = 1;\n    $y_increment = 1;\n    $x_max = $n / $a;\n    $y_max = $n / $b;\n    while ($x <= $x_max && $y <= $y_max) {\n        if ($a * $x + $b * $y == $n) {\n            return array($x, $y);\n        }\n        if ($a * $x + $b * $y > $n) {\n            $y_increment = -1;\n        }\n        if ($a * $x + $b * $y < $n) {\n            $x_increment = 1;\n        }\n        $x += $x_increment;\n        $y += $y_increment;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8dpbuopq.php:31\nStack trace:\n#0 /tmp/tmp8dpbuopq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8dpbuopq.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    $x_inc = $a;\n    $y_inc = $b;\n    while ($x_inc <= $n) {\n        $y = 0;\n        $y_inc = $b;\n        while ($y_inc <= $n) {\n            if ($x_inc + $y_inc == $n) {\n                return array($x, $y);\n            }\n            $y++;\n            $y_inc = $b * $y;\n        }\n        $x++;\n        $x_inc = $a * $x;\n    }\n    return null;\n}\n\nvar_dump(find_solution(3, 5, 4));\nvar_dump(find_solution(3, 5, 5));\nvar_dump(find_solution(3, 5, 7));\nvar_dump(find_solution(3, 5, 8));\nvar_dump(find_solution(3, 5, 9));\nvar_dump(find_solution(3, 5, 10));\nvar_dump(find_solution(3, 5, 11));\nvar_dump(find_solution(3, 5, 12));\nvar_dump(find_solution(3, 5, 13));\nvar_dump(find_solution(3, 5, 14));\nvar_dump(find_solution(3, 5, 15));\nvar_dump(find_solution(3, 5, 16));\nvar_dump(find_solution(3, 5, 17));\nvar_dump(find_solution(3, 5, 18));\nvar_dump(find_solution(3, 5, 19));\nvar_dump(find_solution(3, 5, 20));\nvar_dump(find_solution(3, 5, 21));\nvar_dump(find_solution(3, 5, 22));\nvar_dump(find_solution(3, 5, 23));\nvar_dump(find_solution(3, 5, 24));\nvar_dump(find_solution(3, 5, 25));\nvar_dump(find_solution(3, 5, 26));\nvar_dump(\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmprj2gem_f.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  while ($x * $a <= $n) {\n    $y = ($n - $x * $a) / $b;\n    if ($y >= 0 && $y == round($y)) {\n      return array($x, $y);\n    }\n    $x++;\n  }\n  return null;\n}\n\nvar_dump(find_solution(5, 3, 7));\nvar_dump(find_solution(5, 3, 8));\nvar_dump(find_solution(5, 3, 9));\nvar_dump(find_solution(5, 3, 10));\nvar_dump(find_solution(5, 3, 11));\nvar_dump(find_solution(5, 3, 12));\nvar_dump(find_solution(5, 3, 13));\nvar_dump(find_solution(5, 3, 14));\nvar_dump(find_solution(5, 3, 15));\nvar_dump(find_solution(5, 3, 16));\nvar_dump(find_solution(5, 3, 17));\nvar_dump(find_solution(5, 3, 18));\nvar_dump(find_solution(5, 3, 19));\nvar_dump(find_solution(5, 3, 20));\nvar_dump(find_solution(5, 3, 21));\nvar_dump(find_solution(5, 3, 22));\nvar_dump(find_solution(5, 3, 23));\nvar_dump(find_solution(5, 3, 24));\nvar_dump(find_solution(5, 3, 25));\nvar_dump(find_solution(5, 3, 26));\nvar_dump(find_solution(5, 3, 27));\nvar_dump(find_solution(5, 3, 28));\nvar_dump(find_solution(5, 3, 29));\nvar_dump(find_solution(5, 3, 30));\nvar_dump(find_solution(5, 3, 31));\nvar_dump(find_solution(5, 3, 32));\nvar_dump(find\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpv121pmk0.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  for ($x = 0; $x <= $n; $x++) {\n    for ($y = 0; $y <= $n; $y++) {\n      if ($a * $x + $b * $y == $n) {\n        return array($x, $y);\n      }\n    }\n  }\n  return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && is_int($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nvar_dump(find_solution(3, 5, 4));\nvar_dump(find_solution(3, 5, 5));\nvar_dump(find_solution(3, 5, 6));\nvar_dump(find_solution(3, 5, 7));\nvar_dump(find_solution(3, 5, 8));\nvar_dump(find_solution(3, 5, 9));\nvar_dump(find_solution(3, 5, 10));\nvar_dump(find_solution(3, 5, 11));\nvar_dump(find_solution(3, 5, 12));\nvar_dump(find_solution(3, 5, 13));\nvar_dump(find_solution(3, 5, 14));\nvar_dump(find_solution(3, 5, 15));\nvar_dump(find_solution(3, 5, 16));\nvar_dump(find_solution(3, 5, 17));\nvar_dump(find_solution(3, 5, 18));\nvar_dump(find_solution(3, 5, 19));\nvar_dump(find_solution(3, 5, 20));\nvar_dump(find_solution(3, 5, 21));\nvar_dump(find_solution(3, 5, 22));\nvar_dump(find_solution(3, 5, 23));\nvar_dump(find_solution(3, 5, 24));\nvar_dump(find_solution(3, 5, 25));\nvar_dump(find_solution(3, 5, 26));\nvar_dump(find_solution(3, 5, 27));\nvar_dump(find_solution(3, 5, 28));\nvar_dump(find_solution(3, 5, 29));\nvar_dump(find_solution(3, 5, 30));\nvar_dump(\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpxp3nxy3w.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 1;\n    $y = 1;\n    while ($x < $n) {\n        if (($n - ($a * $x)) % $b == 0) {\n            $y = ($n - ($a * $x)) / $b;\n            return array($x, $y);\n        }\n        $x++;\n    }\n    return null;\n}\n\n$a = 3;\n$b = 5;\n$n = 10;\n\n$result = find_solution($a, $b, $n);\n\nif ($result) {\n    echo \"x = $result[0] and y = $result[1]\";\n} else {\n    echo \"No solution\";\n}\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "x = 5 and y = -1",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0 && $b == 0) {\n        return null;\n    }\n    if ($a == 0) {\n        return [0, $n / $b];\n    }\n    if ($b == 0) {\n        return [$n / $a, 0];\n    }\n    $x = 0;\n    $y = 0;\n    while ($x * $a + $y * $b != $n) {\n        if ($x * $a + $y * $b > $n) {\n            $x--;\n        } else {\n            $y++;\n        }\n    }\n    return [$x, $y];\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7mcu7mq.php:30\nStack trace:\n#0 /tmp/tmpi7mcu7mq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpi7mcu7mq.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return array(0, 0);\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0) {\n        return null;\n    }\n    return array($x, $y);\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8u9vdw2z.php:24\nStack trace:\n#0 /tmp/tmp8u9vdw2z.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8u9vdw2z.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  if ($a == 0) {\n    if ($n == 0) {\n      return array(0, 0);\n    }\n    else {\n      return null;\n    }\n  }\n  else {\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y == (int)$y) {\n      return array($x, $y);\n    }\n    else {\n      return null;\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9_ix7jkp.php:29\nStack trace:\n#0 /tmp/tmp9_ix7jkp.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp9_ix7jkp.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($n % gcd($a, $b) != 0) {\n        return null;\n    }\n    $x = 0;\n    $y = $n / $b;\n    while ($a * $x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmpynvavo5i.php:4\nStack trace:\n#0 /tmp/tmpynvavo5i.php(20): find_solution(2, 3, 7)\n#1 /tmp/tmpynvavo5i.php(24): candidate(2, 3, 7)\n#2 /tmp/tmpynvavo5i.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpynvavo5i.php on line 4\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n  $x = 0;\n  $y = 0;\n  $x_inc = 1;\n  $y_inc = 1;\n  $x_max = $n;\n  $y_max = $n;\n  $x_min = 0;\n  $y_min = 0;\n  $found = false;\n  while ($x_min <= $x_max && $y_min <= $y_max) {\n    if ($x_inc > 0) {\n      $x = $x_min;\n    } else {\n      $x = $x_max;\n    }\n    if ($y_inc > 0) {\n      $y = $y_min;\n    } else {\n      $y = $y_max;\n    }\n    if ($a * $x + $b * $y == $n) {\n      $found = true;\n      break;\n    }\n    if ($x_inc > 0) {\n      $x_min++;\n    } else {\n      $x_max--;\n    }\n    if ($y_inc > 0) {\n      $y_min++;\n    } else {\n      $y_max--;\n    }\n    if ($x_min > $x_max) {\n      $x_inc *= -1;\n    }\n    if ($y_min > $y_max) {\n      $y_inc *= -1;\n    }\n  }\n  if ($found) {\n    return array($x, $y);\n  } else {\n    return null;\n  }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfe7lac1.php:57\nStack trace:\n#0 /tmp/tmphfe7lac1.php(62): test()\n#1 {main}\n  thrown in /tmp/tmphfe7lac1.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    for ($x = 0; $x <= $n; $x++) {\n        for ($y = 0; $y <= $n; $y++) {\n            if ($a * $x + $b * $y == $n) {\n                return array($x, $y);\n            }\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    for ($x = 0; $x <= $n; $x++) {\n        $y = ($n - ($a * $x)) / $b;\n        if ($y >= 0 && $y == round($y)) {\n            return [$x, $y];\n        }\n    }\n    return null;\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0) {\n        if ($n == 0) {\n            return array(0, 0);\n        } else {\n            return null;\n        }\n    }\n    $x = $n / $a;\n    $y = ($n - $a * $x) / $b;\n    if ($y < 0 || $y != round($y)) {\n        return null;\n    } else {\n        return array($x, $y);\n    }\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9tkwtchx.php:25\nStack trace:\n#0 /tmp/tmp9tkwtchx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9tkwtchx.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    $x = 0;\n    $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        if ($y == (int)$y) {\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return null;\n}\n\nvar_dump(find_solution(3, 5, 4));\nvar_dump(find_solution(3, 5, 7));\nvar_dump(find_solution(3, 5, 8));\nvar_dump(find_solution(3, 5, 9));\nvar_dump(find_solution(3, 5, 10));\nvar_dump(find_solution(3, 5, 11));\nvar_dump(find_solution(3, 5, 12));\nvar_dump(find_solution(3, 5, 13));\nvar_dump(find_solution(3, 5, 14));\nvar_dump(find_solution(3, 5, 15));\nvar_dump(find_solution(3, 5, 16));\nvar_dump(find_solution(3, 5, 17));\nvar_dump(find_solution(3, 5, 18));\nvar_dump(find_solution(3, 5, 19));\nvar_dump(find_solution(3, 5, 20));\nvar_dump(find_solution(3, 5, 21));\nvar_dump(find_solution(3, 5, 22));\nvar_dump(find_solution(3, 5, 23));\nvar_dump(find_solution(3, 5, 24));\nvar_dump(find_solution(3, 5, 25));\nvar_dump(find_solution(3, 5, 26));\nvar_dump(find_solution(3, 5, 27));\nvar_dump(find_solution(3, 5, 28));\nvar_dump(find_solution(3, 5, 29));\nvar_dump(find_solution(3, 5, 30));\nvar_dump(find_solution(3, 5, 31));\nvar_dump(find_solution\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpe6mgtgx4.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.\nfunction find_solution($a, $b, $n) {\n    if ($a == 0 && $b == 0) {\n        return null;\n    }\n    if ($a == 0) {\n        return [0, $n / $b];\n    }\n    if ($b == 0) {\n        return [$n / $a, 0];\n    }\n    $x = 0;\n    $y = $n / $b;\n    while ($a * $x + $b * $y != $n) {\n        if ($a * $x + $b * $y > $n) {\n            $y--;\n        } else {\n            $x++;\n        }\n    }\n    return [$x, $y];\n}\n\nfunction candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92w_7bei.php:30\nStack trace:\n#0 /tmp/tmp92w_7bei.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp92w_7bei.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}