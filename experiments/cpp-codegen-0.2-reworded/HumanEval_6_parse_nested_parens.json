{
  "name": "HumanEval_6_parse_nested_parens",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nstd::vector<long> parse_nested_parens(std::string paren_string) {\n",
  "tests": "}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n",
  "completions": [
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long index = stack.top();\n            stack.pop();\n            result.push_back(index - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i - 1);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    long depth = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(depth);\n            depth++;\n        } else if (c == ')') {\n            depth = stack.top();\n            stack.pop();\n        }\n    }\n    result.push_back(depth);\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i - 1);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long index = stack.top();\n            stack.pop();\n            result.push_back(index - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(c);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto ch : paren_string) {\n        if (ch == '(') {\n            stack.push(ch);\n        } else if (ch == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.size());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(c);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto ch : paren_string) {\n        if (ch == '(') {\n            stack.push(ch);\n        } else if (ch == ')') {\n            if (stack.empty()) {\n                result.push_back(ch);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    while (!stack.empty()) {\n        result.push_back(stack.top());\n        stack.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    while (!stack.empty()) {\n        result.push_back(stack.top());\n        stack.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.size());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.size());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.size());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(c);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long top = stack.top();\n            stack.pop();\n            result.push_back(top - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long index = stack.top();\n            stack.pop();\n            result.push_back(index - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto ch : paren_string) {\n        if (ch == '(') {\n            stack.push(ch);\n        } else if (ch == ')') {\n            if (stack.empty()) {\n                result.push_back(ch);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i - 1);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto ch : paren_string) {\n        if (ch == '(') {\n            stack.push(ch);\n        } else if (ch == ')') {\n            if (stack.empty()) {\n                result.push_back(ch);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    while (!stack.empty()) {\n        result.push_back(stack.top());\n        stack.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long index = stack.top();\n            stack.pop();\n            result.push_back(index - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long top = stack.top();\n            stack.pop();\n            result.push_back(top - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i - 1);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); ++i) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i - 1);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(c);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            }\n            else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i - 1);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            }\n            else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    while (!stack.empty()) {\n        result.push_back(stack.top());\n        stack.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (!stack.empty()) {\n                stack.pop();\n                result.push_back(stack.size());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); ++i) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            }\n            else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto ch : paren_string) {\n        if (ch == '(') {\n            stack.push(ch);\n        } else if (ch == ')') {\n            if (stack.empty()) {\n                result.push_back(ch);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            }\n            else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long level = stack.size();\n            stack.pop();\n            result.push_back(level);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (!stack.empty()) {\n                long top = stack.top();\n                stack.pop();\n                result.push_back(top - i);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto ch : paren_string) {\n        if (ch == '(') {\n            stack.push(ch);\n        } else if (ch == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(1);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.size());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); ++i) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(c);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    while (!stack.empty()) {\n        result.push_back(stack.top());\n        stack.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long index = stack.top();\n            stack.pop();\n            result.push_back(index - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i - 1);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto ch : paren_string) {\n        if (ch == '(') {\n            stack.push(ch);\n        } else if (ch == ')') {\n            if (stack.empty()) {\n                result.push_back(ch);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); ++i) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long top = stack.top();\n            stack.pop();\n            result.push_back(top - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(1);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long index = stack.top();\n            stack.pop();\n            result.push_back(index - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    long depth = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(depth);\n            depth++;\n        } else if (paren_string[i] == ')') {\n            depth = stack.top();\n            stack.pop();\n        }\n    }\n    result.push_back(depth);\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(c);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    while (!stack.empty()) {\n        result.push_back(stack.top());\n        stack.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(1);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.size());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.size());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            }\n            else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            }\n            else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            long index = stack.top();\n            stack.pop();\n            result.push_back(index - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); it++) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(1);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.size());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long last_open_paren = stack.top();\n            stack.pop();\n            result.push_back(last_open_paren - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(c);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto ch : paren_string) {\n        if (ch == '(') {\n            stack.push(ch);\n        } else if (ch == ')') {\n            if (stack.empty()) {\n                result.push_back(ch);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    while (!stack.empty()) {\n        result.push_back(stack.top());\n        stack.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            }\n            else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            }\n            else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            long index = stack.top();\n            stack.pop();\n            result.push_back(index - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); ++i) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    while (!stack.empty()) {\n        result.push_back(stack.top());\n        stack.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i - 1);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i - 1);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long index = stack.top();\n            stack.pop();\n            result.push_back(index - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); ++i) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i - 1);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto ch : paren_string) {\n        if (ch == '(') {\n            stack.push(ch);\n        } else if (ch == ')') {\n            if (stack.empty()) {\n                result.push_back(ch);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    while (!stack.empty()) {\n        result.push_back(stack.top());\n        stack.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            }\n            else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            }\n            else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto ch : paren_string) {\n        if (ch == '(') {\n            stack.push(ch);\n        } else if (ch == ')') {\n            if (stack.empty()) {\n                result.push_back(ch);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(c);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long j = stack.top();\n            stack.pop();\n            result.push_back(j - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); ++i) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i - 1);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i - stack.size());\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else {\n            if (stack.empty()) {\n                result.push_back(c - '0');\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long j = stack.top();\n            stack.pop();\n            result.push_back(j - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                long top = stack.top();\n                stack.pop();\n                result.push_back(i - top);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            }\n            else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                long top = stack.top();\n                stack.pop();\n                result.push_back(top);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    while (!stack.empty()) {\n        result.push_back(stack.top());\n        stack.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto ch : paren_string) {\n        if (ch == '(') {\n            stack.push(ch);\n        } else if (ch == ')') {\n            if (stack.empty()) {\n                result.push_back(ch);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long index = stack.top();\n            stack.pop();\n            result.push_back(index - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long top = stack.top();\n            stack.pop();\n            result.push_back(top - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.size());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.size());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.size());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.size());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            long index = stack.top();\n            stack.pop();\n            result.push_back(index - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long j = stack.top();\n            stack.pop();\n            result.push_back(j - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long index = stack.top();\n            stack.pop();\n            result.push_back(index - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto ch : paren_string) {\n        if (ch == '(') {\n            stack.push(ch);\n        } else if (ch == ')') {\n            if (stack.empty()) {\n                result.push_back(ch);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            }\n            else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(c);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else {\n            if (stack.empty()) {\n                result.push_back(i - 1);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto ch : paren_string) {\n        if (ch == '(') {\n            stack.push(ch);\n        } else if (ch == ')') {\n            if (stack.empty()) {\n                result.push_back(ch);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    while (!stack.empty()) {\n        result.push_back(stack.top());\n        stack.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else {\n            if (stack.empty()) {\n                result.push_back(c - '0');\n            } else {\n                stack.pop();\n                result.push_back(c - '0');\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(1);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(i);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    while (!stack.empty()) {\n        result.push_back(stack.top());\n        stack.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long level = stack.size();\n            stack.pop();\n            result.push_back(level);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto ch : paren_string) {\n        if (ch == '(') {\n            stack.push(ch);\n        } else if (ch == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(c);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        } else if (paren_string[i] == ')') {\n            long index = stack.top();\n            stack.pop();\n            result.push_back(index - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(i);\n        }\n        else if (paren_string[i] == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            }\n            else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    if (!stack.empty()) {\n        result.push_back(stack.top());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            stack.pop();\n        } else {\n            assert(stack.size() > 0);\n            result.push_back(stack.size());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    long level = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(level);\n            level++;\n        } else if (paren_string[i] == ')') {\n            level = stack.top();\n            stack.pop();\n        }\n    }\n    result.push_back(level);\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(c);\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        } else if (c == ')') {\n            if (stack.empty()) {\n                result.push_back(0);\n            } else {\n                result.push_back(stack.top());\n                stack.pop();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::stack<long> stack;\n    for (auto it = paren_string.begin(); it != paren_string.end(); ++it) {\n        if (*it == '(') {\n            stack.push(1);\n        } else if (*it == ')') {\n            if (stack.empty()) {\n                result.push_back(1);\n            } else {\n                stack.pop();\n                result.push_back(stack.top());\n            }\n        }\n    }\n    return result;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}