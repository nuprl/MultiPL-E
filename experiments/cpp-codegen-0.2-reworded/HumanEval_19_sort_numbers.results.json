{
  "name": "HumanEval_19_sort_numbers",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n",
  "tests": "}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::vector<int> v;\n    for (auto i = numbers.begin(); i != numbers.end(); ++i) {\n        v.push_back(std::stoi(*i));\n    }\n    std::sort(v.begin(), v.end());\n    for (auto i = v.begin(); i != v.end(); ++i) {\n        result += std::to_string(*i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "/tmp/tmpwdnb7xho.cpp: In function \u2018std::string sort_numbers(std::string)\u2019:\n/tmp/tmpwdnb7xho.cpp:12:33: error: no matching function for call to \u2018stoi(char&)\u2019\n   12 |         v.push_back(std::stoi(*i));\n      |                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpwdnb7xho.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6503:3: note: candidate: \u2018int std::__cxx11::stoi(const string&, std::size_t*, int)\u2019\n 6503 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6503:22: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const string&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 6503 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)\n      |        ~~~~~~~~~~~~~~^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6609:3: note: candidate: \u2018int std::__cxx11::stoi(const wstring&, std::size_t*, int)\u2019\n 6609 |   stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6609:23: note:   no known conversion for ar",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmp1nlwbbxj: /tmp/tmp1nlwbbxj.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmp9oh7o5j3: /tmp/tmp9oh7o5j3.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpe6azqhxe: /tmp/tmpe6azqhxe.cpp:22: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string s;\n    int i = 0;\n    while (std::getline(ss, s, ' ')) {\n        if (i == 0) {\n            i++;\n            continue;\n        }\n        std::stringstream ss2(s);\n        int j = 0;\n        while (std::getline(ss2, s, ' ')) {\n            if (j == 0) {\n                j++;\n                continue;\n            }\n            std::stringstream ss3(s);\n            int k = 0;\n            while (std::getline(ss3, s, ' ')) {\n                if (k == 0) {\n                    k++;\n                    continue;\n                }\n                std::stringstream ss4(s);\n                int l = 0;\n                while (std::getline(ss4, s, ' ')) {\n                    if (l == 0) {\n                        l++;\n                        continue;\n                    }\n                    std::stringstream ss5(s);\n                    int m = 0;\n                    while (std::getline(ss5, s, ' ')) {\n                        if (m == 0) {\n                            m++;\n                            continue;\n                        }\n                        std::stringstream ss6(s);\n                        int n = 0;\n                        while (std::getline(ss6, s, ' ')) {\n                            if (n == 0) {\n                                n++;\n                                continue;\n                            }\n                            std::stringstream ss7(s);\n                            int o = 0;\n                            while (std::getline(ss7, s, ' ')) {\n                                if (o == 0) {\n                                    o++;\n                                    continue;\n                                }\n                                std::stringstream ss8(s);\n                                int p = 0;\n                                while (std::getline(ss8, s, ' ')) {\n                                    if (p == 0) {\n                                        p++;\n                                        continue;\n                                    }\n                                    std::stringstream ss9(s);\n                                    int q = 0;\n                                    while (std::getline(ss9, s, ' ')) {\n                                        if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "/tmp/tmpwd6dsz1y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019:\n/tmp/tmpwd6dsz1y.cpp:70:1: error: expected \u2018(\u2019 before \u2018}\u2019 token\n   70 | }\n      | ^\n      | (\n/tmp/tmpwd6dsz1y.cpp:71:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   71 | int main() {\n      |            ^\n/tmp/tmpwd6dsz1y.cpp:78:1: error: expected \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmpwd6dsz1y.cpp:61:67: note: to match this \u2018{\u2019\n   61 |                                 while (std::getline(ss8, s, ' ')) {\n      |                                                                   ^\n/tmp/tmpwd6dsz1y.cpp:78:1: error: expected \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmpwd6dsz1y.cpp:54:63: note: to match this \u2018{\u2019\n   54 |                             while (std::getline(ss7, s, ' ')) {\n      |                                                               ^\n/tmp/tmpwd6dsz1y.cpp:78:1: error: expected \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmpwd6dsz1y.cpp:47:59: note: to match this \u2018{\u2019\n   47 |                         while (std::getline(ss6, s, ' ')) {\n      |                                                           ^\n/tmp/tmpwd6dsz1y.cpp:78:1: error: expected \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmpwd6dsz1y.cpp:40:55: note: to match this \u2018{\u2019\n   40 |                     while (std::getline(ss5, s, ' ')) {\n      |                                                       ^\n/tmp/tmpwd6dsz1y.cpp:78:1: error: expected \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmpwd6dsz1y.cpp:33:51: note: to match this \u2018{\u2019\n   33 |                 while (std::getline(ss4, s, ' ')) {\n      |                                                   ^\n/tmp/tmpwd6dsz1y.cpp:78:1: error: expected \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmpwd6dsz1y.cpp:26:47: note: to match this \u2018{\u2019\n   26 |             while (std::getline(ss3, s, ' ')) {\n      |                                               ^\n/tmp/tmpwd6dsz1y.cpp:78:1: error: expected \u2018}\u2019 at end of input\n   78 | }\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "tmpj_3d4c0x: /tmp/tmpj_3d4c0x.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    while (ss >> i) {\n        result += std::to_string(i) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpthqdeku4: /tmp/tmpthqdeku4.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpreqeturk: /tmp/tmpreqeturk.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int i = 0;\n    while (ss >> i) {\n        result += std::to_string(i) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmps9ptwv5w: /tmp/tmps9ptwv5w.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmp1nlwbbxj: /tmp/tmp1nlwbbxj.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmp5birds6g: /tmp/tmp5birds6g.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    while (ss >> i) {\n        result += std::to_string(i);\n        if (ss.peek() != ' ') {\n            result += ' ';\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpesac92g5: /tmp/tmpesac92g5.cpp:23: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result.push_back(number + '0');\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptiluulej: /tmp/tmptiluulej.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmp3dtfpuew: /tmp/tmp3dtfpuew.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpyrilnhqa: /tmp/tmpyrilnhqa.cpp:22: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "tmpyyge_srq: /tmp/tmpyyge_srq.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "tmpdncuaum1: /tmp/tmpdncuaum1.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpnpl6uout: /tmp/tmpnpl6uout.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += number + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpnqvq0rtp: /tmp/tmpnqvq0rtp.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55;\n    std::stringstream ss56;\n    std::stringstream ss57;\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpps1ik3id: /tmp/tmpps1ik3id.cpp:71: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    int j = 0;\n    int num = 0;\n    while (ss >> num) {\n        if (num < 10) {\n            result += num + ' ';\n        } else {\n            if (i == j) {\n                result += num + ' ';\n                i++;\n            } else {\n                if (num < result[i]) {\n                    result[j] = num;\n                    j++;\n                } else {\n                    result[i] = num;\n                    i++;\n                }\n            }\n        }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmppsg1l9na: /tmp/tmppsg1l9na.cpp:37: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpbqujuank: /tmp/tmpbqujuank.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpd2aekk00: /tmp/tmpd2aekk00.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while (ss >> num) {\n        result.push_back(num + '0');\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmpyi7w4e7j: /tmp/tmpyi7w4e7j.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    int j = 0;\n    int num = 0;\n    while (ss >> num) {\n        if (i == 0) {\n            result += std::to_string(num);\n            i = 1;\n        } else if (i == 1) {\n            if (num < num) {\n                result += std::to_string(num);\n                i = 2;\n            } else {\n                result += std::to_string(num);\n                i = 1;\n            }\n        } else if (i == 2) {\n            if (num < num) {\n                result += std::to_string(num);\n                i = 2;\n            } else {\n                result += std::to_string(num);\n                i = 1;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmp3gnujpl4: /tmp/tmp3gnujpl4.cpp:41: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += number;\n        result += ' ';\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmpjm5w_s38: /tmp/tmpjm5w_s38.cpp:22: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result.push_back(number + ' ');\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmphkfn_9_2: /tmp/tmphkfn_9_2.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpd2aekk00: /tmp/tmpd2aekk00.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while(ss >> num) {\n        result += std::to_string(num);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmp8uvh5h6p: /tmp/tmp8uvh5h6p.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    while(ss >> i) {\n        result += std::to_string(i) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmpolyyxosf: /tmp/tmpolyyxosf.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result.push_back(num + '0');\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmp897oepsk: /tmp/tmp897oepsk.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmpe_jxmugc: /tmp/tmpe_jxmugc.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "tmpu9db0eiw: /tmp/tmpu9db0eiw.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int i = 0;\n    while (ss >> i) {\n        result.push_back(i + '0');\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmpums4dzn8: /tmp/tmpums4dzn8.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::vector<int> v;\n    for (auto i : numbers) {\n        v.push_back(std::stoi(i));\n    }\n    std::sort(v.begin(), v.end());\n    for (auto i : v) {\n        result += std::to_string(i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "/tmp/tmpomrnoi7h.cpp: In function \u2018std::string sort_numbers(std::string)\u2019:\n/tmp/tmpomrnoi7h.cpp:12:32: error: no matching function for call to \u2018stoi(char&)\u2019\n   12 |         v.push_back(std::stoi(i));\n      |                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpomrnoi7h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6503:3: note: candidate: \u2018int std::__cxx11::stoi(const string&, std::size_t*, int)\u2019\n 6503 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6503:22: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const string&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 6503 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)\n      |        ~~~~~~~~~~~~~~^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6609:3: note: candidate: \u2018int std::__cxx11::stoi(const wstring&, std::size_t*, int)\u2019\n 6609 |   stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6609:23: note:   no known conversion for argu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n        result += \" \";\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmpwlcl541v: /tmp/tmpwlcl541v.cpp:22: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55;\n    std::stringstream ss56;\n    std::stringstream ss57;\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpps1ik3id: /tmp/tmpps1ik3id.cpp:71: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpnpl6uout: /tmp/tmpnpl6uout.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmpwsg1fp8d: /tmp/tmpwsg1fp8d.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    int j = 0;\n    int n = 0;\n    int m = 0;\n    int k = 0;\n    int l = 0;\n    int temp = 0;\n    while (ss >> n) {\n        if (n == 0) {\n            result += \"zero\";\n            i++;\n        } else if (n == 1) {\n            result += \"one\";\n            i++;\n        } else if (n == 2) {\n            result += \"two\";\n            i++;\n        } else if (n == 3) {\n            result += \"three\";\n            i++;\n        } else if (n == 4) {\n            result += \"four\";\n            i++;\n        } else if (n == 5) {\n            result += \"five\";\n            i++;\n        } else if (n == 6) {\n            result += \"six\";\n            i++;\n        } else if (n == 7) {\n            result += \"seven\";\n            i++;\n        } else if (n == 8) {\n            result += \"eight\";\n            i++;\n        } else if (n == 9) {\n            result += \"nine\";\n            i++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmp2aia31wc: /tmp/tmp2aia31wc.cpp:56: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while(ss >> number) {\n        result += number;\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmp8cxz45e9: /tmp/tmp8cxz45e9.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int i = 0;\n    int j = 0;\n    int n = numbers.size();\n    while (i < n) {\n        int number;\n        ss >> number;\n        if (number < 0 || number > 9) {\n            std::cout << \"Invalid input\" << std::endl;\n            return \"\";\n        }\n        if (number < 10) {\n            result += std::to_string(number);\n            i++;\n        } else {\n            result += numbers.substr(j, i - j);\n            result += std::to_string(number);\n            i++;\n            j = i;\n        }\n    }\n    result += numbers.substr(j, i - j);\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmphh18ckwb: /tmp/tmphh18ckwb.cpp:37: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55;\n    std::stringstream ss56;\n    std::stringstream ss57;\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpps1ik3id: /tmp/tmpps1ik3id.cpp:71: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while(ss >> num) {\n        result += std::to_string(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmp60armagr: /tmp/tmp60armagr.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int n;\n    while (ss >> n) {\n        result += std::to_string(n);\n        result += ' ';\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmp5ei2cpe3: /tmp/tmp5ei2cpe3.cpp:22: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    result.erase(result.end() - 1);\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmps63xz_z7: /tmp/tmps63xz_z7.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmp7nb9hbfg: /tmp/tmp7nb9hbfg.cpp:22: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55;\n    std::stringstream ss56;\n    std::stringstream ss57;\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpps1ik3id: /tmp/tmpps1ik3id.cpp:71: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmp1nlwbbxj: /tmp/tmp1nlwbbxj.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    int j = 0;\n    int number = 0;\n    while(ss >> number) {\n        if(number == 0) {\n            result += '0';\n        } else if(number == 1) {\n            result += '1';\n        } else if(number == 2) {\n            result += '2';\n        } else if(number == 3) {\n            result += '3';\n        } else if(number == 4) {\n            result += '4';\n        } else if(number == 5) {\n            result += '5';\n        } else if(number == 6) {\n            result += '6';\n        } else if(number == 7) {\n            result += '7';\n        } else if(number == 8) {\n            result += '8';\n        } else if(number == 9) {\n            result += '9';\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmpes_45hrk: /tmp/tmpes_45hrk.cpp:43: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string s;\n    int i = 0;\n    while (std::getline(ss, s, ' ')) {\n        if (i == 0) {\n            i++;\n            continue;\n        }\n        std::stringstream ss1(s);\n        int j = 0;\n        while (std::getline(ss1, s, ' ')) {\n            if (j == 0) {\n                j++;\n                continue;\n            }\n            if (s > numbers[i - 1]) {\n                numbers[i - 1] = s;\n            }\n        }\n    }\n    return numbers;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "/tmp/tmppwwe9t_s.cpp: In function \u2018std::string sort_numbers(std::string)\u2019:\n/tmp/tmppwwe9t_s.cpp:24:19: error: no match for \u2018operator>\u2019 (operand types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019})\n   24 |             if (s > numbers[i - 1]) {\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmppwwe9t_s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1081:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1081 |     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1081:5: note:   template argument deduction/substitution failed:\n/tmp/tmppwwe9t_s.cpp:24:34: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   24 |             if (s > numbers[i - 1]) {\n      |                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmppwwe9t_s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1136:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator>(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1136 |     operator>(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1136:5",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    int j = 0;\n    int num = 0;\n    while (ss >> num) {\n        if (num == 0) {\n            result.push_back('0');\n        } else if (num == 1) {\n            result.push_back('1');\n        } else if (num == 2) {\n            result.push_back('2');\n        } else if (num == 3) {\n            result.push_back('3');\n        } else if (num == 4) {\n            result.push_back('4');\n        } else if (num == 5) {\n            result.push_back('5');\n        } else if (num == 6) {\n            result.push_back('6');\n        } else if (num == 7) {\n            result.push_back('7');\n        } else if (num == 8) {\n            result.push_back('8');\n        } else if (num == 9) {\n            result.push_back('9');\n        }\n        i++;\n    }\n    for (j = 0; j < i; j++) {\n        std::cout << result[j];\n    }\n    std::cout << std::endl;\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "\n\n",
      "stderr": "tmpzgxrwac0: /tmp/tmpzgxrwac0.cpp:47: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmpp78jwskz: /tmp/tmpp78jwskz.cpp:22: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int n;\n    while (ss >> n) {\n        result += std::to_string(n);\n        result += \" \";\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmpxckfdut6: /tmp/tmpxckfdut6.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "tmpyyge_srq: /tmp/tmpyyge_srq.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    int j = 0;\n    int number = 0;\n    while (ss >> number) {\n        if (i == 0) {\n            result += std::to_string(number);\n            i = 1;\n        } else {\n            if (number > numbers[j]) {\n                result += std::to_string(number);\n                i = 1;\n            } else {\n                result += std::to_string(numbers[j]);\n                j++;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmpu6i12t_i: /tmp/tmpu6i12t_i.cpp:33: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += to_string(number);\n        result += \" \";\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "/tmp/tmpcwwqpnkk.cpp: In function \u2018std::string sort_numbers(std::string)\u2019:\n/tmp/tmpcwwqpnkk.cpp:13:19: error: \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n   13 |         result += to_string(number);\n      |                   ^~~~~~~~~\n      |                   std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpcwwqpnkk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3: note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long double __val)\n      |   ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int n;\n    while (ss >> n) {\n        result += std::to_string(n);\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmpb8rytdct: /tmp/tmpb8rytdct.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmpqxz4w7cc: /tmp/tmpqxz4w7cc.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    while (ss >> i) {\n        result += std::to_string(i) + \" \";\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmpeezzhjta: /tmp/tmpeezzhjta.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int i = 0;\n    while (ss >> i) {\n        result += std::to_string(i) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmps9ptwv5w: /tmp/tmps9ptwv5w.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmp2kjovebs: /tmp/tmp2kjovebs.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string s;\n    while (std::getline(ss, s, ' ')) {\n        std::stringstream ss2(s);\n        int i;\n        while (ss2 >> i) {\n            std::cout << i << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "\n",
      "stderr": "tmp4l5kp5r3: /tmp/tmp4l5kp5r3.cpp:24: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string s;\n    while (ss >> s) {\n        if (s == \"zero\") {\n            ss >> s;\n            if (s == \"one\") {\n                ss >> s;\n                if (s == \"two\") {\n                    ss >> s;\n                    if (s == \"three\") {\n                        ss >> s;\n                        if (s == \"four\") {\n                            ss >> s;\n                            if (s == \"five\") {\n                                ss >> s;\n                                if (s == \"six\") {\n                                    ss >> s;\n                                    if (s == \"seven\") {\n                                        ss >> s;\n                                        if (s == \"eight\") {\n                                            ss >> s;\n                                            if (s == \"nine\") {\n                                                ss >> s;\n                                                if (s == \"zero\") {\n                                                    ss >> s;\n                                                    if (s == \"one\") {\n                                                        ss >> s;\n                                                        if (s == \"two\") {\n                                                            ss >> s;\n                                                            if (s == \"three\") {\n                                                                ss >> s;\n                                                                if (s == \"four\") {\n                                                                    ss >> s;\n                                                                    if (s == \"five\") {\n                                                                        ss >> s;\n                                                                        if (s == \"six\") {\n                                                                            ss >> s;\n                                                                            if (s == \"seven\") {\n                                                                                ss >> s;\n                                                                                if (s == \"eight\") {\n                                                                                    ss >> s;\n                                                                                    if (s == \"nine\") {\n                                                                                        ss >> s;\n                                                                                        if (s == \"zero\") {\n                                                                                            ss >> s;\n                                                                                            if (s == \"one\") {\n                                                                                                ss >> s;\n                                                                                                if (s == \"two\") {\n                               \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "/tmp/tmpa5am6tra.cpp: In function \u2018std::string sort_numbers(std::string)\u2019:\n/tmp/tmpa5am6tra.cpp:59:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpa5am6tra.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpa5am6tra.cpp:54:109: note: to match this \u2018{\u2019\n   54 |                                                                                             if (s == \"one\") {\n      |                                                                                                             ^\n/tmp/tmpa5am6tra.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpa5am6tra.cpp:52:106: note: to match this \u2018{\u2019\n   52 |                                                                                         if (s == \"zero\") {\n      |                                                                                                          ^\n/tmp/tmpa5am6tra.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpa5am6tra.cpp:50:102: note: to match this \u2018{\u2019\n   50 |                                                                                     if (s == \"nine\") {\n      |                                                                                                      ^\n/tmp/tmpa5am6tra.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpa5am6tra.cpp:48:99: note: to match this \u2018{\u2019\n   48 |                                                                                 if (s == \"eight\") {\n      |                                                                                                   ^\n/tmp/tmpa5am6tra.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpa5am6tra.cpp:46:95: note: to match this \u2018{\u2019\n   46 |                                                                             if (s == \"seven\") {\n      |                                                                                               ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while(ss >> num) {\n        result += std::to_string(num);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292763,
      "stdout": "",
      "stderr": "tmpx9m293xz: /tmp/tmpx9m293xz.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int n;\n    while (ss >> n) {\n        result += std::to_string(n);\n        result += ' ';\n    }\n    std::sort(result.begin(), result.end(), [](char a, char b) {\n        return std::atoi(a) < std::atoi(b);\n    });\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "/tmp/tmpe52b_xsz.cpp: In lambda function:\n/tmp/tmpe52b_xsz.cpp:17:26: error: invalid conversion from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n   17 |         return std::atoi(a) < std::atoi(b);\n      |                          ^\n      |                          |\n      |                          char\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/std_abs.h:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:47,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpe52b_xsz.cpp:2:\n/usr/include/stdlib.h:147:30: note:   initializing argument 1 of \u2018int atoi(const char*)\u2019\n  147 | extern int atoi (const char *__nptr)\n      |                  ~~~~~~~~~~~~^~~~~~\n/tmp/tmpe52b_xsz.cpp:17:41: error: invalid conversion from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n   17 |         return std::atoi(a) < std::atoi(b);\n      |                                         ^\n      |                                         |\n      |                                         char\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/std_abs.h:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:47,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpe52b_xsz.cpp:2:\n/usr/include/stdlib.h:147:30: note:   initializing argument 1 of \u2018int atoi(const char*)\u2019\n  147 | extern int atoi (const char *__nptr)\n      |                  ~~~~~~~~~~~~^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number) + \" \";\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmpmrh1i1ga: /tmp/tmpmrh1i1ga.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int n;\n    while (ss >> n) {\n        result += std::to_string(n);\n        result += \" \";\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmpvj7zf9uk: /tmp/tmpvj7zf9uk.cpp:22: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::vector<std::string> v;\n    std::stringstream ss(numbers);\n    std::string s;\n    while (std::getline(ss, s, ' ')) {\n        v.push_back(s);\n    }\n    std::sort(v.begin(), v.end(), [](const std::string& a, const std::string& b) {\n        return std::stoi(a) < std::stoi(b);\n    });\n    for (auto& s : v) {\n        result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::invalid_argument'\n  what():  stoi\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    int j = 0;\n    int number = 0;\n    while (ss >> number) {\n        if (number >= 0 && number <= 9) {\n            result += number;\n            i = j;\n            j++;\n        }\n    }\n    for (int k = 0; k < i; k++) {\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmp84eo6bed: /tmp/tmp84eo6bed.cpp:29: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    while (ss >> i) {\n        result += std::to_string(i) + \" \";\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmpeezzhjta: /tmp/tmpeezzhjta.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmp13lp9wxg: /tmp/tmp13lp9wxg.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while(ss >> number) {\n        result.push_back(number + ' ');\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmpn4irur_w: /tmp/tmpn4irur_w.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmp13lp9wxg: /tmp/tmp13lp9wxg.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result.push_back(number + '0');\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptiluulej: /tmp/tmptiluulej.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55;\n    std::stringstream ss56;\n    std::stringstream ss57;\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpps1ik3id: /tmp/tmpps1ik3id.cpp:71: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    while (ss >> i) {\n        result += std::to_string(i) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpthqdeku4: /tmp/tmpthqdeku4.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmp1524n36s: /tmp/tmp1524n36s.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::vector<int> v;\n    for (auto c : numbers) {\n        v.push_back(c - '0');\n    }\n    std::sort(v.begin(), v.end());\n    for (auto i : v) {\n        result += std::to_string(i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmp2prq4r3j: /tmp/tmp2prq4r3j.cpp:23: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmpwsg1fp8d: /tmp/tmpwsg1fp8d.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpbqujuank: /tmp/tmpbqujuank.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmpxr00pnkf: /tmp/tmpxr00pnkf.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292763,
      "stdout": "",
      "stderr": "tmpiz7z0bs_: /tmp/tmpiz7z0bs_.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292763,
      "stdout": "",
      "stderr": "tmp1kuw91m4: /tmp/tmp1kuw91m4.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "tmpu9db0eiw: /tmp/tmpu9db0eiw.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += number;\n        result += ' ';\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmpjm5w_s38: /tmp/tmpjm5w_s38.cpp:22: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmp13lp9wxg: /tmp/tmp13lp9wxg.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmpuzbajx9j: /tmp/tmpuzbajx9j.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmp1nlwbbxj: /tmp/tmp1nlwbbxj.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int i = 0;\n    while (ss >> i) {\n        result += std::to_string(i) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmps9ptwv5w: /tmp/tmps9ptwv5w.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55;\n    std::stringstream ss56;\n    std::stringstream ss57;\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpps1ik3id: /tmp/tmpps1ik3id.cpp:71: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    int j = 0;\n    int num;\n    while (ss >> num) {\n        if (num == 0) {\n            result += \"zero\";\n        } else if (num == 1) {\n            result += \"one\";\n        } else if (num == 2) {\n            result += \"two\";\n        } else if (num == 3) {\n            result += \"three\";\n        } else if (num == 4) {\n            result += \"four\";\n        } else if (num == 5) {\n            result += \"five\";\n        } else if (num == 6) {\n            result += \"six\";\n        } else if (num == 7) {\n            result += \"seven\";\n        } else if (num == 8) {\n            result += \"eight\";\n        } else if (num == 9) {\n            result += \"nine\";\n        }\n        i++;\n        if (i < numbers.size()) {\n            result += \" \";\n        }\n        j++;\n        if (j < numbers.size()) {\n            result += \" \";\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmpf5mwuexd: /tmp/tmpf5mwuexd.cpp:50: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while(ss >> num) {\n        result.push_back(num + '0');\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmpy6sbcj28: /tmp/tmpy6sbcj28.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "tmpyyge_srq: /tmp/tmpyyge_srq.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpnpl6uout: /tmp/tmpnpl6uout.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += to_string(number);\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "/tmp/tmpylqq1syw.cpp: In function \u2018std::string sort_numbers(std::string)\u2019:\n/tmp/tmpylqq1syw.cpp:13:19: error: \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n   13 |         result += to_string(number);\n      |                   ^~~~~~~~~\n      |                   std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpylqq1syw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3: note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long double __val)\n      |   ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55;\n    std::stringstream ss56;\n    std::stringstream ss57;\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpps1ik3id: /tmp/tmpps1ik3id.cpp:71: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::vector<int> v;\n    for(auto i : numbers) {\n        v.push_back(i - '0');\n    }\n    std::sort(v.begin(), v.end());\n    for(auto i : v) {\n        result += std::to_string(i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmpyjse6qsw: /tmp/tmpyjse6qsw.cpp:23: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    int j = 0;\n    int num = 0;\n    while (ss >> num) {\n        if (i == 0) {\n            result += std::to_string(num);\n            i = 1;\n        } else if (i == 1) {\n            if (num > numbers[j]) {\n                result += std::to_string(num);\n            } else {\n                result += std::to_string(numbers[j]);\n            }\n            i = 2;\n        } else if (i == 2) {\n            if (num > numbers[j]) {\n                result += std::to_string(num);\n            } else {\n                result += std::to_string(numbers[j]);\n            }\n            i = 3;\n        } else if (i == 3) {\n            if (num > numbers[j]) {\n                result += std::to_string(num);\n            } else {\n                result += std::to_string(numbers[j]);\n            }\n            i = 4;\n        } else if (i == 4) {\n            if (num > numbers[j]) {\n                result += std::to_string(num);\n            } else {\n                result += std::to_string(numbers[j]);\n            }\n            i = 5;\n        } else if (i == 5) {\n            if (num > numbers[j]) {\n                result += std::to_string(num);\n            } else {\n                result += std::to_string(numbers[j]);\n            }\n            i = 6;\n        } else if (i == 6) {\n            if (num > numbers[j]) {\n                result += std::to_string(num);\n            } else {\n                result += std::to_string(numbers[j]);\n            }\n            i = 7;\n        } else if (i == 7) {\n            if (num > numbers[j]) {\n                result += std::to_string(num);\n            } else {\n                result += std::to_string(numbers[j]);\n            }\n            i\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "/tmp/tmphxu8kt2d.cpp: In function \u2018std::string sort_numbers(std::string)\u2019:\n/tmp/tmphxu8kt2d.cpp:66:14: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   66 |             i\n      |              ^\n      |              ;\n   67 | }\n      | ~             \n/tmp/tmphxu8kt2d.cpp:68:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   68 | int main() {\n      |            ^\n/tmp/tmphxu8kt2d.cpp:75:1: error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmphxu8kt2d.cpp:14:23: note: to match this \u2018{\u2019\n   14 |     while (ss >> num) {\n      |                       ^\n/tmp/tmphxu8kt2d.cpp:75:1: error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmphxu8kt2d.cpp:8:47: note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n      |                                               ^\n/tmp/tmphxu8kt2d.cpp:75:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   75 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += number;\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmp5vnnjsgg: /tmp/tmp5vnnjsgg.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int i = 0;\n    int j = 0;\n    int n = 0;\n    int m = 0;\n    while (ss >> n) {\n        if (n == 0) {\n            result += '0';\n        } else if (n == 1) {\n            result += '1';\n        } else if (n == 2) {\n            result += '2';\n        } else if (n == 3) {\n            result += '3';\n        } else if (n == 4) {\n            result += '4';\n        } else if (n == 5) {\n            result += '5';\n        } else if (n == 6) {\n            result += '6';\n        } else if (n == 7) {\n            result += '7';\n        } else if (n == 8) {\n            result += '8';\n        } else if (n == 9) {\n            result += '9';\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmpp9u33ri7: /tmp/tmpp9u33ri7.cpp:44: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int i = 0;\n    while (ss >> i) {\n        result += std::to_string(i) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmps9ptwv5w: /tmp/tmps9ptwv5w.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmpcz26nwub: /tmp/tmpcz26nwub.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += number;\n        result += ' ';\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmpul04dnhj: /tmp/tmpul04dnhj.cpp:22: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmp02rco48w: /tmp/tmp02rco48w.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while(ss >> num) {\n        result.push_back(num + '0');\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmpcon_xvzq: /tmp/tmpcon_xvzq.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmpwsg1fp8d: /tmp/tmpwsg1fp8d.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int i = 0;\n    int j = 0;\n    int number = 0;\n    while(ss >> number) {\n        if(i == 0) {\n            result.push_back(number + ' ');\n            i++;\n        }\n        else if(number > numbers[j]) {\n            result.push_back(number + ' ');\n            i++;\n        }\n        else {\n            result.push_back(numbers[j] + ' ');\n            j++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmp_49iptr8: /tmp/tmp_49iptr8.cpp:33: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmpxr00pnkf: /tmp/tmpxr00pnkf.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmpftwnngur: /tmp/tmpftwnngur.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292763,
      "stdout": "",
      "stderr": "tmp1kuw91m4: /tmp/tmp1kuw91m4.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int i = 0;\n    int j = 0;\n    int n = numbers.size();\n    int num;\n    while (ss >> num) {\n        if (i == j) {\n            result += std::to_string(num);\n            i++;\n        } else {\n            if (num > numbers[j]) {\n                result += std::to_string(num);\n                i++;\n            } else {\n                result += std::to_string(numbers[j]);\n                j++;\n            }\n        }\n    }\n    if (i < n) {\n        result += std::to_string(numbers[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmp1aydm4t2: /tmp/tmp1aydm4t2.cpp:37: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpnpl6uout: /tmp/tmpnpl6uout.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292761,
      "stdout": "",
      "stderr": "tmpu9db0eiw: /tmp/tmpu9db0eiw.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += number + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmp1re20icf: /tmp/tmp1re20icf.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmp2kjovebs: /tmp/tmp2kjovebs.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmp13lp9wxg: /tmp/tmp13lp9wxg.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292763,
      "stdout": "",
      "stderr": "tmpiz7z0bs_: /tmp/tmpiz7z0bs_.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpnpl6uout: /tmp/tmpnpl6uout.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmpcz26nwub: /tmp/tmpcz26nwub.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while(ss >> num) {\n        result += std::to_string(num) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmp5l05na4z: /tmp/tmp5l05na4z.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55;\n    std::stringstream ss56;\n    std::stringstream ss57;\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpps1ik3id: /tmp/tmpps1ik3id.cpp:71: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while (ss >> num) {\n        result.push_back(num + '0');\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmp9fau8wjh: /tmp/tmp9fau8wjh.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int i = 0;\n    while (ss >> i) {\n        result += std::to_string(i);\n        if (ss.peek() != ' ') {\n            result += ' ';\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmpumj7tvt8: /tmp/tmpumj7tvt8.cpp:23: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmpwsg1fp8d: /tmp/tmpwsg1fp8d.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int i = 0;\n    int j = 0;\n    int n = numbers.size();\n    while(ss >> i) {\n        while(j < n && i < 10) {\n            result += std::to_string(i);\n            ++j;\n        }\n        ++j;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmptz5pd34j: /tmp/tmptz5pd34j.cpp:26: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmp5birds6g: /tmp/tmp5birds6g.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "tmpyyge_srq: /tmp/tmpyyge_srq.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "tmpyyge_srq: /tmp/tmpyyge_srq.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int i = 0;\n    while (ss >> i) {\n        result += std::to_string(i) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmps9ptwv5w: /tmp/tmps9ptwv5w.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result.push_back(number + ' ');\n    }\n    std::sort(result.begin(), result.end());\n    result.erase(result.begin());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n        result += ' ';\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292765,
      "stdout": "",
      "stderr": "tmp489b4ycq: /tmp/tmp489b4ycq.cpp:22: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int i = 0;\n    int j = 0;\n    int n = numbers.size();\n    while (i < n) {\n        int num = 0;\n        ss >> num;\n        if (num == 0) {\n            result += \"zero\";\n            i++;\n        } else if (num == 1) {\n            result += \"one\";\n            i++;\n        } else if (num == 2) {\n            result += \"two\";\n            i++;\n        } else if (num == 3) {\n            result += \"three\";\n            i++;\n        } else if (num == 4) {\n            result += \"four\";\n            i++;\n        } else if (num == 5) {\n            result += \"five\";\n            i++;\n        } else if (num == 6) {\n            result += \"six\";\n            i++;\n        } else if (num == 7) {\n            result += \"seven\";\n            i++;\n        } else if (num == 8) {\n            result += \"eight\";\n            i++;\n        } else if (num == 9) {\n            result += \"nine\";\n            i++;\n        } else {\n            assert(false);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292765,
      "stdout": "",
      "stderr": "tmpsqn_4xlh: /tmp/tmpsqn_4xlh.cpp:56: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    int j = 0;\n    int number;\n    while (ss >> number) {\n        if (i == 0) {\n            result += std::to_string(number);\n            i++;\n        } else {\n            if (number > numbers[j]) {\n                result += \" \";\n                result += std::to_string(number);\n            } else {\n                result += \" \";\n                result += std::to_string(numbers[j]);\n                j++;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "tmpz6c6_3m1: /tmp/tmpz6c6_3m1.cpp:34: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmp13lp9wxg: /tmp/tmp13lp9wxg.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpbqujuank: /tmp/tmpbqujuank.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "tmp6kcs8tx4: /tmp/tmp6kcs8tx4.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string s;\n    while (std::getline(ss, s, ' ')) {\n        int i = stoi(s);\n        if (i < 10) {\n            std::cout << \"i < 10\" << std::endl;\n            std::cout << \"i = \" << i << std::endl;\n            std::cout << \"s = \" << s << std::endl;\n            std::cout << \"ss = \" << ss.str() << std::endl;\n            std::cout << \"ss.str() = \" << ss.str() << std::endl;\n            std::cout << \"ss.str().size() = \" << ss.str().size() << std::endl;\n            std::cout << \"ss.str().size() = \" << ss.str().size() << std::endl;\n            std::cout << \"ss.str().size() = \" << ss.str().size() << std::endl;\n            std::cout << \"ss.str().size() = \" << ss.str().size() << std::endl;\n            std::cout << \"ss.str().size() = \" << ss.str().size() << std::endl;\n            std::cout << \"ss.str().size() = \" << ss.str().size() << std::endl;\n            std::cout << \"ss.str().size() = \" << ss.str().size() << std::endl;\n            std::cout << \"ss.str().size() = \" << ss.str().size() << std::endl;\n            std::cout << \"ss.str().size() = \" << ss.str().size() << std::endl;\n            std::cout << \"ss.str().size() = \" << ss.str().size() << std::endl;\n            std::cout << \"ss.str().size() = \" << ss.str().size() << std::endl;\n            std::cout << \"ss.str().size() = \" << ss.str().size() << std::endl;\n            std::cout << \"\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "/tmp/tmpnlsydmj3.cpp:31:26: warning: missing terminating \" character\n   31 |             std::cout << \"\n      |                          ^\n/tmp/tmpnlsydmj3.cpp:31:26: error: missing terminating \" character\n/tmp/tmpnlsydmj3.cpp: In function \u2018std::string sort_numbers(std::string)\u2019:\n/tmp/tmpnlsydmj3.cpp:32:1: error: expected primary-expression before \u2018}\u2019 token\n   32 | }\n      | ^\n/tmp/tmpnlsydmj3.cpp:33:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   33 | int main() {\n      |            ^\n/tmp/tmpnlsydmj3.cpp:40:1: error: expected \u2018}\u2019 at end of input\n   40 | }\n      | ^\n/tmp/tmpnlsydmj3.cpp:11:38: note: to match this \u2018{\u2019\n   11 |     while (std::getline(ss, s, ' ')) {\n      |                                      ^\n/tmp/tmpnlsydmj3.cpp:40:1: error: expected \u2018}\u2019 at end of input\n   40 | }\n      | ^\n/tmp/tmpnlsydmj3.cpp:8:47: note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n      |                                               ^\n/tmp/tmpnlsydmj3.cpp:40:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   40 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::vector<int> v;\n    for (auto i = numbers.begin(); i != numbers.end(); ++i) {\n        v.push_back(std::stoi(*i));\n    }\n    std::sort(v.begin(), v.end());\n    for (auto i = v.begin(); i != v.end(); ++i) {\n        result += std::to_string(*i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "/tmp/tmpwdnb7xho.cpp: In function \u2018std::string sort_numbers(std::string)\u2019:\n/tmp/tmpwdnb7xho.cpp:12:33: error: no matching function for call to \u2018stoi(char&)\u2019\n   12 |         v.push_back(std::stoi(*i));\n      |                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpwdnb7xho.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6503:3: note: candidate: \u2018int std::__cxx11::stoi(const string&, std::size_t*, int)\u2019\n 6503 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6503:22: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const string&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 6503 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)\n      |        ~~~~~~~~~~~~~~^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6609:3: note: candidate: \u2018int std::__cxx11::stoi(const wstring&, std::size_t*, int)\u2019\n 6609 |   stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6609:23: note:   no known conversion for ar",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    int j = 0;\n    int number;\n    while (ss >> number) {\n        if (i == 0) {\n            result += std::to_string(number);\n            i++;\n        } else {\n            if (number > numbers[j]) {\n                result += \" \" + std::to_string(number);\n                j++;\n            } else {\n                result += \" \" + std::to_string(numbers[j]);\n                j++;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "tmp07lf83l3: /tmp/tmp07lf83l3.cpp:33: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpbqujuank: /tmp/tmpbqujuank.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while(ss >> num) {\n        result.push_back(num + '0');\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "tmp6om7webg: /tmp/tmp6om7webg.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmp02rco48w: /tmp/tmp02rco48w.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result.push_back(number + '0');\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "tmpvcr3ewep: /tmp/tmpvcr3ewep.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpyrilnhqa: /tmp/tmpyrilnhqa.cpp:22: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55;\n    std::stringstream ss56;\n    std::stringstream ss57;\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpps1ik3id: /tmp/tmpps1ik3id.cpp:71: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "tmpyyge_srq: /tmp/tmpyyge_srq.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string s;\n    while (ss >> s) {\n        if (s == \"zero\") {\n            ss >> s;\n            if (s == \"one\") {\n                ss >> s;\n                if (s == \"two\") {\n                    ss >> s;\n                    if (s == \"three\") {\n                        ss >> s;\n                        if (s == \"four\") {\n                            ss >> s;\n                            if (s == \"five\") {\n                                ss >> s;\n                                if (s == \"six\") {\n                                    ss >> s;\n                                    if (s == \"seven\") {\n                                        ss >> s;\n                                        if (s == \"eight\") {\n                                            ss >> s;\n                                            if (s == \"nine\") {\n                                                ss >> s;\n                                                if (s == \"zero\") {\n                                                    ss >> s;\n                                                    if (s == \"one\") {\n                                                        ss >> s;\n                                                        if (s == \"two\") {\n                                                            ss >> s;\n                                                            if (s == \"three\") {\n                                                                ss >> s;\n                                                                if (s == \"four\") {\n                                                                    ss >> s;\n                                                                    if (s == \"five\") {\n                                                                        ss >> s;\n                                                                        if (s == \"six\") {\n                                                                            ss >> s;\n                                                                            if (s == \"seven\") {\n                                                                                ss >> s;\n                                                                                if (s == \"eight\") {\n                                                                                    ss >> s;\n                                                                                    if (s == \"nine\") {\n                                                                                        ss >> s;\n                                                                                        if (s == \"zero\") {\n                                                                                            ss >> s;\n                                                                                            if (s == \"one\") {\n                                                                                                ss >> s;\n                                                                                                if (s == \"two\") {\n                               \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "/tmp/tmpa5am6tra.cpp: In function \u2018std::string sort_numbers(std::string)\u2019:\n/tmp/tmpa5am6tra.cpp:59:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpa5am6tra.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpa5am6tra.cpp:54:109: note: to match this \u2018{\u2019\n   54 |                                                                                             if (s == \"one\") {\n      |                                                                                                             ^\n/tmp/tmpa5am6tra.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpa5am6tra.cpp:52:106: note: to match this \u2018{\u2019\n   52 |                                                                                         if (s == \"zero\") {\n      |                                                                                                          ^\n/tmp/tmpa5am6tra.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpa5am6tra.cpp:50:102: note: to match this \u2018{\u2019\n   50 |                                                                                     if (s == \"nine\") {\n      |                                                                                                      ^\n/tmp/tmpa5am6tra.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpa5am6tra.cpp:48:99: note: to match this \u2018{\u2019\n   48 |                                                                                 if (s == \"eight\") {\n      |                                                                                                   ^\n/tmp/tmpa5am6tra.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpa5am6tra.cpp:46:95: note: to match this \u2018{\u2019\n   46 |                                                                             if (s == \"seven\") {\n      |                                                                                               ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55;\n    std::stringstream ss56;\n    std::stringstream ss57;\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpps1ik3id: /tmp/tmpps1ik3id.cpp:71: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpbqujuank: /tmp/tmpbqujuank.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int i = 0;\n    int j = 0;\n    int number;\n    while(ss >> number) {\n        if(number == 0) {\n            result += \"zero\";\n        } else if(number == 1) {\n            result += \"one\";\n        } else if(number == 2) {\n            result += \"two\";\n        } else if(number == 3) {\n            result += \"three\";\n        } else if(number == 4) {\n            result += \"four\";\n        } else if(number == 5) {\n            result += \"five\";\n        } else if(number == 6) {\n            result += \"six\";\n        } else if(number == 7) {\n            result += \"seven\";\n        } else if(number == 8) {\n            result += \"eight\";\n        } else if(number == 9) {\n            result += \"nine\";\n        }\n        if(i < j) {\n            std::swap(result[i], result[j]);\n        }\n        i++;\n        j++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "tmp204a6gcn: /tmp/tmp204a6gcn.cpp:47: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292763,
      "stdout": "",
      "stderr": "tmpiz7z0bs_: /tmp/tmpiz7z0bs_.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmp1524n36s: /tmp/tmp1524n36s.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while(ss >> num) {\n        result += std::to_string(num);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "tmpsr0ve46e: /tmp/tmpsr0ve46e.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmp1nlwbbxj: /tmp/tmp1nlwbbxj.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    int j = 0;\n    int n = 0;\n    int m = 0;\n    int k = 0;\n    int l = 0;\n    int c = 0;\n    while (ss >> n) {\n        if (n == 0) {\n            result += ' ';\n            continue;\n        }\n        if (n == 9) {\n            result += ' ';\n            continue;\n        }\n        if (n == 8) {\n            result += ' ';\n            continue;\n        }\n        if (n == 7) {\n            result += ' ';\n            continue;\n        }\n        if (n == 6) {\n            result += ' ';\n            continue;\n        }\n        if (n == 5) {\n            result += ' ';\n            continue;\n        }\n        if (n == 4) {\n            result += ' ';\n            continue;\n        }\n        if (n == 3) {\n            result += ' ';\n            continue;\n        }\n        if (n == 2) {\n            result += ' ';\n            continue;\n        }\n        if (n == 1) {\n            result += ' ';\n            continue;\n        }\n        if (n == 0) {\n            result += ' ';\n            continue;\n        }\n        if (n > 0) {\n            result += ' ';\n            continue;\n        }\n        if (n < 0) {\n            result += ' ';\n            continue;\n        }\n        if (n == 9) {\n            result += ' ';\n            continue;\n        }\n        if (n == 8) {\n            result += ' ';\n            continue;\n        }\n        if (n == 7) {\n            result += ' ';\n            continue;\n        }\n        if (n == 6) {\n            result += ' ';\n            continue;\n        }\n        if (n == 5) {\n            result += ' ';\n            continue;\n        }\n        if (n == 4) {\n            result += ' ';\n            continue;\n        }\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "/tmp/tmpl5x3nw95.cpp: In function \u2018std::string sort_numbers(std::string)\u2019:\n/tmp/tmpl5x3nw95.cpp:96:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   96 | int main() {\n      |            ^\n/tmp/tmpl5x3nw95.cpp:103:1: error: expected \u2018}\u2019 at end of input\n  103 | }\n      | ^\n/tmp/tmpl5x3nw95.cpp:8:47: note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n      |                                               ^\n/tmp/tmpl5x3nw95.cpp:103:1: warning: no return statement in function returning non-void [-Wreturn-type]\n  103 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while(ss >> num) {\n        result += std::to_string(num);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "tmpsr0ve46e: /tmp/tmpsr0ve46e.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int n;\n    while (ss >> n) {\n        result += std::to_string(n);\n        result += \" \";\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmpxckfdut6: /tmp/tmpxckfdut6.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55;\n    std::stringstream ss56;\n    std::stringstream ss57;\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpps1ik3id: /tmp/tmpps1ik3id.cpp:71: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result.push_back(number + '0');\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptiluulej: /tmp/tmptiluulej.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int i = 0;\n    int j = 0;\n    int number;\n    while (ss >> number) {\n        if (number < 10) {\n            result += number + ' ';\n        } else {\n            result += ' ' + number + ' ';\n        }\n        i++;\n    }\n    result.erase(result.end() - 1);\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "tmpefihsody: /tmp/tmpefihsody.cpp:27: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string s;\n    int i = 0;\n    while (std::getline(ss, s, ' ')) {\n        if (i == 0) {\n            std::cout << s << std::endl;\n            i++;\n        } else {\n            std::cout << s << \" \";\n        }\n    }\n    std::cout << std::endl;\n    return s;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "\nthree\n\nthree\nfive nine \n",
      "stderr": "tmpuo_czoxk: /tmp/tmpuo_czoxk.cpp:27: int main(): Assertion `candidate((\"three five nine\")) == (\"three five nine\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string s;\n    while (std::getline(ss, s, ' ')) {\n        if (s == \"zero\") {\n            continue;\n        }\n        if (s == \"one\") {\n            continue;\n        }\n        if (s == \"two\") {\n            continue;\n        }\n        if (s == \"three\") {\n            continue;\n        }\n        if (s == \"four\") {\n            continue;\n        }\n        if (s == \"five\") {\n            continue;\n        }\n        if (s == \"six\") {\n            continue;\n        }\n        if (s == \"seven\") {\n            continue;\n        }\n        if (s == \"eight\") {\n            continue;\n        }\n        if (s == \"nine\") {\n            continue;\n        }\n        std::cout << \"Invalid input: \" << s << std::endl;\n        return \"\";\n    }\n    std::stringstream ss2(numbers);\n    std::string s2;\n    while (std::getline(ss2, s2, ' ')) {\n        if (s2 == \"zero\") {\n            continue;\n        }\n        if (s2 == \"one\") {\n            continue;\n        }\n        if (s2 == \"two\") {\n            continue;\n        }\n        if (s2 == \"three\") {\n            continue;\n        }\n        if (s2 == \"four\") {\n            continue;\n        }\n        if (s2 == \"five\") {\n            continue;\n        }\n        if (s2 == \"six\") {\n            continue;\n        }\n        if (s2 == \"seven\") {\n            continue;\n        }\n        if (s2 == \"eight\") {\n            continue;\n        }\n        if (s2 == \"nine\") {\n            continue;\n        }\n        std::cout << \"Invalid input: \" << s2 << std::endl;\n        return \"\";\n    }\n    std::stringstream ss3(numbers);\n    std::string s3;\n    while (std::getline(ss3,\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "/tmp/tmplcj9icx4.cpp: In function \u2018std::string sort_numbers(std::string)\u2019:\n/tmp/tmplcj9icx4.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmplcj9icx4.cpp:83:29: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     while (std::getline(ss3,\n      |           ~                 ^\n      |                             )\n   84 | }\n      | ~                            \n/tmp/tmplcj9icx4.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmplcj9icx4.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55;\n    std::stringstream ss56;\n    std::stringstream ss57;\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpps1ik3id: /tmp/tmpps1ik3id.cpp:71: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "tmp2kjovebs: /tmp/tmp2kjovebs.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while(ss >> num) {\n        result.push_back(num + '0');\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmpcon_xvzq: /tmp/tmpcon_xvzq.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while (ss >> number) {\n        result += number;\n        result += ' ';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "tmp60_ee5nv: /tmp/tmp60_ee5nv.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55;\n    std::stringstream ss56;\n    std::stringstream ss57;\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpps1ik3id: /tmp/tmpps1ik3id.cpp:71: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmpe6azqhxe: /tmp/tmpe6azqhxe.cpp:22: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while(ss >> num) {\n        result += std::to_string(num);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292763,
      "stdout": "",
      "stderr": "tmpx9m293xz: /tmp/tmpx9m293xz.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292763,
      "stdout": "",
      "stderr": "tmpiz7z0bs_: /tmp/tmpiz7z0bs_.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while(ss >> num) {\n        result += std::to_string(num);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "tmpsr0ve46e: /tmp/tmpsr0ve46e.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::vector<std::string> v;\n    std::stringstream ss(numbers);\n    std::string s;\n    while(std::getline(ss, s, ' ')) {\n        v.push_back(s);\n    }\n    std::sort(v.begin(), v.end(), [](const std::string &a, const std::string &b) {\n        return std::stoi(a) < std::stoi(b);\n    });\n    for(auto s : v) {\n        result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::invalid_argument'\n  what():  stoi\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "tmpyyge_srq: /tmp/tmpyyge_srq.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string s;\n    while (ss >> s) {\n        if (s == \"zero\") {\n            ss >> s;\n            if (s == \"one\") {\n                ss >> s;\n                if (s == \"two\") {\n                    ss >> s;\n                    if (s == \"three\") {\n                        ss >> s;\n                        if (s == \"four\") {\n                            ss >> s;\n                            if (s == \"five\") {\n                                ss >> s;\n                                if (s == \"six\") {\n                                    ss >> s;\n                                    if (s == \"seven\") {\n                                        ss >> s;\n                                        if (s == \"eight\") {\n                                            ss >> s;\n                                            if (s == \"nine\") {\n                                                ss >> s;\n                                                if (s == \"zero\") {\n                                                    ss >> s;\n                                                    if (s == \"one\") {\n                                                        ss >> s;\n                                                        if (s == \"two\") {\n                                                            ss >> s;\n                                                            if (s == \"three\") {\n                                                                ss >> s;\n                                                                if (s == \"four\") {\n                                                                    ss >> s;\n                                                                    if (s == \"five\") {\n                                                                        ss >> s;\n                                                                        if (s == \"six\") {\n                                                                            ss >> s;\n                                                                            if (s == \"seven\") {\n                                                                                ss >> s;\n                                                                                if (s == \"eight\") {\n                                                                                    ss >> s;\n                                                                                    if (s == \"nine\") {\n                                                                                        ss >> s;\n                                                                                        if (s == \"zero\") {\n                                                                                            ss >> s;\n                                                                                            if (s == \"one\") {\n                                                                                                ss >> s;\n                                                                                                if (s == \"two\") {\n                               \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292762,
      "stdout": "",
      "stderr": "/tmp/tmpa5am6tra.cpp: In function \u2018std::string sort_numbers(std::string)\u2019:\n/tmp/tmpa5am6tra.cpp:59:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpa5am6tra.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpa5am6tra.cpp:54:109: note: to match this \u2018{\u2019\n   54 |                                                                                             if (s == \"one\") {\n      |                                                                                                             ^\n/tmp/tmpa5am6tra.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpa5am6tra.cpp:52:106: note: to match this \u2018{\u2019\n   52 |                                                                                         if (s == \"zero\") {\n      |                                                                                                          ^\n/tmp/tmpa5am6tra.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpa5am6tra.cpp:50:102: note: to match this \u2018{\u2019\n   50 |                                                                                     if (s == \"nine\") {\n      |                                                                                                      ^\n/tmp/tmpa5am6tra.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpa5am6tra.cpp:48:99: note: to match this \u2018{\u2019\n   48 |                                                                                 if (s == \"eight\") {\n      |                                                                                                   ^\n/tmp/tmpa5am6tra.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpa5am6tra.cpp:46:95: note: to match this \u2018{\u2019\n   46 |                                                                             if (s == \"seven\") {\n      |                                                                                               ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmp1nlwbbxj: /tmp/tmp1nlwbbxj.cpp:21: int main(): Assertion `candidate((\"\")) == (\"\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292759,
      "stdout": "",
      "stderr": "tmpyyge_srq: /tmp/tmpyyge_srq.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while (ss >> num) {\n        result += std::to_string(num);\n        result += ' ';\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292764,
      "stdout": "",
      "stderr": "tmpftwnngur: /tmp/tmpftwnngur.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    int j = 0;\n    int n = 0;\n    int m = 0;\n    while (ss >> n) {\n        if (n == 0) {\n            result += \"zero\";\n        } else if (n == 1) {\n            result += \"one\";\n        } else if (n == 2) {\n            result += \"two\";\n        } else if (n == 3) {\n            result += \"three\";\n        } else if (n == 4) {\n            result += \"four\";\n        } else if (n == 5) {\n            result += \"five\";\n        } else if (n == 6) {\n            result += \"six\";\n        } else if (n == 7) {\n            result += \"seven\";\n        } else if (n == 8) {\n            result += \"eight\";\n        } else if (n == 9) {\n            result += \"nine\";\n        }\n        if (i < j) {\n            std::swap(numbers[i], numbers[j]);\n        }\n        i++;\n        j++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "tmp89ijrq5r: /tmp/tmp89ijrq5r.cpp:48: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int i = 0;\n    int j = 0;\n    int num;\n    while (ss >> num) {\n        if (i == 0) {\n            result += std::to_string(num);\n            i++;\n        } else if (num < numbers[j]) {\n            result += \" \" + std::to_string(num);\n        } else {\n            result += \" \" + std::to_string(numbers[j]);\n            j++;\n        }\n    }\n    if (i > 0) {\n        result += \" \" + std::to_string(numbers[j]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292766,
      "stdout": "",
      "stderr": "tmpieedt0tv: /tmp/tmpieedt0tv.cpp:33: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int number;\n    while(ss >> number) {\n        result += std::to_string(number) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmp3dtfpuew: /tmp/tmp3dtfpuew.cpp:20: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::stringstream ss(numbers);\n    std::string result;\n    int num;\n    while (ss >> num) {\n        result.push_back(num + '0');\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292760,
      "stdout": "",
      "stderr": "tmpyi7w4e7j: /tmp/tmpyi7w4e7j.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n    int number;\n    while (ss >> number) {\n        result += std::to_string(number);\n        result += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292758,
      "stdout": "",
      "stderr": "tmptqkquhhm: /tmp/tmptqkquhhm.cpp:21: int main(): Assertion `candidate((\"three\")) == (\"three\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}