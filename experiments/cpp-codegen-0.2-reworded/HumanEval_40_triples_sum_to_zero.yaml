name: HumanEval_40_triples_sum_to_zero
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
  \ a vector of integers as an input.\n// it returns true if there are three distinct\
  \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1,\
  \ 3, 5, 0])\n// False\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>>\
  \ triples_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4,\
  \ -5, 3, 9, 7])\n// True\n// >>> triples_sum_to_zero([1])\n// False\nbool triples_sum_to_zero(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
  \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
  \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
completions: ["    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size()\
    \ - 2; i++) {\n        for (int j = i + 1; j < l.size() - 1; j++) {\n        \
    \    for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j]\
    \ + l[k] == 0) {\n                    return true;\n                }\n      \
    \      }\n        }\n    }\n    return false;", "    if (l.size() < 3) return\
    \ false;\n    long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n      \
    \  sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;", " \
    \   if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2]\
    \ == 0) return true;\n    }\n    return false;", "    if (l.size() < 3) {\n  \
    \      return false;\n    }\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0)\
    \ {\n            return true;\n        }\n    }\n    return false;", "    // sort\
    \ the vector\n    std::sort(l.begin(), l.end());\n    // check if the vector is\
    \ empty\n    if (l.size() == 0) {\n        return false;\n    }\n    // check\
    \ if the vector has only one element\n    if (l.size() == 1) {\n        return\
    \ false;\n    }\n    // check if the vector has only two elements\n    if (l.size()\
    \ == 2) {\n        return true;\n    }\n    // check if the first element is zero\n\
    \    if (l[0] == 0) {\n        return false;\n    }\n    // check if the second\
    \ element is zero\n    if (l[1] == 0) {\n        return false;\n    }\n    //\
    \ check if the third element is zero\n    if (l[2] == 0) {\n        return false;\n\
    \    }\n    // check if the first element is the same as the second element\n\
    \    if (l[0] == l[1]) {\n        return false;\n    }\n    // check if the first\
    \ element is the same as the third element\n    if (l[0] == l[2]) {\n        return\
    \ false;\n    }\n    // check if the second element is the same as the third element\n\
    \    if (l[1] == l[2]) {\n        return false;\n    }\n    // check if the first\
    \ element is the sum of the second and third element\n    if (l[0] + l[1] == l[2])\
    \ {\n        return false;\n    }\n    // check if the second element is the sum\
    \ of the first and third element\n    if (l[1] + l[2] == l[0]) {\n        return\
    \ false;\n    }\n    // check if the third element is the sum of the first and\
    \ second element\n    if (l[2] + l[0] == l[1]) {\n        return false;\n    }\n\
    \    // check if the third element is the sum of the second and first element\n\
    \    if (l[2] + l[1] == l[0]) {\n        return false;\n    }\n    // check if\
    \ the first element is the sum of the second and third element\n    if (l[0]",
  "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2]\
    \ == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i\
    \ + 2] == 0) {\n            return true;\n        }\n    }\n    return false;",
  "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2]\
    \ == 0) return true;\n    }\n    return false;", "    // sort the vector\n   \
    \ std::sort(l.begin(), l.end());\n    // check for duplicates\n    for (int i\
    \ = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0)\
    \ {\n            return true;\n        }\n    }\n    return false;", "    if (l.size()\
    \ < 3) return false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return\
    \ true;\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size() - 2; i++) {\n        for (int j = i + 1; j < l.size()\
    \ - 1; j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n        \
    \        if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n  \
    \              }\n            }\n        }\n    }\n    return false;", "    if\
    \ (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n    long sum\
    \ = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n     \
    \   if (sum == 0) {\n            if (i + 1 < l.size() && l[i] == l[i + 1]) {\n\
    \                return true;\n            }\n            if (i - 1 >= 0 && l[i]\
    \ == l[i - 1]) {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;", "    std::sort(l.begin(), l.end());\n    for (int i =\
    \ 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n\
    \            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i]\
    \ + l[j] + l[k] == 0) {\n                    return true;\n                }\n\
    \            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) {\n            return true;\n        }\n    }\n  \
    \  return false;", "    int n = l.size();\n    if (n < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < n - 2; i++) {\n        if (l[i] + l[i + 1]\
    \ + l[i + 2] == 0) return true;\n    }\n    return false;", "    int n = l.size();\n\
    \    if (n < 3) return false;\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < n - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return\
    \ true;\n    }\n    return false;", "    if (l.size() < 3) return false;\n   \
    \ std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n\
    \        if (l[i] + l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return\
    \ false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i\
    \ + 2] == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n   \
    \     sum += l[i];\n    }\n    return (sum == 0);", "    if (l.size() < 3) {\n\
    \        return false;\n    }\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0)\
    \ {\n            return true;\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        for (int j\
    \ = i + 1; j < l.size() - 1; j++) {\n            for (int k = j + 1; k < l.size();\
    \ k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                   \
    \ return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    long n = l.size();\n    for\
    \ (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n   \
    \         for (long k = j + 1; k < n; k++) {\n                if (l[i] + l[j]\
    \ + l[k] == 0) {\n                    return true;\n                }\n      \
    \      }\n        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        for (int j = i + 1; j <\
    \ l.size() - 1; j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n\
    \                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;", "   \
    \ std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n\
    \        if (l[i] + l[i + 1] + l[i + 2] == 0) {\n            return true;\n  \
    \      }\n    }\n    return false;", "    if (l.size() < 3) return false;\n  \
    \  std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++)\
    \ {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    long n = l.size();\n    for\
    \ (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n   \
    \         for (long k = j + 1; k < n; k++) {\n                if (l[i] + l[j]\
    \ + l[k] == 0) {\n                    return true;\n                }\n      \
    \      }\n        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i\
    \ + 2] == 0) {\n            return true;\n        }\n    }\n    return false;",
  "    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++)\
    \ {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) {\n            return true;\n\
    \        }\n    }\n    return false;", "    if (l.size() < 3) return false;\n\
    \    std::sort(l.begin(), l.end());\n    long sum = 0;\n    for (int i = 0; i\
    \ < l.size() - 2; i++) {\n        sum += l[i];\n        if (sum == 0) return true;\n\
    \    }\n    return false;", "    std::sort(l.begin(), l.end());\n    long sum\
    \ = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n     \
    \   if (sum == 0) {\n            if (i + 1 < l.size() && l[i] == l[i + 1]) {\n\
    \                return true;\n            }\n        }\n    }\n    return false;",
  "    // write your code here\n    if (l.size() < 3)\n        return false;\n   \
    \ std::sort(l.begin(), l.end());\n    long sum = 0;\n    for (int i = 0; i < l.size()\
    \ - 2; i++) {\n        sum += l[i];\n        if (sum == 0)\n            return\
    \ true;\n    }\n    return false;", "    // write your code here\n    if (l.size()\
    \ < 3) {\n        return false;\n    }\n    std::sort(l.begin(), l.end());\n \
    \   for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i\
    \ + 2] == 0) {\n            return true;\n        }\n    }\n    return false;",
  "    if (l.size() < 3) {\n        return false;\n    }\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) {\n            return true;\n        }\n    }\n  \
    \  return false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i\
    \ < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n     \
    \       for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j]\
    \ + l[k] == 0) {\n                    return true;\n                }\n      \
    \      }\n        }\n    }\n    return false;", "    if (l.size() < 3) return\
    \ false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size()\
    \ - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return true;\n   \
    \ }\n    return false;", "    std::sort(l.begin(), l.end());\n    long n = l.size();\n\
    \    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++)\
    \ {\n            for (long k = j + 1; k < n; k++) {\n                if (l[i]\
    \ + l[j] + l[k] == 0) {\n                    return true;\n                }\n\
    \            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        for (int j\
    \ = i + 1; j < l.size() - 1; j++) {\n            for (int k = j + 1; k < l.size();\
    \ k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                   \
    \ return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i\
    \ + 2] == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    for (int i = 0; i < n; i++) {\n      \
    \  for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++)\
    \ {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;",
  "    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j\
    \ + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n\
    \                    return true;\n                }\n            }\n        }\n\
    \    }\n    return false;", "    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++)\
    \ {\n            for (int k = j + 1; k < l.size(); k++) {\n                if\
    \ (l[i] + l[j] + l[k] == 0) {\n                    return true;\n            \
    \    }\n            }\n        }\n    }\n    return false;", "    if (l.size()\
    \ < 3) return false;\n    std::sort(l.begin(), l.end());\n    long sum = 0;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    return\
    \ sum == 0;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n\
    \    long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n\
    \    }\n    return (sum == 0);", "    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size();\
    \ j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n             \
    \   if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n       \
    \         }\n            }\n        }\n    }\n    return false;", "    if (l.size()\
    \ < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        sum += l[i];\n    }\n    return (sum == 0);", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i\
    \ + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++)\
    \ {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;",
  "    std::sort(l.begin(), l.end());\n    long sum = 0;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        sum += l[i];\n    }\n    if (sum % 3 != 0) return\
    \ false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == 0) continue;\n\
    \        for (int j = i + 1; j < l.size(); j++) {\n            if (l[j] == 0)\
    \ continue;\n            for (int k = j + 1; k < l.size(); k++) {\n          \
    \      if (l[k] == 0) continue;\n                if (l[i] + l[j] + l[k] == 0)\
    \ return true;\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i\
    \ + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++)\
    \ {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;",
  "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2]\
    \ == 0) return true;\n    }\n    return false;", "    if (l.size() < 3) return\
    \ false;\n    std::sort(l.begin(), l.end());\n    long sum = 0;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    return sum ==\
    \ 0;", "    int n = l.size();\n    if (n < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < n - 2; i++) {\n        if (l[i] + l[i + 1]\
    \ + l[i + 2] == 0) return true;\n    }\n    return false;", "    if (l.size()\
    \ < 3) return false;\n    std::sort(l.begin(), l.end());\n    long sum = 0;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    return\
    \ (sum == 0);", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i\
    \ + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++)\
    \ {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;",
  "    // if the vector is empty, return false\n    if (l.size() == 0)\n        return\
    \ false;\n    // if the vector has only one element, return false\n    if (l.size()\
    \ == 1)\n        return false;\n    // if the vector has only two elements, return\
    \ true\n    if (l.size() == 2)\n        return true;\n    // if the vector has\
    \ three elements, check if the first two elements\n    // sum to zero\n    if\
    \ (l[0] + l[1] == 0)\n        return true;\n    // if the first two elements do\
    \ not sum to zero, check if the first\n    // element and the third element sum\
    \ to zero\n    if (l[0] + l[2] == 0)\n        return true;\n    // if the first\
    \ two elements do not sum to zero, check if the second\n    // element and the\
    \ third element sum to zero\n    if (l[1] + l[2] == 0)\n        return true;\n\
    \    // if none of the above conditions are satisfied, return false\n    return\
    \ false;", "    if (l.size() < 3) return false;\n    long sum = 0;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    return sum ==\
    \ 0;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i\
    \ + 2] == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i\
    \ + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++)\
    \ {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;",
  "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n    long\
    \ sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n \
    \   }\n    return (sum == 0);", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return false;", "    if (l.size()\
    \ < 3) return false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return\
    \ true;\n    }\n    return false;", "    if (l.size() < 3) return false;\n   \
    \ std::sort(l.begin(), l.end());\n    long sum = 0;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        sum += l[i];\n    }\n    return (sum == 0);", "    if (l.size()\
    \ < 3) return false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return\
    \ true;\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2]\
    \ == 0) {\n            return true;\n        }\n    }\n    return false;", " \
    \   std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++)\
    \ {\n        for (int j = i + 1; j < l.size() - 1; j++) {\n            for (int\
    \ k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0)\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n    }\n    return false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return false;", "    if (l.size()\
    \ < 3) return false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return\
    \ true;\n    }\n    return false;", "    if (l.size() < 3) return false;\n   \
    \ std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n\
    \        if (l[i] + l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    long n = l.size();\n    for\
    \ (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n   \
    \         for (long k = j + 1; k < n; k++) {\n                if (l[i] + l[j]\
    \ + l[k] == 0) {\n                    return true;\n                }\n      \
    \      }\n        }\n    }\n    return false;", "    // sort the vector\n    std::sort(l.begin(),\
    \ l.end());\n    // check if the first element is 0\n    if (l[0] == 0) {\n  \
    \      return false;\n    }\n    // check if the second element is 0\n    if (l[1]\
    \ == 0) {\n        return false;\n    }\n    // check if the third element is\
    \ 0\n    if (l[2] == 0) {\n        return false;\n    }\n    // check if the sum\
    \ of the first two elements is 0\n    if (l[0] + l[1] == 0) {\n        return\
    \ true;\n    }\n    // check if the sum of the first two elements is 0\n    if\
    \ (l[0] + l[2] == 0) {\n        return true;\n    }\n    // check if the sum of\
    \ the second two elements is 0\n    if (l[1] + l[2] == 0) {\n        return true;\n\
    \    }\n    return false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i\
    \ + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++)\
    \ {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;",
  "    // write your code here\n    int n = l.size();\n    if (n < 3) return false;\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < n - 2; i++) {\n \
    \       if (l[i] + l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return false;",
  "    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++)\
    \ {\n        for (int j = i + 1; j < l.size() - 1; j++) {\n            for (int\
    \ k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0)\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n    long\
    \ n = l.size();\n    for (long i = 0; i < n; i++) {\n        for (long j = i +\
    \ 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n         \
    \       if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n   \
    \             }\n            }\n        }\n    }\n    return false;", "    //\
    \ write your code here\n    if (l.size() < 3)\n        return false;\n    long\
    \ sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n \
    \   }\n    if (sum % 3 != 0)\n        return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0)\n            return true;\n    }\n    return false;",
  "    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j\
    \ + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n\
    \                    return true;\n                }\n            }\n        }\n\
    \    }\n    return false;", "    std::sort(l.begin(), l.end());\n    long sum\
    \ = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n\
    \    if (sum % 3 != 0) return false;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (l[i] == 0) continue;\n        for (int j = i + 1; j < l.size(); j++)\
    \ {\n            if (l[j] == 0) continue;\n            if (l[i] + l[j] == sum)\
    \ return true;\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        for (int j\
    \ = i + 1; j < l.size() - 1; j++) {\n            for (int k = j + 1; k < l.size();\
    \ k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                   \
    \ return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    for\
    \ (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n     \
    \       for (int k = j + 1; k < n; k++) {\n                if (l[i] + l[j] + l[k]\
    \ == 0) {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n \
    \   for (int i = 0; i < l.size() - 2; i++) {\n        for (int j = i + 1; j <\
    \ l.size() - 1; j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n\
    \                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;", "   \
    \ if (l.size() < 3)\n        return false;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i\
    \ + 2] == 0)\n            return true;\n    }\n    return false;", "    if (l.size()\
    \ < 3) return false;\n    std::sort(l.begin(), l.end());\n    long sum = 0;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    return\
    \ (sum == 0);", "    if (l.size() < 3) {\n        return false;\n    }\n    long\
    \ sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n \
    \   }\n    return (sum == 0);", "    std::sort(l.begin(), l.end());\n    long\
    \ sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n \
    \   }\n    if (sum % 3 != 0) return false;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (l[i] == 0) continue;\n        for (int j = i + 1; j < l.size();\
    \ j++) {\n            if (l[j] == 0) continue;\n            if (l[i] + l[j] ==\
    \ sum) return true;\n        }\n    }\n    return false;", "    if (l.size() <\
    \ 3) return false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i\
    \ < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return\
    \ true;\n    }\n    return false;", "    int n = l.size();\n    if (n < 3) return\
    \ false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < n - 2; i++)\
    \ {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int\
    \ k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0)\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n    }\n    return false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        for (int j\
    \ = i + 1; j < l.size() - 1; j++) {\n            for (int k = j + 1; k < l.size();\
    \ k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                   \
    \ return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size()\
    \ - 2; i++) {\n        for (int j = i + 1; j < l.size() - 1; j++) {\n        \
    \    for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j]\
    \ + l[k] == 0) {\n                    return true;\n                }\n      \
    \      }\n        }\n    }\n    return false;", "    if (l.size() < 3) return\
    \ false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size()\
    \ - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return true;\n   \
    \ }\n    return false;", "    if (l.size() < 3)\n        return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0)\n            return true;\n    }\n    return false;",
  "    std::sort(l.begin(), l.end());\n    long sum = 0;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        sum += l[i];\n    }\n    return sum == 0;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i\
    \ + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++)\
    \ {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;",
  "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2]\
    \ == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i\
    \ + 2] == 0) {\n            return true;\n        }\n    }\n    return false;",
  "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n    long\
    \ sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n \
    \   }\n    return (sum == 0);", "    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0)\
    \ {\n            return true;\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) {\n            return true;\n        }\n    }\n  \
    \  return false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i\
    \ < l.size() - 2; i++) {\n        for (int j = i + 1; j < l.size() - 1; j++) {\n\
    \            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i]\
    \ + l[j] + l[k] == 0) {\n                    return true;\n                }\n\
    \            }\n        }\n    }\n    return false;", "    // write your code\
    \ here\n    int n = l.size();\n    if (n < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < n - 2; i++) {\n        if (l[i] + l[i + 1]\
    \ + l[i + 2] == 0) return true;\n    }\n    return false;", "    if (l.size()\
    \ < 3) return false;\n    std::sort(l.begin(), l.end());\n    long sum = 0;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    return\
    \ (sum == 0);", "    int n = l.size();\n    if (n < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < n - 2; i++) {\n        if (l[i] + l[i + 1]\
    \ + l[i + 2] == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        for (int j\
    \ = i + 1; j < l.size() - 1; j++) {\n            for (int k = j + 1; k < l.size();\
    \ k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                   \
    \ return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size()\
    \ - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) {\n            return\
    \ true;\n        }\n    }\n    return false;", "    if (l.size() < 3) return false;\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++)\
    \ {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return\
    \ false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i\
    \ + 2] == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n   \
    \     sum += l[i];\n    }\n    if (sum % 3 != 0) {\n        return false;\n  \
    \  }\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j\
    \ < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n \
    \               if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;", "   \
    \ if (l.size() < 3)\n        return false;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i\
    \ + 2] == 0)\n            return true;\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i\
    \ + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++)\
    \ {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;",
  "    std::sort(l.begin(), l.end());\n    long sum = 0;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        sum += l[i];\n    }\n    if (sum % 3 != 0) return\
    \ false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == 0) continue;\n\
    \        for (int j = i + 1; j < l.size(); j++) {\n            if (l[j] == 0)\
    \ continue;\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n\
    \    return false;", "    // if the vector is empty, return false\n    if (l.size()\
    \ == 0) return false;\n    // if the vector has only one element, return false\n\
    \    if (l.size() == 1) return false;\n    // if the vector has only two elements,\
    \ return true\n    if (l.size() == 2) return true;\n    // if the vector has three\
    \ elements, return true\n    if (l.size() == 3) return true;\n    // if the vector\
    \ has more than three elements, return false\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) {\n            return true;\n        }\n    }\n  \
    \  return false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n   \
    \     sum += l[i];\n    }\n    return (sum == 0);", "    if (l.size() < 3) return\
    \ false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size()\
    \ - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return true;\n   \
    \ }\n    return false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) {\n            return true;\n        }\n    }\n  \
    \  return false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return false;", "    // if\
    \ the vector is empty, return false\n    if (l.size() == 0) return false;\n  \
    \  // if the vector has only one element, return false\n    if (l.size() == 1)\
    \ return false;\n    // if the vector has only two elements, return false\n  \
    \  if (l.size() == 2) return false;\n    // if the vector has three elements,\
    \ return true\n    if (l.size() == 3) return true;\n    // if the vector has more\
    \ than three elements,\n    // check if the first element is zero\n    if (l[0]\
    \ == 0) return false;\n    // if the first element is not zero,\n    // check\
    \ if the second element is zero\n    if (l[1] == 0) return false;\n    // if the\
    \ second element is not zero,\n    // check if the third element is zero\n   \
    \ if (l[2] == 0) return false;\n    // if the third element is not zero,\n   \
    \ // check if the sum of the three elements is zero\n    if (l[0] + l[1] + l[2]\
    \ == 0) return true;\n    // if the sum of the three elements is not zero,\n \
    \   // return false\n    return false;", "    if (l.size() < 3)\n        return\
    \ false;\n    std::sort(l.begin(), l.end());\n    long sum = 0;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        sum += l[i];\n        if (sum == 0) {\n\
    \            if (i + 1 < l.size() && l[i + 1] == -l[i]) {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "    // sort the\
    \ vector in ascending order\n    std::sort(l.begin(), l.end());\n    // if the\
    \ vector is empty, return false\n    if (l.size() == 0)\n        return false;\n\
    \    // if the vector has only one element, return false\n    if (l.size() ==\
    \ 1)\n        return false;\n    // if the vector has only two elements, return\
    \ true\n    if (l.size() == 2)\n        return true;\n    // if the vector has\
    \ three elements, check if the first two elements\n    // sum to zero\n    if\
    \ (l[0] + l[1] == 0)\n        return true;\n    // if the vector has three elements,\
    \ check if the first two elements\n    // sum to zero\n    if (l[0] + l[2] ==\
    \ 0)\n        return true;\n    // if the vector has three elements, check if\
    \ the first two elements\n    // sum to zero\n    if (l[1] + l[2] == 0)\n    \
    \    return true;\n    // if the vector has three elements, check if the first\
    \ two elements\n    // sum to zero\n    if (l[0] + l[1] + l[2] == 0)\n       \
    \ return true;\n    // if the vector has three elements, check if the first two\
    \ elements\n    // sum to zero\n    if (l[0] + l[1] + l[2] + l[3] == 0)\n    \
    \    return true;\n    // if the vector has three elements, check if the first\
    \ two elements\n    // sum to zero\n    if (l[0] + l[1] + l[2] + l[3] + l[4] ==\
    \ 0)\n        return true;\n    // if the vector has three elements, check if\
    \ the first two elements\n    // sum to zero\n    if (l[0] + l[1] + l[2] + l[3]\
    \ + l[4] + l[5] == 0)\n        return true;\n    // if the vector has three elements,\
    \ check if the first two elements\n    // sum to zero\n    if (l[0] + l[1] + l[2]\
    \ + l[3] + l[4] + l[5", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return false;", "    if (l.size()\
    \ < 3) return false;\n    std::sort(l.begin(), l.end());\n    long sum = 0;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    return\
    \ (sum == 0);", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return false;", "    if (l.size()\
    \ < 3) return false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return\
    \ true;\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n    long\
    \ sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n \
    \   }\n    return (sum == 0);", "    // if the vector is empty, return false\n\
    \    if (l.size() == 0) return false;\n    // if the vector has only one element,\
    \ return false\n    if (l.size() == 1) return false;\n    // if the vector has\
    \ only two elements, return true\n    if (l.size() == 2) return true;\n    //\
    \ if the vector has three elements, check if the first two elements\n    // sum\
    \ to zero\n    if (l[0] + l[1] == 0) return true;\n    // if the vector has three\
    \ elements, check if the second two elements\n    // sum to zero\n    if (l[1]\
    \ + l[2] == 0) return true;\n    // if the vector has three elements, check if\
    \ the third two elements\n    // sum to zero\n    if (l[2] + l[3] == 0) return\
    \ true;\n    // if the vector has three elements, check if the first three elements\n\
    \    // sum to zero\n    if (l[0] + l[1] + l[2] == 0) return true;\n    // if\
    \ the vector has three elements, check if the second three elements\n    // sum\
    \ to zero\n    if (l[1] + l[2] + l[3] == 0) return true;\n    // if the vector\
    \ has three elements, check if the third three elements\n    // sum to zero\n\
    \    if (l[2] + l[3] + l[4] == 0) return true;\n    // if the vector has three\
    \ elements, check if the first four elements\n    // sum to zero\n    if (l[0]\
    \ + l[1] + l[2] + l[3] == 0) return true;\n    // if the vector has three elements,\
    \ check if the second four elements\n    // sum to zero\n    if (l[1] + l[2] +\
    \ l[3] + l[4] == 0) return true;\n    // if the vector has three elements, check\
    \ if the third four elements\n    // sum to zero\n    if (l[2] + l[3] + l[4] +\
    \ l[5] == 0) return true;\n    // if the vector has three elements, check if the\
    \ first five elements\n    // sum", "    if (l.size() < 3) return false;\n   \
    \ std::sort(l.begin(), l.end());\n    long sum = 0;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        sum += l[i];\n    }\n    return (sum == 0);", "    if (l.size()\
    \ < 3) return false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return\
    \ true;\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size() - 2; i++) {\n        for (int j = i + 1; j < l.size()\
    \ - 1; j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n        \
    \        if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n  \
    \              }\n            }\n        }\n    }\n    return false;", "    if\
    \ (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n    long sum\
    \ = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n\
    \    return (sum == 0);", "    int n = l.size();\n    if (n < 3) return false;\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < n - 2; i++) {\n \
    \       if (l[i] + l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return false;",
  "    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++)\
    \ {\n        for (int j = i + 1; j < l.size() - 1; j++) {\n            for (int\
    \ k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0)\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2]\
    \ == 0) {\n            return true;\n        }\n    }\n    return false;", " \
    \   if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2]\
    \ == 0) return true;\n    }\n    return false;", "    if (l.size() < 3)\n    \
    \    return false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i\
    \ < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0)\n     \
    \       return true;\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i\
    \ + 2] == 0) {\n            return true;\n        }\n    }\n    return false;",
  "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n    long\
    \ sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n \
    \       if (sum == 0) {\n            if (i + 1 < l.size() && l[i + 1] == -l[i])\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n\
    \    long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n\
    \        if (sum == 0) {\n            if (i + 1 < l.size() && l[i + 1] == -l[i])\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int\
    \ k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0)\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2]\
    \ == 0) {\n            return true;\n        }\n    }\n    return false;", " \
    \   std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++)\
    \ {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) {\n            return true;\n\
    \        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n \
    \   for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size();\
    \ j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n             \
    \   if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n       \
    \         }\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) {\n            return true;\n        }\n    }\n  \
    \  return false;", "    std::sort(l.begin(), l.end());\n    long sum = 0;\n  \
    \  for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    return\
    \ (sum == 0);", "    std::sort(l.begin(), l.end());\n    long n = l.size();\n\
    \    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++)\
    \ {\n            for (long k = j + 1; k < n; k++) {\n                if (l[i]\
    \ + l[j] + l[k] == 0) {\n                    return true;\n                }\n\
    \            }\n        }\n    }\n    return false;", "    if (l.size() < 3) return\
    \ false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size()\
    \ - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return true;\n   \
    \ }\n    return false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n   \
    \     sum += l[i];\n        if (sum == 0) {\n            if (i + 1 < l.size()\
    \ && l[i + 1] == -l[i]) {\n                return true;\n            }\n     \
    \   }\n    }\n    return false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i\
    \ + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++)\
    \ {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;",
  "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2]\
    \ == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n\
    \    }\n    return (sum % 3 == 0);", "    if (l.size() < 3) return false;\n  \
    \  std::sort(l.begin(), l.end());\n    long sum = 0;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        sum += l[i];\n        if (sum == 0) {\n          \
    \  if (i + 1 < l.size() && l[i] == l[i + 1]) {\n                i++;\n       \
    \     }\n            if (i + 2 < l.size() && l[i] == l[i + 2]) {\n           \
    \     i++;\n            }\n            if (i + 3 < l.size() && l[i] == l[i + 3])\
    \ {\n                i++;\n            }\n            return true;\n        }\n\
    \    }\n    return false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return false;", "    if (l.size()\
    \ < 3) return false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return\
    \ true;\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size();\
    \ j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n             \
    \   if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n       \
    \         }\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) {\n            return true;\n        }\n    }\n  \
    \  return false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i\
    \ < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) {\n   \
    \         return true;\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i > 0 && l[i]\
    \ == l[i - 1]) {\n            continue;\n        }\n        for (int j = i + 1;\
    \ j < l.size(); j++) {\n            if (j > i + 1 && l[j] == l[j - 1]) {\n   \
    \             continue;\n            }\n            if (l[i] + l[j] + l[i + 1]\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n       \
    \     for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j]\
    \ + l[k] == 0) {\n                    return true;\n                }\n      \
    \      }\n        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        for (int j = i + 1; j <\
    \ l.size() - 1; j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n\
    \                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;", "   \
    \ int n = l.size();\n    if (n < 3) return false;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < n - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2]\
    \ == 0) return true;\n    }\n    return false;", "    if (l.size() < 3) return\
    \ false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size()\
    \ - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return true;\n   \
    \ }\n    return false;", "    if (l.size() < 3) return false;\n    long sum =\
    \ 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n\
    \    return sum == 0;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n   \
    \     sum += l[i];\n        if (sum == 0) return true;\n    }\n    return false;",
  "    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j\
    \ + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n\
    \                    return true;\n                }\n            }\n        }\n\
    \    }\n    return false;", "    int n = l.size();\n    if (n < 3) return false;\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < n - 2; i++) {\n \
    \       if (l[i] + l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return false;",
  "    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++)\
    \ {\n        for (int j = i + 1; j < l.size() - 1; j++) {\n            for (int\
    \ k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0)\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n    }\n    return false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n   \
    \     sum += l[i];\n    }\n    return (sum == 0);", "    int n = l.size();\n \
    \   if (n < 3) return false;\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < n - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return\
    \ true;\n    }\n    return false;", "    if (l.size() < 3)\n        return false;\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++)\
    \ {\n        if (l[i] + l[i + 1] + l[i + 2] == 0)\n            return true;\n\
    \    }\n    return false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n   \
    \     sum += l[i];\n    }\n    return (sum == 0);", "    if (l.size() < 3) return\
    \ false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size()\
    \ - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return true;\n   \
    \ }\n    return false;", "    std::sort(l.begin(), l.end());\n    for (int i =\
    \ 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) {\n\
    \            return true;\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        for (int j\
    \ = i + 1; j < l.size() - 1; j++) {\n            for (int k = j + 1; k < l.size();\
    \ k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                   \
    \ return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i\
    \ + 2] == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i > 0 && l[i]\
    \ == l[i - 1]) {\n            continue;\n        }\n        for (int j = i + 1;\
    \ j < l.size(); j++) {\n            if (j > i + 1 && l[j] == l[j - 1]) {\n   \
    \             continue;\n            }\n            for (int k = j + 1; k < l.size();\
    \ k++) {\n                if (k > j + 1 && l[k] == l[k - 1]) {\n             \
    \       continue;\n                }\n                if (l[i] + l[j] + l[k] ==\
    \ 0) {\n                    return true;\n                }\n            }\n \
    \       }\n    }\n    return false;", "    if (l.size() < 3) return false;\n \
    \   std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++)\
    \ {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return\
    \ false;", "    if (l.size() < 3)\n        return false;\n    std::sort(l.begin(),\
    \ l.end());\n    long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n   \
    \     sum += l[i];\n        if (sum == 0) {\n            if (i + 1 < l.size()\
    \ && l[i] == l[i + 1]) {\n                i++;\n            }\n            if\
    \ (i + 2 < l.size() && l[i] == l[i + 2]) {\n                i++;\n           \
    \ }\n            if (i + 3 < l.size() && l[i] == l[i + 3]) {\n               \
    \ i++;\n            }\n            if (i + 4 < l.size() && l[i] == l[i + 4]) {\n\
    \                i++;\n            }\n            if (i + 5 < l.size() && l[i]\
    \ == l[i + 5]) {\n                i++;\n            }\n            if (i + 6 <\
    \ l.size() && l[i] == l[i + 6]) {\n                i++;\n            }\n     \
    \       if (i + 7 < l.size() && l[i] == l[i + 7]) {\n                i++;\n  \
    \          }\n            if (i + 8 < l.size() && l[i] == l[i + 8]) {\n      \
    \          i++;\n            }\n            if (i + 9 < l.size() && l[i] == l[i\
    \ + 9]) {\n                i++;\n            }\n            if (i + 10 < l.size()\
    \ && l[i] == l[i + 10]) {\n                i++;\n            }\n            if\
    \ (i + 11 < l.size() && l[i] == l[i + 11]) {\n                i++;\n         \
    \   }\n            if (i + 12 < l.size() && l[i] == l[i + 12]) {\n           \
    \     i++;\n            }\n            if (i + 13 < l.size() && l[i] == l[i +\
    \ 13]) {\n                i++;\n            }\n            if (i + 14 < l.size()\
    \ && l[i] == l[i + 14]) {", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n   \
    \     sum += l[i];\n        if (sum == 0) {\n            if (i + 1 < l.size()\
    \ && l[i + 1] == -l[i]) {\n                return true;\n            }\n     \
    \   }\n    }\n    return false;", "    if (l.size() < 3)\n        return false;\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++)\
    \ {\n        if (l[i] + l[i + 1] + l[i + 2] == 0)\n            return true;\n\
    \    }\n    return false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] +\
    \ l[i + 1] + l[i + 2] == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    long n = l.size();\n    for (long i = 0; i < n; i++) {\n    \
    \    for (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k <\
    \ n; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                \
    \    return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;", "    if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n\
    \    long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n\
    \    }\n    return (sum == 0);", "    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2]\
    \ == 0) {\n            return true;\n        }\n    }\n    return false;", " \
    \   std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j\
    \ + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n\
    \                    return true;\n                }\n            }\n        }\n\
    \    }\n    return false;", "    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0)\
    \ {\n            return true;\n        }\n    }\n    return false;", "    if (l.size()\
    \ < 3) return false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] == 0) return\
    \ true;\n    }\n    return false;", "    if (l.size() < 3) {\n        return false;\n\
    \    }\n    std::sort(l.begin(), l.end());\n    long sum = 0;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    return (sum == 0);",
  "    if (l.size() < 3)\n        return false;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i\
    \ + 2] == 0)\n            return true;\n    }\n    return false;", "    if (l.size()\
    \ < 3) {\n        return false;\n    }\n    std::sort(l.begin(), l.end());\n \
    \   for (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i\
    \ + 2] == 0) {\n            return true;\n        }\n    }\n    return false;",
  "    int n = l.size();\n    if (n < 3) return false;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < n - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2]\
    \ == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        for (int j = i + 1; j <\
    \ l.size() - 1; j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n\
    \                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;", "   \
    \ if (l.size() < 3) return false;\n    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size() - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2]\
    \ == 0) return true;\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        for (int j = i + 1; j <\
    \ l.size() - 1; j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n\
    \                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;", "   \
    \ if (l.size() < 3)\n        return false;\n    std::sort(l.begin(), l.end());\n\
    \    long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n\
    \    }\n    return (sum == 0);", "    std::sort(l.begin(), l.end());\n    long\
    \ sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n        sum += l[i];\n \
    \       if (sum == 0) {\n            if (i + 1 < l.size() && l[i] == l[i + 1])\
    \ {\n                return true;\n            }\n            if (i + 2 < l.size()\
    \ && l[i] == l[i + 2]) {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size();\
    \ j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n             \
    \   if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n       \
    \         }\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        for (int j\
    \ = i + 1; j < l.size() - 1; j++) {\n            for (int k = j + 1; k < l.size();\
    \ k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                   \
    \ return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;"]
stop_tokens:
- "\n}"
