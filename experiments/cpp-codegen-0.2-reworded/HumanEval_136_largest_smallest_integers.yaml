name: HumanEval_136_largest_smallest_integers
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns\
  \ a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is\
  \ the smallest\n// of positive integers in a vector.\n// If there is no negative\
  \ or positive integers, return them as None.\n// Examples:\n// >>> largest_smallest_integers([2,\
  \ 4, 1, 3, 5, 7]) \n// (None, 1)\n// >>> largest_smallest_integers([]) \n// (None,\
  \ None)\n// >>> largest_smallest_integers([0]) \n// (None, None)\nstd::tuple<std::optional<long>,\
  \ std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
  \ (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
  \ (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));\n\
  \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2,\
  \ (long)7, (long)-7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({(long)7,\
  \ (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9,\
  \ 2));\n    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)0})))\
  \ == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6})))\
  \ == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6,\
  \ (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3,\
  \ (long)1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({(long)-6,\
  \ (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));\n\
  }\n"
completions: ["    long min = lst[0], max = lst[0];\n    for (int i = 1; i < lst.size();\
    \ ++i) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n\
    \        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n  \
    \  if (min == max) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    return std::make_tuple(std::make_optional(max), std::make_optional(min));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long max_neg = -1, min_pos = 1;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            max_neg = std::max(max_neg, i);\n        } else {\n\
    \            min_pos = std::min(min_pos, i);\n        }\n    }\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    long a = 0, b = 0;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            a = std::max(a, i);\n        } else {\n\
    \            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long a = 0, b = 0;\n    for (long i : lst) {\n        if (i < 0)\
    \ {\n            if (a < i) {\n                a = i;\n            }\n       \
    \ } else if (i > 0) {\n            if (b > i) {\n                b = i;\n    \
    \        }\n        }\n    }\n    return std::make_tuple(a, b);", "    if (lst.empty())\
    \ {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    long\
    \ max_neg = -1, min_pos = 1;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            max_neg = std::max(max_neg, i);\n        } else {\n            min_pos\
    \ = std::min(min_pos, i);\n        }\n    }\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    long a = 0, b = 0;\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            a = std::max(a, i);\n        } else {\n\
    \            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (i < min) {\n\
    \                min = i;\n            }\n        }\n        if (i > 0) {\n  \
    \          if (i > max) {\n                max = i;\n            }\n        }\n\
    \    }\n    if (min == std::numeric_limits<long>::max() || max == std::numeric_limits<long>::min())\
    \ {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    return\
    \ std::make_tuple(std::make_optional(max), std::make_optional(min));", "    long\
    \ a = 0, b = 0;\n    for (long i : lst) {\n        if (i < 0) {\n            a\
    \ = std::max(a, i);\n        } else {\n            b = std::min(b, i);\n     \
    \   }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long> max_neg\
    \ = std::optional<long>();\n    std::optional<long> min_pos = std::optional<long>();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (max_neg.has_value()\
    \ && i > *max_neg) {\n                max_neg = i;\n            }\n        } else\
    \ {\n            if (min_pos.has_value() && i < *min_pos) {\n                min_pos\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(max_neg, min_pos);",
  "    long a = 0, b = 0;\n    for (long i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else if (i > 0) {\n            b = std::min(b,\
    \ i);\n        }\n    }\n    return std::make_tuple(a, b);", "    long a = 0,\
    \ b = 0;\n    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a,\
    \ i);\n        } else if (i > 0) {\n            b = std::min(b, i);\n        }\n\
    \    }\n    return std::make_tuple(a, b);", "    if (lst.empty()) {\n        return\
    \ std::make_tuple(std::nullopt, std::nullopt);\n    }\n    long max_neg = *std::min_element(lst.begin(),\
    \ lst.end());\n    long min_pos = *std::max_element(lst.begin(), lst.end());\n\
    \    return std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else {\n            b = std::min(b, i);\n\
    \        }\n    }\n    return std::make_tuple(a, b);", "    long a = -1, b = 1;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0) {\n            b = std::min(b, i);\n        }\n   \
    \ }\n    return std::make_tuple(a, b);", "    long a = 0, b = 0;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n        }\
    \ else if (i > 0) {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(a, b);", "    std::optional<long> max_neg = std::optional<long>{};\n\
    \    std::optional<long> min_pos = std::optional<long>{};\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (max_neg.has_value() && i > *max_neg)\
    \ {\n                max_neg = i;\n            }\n        } else if (i > 0) {\n\
    \            if (min_pos.has_value() && i < *min_pos) {\n                min_pos\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(max_neg, min_pos);",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long max_neg = *std::min_element(lst.begin(), lst.end(), [](long a,\
    \ long b) { return a < b; });\n    long min_pos = *std::max_element(lst.begin(),\
    \ lst.end(), [](long a, long b) { return a < b; });\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            if (i < min) {\n                min = i;\n\
    \            }\n        } else if (i > 0) {\n            if (i > max) {\n    \
    \            max = i;\n            }\n        }\n    }\n    if (min == max) {\n\
    \        return std::make_tuple(std::nullopt, std::nullopt);\n    } else {\n \
    \       return std::make_tuple(std::make_optional(max), std::make_optional(min));\n\
    \    }", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long max_neg = -1, min_pos = 1;\n    for (long i\
    \ : lst) {\n        if (i < 0) {\n            if (i > max_neg) {\n           \
    \     max_neg = i;\n            }\n        } else if (i > 0) {\n            if\
    \ (i < min_pos) {\n                min_pos = i;\n            }\n        }\n  \
    \  }\n    return std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    std::optional<long> a, b;\n    if (lst.empty()) {\n        return std::make_tuple(a,\
    \ b);\n    }\n    long max_neg = *std::max_element(lst.begin(), lst.end());\n\
    \    long min_pos = *std::min_element(lst.begin(), lst.end());\n    if (max_neg\
    \ < 0) {\n        a = std::make_optional(max_neg);\n    }\n    if (min_pos > 0)\
    \ {\n        b = std::make_optional(min_pos);\n    }\n    return std::make_tuple(a,\
    \ b);", "    long a = 0, b = 0;\n    for (long i : lst) {\n        if (i < 0)\
    \ {\n            if (a < i) {\n                a = i;\n            }\n       \
    \ } else {\n            if (b < i) {\n                b = i;\n            }\n\
    \        }\n    }\n    return std::make_tuple(a, b);", "    long a = 0, b = 0;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(a, b);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            a = i;\n        }\n        if (i > 0) {\n\
    \            b = i;\n        }\n    }\n    return std::make_tuple(a, b);", " \
    \   long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    if\
    \ (min == max) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    return std::make_tuple(std::make_optional(max), std::make_optional(min));",
  "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else {\n            b = std::min(b, i);\n\
    \        }\n    }\n    return std::make_tuple(a, b);", "    long a = 0, b = 0;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0) {\n            b = std::min(b, i);\n        }\n   \
    \ }\n    return std::make_tuple(a, b);", "    long a = 0, b = 0;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n        }\
    \ else {\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            a = std::max(a, i);\n        } else {\n            b = std::min(b,\
    \ i);\n        }\n    }\n    return std::make_tuple(a, b);", "    long a = -1,\
    \ b = 1;\n    for (auto x : lst) {\n        if (x < 0) {\n            a = std::max(a,\
    \ x);\n        } else if (x > 0) {\n            b = std::min(b, x);\n        }\n\
    \    }\n    return std::make_tuple(a, b);", "    std::optional<long> a, b;\n \
    \   for (long i : lst) {\n        if (i < 0) {\n            a = i;\n        }\
    \ else if (i > 0) {\n            b = i;\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    if\
    \ (min == max) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    return std::make_tuple(std::make_optional(max), std::make_optional(min));",
  "    long a = 0, b = 0;\n    for (long i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else {\n            b = std::min(b, i);\n\
    \        }\n    }\n    return std::make_tuple(a, b);", "    if (lst.empty()) {\n\
    \        return std::make_tuple(std::optional<long>(), std::optional<long>());\n\
    \    }\n    long max_neg = *std::min_element(lst.begin(), lst.end());\n    long\
    \ min_pos = *std::max_element(lst.begin(), lst.end());\n    if (max_neg < 0) {\n\
    \        return std::make_tuple(std::optional<long>(-max_neg), std::optional<long>(min_pos));\n\
    \    }\n    if (min_pos > 0) {\n        return std::make_tuple(std::optional<long>(max_neg),\
    \ std::optional<long>(-min_pos));\n    }\n    return std::make_tuple(std::optional<long>(),\
    \ std::optional<long>());", "    long a = 0, b = 0;\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            a = std::max(a, i);\n        } else if (i >\
    \ 0) {\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long min = lst[0], max = lst[0];\n    for (long i : lst) {\n    \
    \    if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(max),\
    \ std::make_optional(min));", "    std::optional<long> max_neg = std::optional<long>();\n\
    \    std::optional<long> min_pos = std::optional<long>();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!max_neg) {\n                max_neg\
    \ = i;\n            } else {\n                max_neg = std::max(i, max_neg.value());\n\
    \            }\n        } else if (i > 0) {\n            if (!min_pos) {\n   \
    \             min_pos = i;\n            } else {\n                min_pos = std::min(i,\
    \ min_pos.value());\n            }\n        }\n    }\n    return std::make_tuple(max_neg,\
    \ min_pos);", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long max_neg = *std::min_element(lst.begin(), lst.end(),\
    \ std::greater<long>());\n    long min_pos = *std::max_element(lst.begin(), lst.end(),\
    \ std::less<long>());\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    std::optional<long> l = std::optional<long>{};\n\
    \    std::optional<long> s = std::optional<long>{};\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            if (l) {\n                if (i > *l) {\n \
    \                   l = i;\n                }\n            } else {\n        \
    \        l = i;\n            }\n        } else if (i > 0) {\n            if (s)\
    \ {\n                if (i < *s) {\n                    s = i;\n             \
    \   }\n            } else {\n                s = i;\n            }\n        }\n\
    \    }\n    return std::make_tuple(l, s);", "    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n          \
    \  min = i;\n        }\n        if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    if (min < 0) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    return std::make_tuple(std::make_optional(max), std::make_optional(min));",
  "    std::optional<long> l, s;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            l = i;\n        }\n        if (i > 0) {\n            s = i;\n   \
    \     }\n    }\n    return std::make_tuple(l, s);", "    long a = 0, b = 0;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(a, b);", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long max_neg = *std::min_element(lst.begin(), lst.end());\n\
    \    long min_pos = *std::max_element(lst.begin(), lst.end());\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    long a = 0, b = 0;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            a = std::max(a, i);\n        } else if\
    \ (i > 0) {\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(),\
    \ std::optional<long>());\n    }\n    long max_neg = -1, min_pos = 1;\n    for\
    \ (auto i : lst) {\n        if (i < 0) {\n            if (i > max_neg) {\n   \
    \             max_neg = i;\n            }\n        } else {\n            if (i\
    \ < min_pos) {\n                min_pos = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(max_neg), std::optional<long>(min_pos));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long max_neg = *std::max_element(lst.begin(), lst.end(), std::greater<long>());\n\
    \    long min_pos = *std::min_element(lst.begin(), lst.end(), std::greater<long>());\n\
    \    return std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else {\n            b = std::min(b, i);\n\
    \        }\n    }\n    return std::make_tuple(a, b);", "    long a = 0, b = 0;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0) {\n            b = std::min(b, i);\n        }\n   \
    \ }\n    return std::make_tuple(a, b);", "    if (lst.empty()) {\n        return\
    \ std::make_tuple(std::nullopt, std::nullopt);\n    }\n    long max_neg = *std::min_element(lst.begin(),\
    \ lst.end());\n    long min_pos = *std::max_element(lst.begin(), lst.end());\n\
    \    return std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else {\n            b = std::min(b, i);\n\
    \        }\n    }\n    return std::make_tuple(a, b);", "    long a = 0, b = 0;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0) {\n            b = std::min(b, i);\n        }\n   \
    \ }\n    return std::make_tuple(a, b);", "    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for (long i : lst) {\n\
    \        if (i < 0) {\n            min = std::min(min, i);\n        }\n      \
    \  if (i > 0) {\n            max = std::max(max, i);\n        }\n    }\n    if\
    \ (min == std::numeric_limits<long>::max() || max == std::numeric_limits<long>::min())\
    \ {\n        return std::make_tuple(std::optional<long>(), std::optional<long>());\n\
    \    }\n    return std::make_tuple(std::optional<long>(max), std::optional<long>(min));",
  "    long a = -1, b = 1;\n    for (long i : lst) {\n        if (i < 0) {\n     \
    \       if (a < 0) {\n                a = i;\n            } else {\n         \
    \       a = std::max(a, i);\n            }\n        } else {\n            if (b\
    \ > 0) {\n                b = i;\n            } else {\n                b = std::min(b,\
    \ i);\n            }\n        }\n    }\n    return std::make_tuple(a, b);", " \
    \   std::optional<long> a, b;\n    for (long i : lst) {\n        if (i < 0) {\n\
    \            a = i;\n        } else if (i > 0) {\n            b = i;\n       \
    \ }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long> a = std::optional<long>{};\n\
    \    std::optional<long> b = std::optional<long>{};\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            if (a.has_value()) {\n                if (i\
    \ > *a) {\n                    a = i;\n                }\n            } else {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (b.has_value()) {\n                if (i < *b) {\n                   \
    \ b = i;\n                }\n            } else {\n                b = i;\n  \
    \          }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ max_neg = std::optional<long>();\n    std::optional<long> min_pos = std::optional<long>();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            if (max_neg.has_value())\
    \ {\n                if (i > *max_neg) {\n                    max_neg = i;\n \
    \               }\n            } else {\n                max_neg = i;\n      \
    \      }\n        } else if (i > 0) {\n            if (min_pos.has_value()) {\n\
    \                if (i < *min_pos) {\n                    min_pos = i;\n     \
    \           }\n            } else {\n                min_pos = i;\n          \
    \  }\n        }\n    }\n    return std::make_tuple(max_neg, min_pos);", "    std::optional<long>\
    \ l = std::optional<long>{};\n    std::optional<long> s = std::optional<long>{};\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (l) {\n      \
    \          if (i > *l) {\n                    l = i;\n                }\n    \
    \        } else {\n                l = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (s) {\n                if (i < *s) {\n              \
    \      s = i;\n                }\n            } else {\n                s = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(l, s);", "    std::optional<long>\
    \ max_neg = std::optional<long>{};\n    std::optional<long> min_pos = std::optional<long>{};\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (max_neg.has_value()\
    \ && i > *max_neg) {\n                max_neg = i;\n            }\n        } else\
    \ {\n            if (min_pos.has_value() && i < *min_pos) {\n                min_pos\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(max_neg, min_pos);",
  "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else {\n            b = std::min(b, i);\n\
    \        }\n    }\n    return std::make_tuple(a, b);", "    long a = 0, b = 0;\n\
    \    for (auto x : lst) {\n        if (x < 0) {\n            if (a < 0) {\n  \
    \              a = x;\n            } else {\n                a = std::max(a, x);\n\
    \            }\n        } else if (x > 0) {\n            if (b > 0) {\n      \
    \          b = x;\n            } else {\n                b = std::min(b, x);\n\
    \            }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ max_neg = std::optional<long>();\n    std::optional<long> min_pos = std::optional<long>();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (max_neg.has_value()\
    \ && i > *max_neg) {\n                max_neg = i;\n            }\n        } else\
    \ if (i > 0) {\n            if (min_pos.has_value() && i < *min_pos) {\n     \
    \           min_pos = i;\n            }\n        }\n    }\n    return std::make_tuple(max_neg,\
    \ min_pos);", "    std::optional<long> a = std::optional<long>{};\n    std::optional<long>\
    \ b = std::optional<long>{};\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            if (a.has_value() && i > *a) {\n                a = i;\n        \
    \    } else if (b.has_value() && i < *b) {\n                b = i;\n         \
    \   }\n        } else if (i > 0) {\n            if (a.has_value() && i < *a) {\n\
    \                a = i;\n            } else if (b.has_value() && i > *b) {\n \
    \               b = i;\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long min = lst[0], max = lst[0];\n    for (long i\
    \ : lst) {\n        if (i < min) {\n            min = i;\n        }\n        if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(max),\
    \ std::make_optional(min));", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long max_neg = -1, min_pos = 1;\n    for (auto i\
    \ : lst) {\n        if (i < 0) {\n            if (i > max_neg) {\n           \
    \     max_neg = i;\n            }\n        } else if (i > 0) {\n            if\
    \ (i < min_pos) {\n                min_pos = i;\n            }\n        }\n  \
    \  }\n    return std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    std::optional<long> a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            a = i;\n        }\n        if (i > 0) {\n            b = i;\n   \
    \     }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long> max_neg\
    \ = std::optional<long>();\n    std::optional<long> min_pos = std::optional<long>();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (max_neg.has_value())\
    \ {\n                if (i > max_neg.value()) {\n                    max_neg =\
    \ i;\n                }\n            } else {\n                max_neg = i;\n\
    \            }\n        } else if (i > 0) {\n            if (min_pos.has_value())\
    \ {\n                if (i < min_pos.value()) {\n                    min_pos =\
    \ i;\n                }\n            } else {\n                min_pos = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(max_neg, min_pos);",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long min = lst[0], max = lst[0];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n\
    \        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n  \
    \  return std::make_tuple(std::make_optional(max), std::make_optional(min));",
  "    long a = 0, b = 0;\n    for (long i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else {\n            b = std::min(b, i);\n\
    \        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ min, max;\n    for (long i : lst) {\n        if (i < 0) {\n            if (!min.has_value())\
    \ {\n                min = i;\n            } else {\n                min = std::min(i,\
    \ min.value());\n            }\n        } else if (i > 0) {\n            if (!max.has_value())\
    \ {\n                max = i;\n            } else {\n                max = std::max(i,\
    \ max.value());\n            }\n        }\n    }\n    return std::make_tuple(min,\
    \ max);", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long min = lst[0], max = lst[0];\n    for (long i\
    \ : lst) {\n        if (i < min) {\n            min = i;\n        }\n        if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(max),\
    \ std::make_optional(min));", "    long a = 0, b = 0;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (a < 0) {\n                a = i;\n\
    \            } else {\n                a = std::max(a, i);\n            }\n  \
    \      } else {\n            if (b < 0) {\n                b = i;\n          \
    \  } else {\n                b = std::min(b, i);\n            }\n        }\n \
    \   }\n    return std::make_tuple(a, b);", "    if (lst.empty()) {\n        return\
    \ std::make_tuple(std::nullopt, std::nullopt);\n    }\n    long min = lst[0],\
    \ max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n          \
    \  min = i;\n        }\n        if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    return std::make_tuple(std::make_optional(max), std::make_optional(min));",
  "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else if (i > 0) {\n            b = std::min(b,\
    \ i);\n        }\n    }\n    return std::make_tuple(a, b);", "    long a = 0,\
    \ b = 0;\n    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a,\
    \ i);\n        } else if (i > 0) {\n            b = std::min(b, i);\n        }\n\
    \    }\n    return std::make_tuple(a, b);", "    long a = 0, b = 0;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n        }\
    \ else {\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            a = std::max(a, i);\n        } else if (i > 0) {\n          \
    \  b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a, b);",
  "    long a = 0, b = 0;\n    for (auto x : lst) {\n        if (x < 0) {\n      \
    \      a = std::max(a, x);\n        } else {\n            b = std::min(b, x);\n\
    \        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            a = i;\n\
    \        } else if (i > 0) {\n            b = i;\n        }\n    }\n    return\
    \ std::make_tuple(a, b);", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long max_neg = *std::min_element(lst.begin(), lst.end());\n\
    \    long min_pos = *std::max_element(lst.begin(), lst.end());\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long max_neg = *std::min_element(lst.begin(), lst.end());\n\
    \    long min_pos = *std::max_element(lst.begin(), lst.end());\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(),\
    \ std::optional<long>());\n    }\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max), std::optional<long>(min));", "   \
    \ std::optional<long> max_neg = std::optional<long>();\n    std::optional<long>\
    \ min_pos = std::optional<long>();\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (max_neg.has_value()) {\n                if (i > max_neg.value())\
    \ {\n                    max_neg = i;\n                }\n            } else {\n\
    \                max_neg = i;\n            }\n        } else if (i > 0) {\n  \
    \          if (min_pos.has_value()) {\n                if (i < min_pos.value())\
    \ {\n                    min_pos = i;\n                }\n            } else {\n\
    \                min_pos = i;\n            }\n        }\n    }\n    return std::make_tuple(max_neg,\
    \ min_pos);", "    long min = std::numeric_limits<long>::max();\n    long max\
    \ = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            if (i < min) {\n                min = i;\n            }\n\
    \        }\n        if (i > 0) {\n            if (i > max) {\n               \
    \ max = i;\n            }\n        }\n    }\n    if (min == std::numeric_limits<long>::max()\
    \ || max == std::numeric_limits<long>::min()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    return std::make_tuple(max, min);", "    std::optional<long>\
    \ max_neg = std::optional<long>();\n    std::optional<long> min_pos = std::optional<long>();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (max_neg.has_value()\
    \ && i > *max_neg) {\n                max_neg = i;\n            }\n        } else\
    \ {\n            if (min_pos.has_value() && i < *min_pos) {\n                min_pos\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(max_neg, min_pos);",
  "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else if (i > 0) {\n            b = std::min(b,\
    \ i);\n        }\n    }\n    return std::make_tuple(a, b);", "    if (lst.empty())\
    \ {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    long\
    \ max_neg = *std::min_element(lst.begin(), lst.end());\n    long min_pos = *std::max_element(lst.begin(),\
    \ lst.end());\n    return std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    if\
    \ (min == max) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    return std::make_tuple(std::make_optional(max), std::make_optional(min));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long max_neg = -1, min_pos = 1;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (max_neg < 0) {\n                max_neg = i;\n\
    \            } else {\n                max_neg = std::max(max_neg, i);\n     \
    \       }\n        } else if (i > 0) {\n            if (min_pos > 0) {\n     \
    \           min_pos = i;\n            } else {\n                min_pos = std::min(min_pos,\
    \ i);\n            }\n        }\n    }\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    long a = 0, b = 0;\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            a = std::max(a, i);\n        } else {\n\
    \            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            a = std::max(a, i);\n        } else if (i > 0) {\n          \
    \  b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a, b);",
  "    long a = 0, b = 0;\n    for (long i : lst) {\n        if (i < 0) {\n      \
    \      if (a < 0) {\n                a = i;\n            } else {\n          \
    \      a = std::max(a, i);\n            }\n        } else if (i > 0) {\n     \
    \       if (b > 0) {\n                b = i;\n            } else {\n         \
    \       b = std::min(b, i);\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long max_neg = -1;\n    long min_pos = 1;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (i > max_neg) {\n                max_neg\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (i < min_pos)\
    \ {\n                min_pos = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else {\n            b = std::min(b, i);\n\
    \        }\n    }\n    return std::make_tuple(a, b);", "    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n\
    \        if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    if (min == max) {\n        return\
    \ std::make_tuple(std::nullopt, std::nullopt);\n    }\n    return std::make_tuple(std::make_optional(max),\
    \ std::make_optional(min));", "    long a = 0, b = 0;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            a = std::max(a, i);\n        } else {\n\
    \            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    if (min < 0) {\n       \
    \ return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    return std::make_tuple(std::make_optional(max),\
    \ std::make_optional(min));", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long max_neg = *std::min_element(lst.begin(), lst.end());\n\
    \    long min_pos = *std::max_element(lst.begin(), lst.end());\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    std::sort(lst.begin(), lst.end());\n    long max_neg\
    \ = lst[0];\n    long min_pos = lst[0];\n    for (long i : lst) {\n        if\
    \ (i < 0) {\n            max_neg = std::max(max_neg, i);\n        } else {\n \
    \           min_pos = std::min(min_pos, i);\n        }\n    }\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            min = std::min(min, i);\n        }\n      \
    \  if (i > 0) {\n            max = std::max(max, i);\n        }\n    }\n    if\
    \ (min == std::numeric_limits<long>::max() || max == std::numeric_limits<long>::min())\
    \ {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    return\
    \ std::make_tuple(std::make_optional(max), std::make_optional(min));", "    if\
    \ (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long max_neg = -1, min_pos = 1;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (i > max_neg) {\n                max_neg = i;\n\
    \            }\n        } else if (i > 0) {\n            if (i < min_pos) {\n\
    \                min_pos = i;\n            }\n        }\n    }\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    std::optional<long> max_neg = std::nullopt;\n\
    \    std::optional<long> min_pos = std::nullopt;\n    for (long i : lst) {\n \
    \       if (i < 0) {\n            if (max_neg == std::nullopt || i > *max_neg)\
    \ {\n                max_neg = i;\n            }\n        } else {\n         \
    \   if (min_pos == std::nullopt || i < *min_pos) {\n                min_pos =\
    \ i;\n            }\n        }\n    }\n    return std::make_tuple(max_neg, min_pos);",
  "    long a = 0, b = 0;\n    for (long i : lst) {\n        if (i < 0) {\n      \
    \      if (a < i) {\n                a = i;\n            }\n        } else {\n\
    \            if (b < i) {\n                b = i;\n            }\n        }\n\
    \    }\n    return std::make_tuple(a, b);", "    long min = lst[0], max = lst[0];\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    if\
    \ (min == max) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    return std::make_tuple(std::make_optional(max), std::make_optional(min));",
  "    long max_neg = -1;\n    long min_pos = 1;\n    for (auto i : lst) {\n     \
    \   if (i < 0) {\n            if (i > max_neg) {\n                max_neg = i;\n\
    \            }\n        } else if (i > 0) {\n            if (i < min_pos) {\n\
    \                min_pos = i;\n            }\n        }\n    }\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    long max_neg = 0;\n    long min_pos = 0;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            max_neg = std::max(max_neg,\
    \ i);\n        } else {\n            min_pos = std::min(min_pos, i);\n       \
    \ }\n    }\n    return std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else if (i > 0) {\n            b = std::min(b,\
    \ i);\n        }\n    }\n    return std::make_tuple(a, b);", "    long a = 0,\
    \ b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a,\
    \ i);\n        } else {\n            b = std::min(b, i);\n        }\n    }\n \
    \   return std::make_tuple(a, b);", "    long min = lst[0], max = lst[0];\n  \
    \  for (long i : lst) {\n        if (i < min) {\n            min = i;\n      \
    \  }\n        if (i > max) {\n            max = i;\n        }\n    }\n    if (min\
    \ == max) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n   \
    \ }\n    return std::make_tuple(std::make_optional(max), std::make_optional(min));",
  "    long a = 0, b = 0;\n    for (long i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else {\n            b = std::min(b, i);\n\
    \        }\n    }\n    return std::make_tuple(a, b);", "    if (lst.empty()) {\n\
    \        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    std::optional<long>\
    \ max_neg = std::nullopt;\n    std::optional<long> min_pos = std::nullopt;\n \
    \   for (long i : lst) {\n        if (i < 0) {\n            if (max_neg == std::nullopt)\
    \ {\n                max_neg = i;\n            } else {\n                max_neg\
    \ = std::max(max_neg, i);\n            }\n        } else if (i > 0) {\n      \
    \      if (min_pos == std::nullopt) {\n                min_pos = i;\n        \
    \    } else {\n                min_pos = std::min(min_pos, i);\n            }\n\
    \        }\n    }\n    return std::make_tuple(max_neg, min_pos);", "    if (lst.empty())\
    \ {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    long\
    \ max_neg = 0, min_pos = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            if (i > max_neg) {\n                max_neg = i;\n            }\n\
    \        } else {\n            if (i < min_pos) {\n                min_pos = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    long a = -1, b = 1;\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n        } else\
    \ if (i > 0) {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(a, b);", "    long min = lst[0], max = lst[0];\n    for (int\
    \ i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            min\
    \ = lst[i];\n        }\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    if (min < 0) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    return std::make_tuple(std::make_optional(max), std::make_optional(min));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long max_neg = *std::min_element(lst.begin(), lst.end());\n    long\
    \ min_pos = *std::max_element(lst.begin(), lst.end());\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    long a = 0, b = 0;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (a < i) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (b > i) {\n      \
    \          b = i;\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    std::optional<long> max_neg = std::optional<long>();\n    std::optional<long>\
    \ min_pos = std::optional<long>();\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (!max_neg) {\n                max_neg = i;\n          \
    \  } else if (i > max_neg) {\n                max_neg = i;\n            }\n  \
    \      } else if (i > 0) {\n            if (!min_pos) {\n                min_pos\
    \ = i;\n            } else if (i < min_pos) {\n                min_pos = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(max_neg, min_pos);",
  "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n      \
    \      if (a < i) {\n                a = i;\n            }\n        } else {\n\
    \            if (b < i) {\n                b = i;\n            }\n        }\n\
    \    }\n    return std::make_tuple(a, b);", "    std::optional<long> max_neg =\
    \ std::optional<long>();\n    std::optional<long> min_pos = std::optional<long>();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (max_neg.has_value()\
    \ && i > *max_neg) {\n                max_neg = i;\n            }\n        } else\
    \ {\n            if (min_pos.has_value() && i < *min_pos) {\n                min_pos\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(max_neg, min_pos);",
  "    long min = lst[0], max = lst[0];\n    for (long i : lst) {\n        if (i <\
    \ min) {\n            min = i;\n        }\n        if (i > max) {\n          \
    \  max = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(min),\
    \ std::make_optional(max));", "    long a = 0, b = 0;\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            a = std::max(a, i);\n        } else {\n\
    \            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    if (min < 0) {\n       \
    \ return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    return std::make_tuple(std::make_optional(max),\
    \ std::make_optional(min));", "    std::optional<long> max_neg = std::optional<long>{};\n\
    \    std::optional<long> min_pos = std::optional<long>{};\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (max_neg.has_value() && i > *max_neg)\
    \ {\n                max_neg = i;\n            }\n        } else {\n         \
    \   if (min_pos.has_value() && i < *min_pos) {\n                min_pos = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(max_neg, min_pos);",
  "    std::optional<long> max_neg = std::optional<long>();\n    std::optional<long>\
    \ min_pos = std::optional<long>();\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (max_neg.has_value() && i > *max_neg) {\n             \
    \   max_neg = i;\n            }\n        } else if (i > 0) {\n            if (min_pos.has_value()\
    \ && i < *min_pos) {\n                min_pos = i;\n            }\n        }\n\
    \    }\n    return std::make_tuple(max_neg, min_pos);", "    long a = 0, b = 0;\n\
    \    for (auto x : lst) {\n        if (x < 0) {\n            if (a < 0) {\n  \
    \              a = x;\n            } else {\n                a = std::max(a, x);\n\
    \            }\n        } else if (x > 0) {\n            if (b > 0) {\n      \
    \          b = x;\n            } else {\n                b = std::min(b, x);\n\
    \            }\n        }\n    }\n    return std::make_tuple(a, b);", "    if\
    \ (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long max_neg = *std::min_element(lst.begin(), lst.end());\n    long\
    \ min_pos = *std::max_element(lst.begin(), lst.end());\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    long max_neg = 0;\n    long min_pos = 0;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            max_neg = std::max(max_neg,\
    \ i);\n        } else {\n            min_pos = std::min(min_pos, i);\n       \
    \ }\n    }\n    if (max_neg == 0 && min_pos == 0) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    long a = 0, b = 0;\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            a = std::max(a, i);\n        } else if\
    \ (i > 0) {\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            a = std::max(a, i);\n        } else if (i > 0) {\n          \
    \  b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a, b);",
  "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else {\n            b = std::min(b, i);\n\
    \        }\n    }\n    return std::make_tuple(a, b);", "    long a = -1, b = 1;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0) {\n            b = std::min(b, i);\n        }\n   \
    \ }\n    return std::make_tuple(a, b);", "    if (lst.empty()) {\n        return\
    \ std::make_tuple(std::nullopt, std::nullopt);\n    }\n    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max = *std::max_element(lst.begin(), lst.end());\n   \
    \ if (min < 0 && max > 0) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    return std::make_tuple(max, min);", "    if (lst.empty()) {\n    \
    \    return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    long min\
    \ = lst.front();\n    long max = lst.front();\n    for (long i : lst) {\n    \
    \    if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(max),\
    \ std::make_optional(min));", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long min = lst[0], max = lst[0];\n    for (int i\
    \ = 1; i < lst.size(); ++i) {\n        if (lst[i] < min) {\n            min =\
    \ lst[i];\n        }\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    return std::make_tuple(std::make_optional(max), std::make_optional(min));",
  "    std::optional<long> max_neg = std::optional<long>();\n    std::optional<long>\
    \ min_pos = std::optional<long>();\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (max_neg.has_value() && i > *max_neg) {\n             \
    \   max_neg = i;\n            } else if (!max_neg.has_value()) {\n           \
    \     max_neg = i;\n            }\n        } else if (i > 0) {\n            if\
    \ (min_pos.has_value() && i < *min_pos) {\n                min_pos = i;\n    \
    \        } else if (!min_pos.has_value()) {\n                min_pos = i;\n  \
    \          }\n        }\n    }\n    return std::make_tuple(max_neg, min_pos);",
  "    long max_neg = 0, min_pos = 0;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            if (i > max_neg) {\n                max_neg = i;\n          \
    \  }\n        } else {\n            if (i < min_pos) {\n                min_pos\
    \ = i;\n            }\n        }\n    }\n    if (max_neg == 0 && min_pos == 0)\
    \ {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    } else {\n\
    \        return std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));\n\
    \    }", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long min = lst[0], max = lst[0];\n    for (long i\
    \ : lst) {\n        if (i < min) {\n            min = i;\n        }\n        if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(max),\
    \ std::make_optional(min));", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long max_neg = *std::min_element(lst.begin(), lst.end());\n\
    \    long min_pos = *std::max_element(lst.begin(), lst.end());\n    if (max_neg\
    \ < 0) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n\
    \    if (min_pos > 0) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    return std::make_tuple(std::nullopt, std::nullopt);", "    if (lst.empty())\
    \ {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    long\
    \ max_neg = *std::min_element(lst.begin(), lst.end(), [](long a, long b) { return\
    \ a < b; });\n    long min_pos = *std::max_element(lst.begin(), lst.end(), [](long\
    \ a, long b) { return a > b; });\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    long a = -1, b = 1;\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            if (a < 0) {\n                a =\
    \ i;\n            } else {\n                a = std::max(a, i);\n            }\n\
    \        } else {\n            if (b > 0) {\n                b = i;\n        \
    \    } else {\n                b = std::min(b, i);\n            }\n        }\n\
    \    }\n    return std::make_tuple(a, b);", "    long a = 0, b = 0;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (a < 0) {\n               \
    \ a = i;\n            } else {\n                a = std::max(a, i);\n        \
    \    }\n        } else {\n            if (b < 0) {\n                b = i;\n \
    \           } else {\n                b = std::min(b, i);\n            }\n   \
    \     }\n    }\n    return std::make_tuple(a, b);", "    if (lst.empty()) {\n\
    \        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    long\
    \ max_neg = -1, min_pos = 1;\n    for (long i : lst) {\n        if (i < 0) {\n\
    \            max_neg = std::max(max_neg, i);\n        } else {\n            min_pos\
    \ = std::min(min_pos, i);\n        }\n    }\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(max),\
    \ std::make_optional(min));", "    long a = 0, b = 0;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            a = std::max(a, i);\n        } else {\n\
    \            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    if\
    \ (min == max) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    return std::make_tuple(std::make_optional(max), std::make_optional(min));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long max_neg = -1;\n    long min_pos = 1;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (i > max_neg) {\n                max_neg\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (i < min_pos)\
    \ {\n                min_pos = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    long max_negative = 0, min_positive = 0;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            max_negative = std::max(max_negative, i);\n     \
    \   } else if (i > 0) {\n            min_positive = std::min(min_positive, i);\n\
    \        }\n    }\n    return std::make_tuple(std::make_optional(max_negative),\
    \ std::make_optional(min_positive));", "    long min = lst[0], max = lst[0];\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::make_optional(max), std::make_optional(min));", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a) {\n\
    \                a = i;\n            } else if (i > a) {\n                a =\
    \ i;\n            }\n        } else if (i > 0) {\n            if (!b) {\n    \
    \            b = i;\n            } else if (i < b) {\n                b = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ max_neg = std::optional<long>();\n    std::optional<long> min_pos = std::optional<long>();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            if (max_neg) {\n\
    \                if (i > *max_neg) {\n                    max_neg = i;\n     \
    \           }\n            } else {\n                max_neg = i;\n          \
    \  }\n        } else if (i > 0) {\n            if (min_pos) {\n              \
    \  if (i < *min_pos) {\n                    min_pos = i;\n                }\n\
    \            } else {\n                min_pos = i;\n            }\n        }\n\
    \    }\n    return std::make_tuple(max_neg, min_pos);", "    std::optional<long>\
    \ max_neg = std::optional<long>();\n    std::optional<long> min_pos = std::optional<long>();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (max_neg.has_value()\
    \ && i > max_neg.value()) {\n                max_neg = i;\n            }\n   \
    \     } else if (i > 0) {\n            if (min_pos.has_value() && i < min_pos.value())\
    \ {\n                min_pos = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(max_neg, min_pos);", "    long max_neg = -1, min_pos = 1;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            if (i > max_neg)\
    \ {\n                max_neg = i;\n            }\n        } else if (i > 0) {\n\
    \            if (i < min_pos) {\n                min_pos = i;\n            }\n\
    \        }\n    }\n    return std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    std::optional<long> a, b;\n    if (lst.size() == 0) {\n        a = b = std::nullopt;\n\
    \    } else {\n        a = std::max_element(lst.begin(), lst.end());\n       \
    \ b = std::min_element(lst.begin(), lst.end());\n    }\n    return std::make_tuple(a,\
    \ b);", "    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            min = std::min(min,\
    \ i);\n        }\n        if (i > 0) {\n            max = std::max(max, i);\n\
    \        }\n    }\n    if (min == std::numeric_limits<long>::max() || max == std::numeric_limits<long>::min())\
    \ {\n        return std::make_tuple(std::optional<long>(), std::optional<long>());\n\
    \    }\n    return std::make_tuple(std::optional<long>(max), std::optional<long>(min));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long min = lst[0], max = lst[0];\n    for (long i : lst) {\n     \
    \   if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(max),\
    \ std::make_optional(min));", "    long a = 0, b = 0;\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            a = std::max(a, i);\n        } else if\
    \ (i > 0) {\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long max_neg = -1, min_pos = 1;\n    for (auto i\
    \ : lst) {\n        if (i < 0) {\n            if (i > max_neg) {\n           \
    \     max_neg = i;\n            }\n        } else {\n            if (i < min_pos)\
    \ {\n                min_pos = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    std::optional<long> a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            a = i;\n        }\n        if (i > 0) {\n            b = i;\n   \
    \     }\n    }\n    return std::make_tuple(a, b);", "    if (lst.empty()) {\n\
    \        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    long\
    \ max_neg = *std::min_element(lst.begin(), lst.end());\n    long min_pos = *std::max_element(lst.begin(),\
    \ lst.end());\n    return std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    std::optional<long> max_neg = std::nullopt;\n    std::optional<long> min_pos\
    \ = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n          \
    \  if (max_neg.has_value() && i > max_neg.value()) {\n                max_neg\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (min_pos.has_value()\
    \ && i < min_pos.value()) {\n                min_pos = i;\n            }\n   \
    \     }\n    }\n    return std::make_tuple(max_neg, min_pos);", "    long a =\
    \ 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a,\
    \ i);\n        } else {\n            b = std::min(b, i);\n        }\n    }\n \
    \   return std::make_tuple(a, b);", "    long a = 0, b = 0;\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n        } else\
    \ {\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long max_neg = 0;\n    long min_pos = 0;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (i > max_neg) {\n                max_neg\
    \ = i;\n            }\n        } else {\n            if (i < min_pos) {\n    \
    \            min_pos = i;\n            }\n        }\n    }\n    if (max_neg ==\
    \ 0 && min_pos == 0) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    } else {\n        return std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));\n\
    \    }", "    std::optional<long> max_neg = std::nullopt;\n    std::optional<long>\
    \ min_pos = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n  \
    \          if (max_neg == std::nullopt) {\n                max_neg = i;\n    \
    \        } else {\n                max_neg = std::max(max_neg, i);\n         \
    \   }\n        } else if (i > 0) {\n            if (min_pos == std::nullopt) {\n\
    \                min_pos = i;\n            } else {\n                min_pos =\
    \ std::min(min_pos, i);\n            }\n        }\n    }\n    return std::make_tuple(max_neg,\
    \ min_pos);", "    std::optional<long> max_neg = std::optional<long>();\n    std::optional<long>\
    \ min_pos = std::optional<long>();\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (max_neg.has_value() && i > max_neg.value()) {\n      \
    \          max_neg = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (min_pos.has_value() && i < min_pos.value()) {\n                min_pos\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(max_neg, min_pos);",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long max_neg = -1, min_pos = 1;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (i > max_neg) {\n                max_neg = i;\n\
    \            }\n        } else if (i > 0) {\n            if (i < min_pos) {\n\
    \                min_pos = i;\n            }\n        }\n    }\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    long a = 0, b = 0;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (a < i) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (b > i) {\n      \
    \          b = i;\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long a = 0, b = 0;\n    for (long x : lst) {\n        if (x < 0)\
    \ {\n            a = std::max(a, x);\n        } else if (x > 0) {\n          \
    \  b = std::min(b, x);\n        }\n    }\n    return std::make_tuple(a, b);",
  "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else {\n            b = std::min(b, i);\n\
    \        }\n    }\n    return std::make_tuple(a, b);", "    long a = 0, b = 0;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(a, b);", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long max_neg = -1, min_pos = 1;\n    for (long i\
    \ : lst) {\n        if (i < 0) {\n            if (i > max_neg) {\n           \
    \     max_neg = i;\n            }\n        } else if (i > 0) {\n            if\
    \ (i < min_pos) {\n                min_pos = i;\n            }\n        }\n  \
    \  }\n    return std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long max_neg = 0, min_pos = 0;\n    for (auto i : lst) {\n       \
    \ if (i < 0) {\n            max_neg = std::max(max_neg, i);\n        } else {\n\
    \            min_pos = std::min(min_pos, i);\n        }\n    }\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    long a = 0, b = 0;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (a < i) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (b > i) {\n      \
    \          b = i;\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            a = std::max(a, i);\n        } else if (i > 0) {\n          \
    \  b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a, b);",
  "    long a = 0, b = 0;\n    for (long i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else {\n            b = std::min(b, i);\n\
    \        }\n    }\n    return std::make_tuple(a, b);", "    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for (long i : lst) {\n\
    \        if (i < 0) {\n            if (i < min) {\n                min = i;\n\
    \            }\n        } else if (i > 0) {\n            if (i > max) {\n    \
    \            max = i;\n            }\n        }\n    }\n    if (min == std::numeric_limits<long>::max()\
    \ && max == std::numeric_limits<long>::min()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    return std::make_tuple(std::make_optional(max), std::make_optional(min));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long max_neg = *std::min_element(lst.begin(), lst.end());\n    long\
    \ min_pos = *std::max_element(lst.begin(), lst.end());\n    if (max_neg < 0) {\n\
    \        return std::make_tuple(std::nullopt, min_pos);\n    }\n    if (min_pos\
    \ > 0) {\n        return std::make_tuple(max_neg, std::nullopt);\n    }\n    return\
    \ std::make_tuple(std::nullopt, std::nullopt);", "    if (lst.empty()) {\n   \
    \     return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    long max_neg\
    \ = *std::min_element(lst.begin(), lst.end());\n    long min_pos = *std::max_element(lst.begin(),\
    \ lst.end());\n    if (max_neg < 0) {\n        return std::make_tuple(std::nullopt,\
    \ min_pos);\n    }\n    if (min_pos > 0) {\n        return std::make_tuple(max_neg,\
    \ std::nullopt);\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    long max_neg = -lst[0];\n\
    \    long min_pos = lst[0];\n    for (long i = 1; i < lst.size(); ++i) {\n   \
    \     if (lst[i] < min_pos) {\n            min_pos = lst[i];\n        } else if\
    \ (lst[i] > max_neg) {\n            max_neg = lst[i];\n        }\n    }\n    return\
    \ std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    std::optional<long> max_neg = std::optional<long>();\n    std::optional<long>\
    \ min_pos = std::optional<long>();\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (!max_neg.has_value()) {\n                max_neg = i;\n\
    \            } else if (i > max_neg.value()) {\n                max_neg = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!min_pos.has_value())\
    \ {\n                min_pos = i;\n            } else if (i < min_pos.value())\
    \ {\n                min_pos = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(max_neg, min_pos);", "    if (lst.empty()) {\n        return\
    \ std::make_tuple(std::nullopt, std::nullopt);\n    }\n    std::optional<long>\
    \ max_neg = std::nullopt;\n    std::optional<long> min_pos = std::nullopt;\n \
    \   for (auto i : lst) {\n        if (i < 0) {\n            if (max_neg == std::nullopt)\
    \ {\n                max_neg = i;\n            } else {\n                max_neg\
    \ = std::max(max_neg, i);\n            }\n        } else if (i > 0) {\n      \
    \      if (min_pos == std::nullopt) {\n                min_pos = i;\n        \
    \    } else {\n                min_pos = std::min(min_pos, i);\n            }\n\
    \        }\n    }\n    return std::make_tuple(max_neg, min_pos);", "    if (lst.empty())\
    \ {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    long\
    \ min = lst[0], max = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(max),\
    \ std::make_optional(min));", "    std::optional<long> lst_max = std::optional<long>{};\n\
    \    std::optional<long> lst_min = std::optional<long>{};\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (lst_min) {\n                if (i >\
    \ *lst_min) {\n                    lst_min = i;\n                }\n         \
    \   } else {\n                lst_min = i;\n            }\n        } else {\n\
    \            if (lst_max) {\n                if (i < *lst_max) {\n           \
    \         lst_max = i;\n                }\n            } else {\n            \
    \    lst_max = i;\n            }\n        }\n    }\n    return std::make_tuple(lst_max,\
    \ lst_min);", "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            a = std::max(a, i);\n        } else if (i > 0) {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a, b);",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long max_neg = -1, min_pos = 1;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            max_neg = std::max(max_neg, i);\n        } else {\n\
    \            min_pos = std::min(min_pos, i);\n        }\n    }\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    std::optional<long> min, max;\n    for\
    \ (auto i : lst) {\n        if (i < 0) {\n            if (!min) {\n          \
    \      min = i;\n            } else {\n                min = std::min(min, i);\n\
    \            }\n        } else if (i > 0) {\n            if (!max) {\n       \
    \         max = i;\n            } else {\n                max = std::max(max,\
    \ i);\n            }\n        }\n    }\n    return std::make_tuple(min, max);",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long max_neg = -1, min_pos = 1;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            max_neg = std::max(max_neg, i);\n        } else {\n\
    \            min_pos = std::min(min_pos, i);\n        }\n    }\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long max_neg = *std::min_element(lst.begin(), lst.end());\n\
    \    long min_pos = *std::max_element(lst.begin(), lst.end());\n    if (max_neg\
    \ < 0) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n\
    \    if (min_pos > 0) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    return std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n      \
    \      a = std::max(a, i);\n        } else {\n            b = std::min(b, i);\n\
    \        }\n    }\n    return std::make_tuple(a, b);", "    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            min = std::min(i, min);\n        } else {\n\
    \            max = std::max(i, max);\n        }\n    }\n    if (min == std::numeric_limits<long>::max()\
    \ || max == std::numeric_limits<long>::min()) {\n        return std::make_tuple(std::optional<long>(),\
    \ std::optional<long>());\n    } else {\n        return std::make_tuple(std::optional<long>(max),\
    \ std::optional<long>(min));\n    }", "    long a = -1, b = 1;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n        }\
    \ else if (i > 0) {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(a, b);", "    long a = 0, b = 0;\n    for (long i : lst) {\n\
    \        if (i < 0) {\n            a = std::max(a, i);\n        } else {\n   \
    \         b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    long max_negative = 0;\n    long min_positive = 0;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            max_negative = std::max(max_negative,\
    \ i);\n        } else {\n            min_positive = std::min(min_positive, i);\n\
    \        }\n    }\n    if (max_negative == 0 && min_positive == 0) {\n       \
    \ return std::make_tuple(std::nullopt, std::nullopt);\n    } else {\n        return\
    \ std::make_tuple(std::make_optional(max_negative), std::make_optional(min_positive));\n\
    \    }", "    std::optional<long> max_neg = std::optional<long>{};\n    std::optional<long>\
    \ min_pos = std::optional<long>{};\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (max_neg) {\n                if (i > *max_neg) {\n    \
    \                max_neg = i;\n                }\n            } else {\n     \
    \           max_neg = i;\n            }\n        } else {\n            if (min_pos)\
    \ {\n                if (i < *min_pos) {\n                    min_pos = i;\n \
    \               }\n            } else {\n                min_pos = i;\n      \
    \      }\n        }\n    }\n    return std::make_tuple(max_neg, min_pos);", " \
    \   std::optional<long> max_neg = std::nullopt;\n    std::optional<long> min_pos\
    \ = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n          \
    \  if (max_neg.has_value() && i > *max_neg) {\n                max_neg = i;\n\
    \            }\n        } else if (i > 0) {\n            if (min_pos.has_value()\
    \ && i < *min_pos) {\n                min_pos = i;\n            }\n        }\n\
    \    }\n    return std::make_tuple(max_neg, min_pos);", "    std::optional<long>\
    \ max_neg = std::optional<long>{};\n    std::optional<long> min_pos = std::optional<long>{};\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (max_neg.has_value()\
    \ && i > *max_neg) {\n                max_neg = i;\n            }\n        } else\
    \ if (i > 0) {\n            if (min_pos.has_value() && i < *min_pos) {\n     \
    \           min_pos = i;\n            }\n        }\n    }\n    return std::make_tuple(max_neg,\
    \ min_pos);", "    long a = 0, b = 0;\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            a = std::max(a, i);\n        } else {\n            b = std::min(b,\
    \ i);\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ a, b;\n    if (lst.empty()) {\n        return std::make_tuple(a, b);\n    }\n\
    \    a = std::max_element(lst.begin(), lst.end()) - lst.begin();\n    b = std::min_element(lst.begin(),\
    \ lst.end()) - lst.begin();\n    return std::make_tuple(a, b);", "    long a =\
    \ 0, b = 0;\n    for (long i : lst) {\n        if (i < 0) {\n            if (a\
    \ < i) {\n                a = i;\n            }\n        } else if (i > 0) {\n\
    \            if (b > i) {\n                b = i;\n            }\n        }\n\
    \    }\n    return std::make_tuple(a, b);", "    long a = 0, b = 0;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n        }\
    \ else {\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    long max_neg = 0, min_pos = 0;\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            if (i > max_neg) {\n             \
    \   max_neg = i;\n            }\n        } else {\n            if (i < min_pos)\
    \ {\n                min_pos = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(std::make_optional(max_neg), std::make_optional(min_pos));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long max_neg = -1, min_pos = 1;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (i > max_neg) {\n                max_neg = i;\n\
    \            }\n        } else if (i > 0) {\n            if (i < min_pos) {\n\
    \                min_pos = i;\n            }\n        }\n    }\n    return std::make_tuple(std::make_optional(max_neg),\
    \ std::make_optional(min_pos));"]
stop_tokens:
- "\n}"
