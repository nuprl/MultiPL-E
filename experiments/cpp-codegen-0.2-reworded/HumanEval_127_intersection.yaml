name: HumanEval_127_intersection
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n\
  // where each interval is a pair of integers. For example, interval = (start, end)\
  \ = (1, 2).\n// The given intervals are closed which means that the interval (start,\
  \ end)\n// includes both start and end.\n// For each given interval, it is assumed\
  \ that its start is less or equal its end.\n// Your task is to determine whether\
  \ the length of intersection of these two \n// intervals is a prime number.\n//\
  \ Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which\
  \ its length is 1, which not a prime number.\n// If the length of the intersection\
  \ is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two\
  \ intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>>\
  \ intersection((1, 2), (2, 3))\n// \"NO\"\n// >>> intersection((-1, 1), (0, 4))\n\
  // \"NO\"\n// >>> intersection((-3, -1), (-5, 5))\n// \"YES\"\nstd::string intersection(std::tuple<long,\
  \ long> interval1, std::tuple<long, long> interval2) {\n"
tests: "}\nint main() {\n    auto candidate = intersection;\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(2, 3))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-1,\
  \ 1)), (std::make_tuple(0, 4))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-3,\
  \ -1)), (std::make_tuple(-5, 5))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-2,\
  \ 2)), (std::make_tuple(-4, 0))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-11,\
  \ 2)), (std::make_tuple(-1, -1))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(3, 5))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(1, 2))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-2,\
  \ -2)), (std::make_tuple(-3, -2))) == (\"NO\"));\n}\n"
completions: ["    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    long\
    \ length = std::min(end1 - start1, end2 - start2);\n    if (length % 2 == 0) {\n\
    \        return \"NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < start2 || end1 < end2) {\n\
    \        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    std::tuple<long, long> intersection =\
    \ std::tuple<long, long>(std::get<0>(interval1) > std::get<1>(interval2) ? std::get<0>(interval1)\
    \ : std::get<1>(interval2),\n                                                \
    \                std::get<0>(interval1) < std::get<1>(interval2) ? std::get<0>(interval1)\
    \ : std::get<1>(interval2));\n    if (std::get<0>(intersection) > std::get<1>(intersection))\n\
    \        return \"NO\";\n    long length = std::get<1>(intersection) - std::get<0>(intersection)\
    \ + 1;\n    if (length % 2 == 0)\n        return \"NO\";\n    else\n        return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 < start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 > start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1\
    \ < start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 >\
    \ start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 == start2\
    \ && end1 == end2) {\n        return \"NO\";\n    }\n    if (start1 == start2\
    \ && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1 < start2 &&\
    \ end1 == end2) {\n        return \"NO\";\n    }\n    if (start1 > start2 && end1\
    \ == end2) {\n        return \"NO\";\n    }\n    if (start1 == start2 && end1\
    \ > end2) {\n        return \"NO\";\n    }\n    if (start1 < start2 && end1 >\
    \ end2) {\n        return \"NO\";\n    }\n    if (start1 == start2 && end1 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > start2 && end1 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2 && end1 < end2) {\n  \
    \      return \"NO\";\n    }\n    if (start1 < start2 && end1 < end2) {\n    \
    \    return \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n      \
    \  return \"NO\";\n    }\n    if (start1 == start2 && end1 > end2) {\n       \
    \ return \"NO\";\n    }\n    if (start1 <", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"NO\";\n    }\n    long min = std::min(start1, start2);\n   \
    \ long max = std::max(end1, end2);\n    if (min > max) {\n        return \"NO\"\
    ;\n    }\n    if (min == max) {\n        return \"YES\";\n    }\n    long length\
    \ = max - min + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n\
    \    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    long length2 = end2 - start2;\n\
    \    if (length2 % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) return \"NO\";\n    if (start1 < start2\
    \ || end1 < end2) return \"NO\";\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) return \"NO\";\n    long mid = start1 + (length / 2);\n    if (start2\
    \ < mid && end2 > mid) return \"YES\";\n    return \"NO\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = std::min(end1, end2) - std::max(start1, start2) + 1;\n    if\
    \ (length % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", " \
    \   std::tuple<long, long> intersection = std::make_tuple(std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2)), std::min(std::get<1>(interval1), std::get<1>(interval2)));\n\
    \    if (std::get<0>(intersection) > std::get<1>(intersection)) {\n        return\
    \ \"NO\";\n    }\n    long length = std::get<1>(intersection) - std::get<0>(intersection)\
    \ + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (end1 < start2 || end2 < start1) {\n        return \"NO\";\n    }\n    if (end1\
    \ < start1 || end2 < start2) {\n        return \"NO\";\n    }\n    long length\
    \ = end1 - start1 + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n \
    \   }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long\
    \ end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    long length2 = end2 - start2;\n    if (length2 % 2 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length != length2) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < start2 || end1 < end2) {\n\
    \        return \"NO\";\n    }\n    long len = end1 - start1 + 1;\n    if (len\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = std::min(end1, end2) - std::max(start1,\
    \ start2) + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n  \
    \  return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n  \
    \      return \"NO\";\n    }\n    long length = end1 - start1 + 1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < start2 || end1 < end2) {\n\
    \        return \"NO\";\n    }\n    long length = std::max(end1 - start1, end2\
    \ - start2);\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    long\
    \ length = end1 - start1;\n    if (length == 1) {\n        return \"YES\";\n \
    \   }\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return \"\
    YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  if (start1 < start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 < start2) {\n        start1 = start2;\n    }\n    if (end1 > end2) {\n\
    \        end1 = end2;\n    }\n    long len = end1 - start1 + 1;\n    if (len %\
    \ 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    std::tuple<long,\
    \ long> intersection = std::make_tuple(std::max(std::get<0>(interval1), std::get<0>(interval2)),\
    \ std::min(std::get<1>(interval1), std::get<1>(interval2)));\n    if (std::get<0>(intersection)\
    \ > std::get<1>(intersection)) {\n        return \"NO\";\n    }\n    long length\
    \ = std::get<1>(intersection) - std::get<0>(intersection) + 1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    std::tuple<long,\
    \ long> intersection = std::make_tuple(std::max(std::get<0>(interval1), std::get<0>(interval2)),\
    \ std::min(std::get<1>(interval1), std::get<1>(interval2)));\n    long length\
    \ = std::get<1>(intersection) - std::get<0>(intersection) + 1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) return \"NO\";\n    if (start1 > end2\
    \ || start2 > end1) return \"NO\";\n    if (start1 > start2 || start2 > start1)\
    \ return \"NO\";\n    if (end1 > end2 || end2 > end1) return \"NO\";\n    if (end1\
    \ == start2 || end2 == start1) return \"NO\";\n    if (start1 == start2 && end1\
    \ == end2) return \"YES\";\n    if (start1 == start2 && end1 == end2) return \"\
    YES\";\n    if (start1 == start2 && end1 == end2) return \"YES\";\n    if (start1\
    \ == start2 && end1 == end2) return \"YES\";\n    if (start1 == start2 && end1\
    \ == end2) return \"YES\";\n    if (start1 == start2 && end1 == end2) return \"\
    YES\";\n    if (start1 == start2 && end1 == end2) return \"YES\";\n    if (start1\
    \ == start2 && end1 == end2) return \"YES\";\n    if (start1 == start2 && end1\
    \ == end2) return \"YES\";\n    if (start1 == start2 && end1 == end2) return \"\
    YES\";\n    if (start1 == start2 && end1 == end2) return \"YES\";\n    if (start1\
    \ == start2 && end1 == end2) return \"YES\";\n    if (start1 == start2 && end1\
    \ == end2) return \"YES\";\n    if (start1 == start2 && end1 == end2) return \"\
    YES\";\n    if (start1 == start2 && end1 == end2) return \"YES\";\n    if (start1\
    \ == start2 && end1 == end2) return \"YES\";\n    if (start1 == start2 && end1\
    \ == end2) return \"YES\";\n    if (start1 == start2", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    long length2 = end2 - start2;\n\
    \    if (length2 % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 < start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 < start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1\
    \ > start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1 >\
    \ start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 == start2\
    \ && end1 == end2) {\n        return \"NO\";\n    }\n    if (start1 == start2\
    \ && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1 < start2 &&\
    \ end1 == end2) {\n        return \"NO\";\n    }\n    if (start1 > start2 && end1\
    \ == end2) {\n        return \"NO\";\n    }\n    if (start1 == start2 && end1\
    \ > end2) {\n        return \"NO\";\n    }\n    if (start1 < start2 && end1 >\
    \ end2) {\n        return \"NO\";\n    }\n    if (start1 > start2 && end1 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < start2 && end1 < end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2 && end1 < end2) {\n  \
    \      return \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n    \
    \    return \"NO\";\n    }\n    if (start1 > start2 && end1 > end2) {\n      \
    \  return \"NO\";\n    }\n    if (start1 < start2 && end1 == end2) {\n       \
    \ return \"NO\";\n    }\n    if (start1 >", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = end1 - start1 + 1;\n   \
    \ if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";",
  "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = std::min(end1, end2) - std::max(start1, start2);\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long length = std::min(end1, end2) - std::max(start1, start2) + 1;\n    if\
    \ (length % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", " \
    \   long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 > end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1\
    \ > start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1 <\
    \ start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 < start2\
    \ && end1 == end2) {\n        return \"YES\";\n    }\n    if (start1 > start2\
    \ && end1 == end2) {\n        return \"YES\";\n    }\n    if (start1 == start2\
    \ && end1 < end2) {\n        return \"YES\";\n    }\n    if (start1 == start2\
    \ && end1 > end2) {\n        return \"YES\";\n    }\n    return \"NO\";", "  \
    \  long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = std::max(end1, end2) - std::min(start1, start2);\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end1 && start2 == end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 && start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end1 && start2 == end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 && start1 == end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end1 && start1 == end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == start2 && start1 == start2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 == start2 && start1 == end2) {\n        return \"NO\";\n    }\n\
    \    if (start1 == start2 && start2 == end1) {\n        return \"NO\";\n    }\n\
    \    if (start1 == start2 && end1 == end2) {\n        return \"NO\";\n    }\n\
    \    if (start1 == start2 && end1 == end2) {\n        return \"NO\";\n    }\n\
    \    if (start1 == start2 && end2 == end1) {\n        return \"NO\";\n    }\n\
    \    if (start1 == start2 && end2 == end2) {\n        return \"NO\";\n    }\n\
    \    if (start1 == start1 && start2 == start2) {\n        return \"NO\";\n   \
    \ }\n    if (start1 == start1 && start2 == end2) {\n        return \"NO\";\n \
    \   }\n    if (start1 ==", "    long start1 = std::get<0>(interval1);\n    long\
    \ end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"YES\";\n    }\n    long length = std::min(end1, end2) - std::max(start1,\
    \ start2) + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n  \
    \  return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    long start = start1 + (start2\
    \ - start1) / 2;\n    long end = start1 + (end2 - start1) / 2;\n    std::stringstream\
    \ ss;\n    ss << \"(\" << start << \", \" << end << \")\";\n    return ss.str();",
  "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long min = std::min(start1, start2);\n    long max = std::max(end1, end2);\n\
    \    if (min > max) {\n        return \"NO\";\n    }\n    long length = max -\
    \ min + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long min = std::min(start1, start2);\n    long max = std::max(end1, end2);\n\
    \    long length = max - min + 1;\n    if (length % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"YES\";\n    }\n    long mid1 = (start1 + end1) / 2;\n    long\
    \ mid2 = (start2 + end2) / 2;\n    if (mid1 == mid2) {\n        return \"YES\"\
    ;\n    }\n    if (mid1 > mid2) {\n        std::swap(mid1, mid2);\n    }\n    long\
    \ length = std::abs(mid1 - mid2);\n    if (length % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    return \"YES\";", "    std::tuple<long, long> intersection;\n\
    \    if (std::get<0>(interval1) <= std::get<1>(interval1) && std::get<0>(interval2)\
    \ <= std::get<1>(interval2)) {\n        if (std::get<0>(interval1) >= std::get<0>(interval2)\
    \ && std::get<1>(interval1) <= std::get<1>(interval2)) {\n            intersection\
    \ = std::tuple<long, long>(std::get<0>(interval1), std::get<1>(interval2));\n\
    \        } else if (std::get<0>(interval1) >= std::get<0>(interval2) && std::get<1>(interval1)\
    \ >= std::get<1>(interval2)) {\n            intersection = std::tuple<long, long>(std::get<0>(interval2),\
    \ std::get<1>(interval1));\n        } else if (std::get<0>(interval1) <= std::get<0>(interval2)\
    \ && std::get<1>(interval1) >= std::get<1>(interval2)) {\n            intersection\
    \ = std::tuple<long, long>(std::get<0>(interval1), std::get<1>(interval2));\n\
    \        } else if (std::get<0>(interval1) <= std::get<0>(interval2) && std::get<1>(interval1)\
    \ <= std::get<1>(interval2)) {\n            intersection = std::tuple<long, long>(std::get<0>(interval2),\
    \ std::get<1>(interval1));\n        }\n    }\n    if (std::get<0>(intersection)\
    \ == std::get<1>(intersection)) {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long min = std::min(start1, start2);\n    long max = std::max(end1, end2);\n\
    \    if (min > max) {\n        return \"NO\";\n    }\n    if (min == max) {\n\
    \        return \"YES\";\n    }\n    long length = max - min + 1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) return \"NO\";\n    if (start1 > end2\
    \ || start2 > end1) return \"NO\";\n    if (start1 == end1 && start2 == end2)\
    \ return \"YES\";\n    if (start1 == end2 || start2 == end1) return \"NO\";\n\
    \    long length = std::min(end1 - start1, end2 - start2);\n    if (length % 2\
    \ == 0) return \"NO\";\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (end1 < start2 || end2 < start1) {\n  \
    \      return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ == 1) {\n        return \"YES\";\n    }\n    if (length % 2 == 0) {\n      \
    \  return \"NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < start2 || end1 < end2) {\n\
    \        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    std::tuple<long,\
    \ long> intersection = std::make_tuple(std::max(std::get<0>(interval1), std::get<0>(interval2)),\
    \ std::min(std::get<1>(interval1), std::get<1>(interval2)));\n    if (std::get<0>(intersection)\
    \ > std::get<1>(intersection)) {\n        return \"NO\";\n    }\n    long length\
    \ = std::get<1>(intersection) - std::get<0>(intersection) + 1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    long\
    \ min = std::min(start1, start2);\n    long max = std::max(end1, end2);\n    long\
    \ length = max - min + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    for (long i = min; i <= max; i++) {\n        if (i % 2 == 0) {\n \
    \           return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end1 && start2 == end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 > start2 && start1 < end2) {\n        return \"NO\";\n    }\n    if\
    \ (start2 > start1 && start2 < end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"YES\";\n    }\n    if\
    \ (start1 > start2 && start1 < end2) {\n        return \"YES\";\n    }\n    if\
    \ (start2 > start1 && start2 < end1) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"YES\";\n    }\n    if\
    \ (start1 > start2 && start1 < end2) {\n        return \"YES\";\n    }\n    if\
    \ (start2 > start1 && start2 < end1) {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    long mid = start1 + (length / 2);\n    if (start2 > mid || end2\
    \ < mid) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    long\
    \ min = std::min(start1, start2);\n    long max = std::max(end1, end2);\n    long\
    \ length = max - min + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < end2 && start2 < end1) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    std::tuple<long, long>\
    \ intersection;\n    if (std::get<0>(interval1) > std::get<1>(interval1) || std::get<0>(interval2)\
    \ > std::get<1>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<0>(interval1)\
    \ < std::get<0>(interval2) && std::get<1>(interval1) > std::get<1>(interval2))\
    \ {\n        return \"NO\";\n    }\n    if (std::get<0>(interval1) < std::get<0>(interval2)\
    \ && std::get<1>(interval1) < std::get<1>(interval2)) {\n        return \"NO\"\
    ;\n    }\n    if (std::get<0>(interval1) > std::get<0>(interval2) && std::get<1>(interval1)\
    \ < std::get<1>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<0>(interval1)\
    \ < std::get<0>(interval2) && std::get<1>(interval1) > std::get<1>(interval2))\
    \ {\n        return \"NO\";\n    }\n    if (std::get<0>(interval1) > std::get<0>(interval2)\
    \ && std::get<1>(interval1) > std::get<1>(interval2)) {\n        return \"YES\"\
    ;\n    }\n    if (std::get<0>(interval1) < std::get<0>(interval2) && std::get<1>(interval1)\
    \ > std::get<1>(interval2)) {\n        intersection = std::make_tuple(std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2)), std::min(std::get<1>(interval1), std::get<1>(interval2)));\n\
    \        return std::to_string(std::get<0>(intersection) - std::get<1>(intersection)\
    \ + 1);\n    }\n    if (std::get<0>(interval1) >", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < start2 && end1 < end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2 && end1 < end2) {\n  \
    \      return \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n    \
    \    return \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n      \
    \  return \"NO\";\n    }\n    if (start1 > start2 && end1 > end2) {\n        return\
    \ \"NO\";\n    }\n    if (start1 > start2 && end1 < end2) {\n        return \"\
    NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n        return \"NO\"\
    ;\n    }\n    if (start1 < start2 && end1 < end2) {\n        return \"NO\";\n\
    \    }\n    if (start1 > start2 && end1 < end2) {\n        return \"NO\";\n  \
    \  }\n    if (start1 < start2 && end1 > end2) {\n        return \"NO\";\n    }\n\
    \    if (start1 > start2 && end1 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 < start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 > start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1\
    \ < start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 >\
    \ start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 < start2\
    \ && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1 >", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end1 && start2 == end2) {\n        return \"YES\";\n    }\n    long\
    \ length = std::min(end1, end2) - std::max(start1, start2) + 1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 > end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 > start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1\
    \ < start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 <\
    \ start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if (start1 ==\
    \ start2 && end1 < end2) {\n        return \"YES\";\n    }\n    if (start1 < start2\
    \ && end1 > end2) {\n        return \"YES\";\n    }\n    if (start1 > start2 &&\
    \ end1 < end2) {\n        return \"NO\";\n    }\n    if (start1 > start2 && end1\
    \ == end2) {\n        return \"YES\";\n    }\n    if (start1 == start2 && end1\
    \ > end2) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1 + 1;\n    if (length % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ return \"NO\";\n    if (start1 < start2 || end1 < end2) return \"NO\";\n   \
    \ long length = end1 - start1;\n    if (length % 2 == 0) return \"NO\";\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 >= start2 && start1 <= end2) {\n        return \"YES\";\n    }\n\
    \    if (start2 >= start1 && start2 <= end1) {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n  \
    \      return \"NO\";\n    }\n    if (start1 < start2 && end1 < end2) {\n    \
    \    return \"NO\";\n    }\n    if (start1 > start2 && end1 < end2) {\n      \
    \  return \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n        return\
    \ \"NO\";\n    }\n    if (start1 > start2 && end1 > end2) {\n        return \"\
    NO\";\n    }\n    if (start1 == start2 && end1 == end2) {\n        return \"NO\"\
    ;\n    }\n    if (start1 == start2 && end1 < end2) {\n        return \"NO\";\n\
    \    }\n    if (start1 < start2 && end1 == end2) {\n        return \"NO\";\n \
    \   }\n    if (start1 > start2 && end1 == end2) {\n        return \"NO\";\n  \
    \  }\n    if (start1 == start2 && end1 > end2) {\n        return \"NO\";\n   \
    \ }\n    if (start1 < start2 && end1 > end2) {\n        return \"NO\";\n    }\n\
    \    if (start1 > start2 && end1 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 < start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1\
    \ < start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 >\
    \ start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1 >",
  "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end1 && start2 == end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 && start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end1 && start2 == end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 ==", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    std::tuple<long, long> intersection =\
    \ std::make_tuple(std::max(std::get<0>(interval1), std::get<0>(interval2)), std::min(std::get<1>(interval1),\
    \ std::get<1>(interval2)));\n    if (std::get<0>(intersection) > std::get<1>(intersection))\
    \ return \"NO\";\n    long length = std::get<1>(intersection) - std::get<0>(intersection)\
    \ + 1;\n    if (length % 2 == 0) return \"NO\";\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end1 && start2 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"YES\";\n    }\n    if\
    \ (start1 < start2) {\n        std::swap(start1, start2);\n    }\n    if (end1\
    \ < end2) {\n        std::swap(end1, end2);\n    }\n    if (start1 > end2 || start2\
    \ > end1) {\n        return \"NO\";\n    }\n    long length = end1 - start1;\n\
    \    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 && start2 == end1) {\n        return \"YES\";\n    }\n    long\
    \ min = std::min(start1, start2);\n    long max = std::max(end1, end2);\n    long\
    \ length = max - min + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < start2 && end1 < end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2 && end1 < end2) {\n  \
    \      return \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n    \
    \    return \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n      \
    \  return \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n        return\
    \ \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n        return \"\
    NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n        return \"NO\"\
    ;\n    }\n    if (start1 < start2 && end1 > end2) {\n        return \"NO\";\n\
    \    }\n    if (start1 < start2 && end1 > end2) {\n        return \"NO\";\n  \
    \  }\n    if (start1 < start2 && end1 > end2) {\n        return \"NO\";\n    }\n\
    \    if (start1 < start2 && end1 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 < start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 < start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1\
    \ < start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 <\
    \ start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 < start2\
    \ && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 <", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    long length2 = end2 - start2;\n    if (length2 % 2 == 0) {\n\
    \        return \"NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = std::max(end1, end2) - std::min(start1,\
    \ start2);\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"NO\";\n    }\n    long min = std::min(start1, start2);\n   \
    \ long max = std::max(end1, end2);\n    if (min > max) {\n        return \"NO\"\
    ;\n    }\n    long length = max - min + 1;\n    if (length % 2 == 0) {\n     \
    \   return \"NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < start2 || end1 < end2) {\n\
    \        return \"NO\";\n    }\n    long length = std::min(end1, end2) - std::max(start1,\
    \ start2);\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end1 && start2 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    long\
    \ length = end1 - start1;\n    if (length == 1) {\n        return \"YES\";\n \
    \   }\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return \"\
    YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long int start1 = std::get<0>(interval1);\n\
    \    long int end1 = std::get<1>(interval1);\n    long int start2 = std::get<0>(interval2);\n\
    \    long int end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2\
    \ > end1)\n        return \"NO\";\n    long int length = end1 - start1;\n    if\
    \ (length % 2 == 0)\n        return \"NO\";\n    long int length2 = end2 - start2;\n\
    \    if (length2 % 2 == 0)\n        return \"NO\";\n    long int length3 = std::min(length,\
    \ length2);\n    long int i = 2;\n    while (i <= length3) {\n        if (start1\
    \ + i <= end2 && start2 + i <= end1)\n            return \"YES\";\n        if\
    \ (start1 - i >= end2 || start2 - i >= end1)\n            return \"NO\";\n   \
    \     i += 2;\n    }\n    return \"NO\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    long length = std::min(end1, end2) - std::max(start1,\
    \ start2);\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    long\
    \ length = std::min(end1, end2) - std::max(start1, start2) + 1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = std::min(end1, end2) - std::max(start1, start2);\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 < start2 || end1 < end2) {\n        return \"NO\";\n    }\n    long\
    \ len = end1 - start1;\n    if (len == 1) {\n        return \"YES\";\n    }\n\
    \    if (len % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";",
  "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 < start2 || end1 < end2) {\n        return \"NO\";\n    }\n    long\
    \ length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ return \"NO\";\n    long min = std::min(start1, start2);\n    long max = std::max(end1,\
    \ end2);\n    if (min > max) return \"NO\";\n    long length = max - min + 1;\n\
    \    if (length % 2 == 0) return \"NO\";\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < start2 && end1 < end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2 && end1 < end2) {\n  \
    \      return \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n    \
    \    return \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n      \
    \  return \"NO\";\n    }\n    if (start1 < start2 && end1 == end2) {\n       \
    \ return \"NO\";\n    }\n    if (start1 > start2 && end1 == end2) {\n        return\
    \ \"NO\";\n    }\n    if (start1 == start2 && end1 > end2) {\n        return \"\
    NO\";\n    }\n    if (start1 == start2 && end1 < end2) {\n        return \"NO\"\
    ;\n    }\n    if (start1 == start2 && end1 == end2) {\n        return \"YES\"\
    ;\n    }\n    if (start1 > start2 && end1 > end2) {\n        return \"YES\";\n\
    \    }\n    if (start1 < start2 && end1 < end2) {\n        return \"YES\";\n \
    \   }\n    if (start1 < start2 && end1 == end2) {\n        return \"YES\";\n \
    \   }\n    if (start1 == start2 && end1 < end2) {\n        return \"YES\";\n \
    \   }\n    if (start1 == start2 && end1 > end2) {\n        return \"YES\";\n \
    \   }\n    return \"NO\";", "    long start1 = std::get<0>(interval1);\n    long\
    \ end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    long\
    \ length = std::min(end1, end2) - std::max(start1, start2);\n    if (length %\
    \ 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start1 == start2) {\n\
    \        return \"YES\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    if (length % 3 == 0) {\n   \
    \     return \"NO\";\n    }\n    if (length % 5 == 0) {\n        return \"NO\"\
    ;\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n \
    \   long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 >= start2 && end1 <= end2) {\n        return \"YES\";\n    }\n \
    \   if (start2 >= start1 && end2 <= end1) {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    std::tuple<long, long> intersection = std::make_tuple(std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2)), std::min(std::get<1>(interval1), std::get<1>(interval2)));\n\
    \    if (std::get<0>(intersection) > std::get<1>(intersection))\n        return\
    \ \"NO\";\n    if (std::get<0>(intersection) == std::get<1>(intersection))\n \
    \       return \"YES\";\n    long length = std::get<1>(intersection) - std::get<0>(intersection)\
    \ + 1;\n    if (length % 2 == 0)\n        return \"NO\";\n    return \"YES\";",
  "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 < start2 || end1 < end2) {\n        return \"NO\";\n    }\n    long\
    \ length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (end1 < start2 || end2 < start1) {\n  \
    \      return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) return \"NO\";\n    if (start1 > end2\
    \ || start2 > end1) return \"NO\";\n    if (start1 == end1 && start2 == end2)\
    \ return \"YES\";\n    if (start1 > end2 || start2 > end1) return \"NO\";\n  \
    \  long length = end1 - start1 + 1;\n    if (length % 2 == 0) return \"NO\";\n\
    \    long length2 = end2 - start2 + 1;\n    if (length2 % 2 == 0) return \"NO\"\
    ;\n    long length3 = length + length2;\n    if (length3 % 2 == 0) return \"NO\"\
    ;\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long\
    \ end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && end1 > end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && end1 < end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2 && end1 < end2) {\n  \
    \      return \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n    \
    \    return \"NO\";\n    }\n    if (start1 < start2 && end1 == end2) {\n     \
    \   return \"YES\";\n    }\n    if (start1 > start2 && end1 == end2) {\n     \
    \   return \"YES\";\n    }\n    if (start1 == start2 && end1 < end2) {\n     \
    \   return \"YES\";\n    }\n    if (start1 == start2 && end1 > end2) {\n     \
    \   return \"YES\";\n    }\n    if (start1 < start2 && end1 > end2) {\n      \
    \  return \"YES\";\n    }\n    if (start1 < start2 && end1 == end2) {\n      \
    \  return \"YES\";\n    }\n    if (start1 > start2 && end1 == end2) {\n      \
    \  return \"YES\";\n    }\n    if (start1 == start2 && end1 > end2) {\n      \
    \  return \"YES\";\n    }\n    if (start1 == start2 && end1 < end2) {\n      \
    \  return \"YES\";\n    }\n    return \"NO\";\n", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    std::tuple<long,\
    \ long> intersection;\n    std::tuple<long, long>::iterator it1, it2;\n    it1\
    \ = std::min_element(std::get<0>(interval1), std::get<1>(interval1));\n    it2\
    \ = std::min_element(std::get<0>(interval2), std::get<1>(interval2));\n    if\
    \ (std::get<0>(*it1) > std::get<1>(*it2)) {\n        return \"NO\";\n    }\n \
    \   if (std::get<0>(*it1) < std::get<0>(*it2)) {\n        return \"NO\";\n   \
    \ }\n    if (std::get<0>(*it1) == std::get<0>(*it2)) {\n        intersection =\
    \ std::make_tuple(std::get<0>(*it1), std::get<1>(*it1));\n        it1 = std::max_element(std::get<0>(intersection),\
    \ std::get<1>(intersection));\n        it2 = std::max_element(std::get<0>(interval1),\
    \ std::get<1>(interval1));\n        if (std::get<0>(*it1) > std::get<0>(*it2))\
    \ {\n            return \"NO\";\n        }\n        if (std::get<0>(*it1) == std::get<0>(*it2))\
    \ {\n            return \"YES\";\n        }\n    }\n    return \"NO\";", "   \
    \ long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) return \"NO\";\n    long length = std::min(end1,\
    \ end2) - std::max(start1, start2);\n    if (length % 2 == 0) return \"NO\";\n\
    \    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n  \
    \      return \"NO\";\n    }\n    if (start1 == end2 || start2 == end1) {\n  \
    \      return \"NO\";\n    }\n    long min = std::min(start1, start2);\n    long\
    \ max = std::max(end1, end2);\n    if (min > max) {\n        return \"NO\";\n\
    \    }\n    if (min == max) {\n        return \"YES\";\n    }\n    long length\
    \ = max - min + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n\
    \    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 < start2 || end1 < end2) {\n  \
    \      return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 < start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 > start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1\
    \ > start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 <\
    \ start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 < start2\
    \ && end1 == end2) {\n        return \"NO\";\n    }\n    if (start1 == start2\
    \ && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1 == start2 &&\
    \ end1 == end2) {\n        return \"NO\";\n    }\n    if (start1 == start2 &&\
    \ end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 < start2 && end1\
    \ == end2) {\n        return \"NO\";\n    }\n    if (start1 < start2 && end1 >\
    \ end2) {\n        return \"NO\";\n    }\n    if (start1 < start2 && end1 < end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < start2 && end1 == end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2 && end1 < end2) {\n  \
    \      return \"NO\";\n    }\n    if (start1 > start2 && end1 > end2) {\n    \
    \    return \"NO\";\n    }\n    if (start1 > start2 && end1 == end2) {\n     \
    \   return \"NO\";\n    }\n    if (start1 == start2 && end1 < end2) {\n      \
    \  return \"NO\";\n    }\n    if (start1 ==", "    std::tuple<long, long> intersection\
    \ = std::make_tuple(std::max(std::get<0>(interval1), std::get<0>(interval2)),\
    \ std::min(std::get<1>(interval1), std::get<1>(interval2)));\n    if (std::get<0>(intersection)\
    \ > std::get<1>(intersection))\n        return \"NO\";\n    if (std::get<0>(intersection)\
    \ == std::get<1>(intersection))\n        return \"YES\";\n    long length = std::get<1>(intersection)\
    \ - std::get<0>(intersection) + 1;\n    if (length % 2 == 0)\n        return \"\
    NO\";\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long\
    \ end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 && start2 == end1) {\n        return \"YES\";\n    }\n    long\
    \ length = std::min(end1, end2) - std::max(start1, start2);\n    if (length %\
    \ 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    long\
    \ length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    if (length == 1) {\n        return \"YES\";\n    }\n    long mid =\
    \ start1 + (length / 2);\n    if (start2 > mid || end2 < mid) {\n        return\
    \ \"NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && end1 > end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 > start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 > start2 && end1 < end2) {\n \
    \       return \"NO\";\n    }\n    if (start1 < start2 && end1 == end2) {\n  \
    \      return \"YES\";\n    }\n    if (start1 < start2 && end1 > end2) {\n   \
    \     return \"NO\";\n    }\n    if (start1 == start2 && end1 < end2) {\n    \
    \    return \"YES\";\n    }\n    if (start1 < start2 && end1 > end2) {\n     \
    \   return \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n       \
    \ return \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n        return\
    \ \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n        return \"\
    NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n        return \"NO\"\
    ;\n    }\n    if (start1 < start2 && end1 > end2) {\n        return \"NO\";\n\
    \    }\n    if (start1 < start2 && end1 > end2) {\n        return \"NO\";\n  \
    \  }\n    if (start1 <", "    long start1 = std::get<0>(interval1);\n    long\
    \ end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2 && end1 < end2) {\n  \
    \      return \"NO\";\n    }\n    if (start2 > start1 && end2 < end1) {\n    \
    \    return \"NO\";\n    }\n    long len = std::min(end1 - start1, end2 - start2);\n\
    \    long sum = 0;\n    for (long i = 0; i < len; i++) {\n        sum += (start1\
    \ + i) * (start2 + i);\n    }\n    if (sum % 2 == 0) {\n        return \"NO\"\
    ;\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n \
    \   long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 ==", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = std::min(end1, end2) - std::max(start1,\
    \ start2) + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n  \
    \  return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n  \
    \      return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n  \
    \      return \"YES\";\n    }\n    if (start1 == end2 || start2 == end1) {\n \
    \       return \"YES\";\n    }\n    if (start1 == end2 && start2 == end1) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && start2 == end1) {\n\
    \        return \"YES\";\n    }\n    if (start1 == start2 && start2 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end1 && start2 == start2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end2 && start2 == start1) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end2 && start2 == end1) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end2 && start2 == end1) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end2 && start2 == end1) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\n\
    \        return \"NO\";\n    long length = end1 - start1;\n    if (length % 2\
    \ == 0)\n        return \"NO\";\n    long length2 = end2 - start2;\n    if (length2\
    \ % 2 == 0)\n        return \"NO\";\n    long length3 = end1 - start2;\n    if\
    \ (length3 % 2 == 0)\n        return \"NO\";\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1 + 1;\n    if (length % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    long i = start1 + 1;\n    while (i <= end2) {\n        if\
    \ (i % 2 == 0) {\n            return \"NO\";\n        }\n        i++;\n    }\n\
    \    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n  \
    \      return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n  \
    \      return \"YES\";\n    }\n    if (start1 == end2 || start2 == end1) {\n \
    \       return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n   \
    \     return \"NO\";\n    }\n    long length = end1 - start1 + 1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 < start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 > start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1\
    \ > start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 <\
    \ start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 < start2\
    \ && end1 == end2) {\n        return \"NO\";\n    }\n    if (start1 == start2\
    \ && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1 == start2 &&\
    \ end1 == end2) {\n        return \"NO\";\n    }\n    if (start1 == start2 &&\
    \ end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 < start2 && end1\
    \ == end2) {\n        return \"NO\";\n    }\n    if (start1 < start2 && end1 >\
    \ end2) {\n        return \"NO\";\n    }\n    if (start1 < start2 && end1 == end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > start2 && end1 < end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2 && end1 == end2) {\n \
    \       return \"NO\";\n    }\n    if (start1 > start2 && end1 > end2) {\n   \
    \     return \"NO\";\n    }\n    if (start1 == start2 && end1 < end2) {\n    \
    \    return \"NO\";\n    }\n    if (start1 == start2 && end1 > end2) {\n     \
    \   return \"NO\";\n    }\n    if (start1 ==", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"YES\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n    }\n    if (end1 > end2) {\n        std::swap(end1, end2);\n  \
    \  }\n    long length = end1 - start1 + 1;\n    if (length % 2 == 0) {\n     \
    \   return \"NO\";\n    }\n    long start = start1 + (start2 - start1) / 2;\n\
    \    long end = start + length / 2;\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    if (start == end) {\n        return \"YES\";\n    }\n    if\
    \ (start == end - 1) {\n        return \"YES\";\n    }\n    if (start == end +\
    \ 1) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) return \"NO\";\n    if (start1 < start2\
    \ || end1 < end2) return \"NO\";\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) return \"NO\";\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 >= start2 && start1 <= end2)\
    \ {\n        return \"YES\";\n    }\n    if (start2 >= start1 && start2 <= end1)\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < start2 || end1 < end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    long length = std::min(end1, end2) - std::max(start1,\
    \ start2) + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n  \
    \  return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 < start2 || end1 < end2) {\n  \
    \      return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) return \"NO\";\n    if (start1 < start2\
    \ || end1 < end2) return \"NO\";\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) return \"NO\";\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end1 && start2 != end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 != end1 && start2 == end2) {\n\
    \        return \"NO\";\n    }\n    long length = std::min(end1 - start1, end2\
    \ - start2);\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long len = std::min(end1, end2) - std::max(start1, start2) + 1;\n    if (len\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < end2 && start2 < end1) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n  \
    \      return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    long\
    \ length = std::min(end1, end2) - std::max(start1, start2);\n    if (length %\
    \ 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long length = std::min(end1, end2) - std::max(start1, start2);\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ return \"NO\";\n    if (start1 > end2 || start2 > end1) return \"NO\";\n   \
    \ if (start1 < start2 || end1 < end2) return \"NO\";\n    if (start2 < start1\
    \ || end2 < end1) return \"NO\";\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) return \"NO\";\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < start2 && end1 < end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2 && end1 < end2) {\n  \
    \      return \"NO\";\n    }\n    if (start1 < start2 && end1 > end2) {\n    \
    \    return \"NO\";\n    }\n    if (start1 < start2 && end1 == end2) {\n     \
    \   return \"NO\";\n    }\n    if (start1 == start2 && end1 < end2) {\n      \
    \  return \"NO\";\n    }\n    if (start1 == start2 && end1 == end2) {\n      \
    \  return \"YES\";\n    }\n    if (start1 > start2 && end1 > end2) {\n       \
    \ return \"YES\";\n    }\n    if (start1 == start2 && end1 > end2) {\n       \
    \ return \"YES\";\n    }\n    if (start1 == start2 && end1 == end2) {\n      \
    \  return \"YES\";\n    }\n    return \"NO\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    long length1 = end1 - start2;\n    long length2 = end2 - start1;\n\
    \    if (length1 % 2 == 0 || length2 % 2 == 0) {\n        return \"NO\";\n   \
    \ }\n    long length3 = end2 - start2;\n    if (length3 % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < start2 && end1 < end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 < start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 < start1) {\n\
    \        std::swap(start1, start2);\n        std::swap(end1, end2);\n    }\n \
    \   long length = end1 - start1 + 1;\n    if (length % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length == 1) {\n        return \"YES\";\n    }\n   \
    \ long start = start1 + (length / 2);\n    long end = start + length / 2;\n  \
    \  if (end > end2) {\n        end = end2;\n    }\n    if (start < start2) {\n\
    \        start = start2;\n    }\n    if (end < start2) {\n        end = start2;\n\
    \    }\n    long length2 = end - start + 1;\n    if (length2 % 2 == 0) {\n   \
    \     return \"NO\";\n    }\n    if (length2 == 1) {\n        return \"YES\";\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < start2 && start2 < end1 &&\
    \ end1 < end2) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long min = std::min(start1, start2);\n    long max = std::max(end1, end2);\n\
    \    if (min > max) {\n        return \"NO\";\n    }\n    long length = max -\
    \ min + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1)\n        return \"NO\";\n    long length\
    \ = std::min(end1, end2) - std::max(start1, start2);\n    if (length % 2 == 0)\n\
    \        return \"NO\";\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"YES\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n    }\n    if (end1 > end2) {\n        std::swap(end1, end2);\n  \
    \  }\n    if (start1 == end2) {\n        return \"YES\";\n    }\n    if (start2\
    \ == end1) {\n        return \"YES\";\n    }\n    long length = end1 - start1;\n\
    \    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    if (length ==\
    \ 1) {\n        return \"YES\";\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end1 && start2 == end2) {\n        return \"YES\";\n    }\n    long\
    \ length = std::min(end1, end2) - std::max(start1, start2) + 1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"YES\";\n    }\n    if (start1 > end2) {\n        std::swap(start1,\
    \ end1);\n        std::swap(start2, end2);\n    }\n    if (start2 > end1) {\n\
    \        std::swap(start1, end1);\n        std::swap(start2, end2);\n    }\n \
    \   long length = end1 - start1;\n    if (length == 1) {\n        return \"YES\"\
    ;\n    }\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    long\
    \ min = std::min(start1, start2);\n    long max = std::max(end1, end2);\n    long\
    \ length = max - min + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    if (length % 3 == 0) {\n        return \"NO\";\n    }\n    if (length\
    \ % 5 == 0) {\n        return \"NO\";\n    }\n    if (length % 7 == 0) {\n   \
    \     return \"NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    if (start1 >= start2 && start1 <= end2\
    \ && end1 >= start2 && end1 <= end2) {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    long start = start1 + (start2 - start1) / 2;\n    long end =\
    \ start1 + (end2 - start1) / 2;\n    if (start > end) {\n        return \"NO\"\
    ;\n    }\n    if (start == end) {\n        return \"YES\";\n    }\n    if (start\
    \ == end + 1) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    long start = start1 + (start2 - start1) / 2;\n    long end =\
    \ start1 + (end2 - start1) / 2;\n    if (start > end) {\n        return \"NO\"\
    ;\n    }\n    if (start == end) {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    std::tuple<long, long> intersection = std::make_tuple(std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2)), std::min(std::get<1>(interval1), std::get<1>(interval2)));\n\
    \    if (std::get<0>(intersection) > std::get<1>(intersection)) {\n        return\
    \ \"NO\";\n    }\n    if (std::get<0>(intersection) == std::get<1>(intersection))\
    \ {\n        return \"YES\";\n    }\n    if (std::get<0>(intersection) == std::get<1>(intersection)\
    \ + 1) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2) {\n        return \"YES\";\n    }\n    if (start2 == end1)\
    \ {\n        return \"YES\";\n    }\n    if (start1 == end2) {\n        return\
    \ \"YES\";\n    }\n    if (start2 == end1) {\n        return \"YES\";\n    }\n\
    \    if (start1 == end2) {\n        return \"YES\";\n    }\n    if (start2 ==\
    \ end1) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    long\
    \ min = std::min(start1, start2);\n    long max = std::max(end1, end2);\n    long\
    \ length = max - min + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long len = end1 - start1;\n    if (len\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    long len2 = end2 - start2;\n\
    \    if (len2 % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";",
  "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) return \"NO\";\n    if (start1 > end2\
    \ || start2 > end1) return \"NO\";\n    if (start1 == end1 && start2 == end2)\
    \ return \"NO\";\n    if (start1 == end2 || start2 == end1) return \"NO\";\n \
    \   if (start1 == end2 && start2 == end1) return \"NO\";\n    if (start1 == end1\
    \ && start2 == end2) return \"NO\";\n    if (start1 == end2 && start2 == end1)\
    \ return \"NO\";\n    if (start1 == end1 && start2 == end2) return \"NO\";\n \
    \   if (start1 == end2 && start2 == end1) return \"NO\";\n    if (start1 == end1\
    \ && start2 == end2) return \"NO\";\n    if (start1 == end2 && start2 == end1)\
    \ return \"NO\";\n    if (start1 == end1 && start2 == end2) return \"NO\";\n \
    \   if (start1 == end2 && start2 == end1) return \"NO\";\n    if (start1 == end1\
    \ && start2 == end2) return \"NO\";\n    if (start1 == end2 && start2 == end1)\
    \ return \"NO\";\n    if (start1 == end1 && start2 == end2) return \"NO\";\n \
    \   if (start1 == end2 && start2 == end1) return \"NO\";\n    if (start1 == end1\
    \ && start2 == end2) return \"NO\";\n    if (start1 == end2 && start2 == end1)\
    \ return \"NO\";\n    if (start1 == end1 && start2 == end2) return \"NO\";\n \
    \   if (start1 == end2 && start2 == end1) return \"NO\";\n    if (start1 == end1\
    \ && start2 == end2) return \"NO\";\n    if (start1 == end2", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  if (start1 <= start2 && end1 >= end2) {\n        return \"YES\";\n    }\n \
    \   if (start1 >= start2 && end1 <= end2) {\n        return \"YES\";\n    }\n\
    \    if (start1 <= start2 && end1 >= end2) {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 >= start2 && end1 <= end2) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    long int start1 = std::get<0>(interval1);\n\
    \    long int end1 = std::get<1>(interval1);\n    long int start2 = std::get<0>(interval2);\n\
    \    long int end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2\
    \ > end2) {\n        return \"NO\";\n    }\n    long int length = end1 - start1;\n\
    \    if (length == 1) {\n        return \"YES\";\n    }\n    if (length % 2 ==\
    \ 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    long\
    \ min = std::min(start1, start2);\n    long max = std::max(end1, end2);\n    long\
    \ length = max - min + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 < start2 || end1 < end2) {\n\
    \        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 < start2 || end1 > end2) {\n        return \"NO\";\n    }\n    long\
    \ length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    long length = std::min(end1, end2) - std::max(start1,\
    \ start2) + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n  \
    \  return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    long length2 = end2 - start2;\n\
    \    if (length2 % 2 == 0) {\n        return \"NO\";\n    }\n    if (length !=\
    \ length2) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) return \"NO\";\n    if (start1 > end2\
    \ || start2 > end1) return \"NO\";\n    if (start1 == end1 && start2 == end2)\
    \ return \"NO\";\n    if (start1 == end2 || start2 == end1) return \"NO\";\n \
    \   long length = std::min(end1, end2) - std::max(start1, start2) + 1;\n    if\
    \ (length % 2 == 0) return \"NO\";\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"YES\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    long mid1 = start1 + length\
    \ / 2;\n    long mid2 = start2 + length / 2;\n    if (mid1 > mid2) {\n       \
    \ std::swap(mid1, mid2);\n    }\n    if (mid1 == mid2) {\n        return \"YES\"\
    ;\n    }\n    if (mid1 > mid2) {\n        return \"NO\";\n    }\n    long length1\
    \ = end1 - mid1;\n    long length2 = end2 - mid2;\n    if (length1 % 2 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length2 % 2 == 0) {\n        return \"\
    NO\";\n    }\n    if (length1 == length2) {\n        return \"YES\";\n    }\n\
    \    if (length1 > length2) {\n        return \"NO\";\n    }\n    if (length1\
    \ < length2) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    std::tuple<long, long> intersection =\
    \ std::make_tuple(std::max(std::get<0>(interval1), std::get<0>(interval2)), std::min(std::get<1>(interval1),\
    \ std::get<1>(interval2)));\n    if (std::get<0>(intersection) > std::get<1>(intersection))\
    \ {\n        return \"NO\";\n    }\n    long length = std::get<1>(intersection)\
    \ - std::get<0>(intersection) + 1;\n    if (length % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    return \"YES\";", "    std::tuple<long, long> intersection\
    \ = std::tuple<long, long>(std::max(std::get<0>(interval1), std::get<0>(interval2)),\
    \ std::min(std::get<1>(interval1), std::get<1>(interval2)));\n    if (std::get<0>(intersection)\
    \ > std::get<1>(intersection)) {\n        return \"NO\";\n    }\n    long length\
    \ = std::get<1>(intersection) - std::get<0>(intersection) + 1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) return \"NO\";\n    long length = std::min(end1,\
    \ end2) - std::max(start1, start2) + 1;\n    if (length % 2 == 0) return \"NO\"\
    ;\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long\
    \ end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long length = std::min(end1, end2) - std::max(start1,\
    \ start2) + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n  \
    \  return \"YES\";", "    std::tuple<long, long> intersection = std::make_tuple(std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2)), std::min(std::get<1>(interval1), std::get<1>(interval2)));\n\
    \    if (std::get<0>(intersection) > std::get<1>(intersection)) {\n        return\
    \ \"NO\";\n    }\n    long length = std::get<1>(intersection) - std::get<0>(intersection)\
    \ + 1;\n    if (isPrime(length)) {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    std::tuple<long, long> intersection = std::make_tuple(std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2)), std::min(std::get<1>(interval1), std::get<1>(interval2)));\n\
    \    if (std::get<0>(intersection) > std::get<1>(intersection))\n        return\
    \ \"NO\";\n    if (std::get<0>(intersection) == std::get<1>(intersection))\n \
    \       return \"YES\";\n    long length = std::get<1>(intersection) - std::get<0>(intersection)\
    \ + 1;\n    if (length % 2 == 0)\n        return \"NO\";\n    return \"YES\";",
  "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = std::min(end1, end2) - std::max(start1, start2);\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == start2 && end1 == end2) {\n\
    \        return \"YES\";\n    }\n    long length = std::min(end1, end2) - std::max(start1,\
    \ start2) + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n  \
    \  if (length == 2) {\n        return \"YES\";\n    }\n    if (length == 3) {\n\
    \        return \"YES\";\n    }\n    if (length == 4) {\n        return \"YES\"\
    ;\n    }\n    if (length == 5) {\n        return \"YES\";\n    }\n    if (length\
    \ == 6) {\n        return \"YES\";\n    }\n    if (length == 7) {\n        return\
    \ \"YES\";\n    }\n    if (length == 8) {\n        return \"YES\";\n    }\n  \
    \  if (length == 9) {\n        return \"YES\";\n    }\n    if (length == 10) {\n\
    \        return \"YES\";\n    }\n    if (length == 11) {\n        return \"YES\"\
    ;\n    }\n    if (length == 12) {\n        return \"YES\";\n    }\n    if (length\
    \ == 13) {\n        return \"YES\";\n    }\n    if (length == 14) {\n        return\
    \ \"YES\";\n    }\n    if (length == 15) {\n        return \"YES\";\n    }\n \
    \   if (length == 16) {\n        return \"YES\";\n    }\n    if (length == 17)\
    \ {\n        return \"YES\";\n    }\n    if (length == 18)", "    std::tuple<long,\
    \ long> intersection = std::make_tuple(std::max(std::get<0>(interval1), std::get<0>(interval2)),\
    \ std::min(std::get<1>(interval1), std::get<1>(interval2)));\n    if (std::get<0>(intersection)\
    \ > std::get<1>(intersection)) {\n        return \"NO\";\n    }\n    long length\
    \ = std::get<1>(intersection) - std::get<0>(intersection) + 1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (end1 < start2 || end2 < start1) {\n        return \"NO\";\n    }\n    long\
    \ length = end1 - start1;\n    if (length == 1) {\n        return \"YES\";\n \
    \   }\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return \"\
    YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end1 && start2 == end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    long\
    \ length = std::min(end1, end2) - std::max(start1, start2);\n    if (length %\
    \ 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 < start2 || end1 < end2) {\n        return \"NO\";\n    }\n    long\
    \ length = end1 - start1;\n    if (length == 1) {\n        return \"YES\";\n \
    \   }\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return \"\
    YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    long\
    \ min = std::min(start1, start2);\n    long max = std::max(end1, end2);\n    long\
    \ length = max - min + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"YES\";\n    }\n    if (start1 > end2 || start2 > end1) {\n \
    \       return \"NO\";\n    }\n    long length = std::min(end1, end2) - std::max(start1,\
    \ start2);\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end1 && start2 == end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    long\
    \ length = std::min(end1, end2) - std::max(start1, start2);\n    if (length %\
    \ 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 >= start2 && end1 <= end2) {\n        return \"YES\";\n    }\n \
    \   if (start2 >= start1 && end2 <= end1) {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n  \
    \      return \"NO\";\n    }\n    if (end1 < start2 || end2 < start1) {\n    \
    \    return \"NO\";\n    }\n    long length = std::min(end1, end2) - std::max(start1,\
    \ start2) + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n  \
    \  return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) return\
    \ \"NO\";\n    if (start1 < start2 || end1 < end2) return \"NO\";\n    long length\
    \ = end1 - start1;\n    if (length == 1) return \"YES\";\n    if (length % 2 ==\
    \ 0) return \"NO\";\n    return \"YES\";", "    std::tuple<long, long> intersection\
    \ = std::make_tuple(std::max(std::get<0>(interval1), std::get<0>(interval2)),\
    \ std::min(std::get<1>(interval1), std::get<1>(interval2)));\n    if (std::get<0>(intersection)\
    \ > std::get<1>(intersection)) {\n        return \"NO\";\n    }\n    if (std::get<0>(intersection)\
    \ == std::get<1>(intersection)) {\n        return \"YES\";\n    }\n    long length\
    \ = std::get<1>(intersection) - std::get<0>(intersection) + 1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    std::tuple<long,\
    \ long> intersection = std::make_tuple(std::max(std::get<0>(interval1), std::get<0>(interval2)),\
    \ std::min(std::get<1>(interval1), std::get<1>(interval2)));\n    if (std::get<0>(intersection)\
    \ > std::get<1>(intersection)) {\n        return \"NO\";\n    }\n    long length\
    \ = std::get<1>(intersection) - std::get<0>(intersection) + 1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = std::min(end1, end2) - std::max(start1, start2) + 1;\n    if\
    \ (length % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", " \
    \   long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 < start2 || end1 < end2) {\n        return \"NO\";\n    }\n    long\
    \ len = end1 - start1;\n    if (len % 2 == 0) {\n        return \"NO\";\n    }\n\
    \    return \"YES\";", "    std::tuple<long, long> intersection = std::make_tuple(std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2)), std::min(std::get<1>(interval1), std::get<1>(interval2)));\n\
    \    if (std::get<0>(intersection) > std::get<1>(intersection)) {\n        return\
    \ \"NO\";\n    }\n    long length = std::get<1>(intersection) - std::get<0>(intersection)\
    \ + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) return \"NO\";\n    if (start1 > end2\
    \ || start2 > end1) return \"NO\";\n    if (start1 == end1 && start2 == end2)\
    \ return \"NO\";\n    if (start1 == end2 || start2 == end1) return \"NO\";\n \
    \   if (start1 > end2 || start2 > end1) return \"NO\";\n    if (start1 == end2\
    \ || start2 == end1) return \"NO\";\n    if (start1 == end1 && start2 == end2)\
    \ return \"NO\";\n    if (start1 == end2 || start2 == end1) return \"NO\";\n \
    \   if (start1 > end2 || start2 > end1) return \"NO\";\n    if (start1 == end2\
    \ || start2 == end1) return \"NO\";\n    if (start1 == end1 && start2 == end2)\
    \ return \"NO\";\n    if (start1 == end2 || start2 == end1) return \"NO\";\n \
    \   if (start1 > end2 || start2 > end1) return \"NO\";\n    if (start1 == end2\
    \ || start2 == end1) return \"NO\";\n    if (start1 == end1 && start2 == end2)\
    \ return \"NO\";\n    if (start1 == end2 || start2 == end1) return \"NO\";\n \
    \   if (start1 > end2 || start2 > end1) return \"NO\";\n    if (start1 == end2\
    \ || start2 == end1) return \"NO\";\n    if (start1 == end1 && start2 == end2)\
    \ return \"NO\";\n    if (start1 == end2 || start2 == end1) return \"NO\";\n \
    \   if (start1 > end2 || start2 > end1) return \"NO\";\n    if (start1 == end2\
    \ || start2 == end1) return \"NO\";\n    if (start1 == end1", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long min = std::min(start1, start2);\n    long max = std::max(end1, end2);\n\
    \    if (min > max) {\n        return \"NO\";\n    }\n    long length = max -\
    \ min + 1;\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    long\
    \ length = std::min(end1 - start1, end2 - start2);\n    if (length % 2 == 0) {\n\
    \        return \"NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end2 && start2 == end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 == start2 && start2 == end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == start2 && start2 == end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end2 && start2 == end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == start2) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end2 && start2 == start1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end2 && start2 == end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end1 && start2 == start2) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end2 && start2 == end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == start2 && start2 == end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 == start2 && start2 == end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 ==", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  long length = end1 - start1;\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    if (start1 <= start2 && end1 >= end2)\
    \ {\n        return \"YES\";\n    }\n    if (start1 <= start2 && end1 < end2)\
    \ {\n        return \"NO\";\n    }\n    if (start2 <= start1 && end2 < end1) {\n\
    \        return \"NO\";\n    }\n    if (start2 <= start1 && end2 >= end1) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long length = end1 - start1;\n    if (length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end1 && start2 == end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 ==", "    long int start1 = std::get<0>(interval1);\n    long int end1\
    \ = std::get<1>(interval1);\n    long int start2 = std::get<0>(interval2);\n \
    \   long int end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 >\
    \ end1) {\n        return \"NO\";\n    }\n    long int length = end1 - start1;\n\
    \    if (length == 0) {\n        return \"NO\";\n    }\n    long int length2 =\
    \ end2 - start2;\n    if (length2 == 0) {\n        return \"NO\";\n    }\n   \
    \ if (length % length2 != 0) {\n        return \"NO\";\n    }\n    long int length3\
    \ = length / length2;\n    if (length3 % 2 != 0) {\n        return \"NO\";\n \
    \   }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long\
    \ end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end2 || start2 > end1)\n\
    \        return \"NO\";\n    long length = end1 - start1;\n    if (length % 2\
    \ == 0)\n        return \"NO\";\n    long length2 = end2 - start2;\n    if (length2\
    \ % 2 == 0)\n        return \"NO\";\n    long length3 = end1 - start2;\n    if\
    \ (length3 % 2 == 0)\n        return \"NO\";\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n  \
    \  if (start1 < start2 && start2 < end1 && end1 < end2) {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";", "    long start1 = std::get<0>(interval1);\n  \
    \  long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > end2 || start2 > end1) {\n\
    \        return \"NO\";\n    }\n    if (start1 == end2 || start2 == end1) {\n\
    \        return \"YES\";\n    }\n    long length = std::min(end1, end2) - std::max(start1,\
    \ start2);\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end1 && start2 == end2) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == end2 || start2 == end1) {\n        return \"NO\";\n    }\n    if\
    \ (start1 == start2 && end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 == start2 || end1 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (start1 > start2 && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1\
    \ < start2 && end1 > end2) {\n        return \"NO\";\n    }\n    if (start1 <\
    \ start2 && end1 > end2) {\n        return \"YES\";\n    }\n    if (start1 > start2\
    \ && end1 < end2) {\n        return \"NO\";\n    }\n    if (start1 > start2 &&\
    \ end1 > end2) {\n        return \"YES\";\n    }\n    if (start1 < start2 && end1\
    \ > end2) {\n        return \"YES\";\n    }\n    if (start1 < start2 && end1 <\
    \ end2) {\n        return \"YES\";\n    }\n    if (start1 < start2 && end1 > end2)\
    \ {\n        return \"YES\";\n    }\n    if (start1 > start2 && end1 < end2) {\n\
    \        return \"YES\";\n    }\n    if (start1 > start2 && end1 < end2) {\n \
    \       return \"YES\";\n    }\n    if (start1 > start2 && end1 > end2) {\n  \
    \      return \"YES\";\n    }\n    if (start1 <"]
stop_tokens:
- "\n}"
