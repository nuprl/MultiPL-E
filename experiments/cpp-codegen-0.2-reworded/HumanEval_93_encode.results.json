{
  "name": "HumanEval_93_encode",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n",
  "tests": "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmph16i8lzt: /tmp/tmph16i8lzt.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpqnkgk80l: /tmp/tmpqnkgk80l.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmppkeqj3q_: /tmp/tmppkeqj3q_.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmplcgrwlu6: /tmp/tmplcgrwlu6.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmp4ybod1c2: /tmp/tmp4ybod1c2.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (isalpha(message[i])) {\n            encoded_message.push_back(tolower(message[i]));\n            encoded_message.push_back(toupper(message[i + 2]));\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpq5kh7uv4: /tmp/tmpq5kh7uv4.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + (message[i] - 'a' + 2) % 26 + 'a';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + (message[i] - 'A' + 2) % 26 + 'A';\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpf6tm40_o: /tmp/tmpf6tm40_o.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message.push_back(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message.push_back(message[i]);\n        } else if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message.push_back(message[i] + 2);\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpd65_c13j: /tmp/tmpd65_c13j.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmppkeqj3q_: /tmp/tmppkeqj3q_.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i+2]);\n        }\n        else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpyzqi2w2d: /tmp/tmpyzqi2w2d.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded += message[i];\n            encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpazes_yah: /tmp/tmpazes_yah.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c - 'a' + 'A');\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpep62xwhp: /tmp/tmpep62xwhp.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmppkeqj3q_: /tmp/tmppkeqj3q_.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + (message[i] - 'a' + 2) % 26 + 'a';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + (message[i] - 'A' + 2) % 26 + 'A';\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmphrnib0kz: /tmp/tmphrnib0kz.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpyveynj02: /tmp/tmpyveynj02.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 2;\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmp6lrs_92v: /tmp/tmp6lrs_92v.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result.push_back(message[i]);\n        } else if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result.push_back(message[i] + 2);\n        } else {\n            result.push_back(message[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmplk5dvdd8: /tmp/tmplk5dvdd8.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c - 'a' + 'A');\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpg02b1pl7: /tmp/tmpg02b1pl7.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i + 2]);\n        }\n        else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmp_ckor0mm: /tmp/tmp_ckor0mm.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i] + message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmp3kla0ap7: /tmp/tmp3kla0ap7.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            encoded += message[i];\n            encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmphlp58z6t: /tmp/tmphlp58z6t.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if (isalpha(c)) {\n            if (i + 2 < message.length() && isalpha(message[i + 2])) {\n                c = tolower(c);\n                c = toupper(message[i + 2]);\n                i += 2;\n            } else {\n                c = tolower(c);\n            }\n        }\n        result.push_back(c);\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpiuo8vd41: /tmp/tmpiuo8vd41.cpp:32: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + (message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + (message[i] - 'A' + 'a');\n        } else if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i] + message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpes6uay2w: /tmp/tmpes6uay2w.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += c;\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpnq93ql3u: /tmp/tmpnq93ql3u.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmp6dj3m7ll: /tmp/tmp6dj3m7ll.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result.push_back(message[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpzw7zrdpd: /tmp/tmpzw7zrdpd.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2 * (message[i] - 'a');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 2 * (message[i] - 'A');\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpee3ddzyx: /tmp/tmpee3ddzyx.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result.push_back(toupper(c));\n            } else {\n                result.push_back(tolower(c));\n            }\n        } else {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpcuh45byv: /tmp/tmpcuh45byv.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            result.push_back(message[i]);\n            result.push_back(message[i + 2]);\n        } else {\n            result.push_back(message[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmp3yngual1: /tmp/tmp3yngual1.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i];\n        } else if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i] + 2;\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmp_6_bj8ws: /tmp/tmp_6_bj8ws.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded += message[i];\n            encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpa_kel6jd: /tmp/tmpa_kel6jd.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpyveynj02: /tmp/tmpyveynj02.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + (message[i] - 'a' + 2) % 26 + 'a';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + (message[i] - 'A' + 2) % 26 + 'A';\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmphrnib0kz: /tmp/tmphrnib0kz.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += c;\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpnq93ql3u: /tmp/tmpnq93ql3u.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i+2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpa2c154hk: /tmp/tmpa2c154hk.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c - 'a' + 'A');\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpep62xwhp: /tmp/tmpep62xwhp.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (char c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result.push_back(toupper(c));\n            } else {\n                result.push_back(tolower(c));\n            }\n        } else {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmphlvn6yrp: /tmp/tmphlvn6yrp.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpfy64u09z: /tmp/tmpfy64u09z.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            encoded_message += message[i] + message[i + 2];\n        } else {\n            encoded_message += message[i];\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpmnx0igew: /tmp/tmpmnx0igew.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += message[i] + 2 * (i + 1);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += message[i] + 2 * (i + 1);\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmp9cvwu7vb: /tmp/tmp9cvwu7vb.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c - 'a' + 'A');\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpep62xwhp: /tmp/tmpep62xwhp.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmp6dj3m7ll: /tmp/tmp6dj3m7ll.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c - 'a' + 'A');\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpg02b1pl7: /tmp/tmpg02b1pl7.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message += message[i];\n            encoded_message += message[i + 2];\n        } else {\n            encoded_message += message[i];\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpiebjehmr: /tmp/tmpiebjehmr.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmp6_ngih7n: /tmp/tmp6_ngih7n.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for(char c : message) {\n        if(isalpha(c)) {\n            if(isupper(c)) {\n                result += c;\n            } else {\n                result += (char)((c + 2) % 26 + 'A');\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpbe5m64_n: /tmp/tmpbe5m64_n.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message.push_back(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message.push_back(message[i]);\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpviw7m3dv: /tmp/tmpviw7m3dv.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result.push_back(message[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpzw7zrdpd: /tmp/tmpzw7zrdpd.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result.push_back(c + 2);\n        } else if (c >= 'A' && c <= 'Z') {\n            result.push_back(c);\n        } else {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpytuyi2wf: /tmp/tmpytuyi2wf.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message += message[i];\n            encoded_message += message[i + 2];\n        } else {\n            encoded_message += message[i];\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpiebjehmr: /tmp/tmpiebjehmr.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmp6dj3m7ll: /tmp/tmp6dj3m7ll.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message += message[i] + (message[i] - 'a' + 2) % 26 + 'a';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message += message[i] + (message[i] - 'A' + 2) % 26 + 'A';\n        } else {\n            encoded_message += message[i];\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmppiuwnh3v: /tmp/tmppiuwnh3v.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c;\n            result += c;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpgjlv2bmi: /tmp/tmpgjlv2bmi.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 'a' - 'A';\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpzbz__j1n: /tmp/tmpzbz__j1n.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 2;\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmp6lrs_92v: /tmp/tmp6lrs_92v.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmppkeqj3q_: /tmp/tmppkeqj3q_.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            result += message[i] + message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmp4q9n9bf2: /tmp/tmp4q9n9bf2.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n            encoded += message[i];\n            encoded += message[i + 2];\n        }\n        else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmplhivv1zx: /tmp/tmplhivv1zx.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if (isalpha(c)) {\n            if (i + 2 < message.length() && isalpha(message[i + 2])) {\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n        }\n        result.push_back(c);\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpab66ba_o: /tmp/tmpab66ba_o.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded += message[i];\n            encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpazes_yah: /tmp/tmpazes_yah.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmppkeqj3q_: /tmp/tmppkeqj3q_.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmp6_ngih7n: /tmp/tmp6_ngih7n.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message += message[i];\n            encoded_message += message[i + 2];\n        }\n        else {\n            encoded_message += message[i];\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmp8gbyzns0: /tmp/tmp8gbyzns0.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            encoded += message[i];\n            encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmphlp58z6t: /tmp/tmphlp58z6t.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            result += message[i];\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmp4c038_2p: /tmp/tmp4c038_2p.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result.push_back(message[i]);\n        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if (result[i] >= 'a' && result[i] <= 'z') {\n            result[i] += 32;\n        } else if (result[i] >= 'A' && result[i] <= 'Z') {\n            result[i] -= 32;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmp9fwl0wvs: /tmp/tmp9fwl0wvs.cpp:33: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result.push_back(message[i]);\n            result.push_back(message[i + 2]);\n        }\n        else {\n            result.push_back(message[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpys43fgdb: /tmp/tmpys43fgdb.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmppkeqj3q_: /tmp/tmppkeqj3q_.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += message[i] - 32;\n        }\n        else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += message[i];\n        }\n        else if (message[i] == ' ') {\n            encoded += ' ';\n        }\n        else if (message[i] == '.') {\n            encoded += '.';\n        }\n        else if (message[i] == ',') {\n            encoded += ',';\n        }\n        else if (message[i] == '!') {\n            encoded += '!';\n        }\n        else if (message[i] == '?') {\n            encoded += '?';\n        }\n        else if (message[i] == '-') {\n            encoded += '-';\n        }\n        else if (message[i] == '_') {\n            encoded += '_';\n        }\n        else if (message[i] == '\\'') {\n            encoded += '\\'';\n        }\n        else if (message[i] == '\\\"') {\n            encoded += '\\\"';\n        }\n        else if (message[i] == '(') {\n            encoded += '(';\n        }\n        else if (message[i] == ')') {\n            encoded += ')';\n        }\n        else if (message[i] == '=') {\n            encoded += '=';\n        }\n        else if (message[i] == '+') {\n            encoded += '+';\n        }\n        else if (message[i] == '*') {\n            encoded += '*';\n        }\n        else if (message[i] == ':') {\n            encoded += ':';\n        }\n        else if (message[i] == ';') {\n            encoded += ';';\n        }\n        else if (message[i] == '%')\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpau67l9p_.cpp: In function \u2018std::string encode(std::string)\u2019:\n/tmp/tmpau67l9p_.cpp:71:1: error: expected primary-expression before \u2018}\u2019 token\n   71 | }\n      | ^\n/tmp/tmpau67l9p_.cpp:72:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   72 | int main() {\n      |            ^\n/tmp/tmpau67l9p_.cpp:79:1: error: expected \u2018}\u2019 at end of input\n   79 | }\n      | ^\n/tmp/tmpau67l9p_.cpp:13:41: note: to match this \u2018{\u2019\n   13 | std::string encode(std::string message) {\n      |                                         ^\n/tmp/tmpau67l9p_.cpp:79:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   79 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result.push_back(message[i] + 'a' - 'A');\n        } else {\n            result.push_back(message[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpar91v8vr: /tmp/tmpar91v8vr.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + (message[i] - 'a' + 'A') * 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + (message[i] - 'A' + 'a') * 2;\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpm6qkhw9f: /tmp/tmpm6qkhw9f.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2 * (message[i] - 'a');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 2 * (message[i] - 'A');\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpktq_ubsf: /tmp/tmpktq_ubsf.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (char c : message) {\n        if (isalpha(c)) {\n            if (isupper(c)) {\n                result += tolower(c);\n            } else {\n                result += toupper(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmp_yv5nxy8: /tmp/tmp_yv5nxy8.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += message[i] + 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += message[i] - 2;\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpjzupvth_: /tmp/tmpjzupvth_.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            encoded += message[i];\n            encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmphesqb8ee: /tmp/tmphesqb8ee.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpfbzzatwd: /tmp/tmpfbzzatwd.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result.push_back(message[i]);\n        } else if (message[i] == ' ') {\n            result.push_back(' ');\n        } else if (message[i] == '.') {\n            result.push_back('.');\n        } else if (message[i] == ',') {\n            result.push_back(',');\n        } else if (message[i] == '!') {\n            result.push_back('!');\n        } else if (message[i] == '?') {\n            result.push_back('?');\n        } else if (message[i] == '-') {\n            result.push_back('-');\n        } else if (message[i] == '_') {\n            result.push_back('_');\n        } else if (message[i] == '\\'') {\n            result.push_back('\\'');\n        } else if (message[i] == '(') {\n            result.push_back('(');\n        } else if (message[i] == ')') {\n            result.push_back(')');\n        } else if (message[i] == ':') {\n            result.push_back(':');\n        } else if (message[i] == ';') {\n            result.push_back(';');\n        } else if (message[i] == '=') {\n            result.push_back('=');\n        } else if (message[i] == '+') {\n            result.push_back('+');\n        } else if (message[i] == '%') {\n            result.push_back('%');\n        } else if (message[i] == '$') {\n            result.push_back('$');\n        } else if (message[\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp2iyrja_f.cpp: In function \u2018std::string encode(std::string)\u2019:\n/tmp/tmp2iyrja_f.cpp:53:1: error: expected primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmp2iyrja_f.cpp:52:28: error: expected \u2018]\u2019 before \u2018}\u2019 token\n   52 |         } else if (message[\n      |                            ^\n      |                            ]\n   53 | }\n      | ~                           \n/tmp/tmp2iyrja_f.cpp:52:28: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   52 |         } else if (message[\n      |                   ~        ^\n      |                            )\n   53 | }\n      | ~                           \n/tmp/tmp2iyrja_f.cpp:53:1: error: expected primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmp2iyrja_f.cpp:54:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   54 | int main() {\n      |            ^\n/tmp/tmp2iyrja_f.cpp:61:1: error: expected \u2018}\u2019 at end of input\n   61 | }\n      | ^\n/tmp/tmp2iyrja_f.cpp:13:41: note: to match this \u2018{\u2019\n   13 | std::string encode(std::string message) {\n      |                                         ^\n/tmp/tmp2iyrja_f.cpp:61:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   61 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += c;\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpnq93ql3u: /tmp/tmpnq93ql3u.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            result += message[i] + message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmp0or7du_a: /tmp/tmp0or7du_a.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 'a' - 'A';\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpl9vosx2t: /tmp/tmpl9vosx2t.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmppkeqj3q_: /tmp/tmppkeqj3q_.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded += message[i];\n            encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpnkpxvaj5: /tmp/tmpnkpxvaj5.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for(int i = 0; i < message.size(); i++) {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i + 2];\n        }\n        else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpwm3rcvoz: /tmp/tmpwm3rcvoz.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmppkeqj3q_: /tmp/tmppkeqj3q_.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c;\n            result += c;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpgjlv2bmi: /tmp/tmpgjlv2bmi.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c - 'a' + 'A');\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpg02b1pl7: /tmp/tmpg02b1pl7.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result.push_back(message[i]);\n        } else if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result.push_back(message[i] + 2);\n        } else {\n            result.push_back(message[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpkma7y121: /tmp/tmpkma7y121.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message += message[i];\n            encoded_message += message[i + 2];\n        } else {\n            encoded_message += message[i];\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpiebjehmr: /tmp/tmpiebjehmr.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); ++i) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpxljjsyrt: /tmp/tmpxljjsyrt.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c;\n            result += c;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpgjlv2bmi: /tmp/tmpgjlv2bmi.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i + 2]);\n        }\n        else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpxbtqt7zj: /tmp/tmpxbtqt7zj.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            encoded += message[i];\n            encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpg0druvob: /tmp/tmpg0druvob.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (isupper(c)) {\n                result += c;\n            } else {\n                result += (char)(c + 'A' - 'a');\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmp0ortfvoh: /tmp/tmp0ortfvoh.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += c;\n            } else {\n                result += std::toupper(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpsobc_fva: /tmp/tmpsobc_fva.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message += message[i];\n            encoded_message += message[i + 2];\n        } else {\n            encoded_message += message[i];\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpusxhbsju: /tmp/tmpusxhbsju.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2 * (i + 1);\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293067,
      "stdout": "",
      "stderr": "tmpd812mvzm: /tmp/tmpd812mvzm.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmp4bemu_4i: /tmp/tmp4bemu_4i.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i+2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpsbx_3438: /tmp/tmpsbx_3438.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n        }\n        else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i];\n        }\n        else if (message[i] == ' ') {\n            result += ' ';\n        }\n        else if (message[i] == '.') {\n            result += '.';\n        }\n        else if (message[i] == ',') {\n            result += ',';\n        }\n        else if (message[i] == '!') {\n            result += '!';\n        }\n        else if (message[i] == '?') {\n            result += '?';\n        }\n        else if (message[i] == '-') {\n            result += '-';\n        }\n        else if (message[i] == '_') {\n            result += '_';\n        }\n        else if (message[i] == ':') {\n            result += ':';\n        }\n        else if (message[i] == ';') {\n            result += ';';\n        }\n        else if (message[i] == '(') {\n            result += '(';\n        }\n        else if (message[i] == ')') {\n            result += ')';\n        }\n        else if (message[i] == '{') {\n            result += '{';\n        }\n        else if (message[i] == '}') {\n            result += '}';\n        }\n        else if (message[i] == '[') {\n            result += '[';\n        }\n        else if (message[i] == ']') {\n            result += ']';\n        }\n        else if (message[i] == '<') {\n            result += '<';\n        }\n        else if (message[i] == '>') {\n            result += '>';\n        }\n        else if (message[i] ==\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "/tmp/tmppihn2z_g.cpp: In function \u2018std::string encode(std::string)\u2019:\n/tmp/tmppihn2z_g.cpp:74:1: error: expected primary-expression before \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmppihn2z_g.cpp:73:31: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   73 |         else if (message[i] ==\n      |                 ~             ^\n      |                               )\n   74 | }\n      | ~                              \n/tmp/tmppihn2z_g.cpp:74:1: error: expected primary-expression before \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmppihn2z_g.cpp:75:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   75 | int main() {\n      |            ^\n/tmp/tmppihn2z_g.cpp:82:1: error: expected \u2018}\u2019 at end of input\n   82 | }\n      | ^\n/tmp/tmppihn2z_g.cpp:13:41: note: to match this \u2018{\u2019\n   13 | std::string encode(std::string message) {\n      |                                         ^\n/tmp/tmppihn2z_g.cpp:82:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   82 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (char c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result.push_back(toupper(c));\n            } else {\n                result.push_back(tolower(c));\n            }\n        } else {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmphlvn6yrp: /tmp/tmphlvn6yrp.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpylg8g4q9: /tmp/tmpylg8g4q9.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for(int i = 0; i < message.size(); i++) {\n        if(message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i] - 32);\n        } else if(message[i] >= 'A' && message[i] <= 'Z') {\n            result.push_back(message[i]);\n        } else if(message[i] == 'e' || message[i] == 'E') {\n            result.push_back('E');\n            result.push_back('E');\n        } else if(message[i] == 'i' || message[i] == 'I') {\n            result.push_back('I');\n            result.push_back('I');\n        } else if(message[i] == 'o' || message[i] == 'O') {\n            result.push_back('O');\n            result.push_back('O');\n        } else if(message[i] == 'u' || message[i] == 'U') {\n            result.push_back('U');\n            result.push_back('U');\n        } else if(message[i] == 'y' || message[i] == 'Y') {\n            result.push_back('Y');\n            result.push_back('Y');\n        } else {\n            result.push_back(message[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpkclg07e7: /tmp/tmpkclg07e7.cpp:43: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += c;\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpnq93ql3u: /tmp/tmpnq93ql3u.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2 * (message[i] - 'a');\n        } else if(message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 2 * (message[i] - 'A');\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpo4vbntl4: /tmp/tmpo4vbntl4.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            encoded += (char)(((c - 'a') + 2) % 26 + 'a');\n        } else {\n            encoded += c;\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpkohjoei0: /tmp/tmpkohjoei0.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else if (message[i] >= '0' && message[i] <= '9') {\n            result += message[i];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpey7gtubm: /tmp/tmpey7gtubm.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            result.push_back(tolower(c));\n            result.push_back(toupper(c));\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result.push_back(c);\n            result.push_back(c);\n            result.push_back(c);\n        } else {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmp2z3v1swf: /tmp/tmp2z3v1swf.cpp:31: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += (c + 2) % 26 + 'a';\n        } else if (c >= 'A' && c <= 'Z') {\n            result += (c + 2) % 26 + 'A';\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpf2zh4fr7: /tmp/tmpf2zh4fr7.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmppkeqj3q_: /tmp/tmppkeqj3q_.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpgdoxmkjj: /tmp/tmpgdoxmkjj.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += c;\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpnq93ql3u: /tmp/tmpnq93ql3u.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + (message[i] - 'a' + 2) % 26 + 'a';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + (message[i] - 'A' + 2) % 26 + 'A';\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpf6tm40_o: /tmp/tmpf6tm40_o.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result.push_back(message[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpabackpo6: /tmp/tmpabackpo6.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            result += ((c >= 'a' && c <= 'z') ? (c - 'a' + 'A') : c);\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += (c + (c == 'a' ? 'A' : 'E'));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpaeibdspr: /tmp/tmpaeibdspr.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i];\n        } else if (message[i] == ' ') {\n            result += ' ';\n        } else if (message[i] == '.') {\n            result += '.';\n        } else if (message[i] == ',') {\n            result += ',';\n        } else if (message[i] == '!') {\n            result += '!';\n        } else if (message[i] == '?') {\n            result += '?';\n        } else if (message[i] == '-') {\n            result += '-';\n        } else if (message[i] == '_') {\n            result += '_';\n        } else if (message[i] == '(') {\n            result += '(';\n        } else if (message[i] == ')') {\n            result += ')';\n        } else if (message[i] == '=') {\n            result += '=';\n        } else if (message[i] == '+') {\n            result += '+';\n        } else if (message[i] == '*') {\n            result += '*';\n        } else if (message[i] == ':') {\n            result += ':';\n        } else if (message[i] == ';') {\n            result += ';';\n        } else if (message[i] == '&') {\n            result += '&';\n        } else if (message[i] == '@') {\n            result += '@';\n        } else if (message[in}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "/tmp/tmpdg9rcwr0.cpp:52:34: warning: missing terminating ' character\n   52 |         } else if (message[i] == '#\n      |                                  ^\n/tmp/tmpdg9rcwr0.cpp:52:34: error: missing terminating ' character\n   52 |         } else if (message[i] == '#\n      |                                  ^~
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (char c : message) {\n        if (isalpha(c)) {\n            if (isupper(c)) {\n                result += tolower(c);\n            } else {\n                result += toupper(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmp_yv5nxy8: /tmp/tmp_yv5nxy8.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded;\n    for (int i = 0; i < message.size(); i++) {\n        encoded += (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') ? message[i] + 2 : message[i];\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpykirg2l0: /tmp/tmpykirg2l0.cpp:22: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmp6_ngih7n: /tmp/tmp6_ngih7n.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2 * (message[i] - 'a');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 2 * (message[i] - 'A');\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpnsqbm93k: /tmp/tmpnsqbm93k.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpuivhpykp: /tmp/tmpuivhpykp.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message += message[i] - 'A' + 'a';\n        } else if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message += message[i] + message[i + 2];\n        } else {\n            encoded_message += message[i];\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpc_5egjua: /tmp/tmpc_5egjua.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message.push_back(message[i + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpqqgeekbz: /tmp/tmpqqgeekbz.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result.push_back(toupper(c));\n            } else {\n                result.push_back(tolower(c));\n            }\n        } else {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpcuh45byv: /tmp/tmpcuh45byv.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n        } else if(message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i];\n        } else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i] + 2;\n        } else if(message[i] == 'y') {\n            result += message[i] + 2;\n        } else if(message[i] == ' ') {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpcvcs7t_0: /tmp/tmpcvcs7t_0.cpp:32: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += c;\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpnq93ql3u: /tmp/tmpnq93ql3u.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmp6_ngih7n: /tmp/tmp6_ngih7n.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (isupper(c)) {\n                result += c;\n            } else {\n                result += (char)((c - 'a' + 'A') + 2);\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpemanwskx: /tmp/tmpemanwskx.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i] >= 'a' && message[i] <= 'z') {\n            encoded += message[i] + (message[i] - 'a' + 2) % 26 + 'a';\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += message[i] + (message[i] - 'A' + 2) % 26 + 'A';\n        }\n        else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmpjmi4qn_9: /tmp/tmpjmi4qn_9.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c;\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c;\n        } else if (c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c;\n        } else {\n            result += c;\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293069,
      "stdout": "",
      "stderr": "tmpv5ejsve0: /tmp/tmpv5ejsve0.cpp:31: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + (message[i] - 'a' + 'A') * 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + (message[i] - 'A' + 'a') * 2;\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293069,
      "stdout": "",
      "stderr": "tmp9nw5gg8t: /tmp/tmp9nw5gg8t.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result.push_back('2');\n            result.push_back(c);\n        } else {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293069,
      "stdout": "",
      "stderr": "tmpkawbxpsb: /tmp/tmpkawbxpsb.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 2;\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293069,
      "stdout": "",
      "stderr": "tmp502fhm3u: /tmp/tmp502fhm3u.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293069,
      "stdout": "",
      "stderr": "tmp1nxsk7om: /tmp/tmp1nxsk7om.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            result += message[i];\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmp4c038_2p: /tmp/tmp4c038_2p.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmp6dj3m7ll: /tmp/tmp6dj3m7ll.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for(int i = 0; i < message.size(); i++) {\n        if(message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + (message[i] - 'a' + 2) % 26 + 'a';\n        } else if(message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + (message[i] - 'A' + 2) % 26 + 'A';\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmplwcvk5cm: /tmp/tmplwcvk5cm.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += message[i];\n        } else if (message[i] == ' ') {\n            encoded += ' ';\n        } else if (message[i] == '.') {\n            encoded += '.';\n        } else if (message[i] == ',') {\n            encoded += ',';\n        } else if (message[i] == '!') {\n            encoded += '!';\n        } else if (message[i] == '?') {\n            encoded += '?';\n        } else if (message[i] == '-') {\n            encoded += '-';\n        } else if (message[i] == '_') {\n            encoded += '_';\n        } else if (message[i] == '(') {\n            encoded += '(';\n        } else if (message[i] == ')') {\n            encoded += ')';\n        } else if (message[i] == ':') {\n            encoded += ':';\n        } else if (message[i] == ';') {\n            encoded += ';';\n        } else if (message[i] == '=') {\n            encoded += '=';\n        } else if (message[i] == '+') {\n            encoded += '+';\n        } else if (message[i] == '*') {\n            encoded += '*';\n        } else if (message[i] == '%') {\n            encoded += '%';\n        } else if (message[i] == '$') {\n            encoded += '$';\n        } else if (message[in}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293069,
      "stdout": "",
      "stderr": "/tmp/tmpmovfz6uj.cpp:52:34: warning: missing terminating ' character\n   52 |         } else if (message[i] == '#\n      |                                  ^\n/tmp/tmpmovfz6uj.cpp:52:34: error: missing terminating ' character\n   52 |         } else if (message[i] == '#\n      |                                  ^~n/tmp/tmpmovfz6uj.cpp: In function \u2018std::string encode(std::string)\u2019:\n/tmp/tmpmovfz6uj.cpp:53:1: error: expected primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpmovfz6uj.cpp:52:33: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   52 |         } else if (message[i] == '#\n      |                   ~             ^\n      |                                 )\n   53 | }\n      | ~                                \n/tmp/tmpmovfz6uj.cpp:53:1: error: expected primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpmovfz6uj.cpp:54:1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c;\n            result += c;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpgjlv2bmi: /tmp/tmpgjlv2bmi.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (char c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += c;\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmp9e0hat5b: /tmp/tmp9e0hat5b.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += c;\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpnq93ql3u: /tmp/tmpnq93ql3u.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += c;\n            } else {\n                result += toupper(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmph52uex5n: /tmp/tmph52uex5n.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpqnkgk80l: /tmp/tmpqnkgk80l.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 2;\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmp6lrs_92v: /tmp/tmp6lrs_92v.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for(auto c : message) {\n        if(isalpha(c)) {\n            if(isupper(c)) {\n                result += tolower(c);\n            } else {\n                result += toupper(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmpywwtj6i9: /tmp/tmpywwtj6i9.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2 * (message[i] - 'a');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 2 * (message[i] - 'A');\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpktq_ubsf: /tmp/tmpktq_ubsf.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpqnkgk80l: /tmp/tmpqnkgk80l.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result.push_back(c + 2);\n        } else if (c >= 'A' && c <= 'Z') {\n            result.push_back(c - 2);\n        } else if (c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result.push_back(c + 2);\n        } else {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmp_x6tymtw: /tmp/tmp_x6tymtw.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 2;\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmp34_5hjcf: /tmp/tmp34_5hjcf.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += message[i] + 2 * (message[i] - 'a');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += message[i] + 2 * (message[i] - 'A');\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmp77jgnw4z: /tmp/tmp77jgnw4z.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            result.push_back(c - 32);\n        } else if (c >= 'A' && c <= 'Z') {\n            result.push_back(c);\n        } else if (c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result.push_back(c);\n            result.push_back(c);\n        } else {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmpyh2g42gz: /tmp/tmpyh2g42gz.cpp:32: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message.push_back(message[i] - 32);\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message.push_back(message[i]);\n        }\n        else if(message[i] == ' ') {\n            encoded_message.push_back(message[i]);\n        }\n        else if(message[i] == '.') {\n            encoded_message.push_back(message[i]);\n        }\n        else if(message[i] == ',') {\n            encoded_message.push_back(message[i]);\n        }\n        else if(message[i] == '?') {\n            encoded_message.push_back(message[i]);\n        }\n        else if(message[i] == '!') {\n            encoded_message.push_back(message[i]);\n        }\n        else if(message[i] == '-') {\n            encoded_message.push_back(message[i]);\n        }\n        else if(message[i] == '_') {\n            encoded_message.push_back(message[i]);\n        }\n        else if(message[i] == '(') {\n            encoded_message.push_back(message[i]);\n        }\n        else if(message[i] == ')') {\n            encoded_message.push_back(message[i]);\n        }\n        else if(message[i] == '=') {\n            encoded_message.push_back(message[i]);\n        }\n        else if(message[i] == '+') {\n            encoded_message.push_back(message[i]);\n        }\n        else if(message[i] == '@') {\n            encoded_message.push_back(message[i]);\n        }\n        else if(message[i] == '#                                                                                                                                                                                    \n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293069,
      "stdout": "",
      "stderr": "/tmp/tmpicetmhjr.cpp:58:31: warning: missing terminating ' character\n   58 |         else if(message[i] == '#\n      |                               ^\n/tmp/tmpicetmhjr.cpp:58:31: error: missing terminating ' character\n   58 |         else if(message[i] == '#\n      |                               ^~                                                                                                                                                                                    \n/tmp/tmpicetmhjr.cpp: In function \u2018std::string encode(std::string)\u2019:\n/tmp/tmpicetmhjr.cpp:59:1: error: expected primary-expression before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmpicetmhjr.cpp:58:30: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   58 |         else if(message[i] == '#\n      |                ~             ^\n      |                              )\n   59 | }\n      | ~                             \n/tmp/tmpicetmhjr.cpp:59:1: error: expected primary-expression before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmpicetmhjr.cpp:60:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   60 | int main() {\n      |            ^\n/tmp/tmpicetmhjr.cpp:67:1: error: expected \u2018}\u2019 at end of input\n   67 | }\n      | ^\n/tmp/tmpicetmhjr.cpp:13:41: note: to match this \u2018{\u2019\n   13 | std::string encode(std::string message) {\n      |                                         ^\n/tmp/tmpicetmhjr.cpp:67:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   67 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i] + message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmp0vsdqvzp: /tmp/tmp0vsdqvzp.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2 * (message[i] - 'a');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 2 * (message[i] - 'A');\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpee3ddzyx: /tmp/tmpee3ddzyx.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result.push_back(toupper(c));\n            } else {\n                result.push_back(tolower(c));\n            }\n        } else {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpcuh45byv: /tmp/tmpcuh45byv.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 2;\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293069,
      "stdout": "",
      "stderr": "tmp502fhm3u: /tmp/tmp502fhm3u.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 2;\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmp6lrs_92v: /tmp/tmp6lrs_92v.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpfbzzatwd: /tmp/tmpfbzzatwd.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + message[i + 2];\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmp5185akxr: /tmp/tmp5185akxr.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2 * (message[i] - 'a');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 2 * (message[i] - 'A');\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpktq_ubsf: /tmp/tmpktq_ubsf.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += c;\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpnq93ql3u: /tmp/tmpnq93ql3u.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + c;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmp2f6c32v5: /tmp/tmp2f6c32v5.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmp6_ngih7n: /tmp/tmp6_ngih7n.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result.push_back(c + 2);\n        } else if (c >= 'A' && c <= 'Z') {\n            result.push_back(c - 2);\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result.push_back(c);\n        } else {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmphvnpam0j: /tmp/tmphvnpam0j.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for(int i = 0; i < message.size(); i++) {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i + 2]);\n        }\n        else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmp2p_fvlz_: /tmp/tmp2p_fvlz_.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += c;\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpnq93ql3u: /tmp/tmpnq93ql3u.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 2;\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmp6lrs_92v: /tmp/tmp6lrs_92v.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            encoded += message[i];\n            encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "tmpg0druvob: /tmp/tmpg0druvob.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmppkeqj3q_: /tmp/tmppkeqj3q_.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n            encoded += message[i];\n            encoded += message[i+2];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmpm8kjzsmk: /tmp/tmpm8kjzsmk.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpfy64u09z: /tmp/tmpfy64u09z.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            result += message[i];\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmpiobk_xpi: /tmp/tmpiobk_xpi.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + c;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmp2f6c32v5: /tmp/tmp2f6c32v5.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result.push_back(message[i]);\n            result.push_back(message[i + 2]);\n        } else {\n            result.push_back(message[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmpfcklad9_: /tmp/tmpfcklad9_.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmppkeqj3q_: /tmp/tmppkeqj3q_.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for(int i = 0; i < message.size(); i++) {\n        if(message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i] - 'a' + 'A');\n        } else if(message[i] >= 'A' && message[i] <= 'Z') {\n            result.push_back(message[i]);\n        } else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result.push_back(message[i] + 2);\n        } else {\n            result.push_back(message[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmpjd8nkv1z: /tmp/tmpjd8nkv1z.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result.push_back(message[i]);\n        } else {\n            result.push_back(message[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmpzmnzyo9z: /tmp/tmpzmnzyo9z.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i] + message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmp4atn2j6f: /tmp/tmp4atn2j6f.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result.push_back(c + 2);\n        } else if (c >= 'A' && c <= 'Z') {\n            result.push_back(c - 2);\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result.push_back(c);\n        } else {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmphvnpam0j: /tmp/tmphvnpam0j.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (char c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += c;\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmp9e0hat5b: /tmp/tmp9e0hat5b.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result.push_back(message[i + 2]);\n        } else {\n            result.push_back(message[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmp1yba09xz: /tmp/tmp1yba09xz.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded += message[i];\n            encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpazes_yah: /tmp/tmpazes_yah.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2 * (message[i] - 'a');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 2 * (message[i] - 'A');\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmprv6jz4ru: /tmp/tmprv6jz4ru.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded += message[i];\n            encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpazes_yah: /tmp/tmpazes_yah.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += c;\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmpnq93ql3u: /tmp/tmpnq93ql3u.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result.push_back(c - 32);\n        } else if (c >= 'A' && c <= 'Z') {\n            result.push_back(c);\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result.push_back(c + 2);\n        } else {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmphyhhimzr: /tmp/tmphyhhimzr.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 2;\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmppfxv_uxw: /tmp/tmppfxv_uxw.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            result += ((c >= 'a' && c <= 'z') ? (c - 'a' + 'A') : c);\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c;\n            result += c;\n        }\n        else if (c == 'y') {\n            result += c;\n            result += 'Y';\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmp0nix6apt: /tmp/tmp0nix6apt.cpp:32: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for(int i = 0; i < message.size(); i++) {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message += message[i];\n            encoded_message += message[i+2];\n        }\n        else {\n            encoded_message += message[i];\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmp4l4l7ptl: /tmp/tmp4l4l7ptl.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293069,
      "stdout": "",
      "stderr": "tmp1nxsk7om: /tmp/tmp1nxsk7om.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += (c + 2);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmp8z1ph7f0: /tmp/tmp8z1ph7f0.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "tmppkeqj3q_: /tmp/tmppkeqj3q_.cpp:30: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293068,
      "stdout": "",
      "stderr": "tmp4bemu_4i: /tmp/tmp4bemu_4i.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            encoded_message += (char)((c + 2) % 26 + 'A');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encoded_message += (char)((c + 2) % 26 + 'A');\n        } else {\n            encoded_message += c;\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmp9oy2_ybs: /tmp/tmp9oy2_ybs.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message.push_back(message[i] + message[i + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmpnodp0dvr: /tmp/tmpnodp0dvr.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c;\n            result += c;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "tmpgjlv2bmi: /tmp/tmpgjlv2bmi.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i];\n        } else if (message[i] == 'e' || message[i] == 'E') {\n            result += message[i + 2];\n        } else if (message[i] == 'i' || message[i] == 'I') {\n            result += message[i + 2];\n        } else if (message[i] == 'o' || message[i] == 'O') {\n            result += message[i + 2];\n        } else if (message[i] == 'u' || message[i] == 'U') {\n            result += message[i + 2];\n        } else if (message[i] == 'y' || message[i] == 'Y') {\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmplf5s9bzb: /tmp/tmplf5s9bzb.cpp:38: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for (auto c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + c;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293070,
      "stdout": "",
      "stderr": "tmp2f6c32v5: /tmp/tmp2f6c32v5.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            encoded_message += message[i];\n            encoded_message += message[i + 2];\n        } else {\n            encoded_message += message[i];\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmphjtlbfrk: /tmp/tmphjtlbfrk.cpp:27: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string result;\n    for(int i = 0; i < message.size(); i++) {\n        if(message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2;\n        } else if(message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 2;\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmpz1lbbkjh: /tmp/tmpz1lbbkjh.cpp:28: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message.push_back(message[i + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293071,
      "stdout": "",
      "stderr": "tmprnifsm8g: /tmp/tmprnifsm8g.cpp:26: int main(): Assertion `candidate((\"TEST\")) == (\"tgst\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}