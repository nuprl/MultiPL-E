name: HumanEval_68_pluck
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
  \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
  \ one of the nodes and return it.\n// The plucked node should be the node with the\
  \ smallest even value.\n// If multiple nodes with the same smallest even value are\
  \ found return the node that has smallest index.\n// The plucked node should be\
  \ returned in a vector, [ smalest_value, its index ],\n// If there are no even values\
  \ or the given vector is empty, return [].\n// Example 1:\n// >>> pluck([4,2,3])\n\
  // [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 2:\n// >>> pluck([1,2,3])\n// [2, 1]\n// Explanation: 2 has\
  \ the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>>\
  \ pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n\
  // Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will\
  \ choose the first zero, which has the smallest index.\n// Constraints:\n// * 1\
  \ <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long>\
  \ arr) {\n"
tests: "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
  \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n \
  \   assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8})))\
  \ == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
  \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n \
  \   assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
  \ == (std::vector<long>()));\n}\n"
completions: ["    std::vector<long> result;\n    if (arr.empty()) return result;\n\
    \    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n \
    \           result.push_back(i);\n            return result;\n        }\n    }\n\
    \    return result;", "    std::vector<long> ans;\n    if (arr.empty()) return\
    \ ans;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0] % 2;\n \
    \   long index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == min) {\n            index = i;\n        } else {\n            break;\n\
    \        }\n    }\n    ans.push_back(arr[index]);\n    ans.push_back(index);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n\
    \    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            ans.push_back(arr[i]);\n    \
    \        return ans;\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            result.push_back(arr[i]);\n            break;\n        }\n    }\n\
    \    return result;", "    std::vector<long> ans;\n    if (arr.empty()) return\
    \ ans;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0] % 2;\n \
    \   long index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == min) {\n            index = i;\n            break;\n        }\n    }\n\
    \    ans.push_back(arr[index]);\n    return ans;", "    std::vector<long> result;\n\
    \    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            result.push_back(arr[i]);\n            result.push_back(i);\n   \
    \         return result;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min = arr[0] % 2;\n    long min_index = 0;\n    for (int i = 1; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == min) {\n            min_index\
    \ = i;\n        } else {\n            break;\n        }\n    }\n    ans.push_back(min);\n\
    \    ans.push_back(min_index);\n    return ans;", "    std::vector<long> result;\n\
    \    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            result.push_back(arr[i]);\n            result.push_back(i);\n   \
    \         break;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min = arr[0] % 2;\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == min) {\n            index = i;\n        }\n\
    \        else {\n            ans.push_back(arr[index]);\n            min = arr[i]\
    \ % 2;\n            index = i;\n        }\n    }\n    ans.push_back(arr[index]);\n\
    \    return ans;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            break;\n        }\n    }\n    if (result.empty()) return result;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            result.push_back(arr[i]);\n            break;\n        }\n    }\n\
    \    return result;", "    std::vector<long> res;\n    if (arr.empty()) return\
    \ res;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0] % 2;\n \
    \   long index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == min) {\n            index = i;\n        } else {\n            break;\n\
    \        }\n    }\n    res.push_back(arr[index]);\n    res.push_back(index);\n\
    \    return res;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    long min_even = arr[0]\
    \ % 2;\n    long min_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == min_even) {\n            min_index = i;\n        }\
    \ else {\n            break;\n        }\n    }\n    result.push_back(arr[min_index]);\n\
    \    return result;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            result.push_back(i);\n            return result;\n        }\n   \
    \ }\n    return result;", "    std::vector<long> res;\n    if (arr.empty()) return\
    \ res;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0) {\n            if (arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;", "    std::vector<long> result;\n\
    \    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            result.push_back(arr[i]);\n            return result;\n        }\n\
    \    }\n    return result;", "    std::vector<long> ans;\n    if (arr.empty())\
    \ return ans;\n    std::sort(arr.begin(), arr.end());\n    long min_even = arr[0]\
    \ % 2;\n    long min_index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == min_even) {\n            min_index = i;\n        }\n\
    \    }\n    ans.push_back(arr[min_index]);\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            ans.push_back(arr[i]);\n            return ans;\n        }\n    }\n\
    \    return ans;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n\
    \    std::sort(arr.begin(), arr.end());\n    long min = arr[0];\n    long index\
    \ = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] == min)\
    \ {\n            index = i;\n        } else {\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(index);\n\
    \    return res;", "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n\
    \    std::sort(arr.begin(), arr.end());\n    long min = arr[0];\n    long index\
    \ = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] == min)\
    \ {\n            index = i;\n        } else {\n            ans.push_back(min);\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    ans.push_back(min);\n\
    \    return ans;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    long smallest_value = arr[0];\n\
    \    long smallest_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n  \
    \      if (arr[i] == smallest_value) {\n            smallest_index = i;\n    \
    \    } else {\n            break;\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    std::vector<long>\
    \ ans;\n    std::vector<long> even_nodes;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] % 2 == 0) {\n            even_nodes.push_back(arr[i]);\n\
    \        }\n    }\n    if(even_nodes.size() == 0) {\n        return ans;\n   \
    \ }\n    sort(even_nodes.begin(), even_nodes.end());\n    ans.push_back(even_nodes[0]);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n\
    \    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            ans.push_back(arr[i]);\n    \
    \        break;\n        }\n    }\n    if (ans.empty()) return ans;\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;", "    std::vector<long> ans;\n    if (arr.empty())\
    \ return ans;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            ans.push_back(arr[i]);\n\
    \            return ans;\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            ans.push_back(arr[i]);\n            return ans;\n        }\n    }\n\
    \    return ans;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n\
    \    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            res.push_back(arr[i]);\n    \
    \        res.push_back(i);\n            break;\n        }\n    }\n    return res;",
  "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min = arr[0] % 2;\n    long min_index = 0;\n    for (int\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == min) {\n          \
    \  min_index = i;\n        } else {\n            min = arr[i] % 2;\n         \
    \   min_index = i;\n        }\n    }\n    ans.push_back(min);\n    ans.push_back(min_index);\n\
    \    return ans;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            result.push_back(i);\n            return result;\n        }\n   \
    \ }\n    return result;", "    std::vector<long> res;\n    if (arr.empty()) return\
    \ res;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            res.push_back(arr[i]);\n\
    \            res.push_back(i);\n            return res;\n        }\n    }\n  \
    \  return res;", "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n\
    \    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            ans.push_back(arr[i]);\n    \
    \        return ans;\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min_even = arr[0] % 2 == 0 ? arr[0] : arr[1] % 2 == 0 ? arr[1] : arr[0];\n\
    \    long min_index = arr[0] % 2 == 0 ? 0 : arr[1] % 2 == 0 ? 1 : 0;\n    for\
    \ (int i = 2; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min_even) {\n            min_even = arr[i];\n            min_index = i;\n  \
    \      }\n    }\n    res.push_back(min_even);\n    res.push_back(min_index);\n\
    \    return res;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n\
    \    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            res.push_back(arr[i]);\n    \
    \        res.push_back(i);\n            return res;\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    std::vector<long> even_arr;\n    std::vector<long>\
    \ odd_arr;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 ==\
    \ 0) {\n            even_arr.push_back(arr[i]);\n        } else {\n          \
    \  odd_arr.push_back(arr[i]);\n        }\n    }\n    if(even_arr.size() == 0)\
    \ {\n        return res;\n    }\n    long min_even = *std::min_element(even_arr.begin(),\
    \ even_arr.end());\n    long min_odd = *std::min_element(odd_arr.begin(), odd_arr.end());\n\
    \    if(min_even < min_odd) {\n        res.push_back(min_even);\n        res.push_back(std::min(odd_arr.size(),\
    \ even_arr.size()));\n    } else {\n        res.push_back(min_odd);\n        res.push_back(std::min(odd_arr.size(),\
    \ even_arr.size()));\n    }\n    return res;", "    std::vector<long> result;\n\
    \    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    int index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            result.push_back(arr[i]);\n            index = i;\n\
    \            break;\n        }\n    }\n    if (result.empty()) return result;\n\
    \    for (int i = index + 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            result.push_back(arr[i]);\n            break;\n        }\n\
    \    }\n    return result;", "    std::vector<long> res;\n    if (arr.empty())\
    \ return res;\n    std::sort(arr.begin(), arr.end());\n    long min_value = arr[0];\n\
    \    long min_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] % 2 == 0) {\n            if (arr[i] < min_value) {\n            \
    \    min_value = arr[i];\n                min_index = i;\n            }\n    \
    \    }\n    }\n    res.push_back(min_value);\n    res.push_back(min_index);\n\
    \    return res;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0] % 2;\n\
    \    long index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == min) {\n            result.push_back(arr[i]);\n            index = i;\n\
    \        }\n    }\n    if (result.empty()) return result;\n    if (result.size()\
    \ == 1) return result;\n    std::sort(result.begin(), result.end());\n    return\
    \ result;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n  \
    \  std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            res.push_back(arr[i]);\n    \
    \        res.push_back(i);\n            return res;\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            res.push_back(arr[i]);\n            return res;\n \
    \       }\n    }\n    return res;", "    std::vector<long> ans;\n    if (arr.empty())\
    \ return ans;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            ans.push_back(arr[i]);\n\
    \            return ans;\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    long min_even = arr[0] % 2;\n  \
    \  long min_index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == min_even) {\n            min_index = i;\n        }\n    }\n \
    \   ans.push_back(min_index);\n    ans.push_back(min_even);\n    return ans;",
  "    std::vector<long> result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long smallest_value = arr[0];\n    long smallest_index = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (arr[i] < smallest_value) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n            }\n        }\n   \
    \ }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            result.push_back(i);\n            return result;\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    if (arr.empty())\
    \ return result;\n    std::sort(arr.begin(), arr.end());\n    long min_even =\
    \ arr[0] % 2;\n    long min_index = 0;\n    for (int i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == min_even) {\n            min_index = i;\n     \
    \   } else {\n            result.push_back(arr[min_index]);\n            min_even\
    \ = arr[i] % 2;\n            min_index = i;\n        }\n    }\n    result.push_back(arr[min_index]);\n\
    \    return result;", "    std::vector<long> res;\n    if (arr.empty()) return\
    \ res;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            index = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(index);\n    return\
    \ res;", "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min = arr[0] % 2;\n    long index = 0;\n    for (int i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == min) {\n            index\
    \ = i;\n        } else {\n            ans.push_back(arr[index]);\n           \
    \ min = arr[i] % 2;\n            index = i;\n        }\n    }\n    ans.push_back(arr[index]);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n\
    \    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            ans.push_back(arr[i]);\n    \
    \        return ans;\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ res;\n    std::vector<long>::iterator it;\n    long min = arr[0];\n    long\
    \ min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ % 2 == 0) {\n            if(arr[i] < min) {\n                min = arr[i];\n\
    \                min_index = i;\n            }\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(min_index);\n    return res;", "    std::vector<long> ans;\n\
    \    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          ans.push_back(arr[i]);\n            break;\n        }\n    }\n    return\
    \ ans;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min = arr[0] % 2;\n    long index = 0;\n    for (int i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == min) {\n            index\
    \ = i;\n        } else {\n            break;\n        }\n    }\n    res.push_back(arr[index]);\n\
    \    res.push_back(index);\n    return res;", "    std::vector<long> ans;\n  \
    \  if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n       \
    \     ans.push_back(arr[i]);\n            return ans;\n        }\n    }\n    return\
    \ ans;", "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            ans.push_back(arr[i]);\n            break;\n      \
    \  }\n    }\n    if (ans.empty()) return ans;\n    std::sort(ans.begin(), ans.end());\n\
    \    return ans;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n\
    \    std::sort(arr.begin(), arr.end());\n    long min = arr[0] % 2;\n    long\
    \ index = 0;\n    for (int i = 1; i < arr.size(); ++i) {\n        if (arr[i] %\
    \ 2 == min) {\n            index = i;\n        }\n    }\n    res.push_back(arr[index]);\n\
    \    res.push_back(index);\n    return res;", "    std::vector<long> ans;\n  \
    \  if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n    long\
    \ min_even = arr[0] % 2 == 0 ? arr[0] : arr[1];\n    long min_index = 0;\n   \
    \ for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_index = i;\n\
    \        }\n    }\n    ans.push_back(min_even);\n    ans.push_back(min_index);\n\
    \    return ans;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            result.push_back(i);\n            return result;\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    if (arr.empty())\
    \ return result;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            break;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            res.push_back(arr[i]);\n            return res;\n        }\n    }\n\
    \    return res;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n\
    \    std::sort(arr.begin(), arr.end());\n    long min_even = arr[0] % 2;\n   \
    \ long min_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == min_even) {\n            min_index = i;\n        } else {\n \
    \           break;\n        }\n    }\n    res.push_back(arr[min_index]);\n   \
    \ res.push_back(min_index);\n    return res;", "    std::vector<long> ans;\n \
    \   if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n   \
    \ for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n   \
    \         ans.push_back(arr[i]);\n            return ans;\n        }\n    }\n\
    \    return ans;", "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n\
    \    std::sort(arr.begin(), arr.end());\n    long min = arr[0];\n    long index\
    \ = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] == min)\
    \ {\n            index = i;\n        } else {\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    ans.push_back(min);\n    ans.push_back(index);\n\
    \    return ans;", "    std::vector<long> ans;\n    std::vector<long> even_nodes;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            even_nodes.push_back(arr[i]);\n        }\n    }\n    if (even_nodes.size()\
    \ == 0) {\n        return ans;\n    }\n    if (even_nodes.size() == 1) {\n   \
    \     ans.push_back(even_nodes[0]);\n        return ans;\n    }\n    long min_even\
    \ = even_nodes[0];\n    int min_index = 0;\n    for (int i = 1; i < even_nodes.size();\
    \ i++) {\n        if (even_nodes[i] < min_even) {\n            min_even = even_nodes[i];\n\
    \            min_index = i;\n        }\n    }\n    ans.push_back(min_even);\n\
    \    ans.push_back(min_index);\n    return ans;", "    std::vector<long> result;\n\
    \    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            result.push_back(arr[i]);\n            result.push_back(i);\n   \
    \         break;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min_value = arr[0] % 2;\n    long min_index = 0;\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == min_value) {\n           \
    \ min_index = i;\n        } else {\n            break;\n        }\n    }\n   \
    \ ans.push_back(min_value);\n    ans.push_back(min_index);\n    return ans;",
  "    std::vector<long> res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            res.push_back(arr[i]);\n            res.push_back(i);\n\
    \            return res;\n        }\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min_even = arr[0] % 2;\n    long min_index = 0;\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == min_even) {\n            min_index\
    \ = i;\n        } else {\n            break;\n        }\n    }\n    result.push_back(arr[min_index]);\n\
    \    result.push_back(min_index);\n    return result;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min = arr[0] % 2;\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == min) {\n            index = i;\n        }\n\
    \        else {\n            min = arr[i] % 2;\n            index = i;\n     \
    \   }\n    }\n    ans.push_back(arr[index]);\n    ans.push_back(index);\n    return\
    \ ans;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min = arr[0];\n    long index = 0;\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] == min) {\n            index = i;\n\
    \        } else {\n            if (arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;", "    std::vector<long> result;\n\
    \    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min_even = arr[0] % 2;\n    long min_index = 0;\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == min_even) {\n            min_index\
    \ = i;\n        } else {\n            break;\n        }\n    }\n    result.push_back(arr[min_index]);\n\
    \    result.push_back(min_index);\n    return result;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min = arr[0] % 2;\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == min) {\n            index = i;\n        }\
    \ else {\n            ans.push_back(arr[index]);\n            min = arr[i] % 2;\n\
    \            index = i;\n        }\n    }\n    ans.push_back(arr[index]);\n  \
    \  return ans;", "    std::vector<long> result;\n    if (arr.empty()) return result;\n\
    \    std::sort(arr.begin(), arr.end());\n    long min = arr[0] % 2;\n    long\
    \ index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == min) {\n            index = i;\n        } else {\n            break;\n\
    \        }\n    }\n    result.push_back(arr[index]);\n    result.push_back(index);\n\
    \    return result;", "    std::vector<long> ans;\n    if (arr.empty()) return\
    \ ans;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            ans.push_back(arr[i]);\n\
    \            return ans;\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min_even = arr[0] % 2;\n    long min_index = 0;\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == min_even) {\n            min_index\
    \ = i;\n        } else {\n            break;\n        }\n    }\n    result.push_back(arr[min_index]);\n\
    \    result.push_back(min_index);\n    return result;", "    std::vector<long>\
    \ result;\n    if (arr.empty()) {\n        return result;\n    }\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min_value = arr[0] % 2;\n    long min_index = 0;\n   \
    \ for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == min_value)\
    \ {\n            min_index = i;\n        }\n    }\n    result.push_back(min_value);\n\
    \    result.push_back(min_index);\n    return result;", "    std::vector<long>\
    \ result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    int i = 0;\n    while (i < arr.size()) {\n        if (arr[i] % 2 == 0) {\n\
    \            result.push_back(arr[i]);\n            i++;\n        } else {\n \
    \           i++;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    std::vector<long> evens;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0){\n            evens.push_back(arr[i]);\n        }\n\
    \    }\n    if(evens.size() == 0){\n        return ans;\n    }\n    long min_even\
    \ = *std::min_element(evens.begin(), evens.end());\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] == min_even){\n            ans.push_back(arr[i]);\n\
    \            arr[i] = -1;\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            result.push_back(arr[i]);\n            result.push_back(i);\n   \
    \         return result;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            result.push_back(arr[i]);\n            result.push_back(i);\n   \
    \         return result;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    std::vector<long> even_nodes;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            even_nodes.push_back(arr[i]);\n\
    \        }\n    }\n    if (even_nodes.size() == 0) {\n        return res;\n  \
    \  }\n    std::sort(even_nodes.begin(), even_nodes.end());\n    for (int i = 0;\
    \ i < even_nodes.size(); i++) {\n        if (i == 0) {\n            res.push_back(even_nodes[i]);\n\
    \            res.push_back(i);\n        } else {\n            if (even_nodes[i]\
    \ == even_nodes[i - 1]) {\n                res.push_back(even_nodes[i]);\n   \
    \             res.push_back(i);\n            } else {\n                res.push_back(even_nodes[i]);\n\
    \                res.push_back(i);\n                break;\n            }\n  \
    \      }\n    }\n    return res;", "    std::vector<long> res;\n    if (arr.empty())\
    \ return res;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0];\n\
    \    long index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ == min) {\n            index = i;\n        } else {\n            res.push_back(min);\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    res.push_back(min);\n\
    \    return res;", "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n\
    \    std::sort(arr.begin(), arr.end());\n    long min = arr[0] % 2;\n    long\
    \ index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == min) {\n            index = i;\n        }\n        else {\n           \
    \ min = arr[i] % 2;\n            index = i;\n        }\n    }\n    ans.push_back(arr[index]);\n\
    \    ans.push_back(index);\n    return ans;", "    std::vector<long> ans;\n  \
    \  if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n       \
    \     ans.push_back(arr[i]);\n            return ans;\n        }\n    }\n    return\
    \ ans;", "    std::vector<long> result;\n    if (arr.empty()) return result;\n\
    \    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n \
    \           result.push_back(i);\n            return result;\n        }\n    }\n\
    \    result.push_back(arr[0]);\n    result.push_back(0);\n    return result;",
  "    std::vector<long> res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min = arr[0];\n    long index = 0;\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] == min) {\n            index = i;\n\
    \        } else {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    res.push_back(min);\n    res.push_back(index);\n    return res;",
  "    std::vector<long> result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long smallest_value = arr[0];\n    long smallest_index = 0;\n\
    \    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] == smallest_value)\
    \ {\n            smallest_index = i;\n        } else {\n            break;\n \
    \       }\n    }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    std::vector<long> ans;\n    if (arr.empty()) return\
    \ ans;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0] % 2;\n \
    \   long index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == min) {\n            index = i;\n        } else {\n            break;\n\
    \        }\n    }\n    ans.push_back(arr[index]);\n    ans.push_back(index);\n\
    \    return ans;", "    std::vector<long> ans;\n    std::vector<long> even_nodes;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            even_nodes.push_back(arr[i]);\n        }\n    }\n    if (even_nodes.size()\
    \ == 0) {\n        return ans;\n    }\n    sort(even_nodes.begin(), even_nodes.end());\n\
    \    ans.push_back(even_nodes[0]);\n    return ans;", "    std::vector<long> ans;\n\
    \    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          ans.push_back(arr[i]);\n            break;\n        }\n    }\n    if\
    \ (ans.empty()) return ans;\n    std::sort(ans.begin(), ans.end());\n    return\
    \ ans;", "    std::vector<long> result;\n    if (arr.empty()) return result;\n\
    \    std::sort(arr.begin(), arr.end());\n    int index = 0;\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            result.push_back(i);\n            return result;\n        }\n   \
    \     if (arr[i] < arr[index]) {\n            index = i;\n        }\n    }\n \
    \   result.push_back(arr[index]);\n    result.push_back(index);\n    return result;",
  "    std::vector<long> result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            result.push_back(arr[i]);\n            result.push_back(i);\n\
    \            return result;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min = arr[0] % 2;\n    long min_index = 0;\n    for (int i = 1; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == min) {\n            min_index\
    \ = i;\n        } else {\n            break;\n        }\n    }\n    res.push_back(arr[min_index]);\n\
    \    return res;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n\
    \    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            res.push_back(arr[i]);\n    \
    \        res.push_back(i);\n            return res;\n        }\n    }\n    return\
    \ res;", "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (int i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < min) {\n       \
    \         min = arr[i];\n                index = i;\n            }\n        }\n\
    \    }\n    ans.push_back(min);\n    ans.push_back(index);\n    return ans;",
  "    std::vector<long> res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            res.push_back(arr[i]);\n            res.push_back(i);\n\
    \            return res;\n        }\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            res.push_back(arr[i]);\n            res.push_back(i);\n         \
    \   return res;\n        }\n    }\n    return res;", "    std::vector<long> ans;\n\
    \    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          ans.push_back(arr[i]);\n            return ans;\n        }\n    }\n\
    \    return ans;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n\
    \    std::sort(arr.begin(), arr.end());\n    long min_even = arr[0] % 2;\n   \
    \ long min_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == min_even) {\n            min_index = i;\n        } else {\n \
    \           break;\n        }\n    }\n    res.push_back(arr[min_index]);\n   \
    \ res.push_back(min_index);\n    return res;", "    std::vector<long> result;\n\
    \    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            result.push_back(arr[i]);\n            result.push_back(i);\n   \
    \         return result;\n        }\n    }\n    result.push_back(arr[0]);\n  \
    \  result.push_back(0);\n    return result;", "    std::vector<long> res;\n  \
    \  if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (int i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < min) {\n       \
    \         min = arr[i];\n                index = i;\n            }\n        }\n\
    \    }\n    res.push_back(min);\n    res.push_back(index);\n    return res;",
  "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min_even = arr[0] % 2;\n    long min_index = arr[0];\n\
    \    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == min_even)\
    \ {\n            min_index = arr[i];\n        } else {\n            min_even =\
    \ arr[i] % 2;\n            min_index = arr[i];\n        }\n    }\n    ans.push_back(min_index);\n\
    \    return ans;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    int index = 0;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n       \
    \     result.push_back(arr[i]);\n            result.push_back(i);\n          \
    \  break;\n        }\n        if (i == arr.size() - 1) {\n            result.push_back(arr[index]);\n\
    \            result.push_back(index);\n        }\n    }\n    return result;",
  "    std::vector<long> res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            res.push_back(arr[i]);\n            res.push_back(i);\n\
    \            break;\n        }\n    }\n    return res;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min_even = arr[0] % 2;\n    long min_index = 0;\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == min_even) {\n            min_index\
    \ = i;\n        }\n    }\n    ans.push_back(arr[min_index]);\n    return ans;",
  "    std::vector<long> res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            res.push_back(arr[i]);\n            res.push_back(i);\n\
    \            return res;\n        }\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            result.push_back(arr[i]);\n            return result;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    if (arr.empty())\
    \ return result;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0]\
    \ % 2 == 0 ? arr[0] : arr[1];\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    result.push_back(min);\n    result.push_back(index);\n\
    \    return result;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0] % 2;\n\
    \    long index = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == min) {\n            index = i;\n            break;\n        }\n\
    \    }\n    result.push_back(arr[index]);\n    result.push_back(index);\n    return\
    \ result;", "    std::vector<long> result;\n    if (arr.empty()) return result;\n\
    \    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n \
    \           return result;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min = arr[0];\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] == min) {\n            index = i;\n        } else\
    \ {\n            result.push_back(min);\n            min = arr[i];\n         \
    \   index = i;\n        }\n    }\n    result.push_back(min);\n    return result;",
  "    std::vector<long> result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            result.push_back(arr[i]);\n            break;\n   \
    \     }\n    }\n    if (result.empty()) return result;\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    if\
    \ (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n    long\
    \ min = arr[0] % 2;\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == min) {\n            index = i;\n        }\
    \ else {\n            break;\n        }\n    }\n    result.push_back(arr[index]);\n\
    \    result.push_back(index);\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            result.push_back(arr[i]);\n            return result;\n        }\n\
    \    }\n    return result;", "    std::vector<long> ans;\n    if (arr.empty())\
    \ return ans;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            ans.push_back(arr[i]);\n\
    \            return ans;\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            ans.push_back(arr[i]);\n            return ans;\n        }\n    }\n\
    \    return ans;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            result.push_back(i);\n            return result;\n        }\n   \
    \ }\n    return result;", "    std::vector<long> ans;\n    if (arr.empty()) return\
    \ ans;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0] % 2;\n \
    \   long index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == min) {\n            index = i;\n        } else {\n            break;\n\
    \        }\n    }\n    ans.push_back(arr[index]);\n    ans.push_back(index);\n\
    \    return ans;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n\
    \    std::sort(arr.begin(), arr.end());\n    long min = arr[0] % 2;\n    long\
    \ min_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == min) {\n            min_index = i;\n        } else {\n            break;\n\
    \        }\n    }\n    res.push_back(arr[min_index]);\n    return res;", "   \
    \ std::vector<long> result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            result.push_back(arr[i]);\n            result.push_back(i);\n\
    \            return result;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min = arr[0] % 2;\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == min) {\n            index = i;\n        }\n\
    \        else {\n            ans.push_back(arr[index]);\n            min = arr[i]\
    \ % 2;\n            index = i;\n        }\n    }\n    ans.push_back(arr[index]);\n\
    \    return ans;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    long smallest_even = arr[0]\
    \ % 2 == 0 ? arr[0] : arr[1];\n    long smallest_index = arr[0] % 2 == 0 ? 0 :\
    \ 1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < smallest_even) {\n            smallest_even = arr[i];\n        \
    \    smallest_index = i;\n        }\n    }\n    result.push_back(smallest_even);\n\
    \    result.push_back(smallest_index);\n    return result;", "    std::vector<long>\
    \ result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    int index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            result.push_back(arr[i]);\n            result.push_back(i);\n\
    \            return result;\n        }\n        if (arr[i] < arr[index]) {\n \
    \           index = i;\n        }\n    }\n    result.push_back(arr[index]);\n\
    \    result.push_back(index);\n    return result;", "    std::vector<long> ans;\n\
    \    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n  \
    \  long min_even = arr[0] % 2 == 0 ? arr[0] : arr[1] % 2 == 0 ? arr[1] : arr[0];\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ == min_even) {\n            ans.push_back(arr[i]);\n            min_even = arr[i];\n\
    \        }\n    }\n    return ans;", "    std::vector<long> ans;\n    if (arr.empty())\
    \ return ans;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            ans.push_back(arr[i]);\n\
    \            return ans;\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            result.push_back(arr[i]);\n            result.push_back(i);\n   \
    \         return result;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min = arr[0];\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] == min) {\n            index = i;\n        } else\
    \ {\n            min = arr[i];\n            index = i;\n        }\n    }\n   \
    \ res.push_back(min);\n    res.push_back(index);\n    return res;", "    std::vector<long>\
    \ res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min_even = arr[0] % 2;\n    long min_index = 0;\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == min_even) {\n            min_index\
    \ = i;\n        }\n        else {\n            break;\n        }\n    }\n    res.push_back(arr[min_index]);\n\
    \    res.push_back(min_index);\n    return res;", "    std::vector<long> res;\n\
    \    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          res.push_back(arr[i]);\n            res.push_back(i);\n           \
    \ return res;\n        }\n    }\n    return res;", "    std::vector<long> res;\n\
    \    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          res.push_back(arr[i]);\n            res.push_back(i);\n           \
    \ return res;\n        }\n    }\n    return res;", "    std::vector<long> ans;\n\
    \    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n  \
    \  long min = arr[0];\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] == min) {\n            index = i;\n        } else\
    \ {\n            min = arr[i];\n            index = i;\n        }\n    }\n   \
    \ ans.push_back(min);\n    ans.push_back(index);\n    return ans;", "    std::vector<long>\
    \ res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min = arr[0] % 2;\n    long min_index = 0;\n    for (int i = 1; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == min) {\n            min_index\
    \ = i;\n        }\n        else {\n            min = arr[i] % 2;\n           \
    \ min_index = i;\n        }\n    }\n    res.push_back(arr[min_index]);\n    return\
    \ res;", "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min = arr[0] % 2;\n    long index = 0;\n    for (int i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == min) {\n            index\
    \ = i;\n        }\n        else {\n            ans.push_back(arr[index]);\n  \
    \          min = arr[i] % 2;\n            index = i;\n        }\n    }\n    ans.push_back(arr[index]);\n\
    \    return ans;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0] % 2;\n\
    \    long index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == min) {\n            index = i;\n        } else {\n            result.push_back(arr[index]);\n\
    \            min = arr[i] % 2;\n            index = i;\n        }\n    }\n   \
    \ result.push_back(arr[index]);\n    return result;", "    std::vector<long> result;\n\
    \    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min_value = arr[0];\n    long min_index = 0;\n    for (int i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < min_value) {\n                min_value = arr[i];\n                min_index\
    \ = i;\n            }\n        }\n    }\n    result.push_back(min_value);\n  \
    \  result.push_back(min_index);\n    return result;", "    std::vector<long> res;\n\
    \    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          res.push_back(arr[i]);\n            res.push_back(i);\n           \
    \ return res;\n        }\n    }\n    return res;", "    std::vector<long> result;\n\
    \    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min_even = arr[0] % 2 == 0 ? arr[0] : arr[1];\n    long min_index =\
    \ arr[0] % 2 == 0 ? 0 : 1;\n    for (int i = 1; i < arr.size(); i++) {\n     \
    \   if (arr[i] % 2 == 0) {\n            if (arr[i] < min_even) {\n           \
    \     min_even = arr[i];\n                min_index = i;\n            }\n    \
    \    }\n    }\n    result.push_back(min_even);\n    result.push_back(min_index);\n\
    \    return result;", "    std::vector<long> result;\n    if (arr.empty()) {\n\
    \        return result;\n    }\n    std::sort(arr.begin(), arr.end());\n    long\
    \ min_value = arr[0];\n    long min_index = 0;\n    for (int i = 1; i < arr.size();\
    \ ++i) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < min_value)\
    \ {\n                min_value = arr[i];\n                min_index = i;\n   \
    \         }\n        }\n    }\n    result.push_back(min_value);\n    result.push_back(min_index);\n\
    \    return result;", "    std::vector<long> ans;\n    if (arr.empty()) return\
    \ ans;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0] % 2;\n \
    \   long index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == min) {\n            index = i;\n        } else {\n            break;\n\
    \        }\n    }\n    ans.push_back(arr[index]);\n    return ans;", "    std::vector<long>\
    \ res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min_value = arr[0] % 2;\n    long min_index = 0;\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == min_value) {\n           \
    \ min_index = i;\n        } else {\n            break;\n        }\n    }\n   \
    \ res.push_back(arr[min_index]);\n    res.push_back(min_index);\n    return res;",
  "    std::vector<long> result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min = arr[0];\n    long index = 0;\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] == min) {\n            index = i;\n\
    \        } else {\n            result.push_back(min);\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    result.push_back(min);\n    return\
    \ result;", "    std::vector<long> res;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            res.push_back(arr[i]);\n            res.push_back(i);\n         \
    \   break;\n        }\n    }\n    return res;", "    std::vector<long> res;\n\
    \    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n  \
    \  long min = arr[0];\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < min) {\n  \
    \              min = arr[i];\n                index = i;\n            }\n    \
    \    }\n    }\n    res.push_back(min);\n    res.push_back(index);\n    return\
    \ res;", "    std::vector<long> result;\n    if (arr.empty()) return result;\n\
    \    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n \
    \           break;\n        }\n    }\n    if (result.empty()) return result;\n\
    \    std::sort(result.begin(), result.end());\n    return result;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min_value = arr[0] % 2;\n    long min_index = 0;\n    for (int i = 1;\
    \ i < arr.size(); ++i) {\n        if (arr[i] % 2 == min_value) {\n           \
    \ min_index = i;\n        }\n        else {\n            break;\n        }\n \
    \   }\n    ans.push_back(min_value);\n    ans.push_back(min_index);\n    return\
    \ ans;", "    std::vector<long> res;\n    std::sort(arr.begin(), arr.end());\n\
    \    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0){\n    \
    \        res.push_back(arr[i]);\n            break;\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min = arr[0];\n    long index = 0;\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < min) {\n                min = arr[i];\n                index = i;\n      \
    \      }\n        }\n    }\n    res.push_back(min);\n    res.push_back(index);\n\
    \    return res;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    long min_value = arr[0]\
    \ % 2;\n    long min_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == min_value) {\n            min_index = i;\n        }\
    \ else {\n            result.push_back(arr[min_index]);\n            min_value\
    \ = arr[i] % 2;\n            min_index = i;\n        }\n    }\n    result.push_back(arr[min_index]);\n\
    \    return result;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    long min_even = arr[0]\
    \ % 2;\n    long min_index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == min_even) {\n            min_index = i;\n        }\n\
    \    }\n    result.push_back(arr[min_index]);\n    return result;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            ans.push_back(arr[i]);\n            return ans;\n        }\n    }\n\
    \    return ans;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            result.push_back(i);\n            return result;\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    if (arr.empty())\
    \ return result;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            break;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            ans.push_back(arr[i]);\n            return ans;\n        }\n    }\n\
    \    return ans;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n\
    \    std::sort(arr.begin(), arr.end());\n    long min = arr[0];\n    long index\
    \ = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < min) {\n                min = arr[i];\n     \
    \           index = i;\n            }\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;", "    std::vector<long> result;\n\
    \    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    long smallest_value = arr[0];\n    long index = 0;\n    for (int i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] == smallest_value) {\n            index\
    \ = i;\n        } else {\n            result.push_back(smallest_value);\n    \
    \        smallest_value = arr[i];\n            index = i;\n        }\n    }\n\
    \    result.push_back(smallest_value);\n    return result;", "    std::vector<long>\
    \ result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            result.push_back(arr[i]);\n            break;\n        }\n    }\n\
    \    if (result.empty()) return result;\n    std::sort(result.begin(), result.end());\n\
    \    return result;", "    std::vector<long> ans;\n    if (arr.empty()) return\
    \ ans;\n    std::sort(arr.begin(), arr.end());\n    long min_even = arr[0] % 2;\n\
    \    long min_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] % 2 == min_even) {\n            min_index = i;\n        } else {\n\
    \            break;\n        }\n    }\n    ans.push_back(arr[min_index]);\n  \
    \  return ans;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n\
    \    std::sort(arr.begin(), arr.end());\n    long min_value = arr[0];\n    long\
    \ min_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            if (arr[i] < min_value) {\n                min_value\
    \ = arr[i];\n                min_index = i;\n            }\n        }\n    }\n\
    \    res.push_back(min_value);\n    res.push_back(min_index);\n    return res;",
  "    std::vector<long> ans;\n    std::vector<long> even_nodes;\n    std::vector<long>\
    \ odd_nodes;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            even_nodes.push_back(arr[i]);\n        } else {\n \
    \           odd_nodes.push_back(arr[i]);\n        }\n    }\n    if (even_nodes.size()\
    \ == 0) {\n        return ans;\n    }\n    long min_even = *std::min_element(even_nodes.begin(),\
    \ even_nodes.end());\n    long min_odd = *std::min_element(odd_nodes.begin(),\
    \ odd_nodes.end());\n    if (min_even < min_odd) {\n        ans.push_back(min_even);\n\
    \        ans.push_back(min_odd);\n    } else {\n        ans.push_back(min_odd);\n\
    \        ans.push_back(min_even);\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    int index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            result.push_back(arr[i]);\n            result.push_back(index);\n\
    \            return result;\n        }\n        index++;\n    }\n    return result;",
  "    std::vector<long> result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            result.push_back(arr[i]);\n            result.push_back(i);\n\
    \            break;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min = arr[0];\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] == min) {\n            index = i;\n        } else\
    \ {\n            result.push_back(min);\n            min = arr[i];\n         \
    \   index = i;\n        }\n    }\n    result.push_back(min);\n    return result;",
  "    std::vector<long> res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min = arr[0];\n    long index = 0;\n    for (int i = 1;\
    \ i < arr.size(); ++i) {\n        if (arr[i] == min) {\n            index = i;\n\
    \        } else {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    res.push_back(min);\n    res.push_back(index);\n    return res;",
  "    std::vector<long> result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min = arr[0];\n    long index = 0;\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] == min) {\n            index = i;\n\
    \        } else {\n            result.push_back(min);\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    result.push_back(min);\n    return\
    \ result;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n  \
    \  std::sort(arr.begin(), arr.end());\n    long min_value = arr[0];\n    long\
    \ min_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            if (arr[i] < min_value) {\n                min_value\
    \ = arr[i];\n                min_index = i;\n            }\n        }\n    }\n\
    \    res.push_back(min_value);\n    res.push_back(min_index);\n    return res;",
  "    std::vector<long> result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            result.push_back(arr[i]);\n            break;\n   \
    \     }\n    }\n    return result;", "    std::vector<long> res;\n    if (arr.empty())\
    \ return res;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0];\n\
    \    long index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(index);\n \
    \   return res;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            return result;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min_value = arr[0];\n    long min_index = 0;\n    for (int i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < min_value) {\n                min_value = arr[i];\n                min_index\
    \ = i;\n            }\n        }\n    }\n    res.push_back(min_value);\n    res.push_back(min_index);\n\
    \    return res;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    long min_even = arr[0]\
    \ % 2;\n    long min_index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == min_even) {\n            min_index = i;\n        }\n\
    \    }\n    result.push_back(arr[min_index]);\n    return result;", "    std::vector<long>\
    \ ans;\n    std::vector<long> even_nodes;\n    for(long i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0){\n            even_nodes.push_back(arr[i]);\n\
    \        }\n    }\n    if(even_nodes.size() == 0){\n        return ans;\n    }\n\
    \    long min_even = *std::min_element(even_nodes.begin(), even_nodes.end());\n\
    \    for(long i = 0; i < arr.size(); i++){\n        if(arr[i] == min_even){\n\
    \            ans.push_back(arr[i]);\n            ans.push_back(i);\n         \
    \   return ans;\n        }\n    }\n    return ans;", "    std::vector<long> res;\n\
    \    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n  \
    \  long min_even = arr[0] % 2;\n    long min_index = 0;\n    for (int i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] % 2 == min_even) {\n            min_index\
    \ = i;\n        } else {\n            break;\n        }\n    }\n    res.push_back(arr[min_index]);\n\
    \    res.push_back(min_index);\n    return res;", "    std::vector<long> ans;\n\
    \    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n  \
    \  long min = arr[0] % 2;\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == min) {\n            index = i;\n        }\n\
    \    }\n    ans.push_back(arr[index]);\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min = arr[0] % 2;\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == min) {\n            index = i;\n        }\n\
    \    }\n    ans.push_back(arr[index]);\n    return ans;", "    std::vector<long>\
    \ res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            res.push_back(arr[i]);\n            break;\n        }\n    }\n  \
    \  if (res.empty()) return res;\n    std::sort(res.begin(), res.end());\n    return\
    \ res;", "    std::vector<long> result;\n    if (arr.empty()) return result;\n\
    \    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n \
    \           break;\n        }\n    }\n    if (result.empty()) return result;\n\
    \    std::sort(result.begin(), result.end());\n    return result;", "    std::vector<long>\
    \ res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            res.push_back(arr[i]);\n            res.push_back(i);\n         \
    \   return res;\n        }\n    }\n    return res;", "    std::vector<long> result;\n\
    \    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            result.push_back(arr[i]);\n            result.push_back(i);\n   \
    \         return result;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (arr.empty()) {\n        return result;\n    }\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min_even = arr[0] % 2;\n    long min_index = 0;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == min_even) {\n\
    \            min_index = i;\n        }\n    }\n    result.push_back(arr[min_index]);\n\
    \    return result;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0] % 2;\n\
    \    long index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == min) {\n            index = i;\n        } else {\n            result.push_back(arr[index]);\n\
    \            min = arr[i] % 2;\n            index = i;\n        }\n    }\n   \
    \ result.push_back(arr[index]);\n    return result;", "    std::vector<long> ans;\n\
    \    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          ans.push_back(arr[i]);\n            break;\n        }\n    }\n    if\
    \ (ans.empty()) return ans;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] % 2 == 0) {\n            ans.push_back(arr[i]);\n            break;\n\
    \        }\n    }\n    return ans;", "    std::vector<long> result;\n    if (arr.empty())\
    \ return result;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            break;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            ans.push_back(arr[i]);\n            return ans;\n        }\n    }\n\
    \    return ans;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n\
    \    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            res.push_back(arr[i]);\n    \
    \        break;\n        }\n    }\n    if (res.empty()) return res;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < res[0])\
    \ {\n            res[0] = arr[i];\n            res[1] = i;\n        }\n    }\n\
    \    return res;", "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n\
    \    std::sort(arr.begin(), arr.end());\n    long min_even = arr[0] % 2;\n   \
    \ long min_index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == min_even) {\n            min_index = i;\n        }\n    }\n \
    \   ans.push_back(arr[min_index]);\n    return ans;", "    std::vector<long> result;\n\
    \    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min_value = arr[0];\n    long min_index = 0;\n    for (int i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] == min_value) {\n            min_index\
    \ = i;\n        } else {\n            result.push_back(min_value);\n         \
    \   min_value = arr[i];\n            min_index = i;\n        }\n    }\n    result.push_back(min_value);\n\
    \    return result;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            result.push_back(i);\n            return result;\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    if (arr.empty())\
    \ return result;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            result.push_back(i);\n            return result;\n        }\n   \
    \ }\n    return result;", "    std::vector<long> res;\n    if (arr.empty()) return\
    \ res;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            res.push_back(arr[i]);\n\
    \            res.push_back(i);\n            break;\n        }\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    if (arr.empty()) return result;\n\
    \    std::sort(arr.begin(), arr.end());\n    long min = arr[0];\n    long index\
    \ = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] == min)\
    \ {\n            index = i;\n        } else {\n            result.push_back(min);\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    result.push_back(min);\n\
    \    return result;", "    std::vector<long> res;\n    if (arr.empty()) return\
    \ res;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] ==\
    \ min) {\n            index = i;\n        } else {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(index);\n\
    \    return res;", "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n\
    \    long min = arr[0];\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < min) {\n  \
    \              min = arr[i];\n                index = i;\n            }\n    \
    \    }\n    }\n    ans.push_back(min);\n    ans.push_back(index);\n    return\
    \ ans;", "    std::vector<long> ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min = arr[0];\n    long index = 0;\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < min) {\n                min = arr[i];\n                index = i;\n      \
    \      }\n        }\n    }\n    ans.push_back(min);\n    ans.push_back(index);\n\
    \    return ans;", "    std::vector<long> result;\n    if (arr.empty()) return\
    \ result;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            result.push_back(i);\n            return result;\n        }\n   \
    \ }\n    return result;", "    std::vector<long> ans;\n    if (arr.empty()) return\
    \ ans;\n    std::sort(arr.begin(), arr.end());\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] ==\
    \ min) {\n            index = i;\n        } else {\n            ans.push_back(min);\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    ans.push_back(min);\n\
    \    return ans;", "    std::vector<long> result;\n    if (arr.empty()) {\n  \
    \      return result;\n    }\n    std::sort(arr.begin(), arr.end());\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n       \
    \     result.push_back(arr[i]);\n            break;\n        }\n    }\n    if\
    \ (result.empty()) {\n        return result;\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> ans;\n    if (arr.empty())\
    \ return ans;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            ans.push_back(arr[i]);\n\
    \            return ans;\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min = arr[0] % 2;\n    long index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == min) {\n            index = i;\n         \
    \   break;\n        }\n    }\n    ans.push_back(arr[index]);\n    return ans;",
  "    std::vector<long> result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            result.push_back(arr[i]);\n            return result;\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    if\
    \ (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n    long\
    \ smallest_value = arr[0];\n    long smallest_index = 0;\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] == smallest_value) {\n          \
    \  smallest_index = i;\n        }\n        else {\n            result.push_back(smallest_value);\n\
    \            smallest_value = arr[i];\n            smallest_index = i;\n     \
    \   }\n    }\n    result.push_back(smallest_value);\n    return result;", "  \
    \  std::vector<long> res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min = arr[0] % 2;\n    long index = 0;\n    for (int i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == min) {\n            index\
    \ = i;\n        } else {\n            break;\n        }\n    }\n    res.push_back(arr[index]);\n\
    \    res.push_back(index);\n    return res;", "    std::vector<long> ans;\n  \
    \  if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n       \
    \     ans.push_back(arr[i]);\n            return ans;\n        }\n    }\n    return\
    \ ans;", "    std::vector<long> res;\n    if (arr.empty()) return res;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            res.push_back(arr[i]);\n            res.push_back(i);\n\
    \            break;\n        }\n    }\n    return res;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min = arr[0] % 2;\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == min) {\n            index = i;\n        }\n\
    \    }\n    ans.push_back(arr[index]);\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (arr.empty()) return ans;\n    std::sort(arr.begin(), arr.end());\n\
    \    long min = arr[0];\n    long index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] == min) {\n            index = i;\n        } else\
    \ {\n            min = arr[i];\n            index = i;\n        }\n    }\n   \
    \ ans.push_back(min);\n    ans.push_back(index);\n    return ans;"]
stop_tokens:
- "\n}"
