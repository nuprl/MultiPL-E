{
  "name": "HumanEval_158_find_max",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings.\n// The vector contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n// \"aaaaaaa\"\nstd::string find_max(std::vector<std::string> words) {\n",
  "tests": "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"}))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n",
  "completions": [
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto i = 1; i < words.size(); ++i) {\n        if (words[i].length() > max.length()) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word = \"\";\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != max_word[count - 1]) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    int max_count = words[0].length();\n    for (int i = 1; i < words.size(); i++) {\n        if (words[i].length() > max_count) {\n            max_count = words[i].length();\n            max = words[i];\n        }\n        else if (words[i].length() == max_count && words[i] < max) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (ch != ' ') {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto it = words.begin() + 1; it != words.end(); it++) {\n        if (count_unique(*it) > count_unique(max)) {\n            max = *it;\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != word[0]) {\n                count--;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    std::string temp_word;\n    int max_count = 0;\n    for (auto it = words.begin(); it != words.end(); ++it) {\n        int count = 0;\n        for (auto it2 = it->begin(); it2 != it->end(); ++it2) {\n            if (count == 0) {\n                temp_word.push_back(*it2);\n                count++;\n            } else if (*it2 != temp_word.back()) {\n                temp_word.push_back(*it2);\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = temp_word;\n        }\n        temp_word.clear();\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    std::string temp_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                temp_word.push_back(c);\n            } else if (c == temp_word[count - 1]) {\n                count++;\n            } else {\n                temp_word.pop_back();\n                temp_word.push_back(c);\n                count = 1;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    std::string prev_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                prev_word = c;\n                count++;\n            } else if (prev_word == c) {\n                count++;\n            } else {\n                prev_word = c;\n                count = 1;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != count) {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != word[count - 1]) {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != word[count - 1]) {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word = words[0];\n    int max_count = words[0].size();\n    for (int i = 1; i < words.size(); i++) {\n        if (words[i].size() > max_count) {\n            max_count = words[i].size();\n            max_word = words[i];\n        }\n        else if (words[i].size() == max_count && words[i] < max_word) {\n            max_word = words[i];\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    std::string max_count_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != word[count - 1]) {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (ch != ' ') {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    std::string word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    std::string temp_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (count == 0) {\n                temp_word.push_back(ch);\n                count++;\n            }\n            else {\n                if (ch != temp_word.back()) {\n                    temp_word.push_back(ch);\n                    count++;\n                }\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != word[count - 1]) {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto i = 1; i < words.size(); ++i) {\n        if (words[i].size() > max.size()) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else if (count > 0) {\n                count--;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto i = 1; i < words.size(); i++) {\n        if (words[i].size() > max.size()) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto it = words.begin() + 1; it != words.end(); ++it) {\n        if (it->size() > max.size()) {\n            max = *it;\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    std::string word;\n    int max_count = 0;\n    for (auto &s : words) {\n        int count = 0;\n        for (auto &c : s) {\n            if (count == 0) {\n                word = c;\n                count++;\n            }\n            else if (c == word[count - 1]) {\n                count++;\n            }\n            else {\n                count--;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = s;\n        }\n    }\n    return max_word;",
    "    std::string max_word = \"\";\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (c != ' ') {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto it = words.begin() + 1; it != words.end(); it++) {\n        if (it->size() > max.size()) {\n            max = *it;\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto i = 1; i < words.size(); i++) {\n        if (words[i].size() > max.size()) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    std::string temp_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n                temp_word.push_back(c);\n            }\n            else if (c == temp_word.back()) {\n                count++;\n            }\n            else {\n                count--;\n                temp_word.pop_back();\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (int i = 1; i < words.size(); ++i) {\n        if (words[i].size() > max.size()) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != word[count - 1]) {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word = words[0];\n    for (int i = 1; i < words.size(); ++i) {\n        if (words[i].size() > max_word.size()) {\n            max_word = words[i];\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    std::string temp_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n                temp_word.push_back(c);\n            } else {\n                if (c != temp_word.back()) {\n                    count++;\n                    temp_word.push_back(c);\n                }\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != max_word[count - 1]) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (count == 0) {\n                count++;\n            } else if (ch != word[0]) {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != word[count - 1]) {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto& word : words) {\n        int count = 0;\n        for (auto& ch : word) {\n            if (count == 0) {\n                count++;\n            } else if (count > 0 && ch != max[count - 1]) {\n                count = 0;\n            }\n        }\n        if (count > max.size()) {\n            max = word;\n        }\n    }\n    return max;",
    "    std::string max_word = words[0];\n    int max_count = words[0].size();\n    for (auto word : words) {\n        int count = 0;\n        for (int i = 0; i < word.size(); i++) {\n            if (word[i] != max_word[i]) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_word = word;\n            max_count = count;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word = words[0];\n    int max_count = words[0].size();\n    for (int i = 1; i < words.size(); i++) {\n        if (words[i].size() > max_count) {\n            max_count = words[i].size();\n            max_word = words[i];\n        }\n        else if (words[i].size() == max_count && words[i] < max_word) {\n            max_word = words[i];\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    std::string word;\n    int max_count = 0;\n    for (auto &s : words) {\n        int count = 0;\n        for (auto &c : s) {\n            if (count == 0) {\n                word = c;\n                count++;\n            }\n            else if (c == word[count - 1]) {\n                count++;\n            }\n            else {\n                count--;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = s;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    std::string temp_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != word[count - 1]) {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != word[count - 1]) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word = \"\";\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto i = 1; i < words.size(); i++) {\n        if (words[i].size() > max.size()) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != word[count - 1]) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word = words[0];\n    for (auto &word : words) {\n        std::unordered_map<char, int> map;\n        for (auto &c : word) {\n            ++map[c];\n        }\n        for (auto &c : map) {\n            if (c.second > max_word.size()) {\n                max_word = word;\n            }\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto i = 1; i < words.size(); ++i) {\n        if (words[i].size() > max.size()) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max = words[0];\n    for (auto i = 1; i < words.size(); ++i) {\n        if (words[i].size() > max.size()) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto &s : words) {\n        int count = 0;\n        for (auto &c : s) {\n            if (count == 0) {\n                count++;\n            } else if (c != s[count - 1]) {\n                count = 0;\n            }\n        }\n        if (count > max.size()) {\n            max = s;\n        }\n    }\n    return max;",
    "    std::string max_word;\n    std::string prev_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                prev_word = c;\n                count++;\n            } else if (c == prev_word) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    std::string temp_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (count == 0) {\n                temp_word = ch;\n                count++;\n            } else if (ch == temp_word[count - 1]) {\n                count++;\n            } else {\n                count--;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    int max_count = words[0].length();\n    for (int i = 1; i < words.size(); i++) {\n        if (words[i].length() > max_count) {\n            max = words[i];\n            max_count = words[i].length();\n        } else if (words[i].length() == max_count && words[i] < max) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto &w : words) {\n        int count = 0;\n        for (auto &c : w) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max.size()) {\n            max = w;\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (count == 0) {\n                count++;\n            } else if (ch != word[0]) {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    std::string max_count_word;\n    std::string temp_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n                temp_word.push_back(c);\n            }\n            else if (c == temp_word.back()) {\n                count++;\n            }\n            else {\n                count--;\n                temp_word.pop_back();\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    int max_count = words[0].size();\n    for (int i = 1; i < words.size(); i++) {\n        if (words[i].size() > max_count) {\n            max_count = words[i].size();\n            max = words[i];\n        }\n        else if (words[i].size() == max_count && words[i] < max) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            count += (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u');\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto i = 1; i < words.size(); ++i) {\n        if (words[i].size() > max.size()) {\n            max = words[i];\n        }\n        else if (words[i].size() == max.size() && words[i] < max) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word = words[0];\n    for (int i = 1; i < words.size(); i++) {\n        if (words[i].size() > max_word.size()) {\n            max_word = words[i];\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            count += (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u');\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word = \"\";\n    int max_count = 0;\n    for (std::string word : words) {\n        int count = 0;\n        for (char c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (ch != ' ') {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != word[count - 1]) {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto i = 1; i < words.size(); i++) {\n        if (words[i].length() > max.length()) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max = words[0];\n    for (auto it = words.begin() + 1; it != words.end(); ++it) {\n        if (it->size() > max.size()) {\n            max = *it;\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != word[count - 1]) {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else if (count > 0) {\n                count--;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    std::string temp_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                temp_word = c;\n                count++;\n            } else if (c == temp_word[count - 1]) {\n                count++;\n            } else {\n                count = 0;\n                temp_word = c;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != word[count - 1]) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto it = words.begin() + 1; it != words.end(); ++it) {\n        if (it->size() > max.size()) {\n            max = *it;\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto i = 1; i < words.size(); ++i) {\n        if (words[i].length() > max.length()) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (ch != ' ') {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (int i = 1; i < words.size(); i++) {\n        if (words[i].size() > max.size()) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != word[count - 1]) {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto i = 1; i < words.size(); i++) {\n        if (words[i].size() > max.size()) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max = words[0];\n    for (int i = 1; i < words.size(); ++i) {\n        if (words[i].size() > max.size()) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (ch == ' ') continue;\n            count++;\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto i = 1; i < words.size(); i++) {\n        if (words[i].size() > max.size()) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    std::string temp_word;\n    int max_count = 0;\n    for (auto it = words.begin(); it != words.end(); it++) {\n        int count = 0;\n        for (auto it2 = it->begin(); it2 != it->end(); it2++) {\n            if (count == 0) {\n                temp_word.push_back(*it2);\n                count++;\n            } else {\n                if (*it2 != temp_word.back()) {\n                    temp_word.push_back(*it2);\n                    count++;\n                }\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = temp_word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto i = 1; i < words.size(); ++i) {\n        if (words[i].size() > max.size()) {\n            max = words[i];\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word = \"\";\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto &str : words) {\n        std::unordered_map<char, int> count;\n        for (auto &c : str) {\n            count[c]++;\n        }\n        for (auto &c : count) {\n            if (count[c] > count[max[0]]) {\n                max = str;\n            }\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n            if (count == 0) {\n                count++;\n            } else if (c != word[count - 1]) {\n                count = 0;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max = words[0];\n    for (auto it = words.begin() + 1; it != words.end(); ++it) {\n        if (it->size() > max.size()) {\n            max = *it;\n        }\n    }\n    return max;",
    "    std::string max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto ch : word) {\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
    "    std::string max_word = words[0];\n    for (int i = 1; i < words.size(); i++) {\n        if (words[i].size() > max_word.size()) {\n            max_word = words[i];\n        }\n    }\n    return max_word;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}