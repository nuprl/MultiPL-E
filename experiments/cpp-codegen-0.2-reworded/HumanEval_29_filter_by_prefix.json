{
  "name": "HumanEval_29_filter_by_prefix",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n",
  "tests": "}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n",
  "completions": [
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> filtered;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            filtered.push_back(string);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> filtered;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            filtered.push_back(string);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> filtered;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            filtered.push_back(string);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> filtered;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& string : strings) {\n    if (string.find(prefix) == 0) {\n      result.push_back(string);\n    }\n  }\n  return result;",
    "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
    "  std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> filtered;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            filtered.push_back(string);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> filtered;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            filtered.push_back(string);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> filtered;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& string : strings) {\n    if (string.find(prefix) == 0) {\n      result.push_back(string);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> filtered;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> filtered;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            filtered.push_back(string);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> filtered;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            filtered.push_back(string);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> filtered;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "    std::vector<std::string> filtered;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "  std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& string : strings) {\n    if (string.find(prefix) == 0) {\n      result.push_back(string);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& string : strings) {\n    if (string.find(prefix) == 0) {\n      result.push_back(string);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> filtered;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "    std::vector<std::string> filtered;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            filtered.push_back(string);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> filtered;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      filtered.push_back(s);\n    }\n  }\n  return filtered;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> filtered;\n    for (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "    std::vector<std::string> filtered;\n    for (auto& string : strings) {\n        if (string.substr(0, prefix.size()) == prefix) {\n            filtered.push_back(string);\n        }\n    }\n    return filtered;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& string : strings) {\n        if (string.find(prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto& s : strings) {\n    if (s.find(prefix) == 0) {\n      result.push_back(s);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}