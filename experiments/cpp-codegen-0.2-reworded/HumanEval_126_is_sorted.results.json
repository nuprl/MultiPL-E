{
  "name": "HumanEval_126_is_sorted",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n",
  "tests": "}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() < 2) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpw1dei0ty: /tmp/tmpw1dei0ty.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < prev) {\n            return false;\n        }\n        prev = lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpoycmdugi: /tmp/tmpoycmdugi.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() < 2) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpw1dei0ty: /tmp/tmpw1dei0ty.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1)\n        return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmprknirgc9: /tmp/tmprknirgc9.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmp334t_ysx: /tmp/tmp334t_ysx.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzykwxt4o: /tmp/tmpzykwxt4o.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpyjq6qgmq: /tmp/tmpyjq6qgmq.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1)\n        return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpgj7v92xl: /tmp/tmpgj7v92xl.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzykwxt4o: /tmp/tmpzykwxt4o.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n  if (lst.size() == 1) {\n    return true;\n  }\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] < lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmp4suayz9v: /tmp/tmp4suayz9v.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpyjq6qgmq: /tmp/tmpyjq6qgmq.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpyjq6qgmq: /tmp/tmpyjq6qgmq.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1)\n        return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmprknirgc9: /tmp/tmprknirgc9.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1)\n        return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmprknirgc9: /tmp/tmprknirgc9.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < prev) return false;\n        prev = lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpd8rh2cc9: /tmp/tmpd8rh2cc9.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    long last = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < last) return false;\n        last = lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphx4z5o8z: /tmp/tmphx4z5o8z.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n  if (lst.size() <= 1) {\n    return true;\n  }\n  for (int i = 0; i < lst.size() - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpixtc8a0v: /tmp/tmpixtc8a0v.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1)\n        return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmprknirgc9: /tmp/tmprknirgc9.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n  if (lst.size() <= 1) return true;\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] < lst[i-1]) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphgrzv9n8: /tmp/tmphgrzv9n8.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpyjq6qgmq: /tmp/tmpyjq6qgmq.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpyjq6qgmq: /tmp/tmpyjq6qgmq.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmp334t_ysx: /tmp/tmp334t_ysx.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1)\n        return true;\n    if (lst.size() == 2)\n        return lst[0] <= lst[1];\n    for (int i = 1; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) return true;\n    if (lst.size() == 2) return lst[0] < lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i-1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpuipv2iz2: /tmp/tmpuipv2iz2.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmp334t_ysx: /tmp/tmp334t_ysx.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n  if (lst.size() == 1) {\n    return true;\n  }\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] < lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmp4suayz9v: /tmp/tmp4suayz9v.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpyjq6qgmq: /tmp/tmpyjq6qgmq.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzykwxt4o: /tmp/tmpzykwxt4o.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzykwxt4o: /tmp/tmpzykwxt4o.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n  if (lst.size() <= 1) return true;\n  for (int i = 0; i < lst.size() - 1; i++) {\n    if (lst[i] > lst[i + 1]) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmp7d1__vig: /tmp/tmp7d1__vig.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    if (lst.size() == 2) {\n        return lst[0] < lst[1];\n    }\n    for (int i = 1; i < lst.size() - 1; i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n  if (lst.size() <= 1) return true;\n  for (int i = 0; i < lst.size() - 1; i++) {\n    if (lst[i] > lst[i + 1]) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmp7d1__vig: /tmp/tmp7d1__vig.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() < 2) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpw1dei0ty: /tmp/tmpw1dei0ty.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1)\n        return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzxpmi51u: /tmp/tmpzxpmi51u.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpyjq6qgmq: /tmp/tmpyjq6qgmq.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1)\n        return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzyh9gst1: /tmp/tmpzyh9gst1.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1)\n        return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i-1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpojmzu41r: /tmp/tmpojmzu41r.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) return true;\n    if (lst.size() == 2) return lst[0] < lst[1];\n    if (lst.size() == 3) return lst[0] < lst[1] && lst[1] < lst[2];\n    if (lst.size() == 4) return lst[0] < lst[1] && lst[1] < lst[2] && lst[2] < lst[3];\n    if (lst.size() == 5) return lst[0] < lst[1] && lst[1] < lst[2] && lst[2] < lst[3] && lst[3] < lst[4];\n    if (lst.size() == 6) return lst[0] < lst[1] && lst[1] < lst[2] && lst[2] < lst[3] && lst[3] < lst[4] && lst[4] < lst[5];\n    if (lst.size() == 7) return lst[0] < lst[1] && lst[1] < lst[2] && lst[2] < lst[3] && lst[3] < lst[4] && lst[4] < lst[5] && lst[5] < lst[6];\n    if (lst.size() == 8) return lst[0] < lst[1] && lst[1] < lst[2] && lst[2] < lst[3] && lst[3] < lst[4] && lst[4] < lst[5] && lst[5] < lst[6] && lst[6] < lst[7];\n    if (lst.size() == 9) return lst[0] < lst[1] && lst[1] < lst[2] && lst[2] < lst[3] && lst[3] < lst[4] && lst[4] < lst[5] && lst[5]\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmpifyt7_q_.cpp: In function \u2018bool is_sorted(std::vector<long int>)\u2019:\n/tmp/tmpifyt7_q_.cpp:32:134: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   32 |     if (lst.size() == 9) return lst[0] < lst[1] && lst[1] < lst[2] && lst[2] < lst[3] && lst[3] < lst[4] && lst[4] < lst[5] && lst[5]\n      |                                                                                                                                      ^\n      |                                                                                                                                      ;\n   33 | }\n      | ~                                                                                                                                     \n/tmp/tmpifyt7_q_.cpp:33:1: warning: control reaches end of non-void function [-Wreturn-type]\n   33 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    long last = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < last) return false;\n        last = lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphx4z5o8z: /tmp/tmphx4z5o8z.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpaq7plga1: /tmp/tmpaq7plga1.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() < 2) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpw1dei0ty: /tmp/tmpw1dei0ty.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n  for (int i = 0; i < lst.size() - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] < lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpkhkb4pxl: /tmp/tmpkhkb4pxl.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzykwxt4o: /tmp/tmpzykwxt4o.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() < 2)\n        return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpklnmt127: /tmp/tmpklnmt127.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzyh9gst1: /tmp/tmpzyh9gst1.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    if (lst.size() == 2) {\n        return lst[0] < lst[1];\n    }\n    for (int i = 1; i < lst.size() - 1; i++) {\n        if (lst[i] < lst[i - 1] && lst[i] < lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1)\n        return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpgj7v92xl: /tmp/tmpgj7v92xl.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i-1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpojmzu41r: /tmp/tmpojmzu41r.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1)\n        return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzxpmi51u: /tmp/tmpzxpmi51u.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpaq7plga1: /tmp/tmpaq7plga1.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    long last = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < last) return false;\n        last = lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphx4z5o8z: /tmp/tmphx4z5o8z.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpyjq6qgmq: /tmp/tmpyjq6qgmq.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n  for (int i = 0; i < lst.size() - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() < 2) return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpvr3exr99: /tmp/tmpvr3exr99.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() < 2) return true;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmphxmgraqi: /tmp/tmphxmgraqi.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzyh9gst1: /tmp/tmpzyh9gst1.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpyjq6qgmq: /tmp/tmpyjq6qgmq.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzyh9gst1: /tmp/tmpzyh9gst1.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzyh9gst1: /tmp/tmpzyh9gst1.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1)\n        return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpgj7v92xl: /tmp/tmpgj7v92xl.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1)\n        return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmprknirgc9: /tmp/tmprknirgc9.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpyjq6qgmq: /tmp/tmpyjq6qgmq.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n  if (lst.size() <= 1) return true;\n  std::sort(lst.begin(), lst.end());\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] == lst[i - 1]) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpg138p3x9: /tmp/tmpg138p3x9.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < prev) return false;\n        prev = lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpd8rh2cc9: /tmp/tmpd8rh2cc9.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    if (lst.size() == 2) {\n        return lst[0] < lst[1];\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzykwxt4o: /tmp/tmpzykwxt4o.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() < 2) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpw1dei0ty: /tmp/tmpw1dei0ty.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1)\n        return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmprknirgc9: /tmp/tmprknirgc9.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmp334t_ysx: /tmp/tmp334t_ysx.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzykwxt4o: /tmp/tmpzykwxt4o.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n  if (lst.size() <= 1) return true;\n  long prev = lst[0];\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] < prev) return false;\n    prev = lst[i];\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmp2tlwl2w2: /tmp/tmp2tlwl2w2.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n  if (lst.size() == 1) {\n    return true;\n  }\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] < lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmp4suayz9v: /tmp/tmp4suayz9v.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzykwxt4o: /tmp/tmpzykwxt4o.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpaq7plga1: /tmp/tmpaq7plga1.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmp334t_ysx: /tmp/tmp334t_ysx.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmp334t_ysx: /tmp/tmp334t_ysx.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzyh9gst1: /tmp/tmpzyh9gst1.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    long last = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < last) return false;\n        last = lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphx4z5o8z: /tmp/tmphx4z5o8z.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n  if (lst.size() <= 1)\n    return true;\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] < lst[i - 1])\n      return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpap8_p2zv: /tmp/tmpap8_p2zv.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1)\n        return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzxpmi51u: /tmp/tmpzxpmi51u.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    long last = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < last) return false;\n        last = lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphx4z5o8z: /tmp/tmphx4z5o8z.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1)\n        return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpyjq6qgmq: /tmp/tmpyjq6qgmq.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzykwxt4o: /tmp/tmpzykwxt4o.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() < 2) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpe7bmx33e: /tmp/tmpe7bmx33e.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpyjq6qgmq: /tmp/tmpyjq6qgmq.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzykwxt4o: /tmp/tmpzykwxt4o.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1)\n        return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpgj7v92xl: /tmp/tmpgj7v92xl.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1)\n        return true;\n    long last = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < last)\n            return false;\n        last = lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpd8hxl9kt: /tmp/tmpd8hxl9kt.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() < 2) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpw1dei0ty: /tmp/tmpw1dei0ty.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmp334t_ysx: /tmp/tmp334t_ysx.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpma0n166b: /tmp/tmpma0n166b.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzykwxt4o: /tmp/tmpzykwxt4o.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() < 2) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpw1dei0ty: /tmp/tmpw1dei0ty.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzykwxt4o: /tmp/tmpzykwxt4o.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmp334t_ysx: /tmp/tmp334t_ysx.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n  if (lst.size() == 1) {\n    return true;\n  }\n  for (int i = 0; i < lst.size() - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1)\n        return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzyh9gst1: /tmp/tmpzyh9gst1.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < prev) {\n            return false;\n        }\n        prev = lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpoycmdugi: /tmp/tmpoycmdugi.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < prev) {\n            return false;\n        }\n        prev = lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpoycmdugi: /tmp/tmpoycmdugi.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpe7907czz: /tmp/tmpe7907czz.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() < 2) return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i-1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmphva316br: /tmp/tmphva316br.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() < 2) return true;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpvr3exr99: /tmp/tmpvr3exr99.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpzykwxt4o: /tmp/tmpzykwxt4o.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() < 2) return true;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmporzq8b2f: /tmp/tmporzq8b2f.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmpyjq6qgmq: /tmp/tmpyjq6qgmq.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1)\n        return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmprknirgc9: /tmp/tmprknirgc9.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    if (lst.size() <= 1) return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmphr8jeaqw: /tmp/tmphr8jeaqw.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5]) \n// False\n// >>> is_sorted([1, 2, 3, 4, 5, 6]) \n// True\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n// True\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n// False\n// >>> is_sorted([1, 2, 2, 3, 3, 4]) \n// True\n// >>> is_sorted([1, 2, 2, 2, 3, 4]) \n// False\nbool is_sorted(std::vector<long> lst) {\n  if (lst.size() <= 1) return true;\n  for (int i = 0; i < lst.size() - 1; i++) {\n    if (lst[i] > lst[i + 1]) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "tmp7d1__vig: /tmp/tmp7d1__vig.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}