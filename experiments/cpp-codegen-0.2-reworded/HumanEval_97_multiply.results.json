{
  "name": "HumanEval_97_multiply",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n",
  "tests": "}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpve3693s9: /tmp/tmpve3693s9.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while(a != 0 || b != 0) {\n        if(a != 0) {\n            product += a % 10;\n            a /= 10;\n        }\n        if(b != 0) {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpxfsfjgq2: /tmp/tmpxfsfjgq2.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            a -= b;\n        } else if (a < b) {\n            b -= a;\n        } else {\n            a = 0;\n            b = 0;\n        }\n        result += a % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "tmpylksb15k: /tmp/tmpylksb15k.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += b % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmptf4ertz2: /tmp/tmptf4ertz2.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a >= b) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmp1527_yzl: /tmp/tmp1527_yzl.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpvc75_cld: /tmp/tmpvc75_cld.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 != 0) {\n            result += b % 10;\n            b /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293254,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpve3693s9: /tmp/tmpve3693s9.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 != 0) {\n            result += b % 10;\n        }\n        b /= 10;\n        a /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmp2ojzs_f2: /tmp/tmp2ojzs_f2.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            product += b % 10;\n            b /= 10;\n        } else if (b % 10 == 0) {\n            product += a % 10;\n            a /= 10;\n        } else {\n            product += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpi1w9th8d: /tmp/tmpi1w9th8d.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpve3693s9: /tmp/tmpve3693s9.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while(a) {\n        product += a % 10 * b % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpujrqygw6: /tmp/tmpujrqygw6.cpp:26: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a > b) {\n            result += a % 10;\n            a /= 10;\n        } else if(b > a) {\n            result += b % 10;\n            b /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmp01hagyjp: /tmp/tmp01hagyjp.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b % 10;\n            b /= 10;\n        } else if (b % 10 == 0) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpjc7_ty18: /tmp/tmpjc7_ty18.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            product += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            product += a;\n            a = 0;\n        } else {\n            product += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpdctcprc4: /tmp/tmpdctcprc4.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a >= b) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpiju7nbpf: /tmp/tmpiju7nbpf.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 > 0) {\n            result += a % 10 * b;\n            a /= 10;\n        } else {\n            a /= 10;\n        }\n        if (b % 10 > 0) {\n            result += b % 10 * a;\n            b /= 10;\n        } else {\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpj3qnqccx: /tmp/tmpj3qnqccx.cpp:35: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a > b) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpmgmpfp89: /tmp/tmpmgmpfp89.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while(a != 0 || b != 0) {\n        if(a != 0) {\n            product += a % 10;\n            a /= 10;\n        }\n        if(b != 0) {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpxfsfjgq2: /tmp/tmpxfsfjgq2.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a) {\n        if(a%10)\n            result += b%10;\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmp5m36gv9k: /tmp/tmp5m36gv9k.cpp:27: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0 && b != 0) {\n            product += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else if (a != 0) {\n            product += a % 10 * b % 10;\n            a /= 10;\n        } else if (b != 0) {\n            product += a % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpjksww0tx: /tmp/tmpjksww0tx.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a >= 10) {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        else {\n            result += a * b;\n            a = 0;\n        }\n        if(b >= 10) {\n            result += b % 10 * a;\n            b /= 10;\n        }\n        else {\n            result += b * a;\n            b = 0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmp6ol_shx5: /tmp/tmp6ol_shx5.cpp:39: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a%10 == 0) {\n            result += b%10;\n            b /= 10;\n        }\n        else if(b%10 == 0) {\n            result += a%10;\n            a /= 10;\n        }\n        else {\n            result += a%10 * b%10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpwqqrxbl7: /tmp/tmpwqqrxbl7.cpp:36: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if (b != 0) {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmp9dwkxb6_: /tmp/tmp9dwkxb6_.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += b % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpkx6i78xd: /tmp/tmpkx6i78xd.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 != 0) {\n            result += a % 10 * b;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpkrscqezf: /tmp/tmpkrscqezf.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpve3693s9: /tmp/tmpve3693s9.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            sum += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            sum += b % 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmppnge3fc6: /tmp/tmppnge3fc6.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a >= 10) {\n            result += a % 10 * b;\n            a /= 10;\n        } else {\n            result += a * b;\n            a = 0;\n        }\n        if (b >= 10) {\n            result += b % 10 * a;\n            b /= 10;\n        } else {\n            result += b * a;\n            b = 0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpzyuw981w: /tmp/tmpzyuw981w.cpp:37: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a % 10 == 0) {\n            result += b * (a / 10);\n            a /= 10;\n        }\n        else if(b % 10 == 0) {\n            result += a * (b / 10);\n            b /= 10;\n        }\n        else {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpru96q84k: /tmp/tmpru96q84k.cpp:36: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a) {\n        product += a % 10 * b % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpfirofek1: /tmp/tmpfirofek1.cpp:26: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += b % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmptf4ertz2: /tmp/tmptf4ertz2.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a) {\n        if (a % 10) {\n            result += b * a % 10;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmp_mxctbm_: /tmp/tmp_mxctbm_.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpz1asg44w: /tmp/tmpz1asg44w.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a >= 10) {\n            result += a % 10 * b;\n            a /= 10;\n        } else {\n            result += a * b;\n            a = 0;\n        }\n        if (b >= 10) {\n            result += b % 10 * a;\n            b /= 10;\n        } else {\n            result += b * a;\n            b = 0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpzyuw981w: /tmp/tmpzyuw981w.cpp:37: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while(a) {\n        sum += a%10 * b%10;\n        a /= 10;\n        b /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpq_b8i988: /tmp/tmpq_b8i988.cpp:26: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a > 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += a * b % 10;\n            a *= 10;\n            b *= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmprlvkrgwn: /tmp/tmprlvkrgwn.cpp:32: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (b != 0) {\n        if (b % 10 == 0) {\n            product += a;\n        }\n        a *= 10;\n        b /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpn08kw19m: /tmp/tmpn08kw19m.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a) {\n        if(a%10) {\n            result += b%10;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293242,
      "stdout": "",
      "stderr": "tmpsteye2hk: /tmp/tmpsteye2hk.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a > 0) {\n            product += a % 10;\n            a /= 10;\n        }\n        if (b > 0) {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmppxxjzbpn: /tmp/tmppxxjzbpn.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            a -= b;\n        } else if (a < b) {\n            b -= a;\n        } else {\n            a = 0;\n            b = 0;\n        }\n        result += a % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "tmpylksb15k: /tmp/tmpylksb15k.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            product += a % 10;\n            a /= 10;\n        } else if (b > a) {\n            product += b % 10;\n            b /= 10;\n        } else {\n            product += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmp918b6fzp: /tmp/tmp918b6fzp.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a >= b) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpiju7nbpf: /tmp/tmpiju7nbpf.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpve3693s9: /tmp/tmpve3693s9.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b / 10;\n            a = a * 10 - b * 10;\n            b = b * 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293256,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            sum += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            sum += b % 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmppnge3fc6: /tmp/tmppnge3fc6.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += b % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmptf4ertz2: /tmp/tmptf4ertz2.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 > 0) {\n            result += a % 10 * b;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpl8i7jetz: /tmp/tmpl8i7jetz.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while(a != 0 || b != 0) {\n        if(a % 10 > 0)\n            product += a % 10 * b;\n        a /= 10;\n        b /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpu3ruzkj5: /tmp/tmpu3ruzkj5.cpp:27: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a >= 10 || b >= 10) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += a * b;\n            a = 0;\n            b = 0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmp3a6qnywg: /tmp/tmp3a6qnywg.cpp:32: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a >= b) {\n            result += a%10;\n            a /= 10;\n        } else {\n            result += b%10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpp36rzx04: /tmp/tmpp36rzx04.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        }\n        else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        }\n        else {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpxdcjns_4: /tmp/tmpxdcjns_4.cpp:36: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b % 10;\n            b /= 10;\n        } else if (b % 10 == 0) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpjc7_ty18: /tmp/tmpjc7_ty18.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += b % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmptf4ertz2: /tmp/tmptf4ertz2.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while(a) {\n        if(a%10)\n            product += b%10;\n        a /= 10;\n        b /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpfbflakdl: /tmp/tmpfbflakdl.cpp:27: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpve3693s9: /tmp/tmpve3693s9.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a >= b) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpiju7nbpf: /tmp/tmpiju7nbpf.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a >= b) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpiju7nbpf: /tmp/tmpiju7nbpf.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a) {\n        if (a % 10) {\n            product += b;\n        }\n        b *= 10;\n        a /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpat0agovj: /tmp/tmpat0agovj.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if (b != 0) {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmp9dwkxb6_: /tmp/tmp9dwkxb6_.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a > b) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpmgmpfp89: /tmp/tmpmgmpfp89.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 != 0) {\n            sum += b % 10;\n            b /= 10;\n        } else {\n            sum += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293256,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            a -= b;\n        } else {\n            b -= a;\n        }\n        result += a * 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293256,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpuh6xpp_5: /tmp/tmpuh6xpp_5.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpve3693s9: /tmp/tmpve3693s9.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0 && b != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else if (a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n        } else if (b != 0) {\n            result += a % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmptjn2uxtu: /tmp/tmptjn2uxtu.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpne7ciibs: /tmp/tmpne7ciibs.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            sum += b * a / 10;\n            a /= 10;\n            b /= 10;\n        } else if (b % 10 == 0) {\n            sum += a * b / 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            sum += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpwb3xtswh: /tmp/tmpwb3xtswh.cpp:36: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b % 10;\n            b /= 10;\n        } else if (b % 10 == 0) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpjc7_ty18: /tmp/tmpjc7_ty18.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            a -= b;\n        } else if (a < b) {\n            b -= a;\n        } else {\n            a = 0;\n            b = 0;\n        }\n        product += a % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpc1hlsnny: /tmp/tmpc1hlsnny.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            product += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpj91c0ylx: /tmp/tmpj91c0ylx.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a % 10 == 0 && b % 10 == 0) {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        } else if(a % 10 == 0) {\n            result += a * b;\n            a /= 10;\n        } else if(b % 10 == 0) {\n            result += a * b;\n            b /= 10;\n        } else {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpufghtz31: /tmp/tmpufghtz31.cpp:38: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a != 0) {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0) {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpiwanr5l4: /tmp/tmpiwanr5l4.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while(a || b) {\n        if(a >= b) {\n            sum += a % 10 * b;\n            a /= 10;\n        } else {\n            sum += a * b % 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpq44_ne05: /tmp/tmpq44_ne05.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a) {\n        result += a % 10 * b % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpl8fna67e: /tmp/tmpl8fna67e.cpp:26: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a >= b) {\n            result += a / 10;\n            a = a % 10;\n        } else {\n            result += b / 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293258,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a%10 != 0) {\n            result += b%10;\n            b /= 10;\n        }\n        else {\n            result += a%10 * b%10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293258,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a) {\n        if (a % 10) {\n            result += b;\n        }\n        b *= 10;\n        a /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmp2kz6wgcn: /tmp/tmp2kz6wgcn.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a >= b) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpiju7nbpf: /tmp/tmpiju7nbpf.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a != 0) {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0) {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpiwanr5l4: /tmp/tmpiwanr5l4.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while(a != 0 || b != 0) {\n        if(a != 0) {\n            product += a % 10;\n            a /= 10;\n        }\n        if(b != 0) {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpxfsfjgq2: /tmp/tmpxfsfjgq2.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a) {\n        if(a%10) {\n            result += b%10;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293242,
      "stdout": "",
      "stderr": "tmpsteye2hk: /tmp/tmpsteye2hk.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (b != 0) {\n        if (b % 10 == 0) {\n            product += a;\n        }\n        a *= 10;\n        b /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpn08kw19m: /tmp/tmpn08kw19m.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b % 10;\n            b /= 10;\n        } else if (b % 10 == 0) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpjc7_ty18: /tmp/tmpjc7_ty18.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            sum += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            sum += a;\n            a = 0;\n        } else {\n            sum += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpnaxlqyhz: /tmp/tmpnaxlqyhz.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpvc75_cld: /tmp/tmpvc75_cld.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            product += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            product += a;\n            a = 0;\n        } else {\n            product += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpvv2vg6rm: /tmp/tmpvv2vg6rm.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpve3693s9: /tmp/tmpve3693s9.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if(b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b / 10;\n            a = a * 10 - b * 10;\n            b = b * 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293258,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b % 10;\n            b /= 10;\n        } else if (b % 10 == 0) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpjc7_ty18: /tmp/tmpjc7_ty18.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if(b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b / 10;\n            a = a * 10 - b * 10 + b;\n            b = b * 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmp0o0gj_js: /tmp/tmp0o0gj_js.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b % 10;\n            b /= 10;\n        } else if (b % 10 == 0) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpjc7_ty18: /tmp/tmpjc7_ty18.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a != 0 && b != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else if(a != 0) {\n            result += a % 10 * b;\n            a /= 10;\n        } else {\n            result += a * b;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpcku1zb1q: /tmp/tmpcku1zb1q.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            sum += a % 10;\n            a /= 10;\n        } else {\n            sum += b % 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmp6qpe4pb0: /tmp/tmp6qpe4pb0.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 != 0) {\n            result += b % 10;\n            b /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293254,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            a /= 10;\n            result += b * 10;\n        } else if (b % 10 == 0) {\n            b /= 10;\n            result += a * 10;\n        } else {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmpgmcyid5x: /tmp/tmpgmcyid5x.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while(a != 0 || b != 0) {\n        if(a%10 > 0) {\n            product += a%10 * b;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmpj5lxk0mx: /tmp/tmpj5lxk0mx.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 > 0) {\n            sum += a % 10 * b;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmpym0q5exq: /tmp/tmpym0q5exq.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a >= b) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpiju7nbpf: /tmp/tmpiju7nbpf.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a) {\n        result += a%10 * b%10;\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmpy2km0zjy: /tmp/tmpy2km0zjy.cpp:26: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpve3693s9: /tmp/tmpve3693s9.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            a -= b;\n        } else {\n            b -= a;\n        }\n        result += a * 10;\n        a = b % 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmpgjbvvnpb: /tmp/tmpgjbvvnpb.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while(a) {\n        sum += a%10 * b%10;\n        a /= 10;\n        b /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpq_b8i988: /tmp/tmpq_b8i988.cpp:26: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a) {\n        if(a%10) {\n            result += b%10;\n        }\n        b /= 10;\n        a /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmp0brcxrdx: /tmp/tmp0brcxrdx.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while(a) {\n        sum += a%10 * b%10;\n        a /= 10;\n        b /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpq_b8i988: /tmp/tmpq_b8i988.cpp:26: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            a -= b;\n        } else if (a < b) {\n            b -= a;\n        } else {\n            a = 0;\n            b = 0;\n        }\n        result += a % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "tmpylksb15k: /tmp/tmpylksb15k.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a > b) {\n            result += a % 10;\n            a /= 10;\n        }\n        else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmp1arky03e: /tmp/tmp1arky03e.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            a -= b;\n        } else if (a < b) {\n            b -= a;\n        } else {\n            a = 0;\n            b = 0;\n        }\n        result += a * 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmpf_68sqry: /tmp/tmpf_68sqry.cpp:32: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            a -= b;\n        } else {\n            b -= a;\n        }\n        result += a * b;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293260,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while(a != 0 || b != 0) {\n        if(a%10 == 0) {\n            sum += b%10;\n            b /= 10;\n        } else if(b%10 == 0) {\n            sum += a%10;\n            a /= 10;\n        } else {\n            sum += a%10*b%10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmpllrmwi5n: /tmp/tmpllrmwi5n.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n        else {\n            result += b % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmpo3wrteam: /tmp/tmpo3wrteam.cpp:32: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            product += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            product += a;\n            a = 0;\n        } else {\n            product += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpvv2vg6rm: /tmp/tmpvv2vg6rm.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while(a != 0 || b != 0) {\n        if(a != 0) {\n            product += a % 10;\n            a /= 10;\n        }\n        if(b != 0) {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpxfsfjgq2: /tmp/tmpxfsfjgq2.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if(b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmp4v1y030r: /tmp/tmp4v1y030r.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a) {\n        if(a%10)\n            result += b%10;\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmp5m36gv9k: /tmp/tmp5m36gv9k.cpp:27: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += a * b % 10;\n            a *= 10;\n            b *= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmpds31u0d0: /tmp/tmpds31u0d0.cpp:32: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if(b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmp4v1y030r: /tmp/tmp4v1y030r.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 != 0) {\n            result += b % 10;\n            b /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293254,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += b % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmptf4ertz2: /tmp/tmptf4ertz2.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 != 0) {\n            result += b % 10;\n        }\n        b /= 10;\n        a /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmp2ojzs_f2: /tmp/tmp2ojzs_f2.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a % 10 == 0) {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0) {\n            result += a;\n            a = 0;\n        }\n        else {\n            result += a * b / 10;\n            a = a * 10 - b * 10;\n            b = b * 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293260,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a > 0) {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b > 0) {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmp0p8t3lh_: /tmp/tmp0p8t3lh_.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += a * b % 10;\n            a *= 10;\n            b *= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmpds31u0d0: /tmp/tmpds31u0d0.cpp:32: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if (b != 0) {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmp9dwkxb6_: /tmp/tmp9dwkxb6_.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpve3693s9: /tmp/tmpve3693s9.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            a /= 10;\n            result += b;\n        } else if (b % 10 == 0) {\n            b /= 10;\n            result += a;\n        } else {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmp8gc6ddco: /tmp/tmp8gc6ddco.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            sum += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            sum += a;\n            a = 0;\n        } else {\n            sum += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmp40h_zbab: /tmp/tmp40h_zbab.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if(b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmp4v1y030r: /tmp/tmp4v1y030r.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if(b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmp4v1y030r: /tmp/tmp4v1y030r.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpve3693s9: /tmp/tmpve3693s9.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a >= 10) {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        else {\n            result += a * b;\n            a = 0;\n        }\n        if(b >= 10) {\n            result += b % 10 * a;\n            b /= 10;\n        }\n        else {\n            result += b * a;\n            b = 0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmp6ol_shx5: /tmp/tmp6ol_shx5.cpp:39: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while(a) {\n        sum += a % 10 * b % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmplvnitbdn: /tmp/tmplvnitbdn.cpp:26: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            product += a % 10;\n            a /= 10;\n        } else {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmps0ymtq4u: /tmp/tmps0ymtq4u.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a % 10 == 0) {\n            result += b % 10;\n            b /= 10;\n        }\n        else if(b % 10 == 0) {\n            result += a % 10;\n            a /= 10;\n        }\n        else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmps5nqk6uh: /tmp/tmps5nqk6uh.cpp:36: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a) {\n        sum += a % 10 * b % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmp73d6v1xv: /tmp/tmp73d6v1xv.cpp:26: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 > 0) {\n            result += a % 10 * b;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpl8i7jetz: /tmp/tmpl8i7jetz.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            sum += a % 10;\n            a /= 10;\n        } else {\n            sum += b % 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmp6qpe4pb0: /tmp/tmp6qpe4pb0.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a > 0) {\n            product += a % 10;\n            a /= 10;\n        }\n        if (b > 0) {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmppxxjzbpn: /tmp/tmppxxjzbpn.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b % 10;\n            b /= 10;\n        }\n        else if (b % 10 == 0) {\n            result += a % 10;\n            a /= 10;\n        }\n        else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmp22jpml6o: /tmp/tmp22jpml6o.cpp:36: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            product += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            product += a;\n            a = 0;\n        } else {\n            product += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpdctcprc4: /tmp/tmpdctcprc4.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            a -= b;\n        } else {\n            b -= a;\n        }\n        result += a * 10;\n        a = b;\n        b = result % 10;\n        result /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmpfqmwdawl: /tmp/tmpfqmwdawl.cpp:32: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            a -= b;\n            result += 1;\n        } else {\n            b -= a;\n            result += 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293262,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            product += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpj91c0ylx: /tmp/tmpj91c0ylx.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            product += b % 10;\n            b /= 10;\n        } else if (b % 10 == 0) {\n            product += a % 10;\n            a /= 10;\n        } else {\n            product += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpi1w9th8d: /tmp/tmpi1w9th8d.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a%10 == 0) {\n            result += b%10;\n            b /= 10;\n        }\n        else if(b%10 == 0) {\n            result += a%10;\n            a /= 10;\n        }\n        else {\n            result += a%10 * b%10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpwqqrxbl7: /tmp/tmpwqqrxbl7.cpp:36: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while(a != 0 || b != 0) {\n        if(a != 0) {\n            product += a % 10;\n            a /= 10;\n        }\n        if(b != 0) {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpxfsfjgq2: /tmp/tmpxfsfjgq2.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += b % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmptf4ertz2: /tmp/tmptf4ertz2.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if (b != 0) {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmp9dwkxb6_: /tmp/tmp9dwkxb6_.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a > 0 || b > 0) {\n        if(a > 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n        else if(b > 0) {\n            result += b % 10 * a % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmpxv6gztvl: /tmp/tmpxv6gztvl.cpp:32: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            a -= b;\n        } else {\n            b -= a;\n        }\n        result += a * 10;\n        a = a * 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293262,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n        else {\n            result += b % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmpo3wrteam: /tmp/tmpo3wrteam.cpp:32: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            product += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpj91c0ylx: /tmp/tmpj91c0ylx.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpve3693s9: /tmp/tmpve3693s9.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 != 0) {\n            result += b % 10;\n            b /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293254,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a >= b) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmp1527_yzl: /tmp/tmp1527_yzl.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a > 0 || b > 0) {\n        if(a > 0) {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b > 0) {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmpts8qybqn: /tmp/tmpts8qybqn.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            product += a % 10;\n            a /= 10;\n        } else {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmps0ymtq4u: /tmp/tmps0ymtq4u.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            sum += a % 10;\n            a /= 10;\n        } else {\n            sum += b % 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmp6qpe4pb0: /tmp/tmp6qpe4pb0.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while(a != 0 || b != 0) {\n        if(a > b) {\n            sum += a % 10;\n            a /= 10;\n        } else {\n            sum += b % 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmp7is6b4th: /tmp/tmp7is6b4th.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while(a != 0 || b != 0) {\n        if(a > b) {\n            sum += a % 10;\n            a /= 10;\n        } else {\n            sum += b % 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmp7is6b4th: /tmp/tmp7is6b4th.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a >= b) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmp1527_yzl: /tmp/tmp1527_yzl.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if (b != 0) {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmp9dwkxb6_: /tmp/tmp9dwkxb6_.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            sum += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            sum += b % 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmppnge3fc6: /tmp/tmppnge3fc6.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a != 0) {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if(b != 0) {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmp3vr9b0qx: /tmp/tmp3vr9b0qx.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += b % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmptf4ertz2: /tmp/tmptf4ertz2.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a >= 10) {\n            a -= 10;\n            result += 1;\n        }\n        if(b >= 10) {\n            b -= 10;\n            result += 1;\n        }\n        a *= 10;\n        b *= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293262,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b % 10;\n            b /= 10;\n        } else if (b % 10 == 0) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpjc7_ty18: /tmp/tmpjc7_ty18.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 > 0) {\n            result += a % 10 * b;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpl8i7jetz: /tmp/tmpl8i7jetz.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a) {\n        result += a%10 * b%10;\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmpy2km0zjy: /tmp/tmpy2km0zjy.cpp:26: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a) {\n        if(a%10) {\n            result += b%10;\n            b /= 10;\n        }\n        a /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293249,
      "stdout": "",
      "stderr": "tmpqhmzijyf: /tmp/tmpqhmzijyf.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while(a) {\n        product += a % 10 * b % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpujrqygw6: /tmp/tmpujrqygw6.cpp:26: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 != 0) {\n            result += b % 10;\n            b /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293254,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a > b) {\n            a -= b;\n        } else if(a < b) {\n            b -= a;\n        } else {\n            a = 0;\n            b = 0;\n        }\n        result += a % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293249,
      "stdout": "",
      "stderr": "tmpasmstvxp: /tmp/tmpasmstvxp.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a) {\n        sum += a % 10 * b % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmp73d6v1xv: /tmp/tmp73d6v1xv.cpp:26: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            product += a % 10;\n            a /= 10;\n        } else {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmps0ymtq4u: /tmp/tmps0ymtq4u.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a) {\n        if (a % 10) {\n            result += b;\n        }\n        b *= 10;\n        a /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmp2kz6wgcn: /tmp/tmp2kz6wgcn.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a) {\n        result += a % 10 * b % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293249,
      "stdout": "",
      "stderr": "tmp6g8uy3cg: /tmp/tmp6g8uy3cg.cpp:26: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            product += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpj91c0ylx: /tmp/tmpj91c0ylx.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a) {\n        if (a % 10) {\n            result += b;\n        }\n        a /= 10;\n        b *= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293249,
      "stdout": "",
      "stderr": "tmp8yhm2m5v: /tmp/tmp8yhm2m5v.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a) {\n        if (a % 10) {\n            result += b * (a % 10);\n        }\n        a /= 10;\n        b *= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293249,
      "stdout": "",
      "stderr": "tmps66c3dlh: /tmp/tmps66c3dlh.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a) {\n        if (a % 10) {\n            result += b;\n        }\n        b *= 10;\n        a /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmp2kz6wgcn: /tmp/tmp2kz6wgcn.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while(a != 0 || b != 0) {\n        if(a != 0) {\n            product += a % 10;\n            a /= 10;\n        }\n        if(b != 0) {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpxfsfjgq2: /tmp/tmpxfsfjgq2.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a) {\n        sum += a % 10 * b % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmp73d6v1xv: /tmp/tmp73d6v1xv.cpp:26: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            a /= 10;\n            product += b;\n        } else if (b % 10 == 0) {\n            b /= 10;\n            product += a;\n        } else {\n            product += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293249,
      "stdout": "",
      "stderr": "tmpcj_cg4_t: /tmp/tmpcj_cg4_t.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            sum += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            sum += b % 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmppnge3fc6: /tmp/tmppnge3fc6.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            sum += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            sum += a;\n            a = 0;\n        } else {\n            sum += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "tmp40h_zbab: /tmp/tmp40h_zbab.cpp:34: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a % 10 == 0) {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0) {\n            result += a;\n            a = 0;\n        }\n        else {\n            result += a * b / 10;\n            a = a * 10 - b * 10;\n            b = b * 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293260,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a >= b) {\n            result += a / 10;\n            a %= 10;\n        } else {\n            result += b / 10;\n            b %= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293264,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 > 0) {\n            product += a % 10 * b;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293249,
      "stdout": "",
      "stderr": "tmpnznbx43a: /tmp/tmpnznbx43a.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a >= b) {\n            result += a / 10;\n            a = a % 10;\n        } else {\n            result += b / 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293264,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a >= b) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmpiju7nbpf: /tmp/tmpiju7nbpf.cpp:30: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            a -= b;\n        } else if (a < b) {\n            b -= a;\n        } else {\n            a = 0;\n            b = 0;\n        }\n        result += a * 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "tmpf_68sqry: /tmp/tmpf_68sqry.cpp:32: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293249,
      "stdout": "",
      "stderr": "tmp7wm39qja: /tmp/tmp7wm39qja.cpp:32: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            product += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "tmpj91c0ylx: /tmp/tmpj91c0ylx.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long product = 0;\n    while (b != 0) {\n        if (b % 10 == 0) {\n            product += a;\n        }\n        a *= 10;\n        b /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "tmpn08kw19m: /tmp/tmpn08kw19m.cpp:28: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a > 0) {\n            sum += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n        else {\n            sum += a * b % 10;\n            a *= 10;\n            b *= 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293249,
      "stdout": "",
      "stderr": "tmpigtrpd_t: /tmp/tmpigtrpd_t.cpp:33: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += b % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmptf4ertz2: /tmp/tmptf4ertz2.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long sum = 0;\n    while(a != 0 || b != 0) {\n        sum += a % 10 * b % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "tmpqzu6vr9w: /tmp/tmpqzu6vr9w.cpp:26: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += b % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "tmptf4ertz2: /tmp/tmptf4ertz2.cpp:31: int main(): Assertion `candidate((148), (412)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14,-15)\n// 20\nlong multiply(long a, long b) {\n    long result = 0;\n    while(a != 0 || b != 0) {\n        if(a >= b) {\n            result += a / 10;\n            a = a % 10;\n        } else {\n            result += b / 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n",
      "timestamp": 1664293264,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    }
  ]
}