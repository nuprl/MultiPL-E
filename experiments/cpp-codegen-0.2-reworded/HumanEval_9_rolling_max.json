{
  "name": "HumanEval_9_rolling_max",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given vector of integers, generate a vector of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n",
  "tests": "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n}\n",
  "completions": [
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    long max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], std::max(result.back(), numbers[i])));\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto n : numbers) {\n        if (max_so_far.empty()) {\n            max_so_far.push_back(n);\n        } else {\n            if (n > max_so_far.back()) {\n                max_so_far.push_back(n);\n            } else {\n                max_so_far.pop_back();\n                max_so_far.push_back(n);\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    result.reserve(numbers.size());\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); ++i) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto n : numbers) {\n        if (max_so_far.empty() || max_so_far.back() < n) {\n            max_so_far.push_back(n);\n        } else {\n            max_so_far.pop_back();\n            max_so_far.push_back(n);\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            if (numbers[i] > max_so_far.back()) {\n                max_so_far.push_back(numbers[i]);\n            } else {\n                max_so_far.pop_back();\n                max_so_far.push_back(numbers[i]);\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            if (numbers[i] > max_so_far.back()) {\n                max_so_far.push_back(numbers[i]);\n            } else {\n                max_so_far.pop_back();\n                max_so_far.push_back(numbers[i]);\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) {\n        return result;\n    }\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result[i - 1]) result[i] = numbers[i];\n        else result[i] = result[i - 1];\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> max_numbers;\n    std::vector<long>::iterator it;\n    for (it = numbers.begin(); it != numbers.end(); ++it) {\n        max_numbers.push_back(*it);\n    }\n    std::vector<long>::iterator max_it;\n    for (max_it = max_numbers.begin(); max_it != max_numbers.end(); ++max_it) {\n        for (it = numbers.begin(); it != numbers.end(); ++it) {\n            if (*it > *max_it) {\n                *max_it = *it;\n            }\n        }\n    }\n    return max_numbers;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.empty()) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) result.push_back(numbers[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto n : numbers) {\n        result.push_back(std::max(result.back(), n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], std::max(result.back(), numbers[i])));\n    }\n    return result;",
    "    std::vector<long> result;\n    result.reserve(numbers.size());\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); ++i) {\n        result.push_back(std::max(result[i - 1], numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto n : numbers) {\n        if (max_so_far.empty() || n > max_so_far.back()) {\n            max_so_far.push_back(n);\n        } else {\n            max_so_far.pop_back();\n            max_so_far.push_back(n);\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_numbers;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0) {\n            max_numbers.push_back(numbers[i]);\n        } else {\n            if (numbers[i] > max_numbers[i - 1]) {\n                max_numbers[i - 1] = numbers[i];\n            } else {\n                max_numbers.push_back(numbers[i]);\n            }\n        }\n    }\n    for (int i = 0; i < max_numbers.size(); i++) {\n        result.push_back(max_numbers[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto n : numbers) {\n        if (max_so_far.empty()) {\n            max_so_far.push_back(n);\n        } else {\n            if (n > max_so_far.back()) {\n                max_so_far.push_back(n);\n            } else {\n                max_so_far.pop_back();\n                max_so_far.push_back(n);\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) {\n        return result;\n    }\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result[i - 1]) {\n            result[i] = numbers[i];\n        } else {\n            result[i] = result[i - 1];\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> max_numbers;\n    for (int i = 0; i < numbers.size(); i++) {\n        max_numbers.push_back(std::max(numbers[i], max_numbers.back()));\n    }\n    return max_numbers;",
    "    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > result[i - 1]) {\n            result[i] = numbers[i];\n        } else {\n            result[i] = result[i - 1];\n        }\n    }\n    return result;",
    "    std::vector<long> max_numbers;\n    long max_number = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n        if (max_number < numbers[i]) {\n            max_number = numbers[i];\n        }\n    }\n    max_numbers.push_back(max_number);\n    for (int i = 1; i < numbers.size(); i++) {\n        max_number = max_number < numbers[i] ? numbers[i] : max_number;\n        max_numbers.push_back(max_number);\n    }\n    return max_numbers;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0)\n        return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result[i - 1])\n            result[i] = numbers[i];\n        else\n            result[i] = result[i - 1];\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto number : numbers) {\n        if (max_so_far.empty() || max_so_far.back() < number) {\n            max_so_far.push_back(number);\n        } else {\n            max_so_far.pop_back();\n            max_so_far.push_back(number);\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto i = 0; i < numbers.size(); i++) {\n        if (i == 0) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            if (numbers[i] > max_so_far[i - 1]) {\n                max_so_far[i - 1] = numbers[i];\n            } else {\n                max_so_far.push_back(numbers[i]);\n            }\n        }\n        result.push_back(max_so_far[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto n : numbers) {\n        if (max_so_far.empty() || max_so_far.back() < n) {\n            max_so_far.push_back(n);\n        } else {\n            max_so_far.pop_back();\n            max_so_far.push_back(n);\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (numbers[j] > result[i]) {\n                result[i] = numbers[j];\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) {\n        return result;\n    }\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result[i - 1]) result[i] = numbers[i];\n        else result[i] = result[i - 1];\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result[i - 1]) {\n            result[i] = numbers[i];\n        } else {\n            result[i] = result[i - 1];\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto n : numbers) {\n        if (max_so_far.empty()) {\n            max_so_far.push_back(n);\n        } else {\n            if (n > max_so_far.back()) {\n                max_so_far.push_back(n);\n            } else {\n                max_so_far.pop_back();\n                max_so_far.push_back(n);\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.empty()) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) result.push_back(numbers[i]);\n    }\n    return result;",
    "    std::vector<long> max_numbers;\n    long max_value = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n        }\n        max_numbers.push_back(max_value);\n    }\n    return max_numbers;",
    "    std::vector<long> result;\n    result.reserve(numbers.size());\n    std::vector<long> max_so_far;\n    max_so_far.reserve(numbers.size());\n    for (auto n : numbers) {\n        if (max_so_far.empty() || n > max_so_far.back()) {\n            max_so_far.push_back(n);\n        } else {\n            max_so_far.push_back(n);\n            max_so_far.pop_back();\n            max_so_far.push_back(n);\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (int i = 0; i < numbers.size(); ++i) {\n        if (max_so_far.size() == 0 || max_so_far.back() < numbers[i]) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            max_so_far.pop_back();\n            max_so_far.push_back(numbers[i]);\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) {\n        return result;\n    }\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > result[i - 1]) {\n            result[i] = numbers[i];\n        } else {\n            result[i] = result[i - 1];\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto n : numbers) {\n        result.push_back(std::max(result.back(), n));\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto num : numbers) {\n        if (max_so_far.empty() || max_so_far.back() < num) {\n            max_so_far.push_back(num);\n        } else {\n            max_so_far.pop_back();\n            max_so_far.push_back(num);\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    long max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        } else {\n            result.push_back(max);\n            max = numbers[i];\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result[i - 1]) {\n            result[i] = numbers[i];\n        } else {\n            result[i] = result[i - 1];\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            if (numbers[i] > max_so_far[i - 1]) {\n                max_so_far[i - 1] = numbers[i];\n            } else {\n                max_so_far.push_back(numbers[i]);\n            }\n        }\n        result.push_back(max_so_far[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.empty()) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) result.push_back(numbers[i]);\n        else result.back() = numbers[i];\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;",
    "    std::vector<long> max_numbers;\n    for (int i = 0; i < numbers.size(); i++) {\n        max_numbers.push_back(std::max(numbers[i], max_numbers[i]));\n    }\n    return max_numbers;",
    "    std::vector<long> result;\n    long max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result[i - 1]) result[i] = numbers[i];\n        else result[i] = result[i - 1];\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) result.push_back(numbers[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.empty()) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) result.push_back(numbers[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result[i - 1]) result[i] = numbers[i];\n        else result[i] = result[i - 1];\n    }\n    return result;",
    "    std::vector<long> result;\n    result.reserve(numbers.size());\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto number : numbers) {\n        if (max_so_far.empty()) {\n            max_so_far.push_back(number);\n        } else {\n            if (max_so_far.back() < number) {\n                max_so_far.push_back(number);\n            } else {\n                max_so_far.pop_back();\n                max_so_far.push_back(number);\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (int i = 0; i < numbers.size(); i++) {\n        max_so_far.push_back(numbers[i]);\n        if (i > 0 && numbers[i] > max_so_far[i - 1]) {\n            max_so_far[i - 1] = numbers[i];\n        }\n        result.push_back(max_so_far[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], std::max(result.back(), numbers[i])));\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.empty()) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) result.push_back(numbers[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.empty()) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > result.back()) result.push_back(numbers[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto n : numbers) {\n        result.push_back(std::max(result.back(), n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            if (numbers[i] > max_so_far.back()) {\n                max_so_far.push_back(numbers[i]);\n            } else {\n                max_so_far.pop_back();\n                max_so_far.push_back(numbers[i]);\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    result.reserve(numbers.size());\n    std::vector<long> max_so_far;\n    max_so_far.reserve(numbers.size());\n    for (auto i = 0; i < numbers.size(); i++) {\n        if (i == 0) {\n            max_so_far.push_back(numbers[i]);\n            result.push_back(numbers[i]);\n        } else {\n            if (numbers[i] > max_so_far[i - 1]) {\n                max_so_far[i - 1] = numbers[i];\n                result[i - 1] = numbers[i];\n            } else {\n                max_so_far[i - 1] = max_so_far[i - 1];\n                result[i - 1] = result[i - 1];\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], std::max(result.back(), numbers[i])));\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto i = 0; i < numbers.size(); i++) {\n        if (i == 0) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            if (numbers[i] > max_so_far.back()) {\n                max_so_far.push_back(numbers[i]);\n            } else {\n                max_so_far.pop_back();\n                max_so_far.push_back(numbers[i]);\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], std::max(result.back(), numbers[i])));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (max_so_far.size() == 0 || numbers[i] > max_so_far.back()) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            max_so_far.push_back(max_so_far.back());\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto n : numbers) {\n        if (max_so_far.empty()) {\n            max_so_far.push_back(n);\n        } else {\n            if (n > max_so_far.back()) {\n                max_so_far.push_back(n);\n            } else {\n                max_so_far.pop_back();\n                max_so_far.push_back(n);\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    result.reserve(numbers.size());\n    std::vector<long> max_so_far;\n    max_so_far.reserve(numbers.size());\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            if (numbers[i] > max_so_far[i - 1]) {\n                max_so_far[i - 1] = numbers[i];\n            } else {\n                max_so_far[i - 1] = max_so_far[i - 1];\n            }\n        }\n        result.push_back(max_so_far[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0)\n        return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back())\n            result.push_back(numbers[i]);\n    }\n    return result;",
    "    std::vector<long> max_numbers;\n    max_numbers.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_numbers[i - 1]) {\n            max_numbers[i] = numbers[i];\n        } else {\n            max_numbers[i] = max_numbers[i - 1];\n        }\n    }\n    return max_numbers;",
    "    std::vector<long> max_numbers;\n    for (int i = 0; i < numbers.size(); i++) {\n        max_numbers.push_back(std::max(numbers[i], max_numbers.back()));\n    }\n    return max_numbers;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto i : numbers) {\n        if (max_so_far.empty() || i > max_so_far.back()) {\n            max_so_far.push_back(i);\n        } else {\n            max_so_far.pop_back();\n            max_so_far.push_back(i);\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result[i - 1], numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (numbers[j] > numbers[i]) {\n                result[i] = numbers[j];\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], std::max(result.back(), numbers[i])));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], std::max(result.back(), numbers[i])));\n    }\n    return result;",
    "    std::vector<long> result;\n    long max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;",
    "    std::vector<long> max_numbers;\n    max_numbers.reserve(numbers.size());\n    std::vector<long>::iterator it = numbers.begin();\n    while (it != numbers.end()) {\n        max_numbers.push_back(*it);\n        it++;\n    }\n    it = numbers.begin();\n    while (it != numbers.end()) {\n        max_numbers.push_back(*it);\n        it++;\n    }\n    return max_numbers;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) {\n        return result;\n    }\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (numbers[j] > numbers[i]) {\n                result[i] = numbers[j];\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (result.back() < numbers[i]) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result[i - 1]) {\n            result[i] = numbers[i];\n        } else {\n            result[i] = result[i - 1];\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto n : numbers) {\n        result.push_back(std::max(result.back(), n));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) result.push_back(numbers[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto i = 0; i < numbers.size(); i++) {\n        if (i == 0) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            if (numbers[i] > max_so_far.back()) {\n                max_so_far.push_back(numbers[i]);\n            } else {\n                max_so_far.push_back(max_so_far.back());\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto n : numbers) {\n        result.push_back(std::max(result.back(), n));\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto n : numbers) {\n        if (max_so_far.empty()) {\n            max_so_far.push_back(n);\n        } else {\n            if (n > max_so_far.back()) {\n                max_so_far.push_back(n);\n            } else {\n                max_so_far.pop_back();\n                max_so_far.push_back(n);\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.empty()) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) result.push_back(numbers[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (numbers[j] > numbers[i]) {\n                result[i] = numbers[j];\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    result.reserve(numbers.size());\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); ++i) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;",
    "    std::vector<long> max_numbers;\n    std::vector<long>::iterator it;\n    long max = numbers[0];\n    for (it = numbers.begin(); it != numbers.end(); it++) {\n        if (*it > max) {\n            max = *it;\n        }\n    }\n    max_numbers.push_back(max);\n    for (it = numbers.begin(); it != numbers.end(); it++) {\n        if (*it > max) {\n            max = *it;\n        } else {\n            max_numbers.push_back(max);\n            max = *it;\n        }\n    }\n    return max_numbers;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto number : numbers) {\n        if (max_so_far.empty()) {\n            max_so_far.push_back(number);\n        } else {\n            if (max_so_far.back() < number) {\n                max_so_far.push_back(number);\n            } else {\n                max_so_far.pop_back();\n                max_so_far.push_back(number);\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    long max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        } else {\n            result.push_back(max);\n            max = numbers[i];\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) result.push_back(numbers[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto i : numbers) {\n        if (max_so_far.empty()) {\n            max_so_far.push_back(i);\n        } else {\n            if (i > max_so_far.back()) {\n                max_so_far.push_back(i);\n            } else {\n                max_so_far.pop_back();\n                max_so_far.push_back(i);\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto n : numbers) {\n        result.push_back(std::max(result.back(), n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    long max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    result.reserve(numbers.size());\n    std::vector<long> max_so_far;\n    max_so_far.reserve(numbers.size());\n    for (auto i = 0; i < numbers.size(); ++i) {\n        if (i == 0) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            if (numbers[i] > max_so_far[i - 1]) {\n                max_so_far[i] = numbers[i];\n            } else {\n                max_so_far[i] = max_so_far[i - 1];\n            }\n        }\n        result.push_back(max_so_far[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result[i - 1]) result[i] = numbers[i];\n        else result[i] = result[i - 1];\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) result.push_back(numbers[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (numbers[j] > result[i]) {\n                result[i] = numbers[j];\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (numbers[j] > numbers[i]) {\n                result[i] = numbers[j];\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    result.reserve(numbers.size());\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto n : numbers) {\n        result.push_back(std::max(result.back(), n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], std::max(result.back(), numbers[i])));\n    }\n    return result;",
    "    std::vector<long> max_numbers;\n    max_numbers.reserve(numbers.size());\n    max_numbers.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_numbers[i - 1]) {\n            max_numbers[i] = numbers[i];\n        } else {\n            max_numbers[i] = max_numbers[i - 1];\n        }\n    }\n    return max_numbers;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result[i - 1]) result[i] = numbers[i];\n        else result[i] = result[i - 1];\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto n : numbers) {\n        result.push_back(std::max(result.back(), n));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) {\n        return result;\n    }\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> max_numbers;\n    std::vector<long>::iterator it;\n    for (it = numbers.begin(); it != numbers.end(); ++it) {\n        max_numbers.push_back(*it);\n    }\n    for (it = numbers.begin(); it != numbers.end(); ++it) {\n        max_numbers.push_back(*it);\n        max_numbers.erase(max_numbers.begin());\n    }\n    return max_numbers;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result[i - 1]) result[i] = numbers[i];\n        else result[i] = result[i - 1];\n    }\n    return result;",
    "    std::vector<long> max_numbers;\n    max_numbers.reserve(numbers.size());\n    max_numbers.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_numbers[i - 1]) {\n            max_numbers[i] = numbers[i];\n        } else {\n            max_numbers[i] = max_numbers[i - 1];\n        }\n    }\n    return max_numbers;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto n : numbers) {\n        if (max_so_far.empty()) {\n            max_so_far.push_back(n);\n        } else {\n            if (n > max_so_far.back()) {\n                max_so_far.push_back(n);\n            } else {\n                max_so_far.pop_back();\n                max_so_far.push_back(n);\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (max_so_far.empty() || max_so_far.back() < numbers[i]) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            max_so_far.pop_back();\n            max_so_far.push_back(numbers[i]);\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto i = 0; i < numbers.size(); i++) {\n        if (max_so_far.size() == 0) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            if (numbers[i] > max_so_far[0]) {\n                max_so_far[0] = numbers[i];\n            }\n        }\n        result.push_back(max_so_far[0]);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result[i - 1]) {\n            result[i] = numbers[i];\n        } else {\n            result[i] = result[i - 1];\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.empty()) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result[i - 1]) result[i] = numbers[i];\n        else result[i] = result[i - 1];\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.empty()) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > result[i - 1]) {\n            result[i] = numbers[i];\n        } else {\n            result[i] = result[i - 1];\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    result.reserve(numbers.size());\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (result.back() < numbers[i]) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (max_so_far.size() == 0) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            if (numbers[i] > max_so_far.back()) {\n                max_so_far.push_back(numbers[i]);\n            } else {\n                max_so_far.pop_back();\n                max_so_far.push_back(numbers[i]);\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) {\n        return result;\n    }\n    std::vector<long> max_so_far;\n    max_so_far.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far.back()) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            max_so_far.pop_back();\n            max_so_far.push_back(numbers[i]);\n        }\n    }\n    result.push_back(max_so_far.back());\n    for (int i = numbers.size() - 2; i >= 0; i--) {\n        if (numbers[i] > max_so_far.back()) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            max_so_far.pop_back();\n            max_so_far.push_back(numbers[i]);\n        }\n    }\n    result.push_back(max_so_far.back());\n    return result;",
    "    std::vector<long> result;\n    if (numbers.empty()) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > result[i - 1]) result[i] = numbers[i];\n        else result[i] = result[i - 1];\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (long i = 0; i < numbers.size(); i++) {\n        if (max_so_far.empty() || max_so_far.back() < numbers[i]) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            max_so_far.pop_back();\n            max_so_far.push_back(numbers[i]);\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.empty()) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) result.push_back(numbers[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    long max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    result.reserve(numbers.size());\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (numbers.size() == 0) return result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result[i - 1]) result[i] = numbers[i];\n        else result[i] = result[i - 1];\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (numbers[j] > numbers[i]) {\n                result[i] = numbers[j];\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    long max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;",
    "    std::vector<long> max_numbers;\n    std::vector<long>::iterator it;\n    for (it = numbers.begin(); it != numbers.end(); ++it) {\n        if (max_numbers.empty()) {\n            max_numbers.push_back(*it);\n        } else {\n            if (*it > max_numbers.back()) {\n                max_numbers.push_back(*it);\n            } else {\n                max_numbers.pop_back();\n                max_numbers.push_back(*it);\n            }\n        }\n    }\n    return max_numbers;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result[i-1], numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (numbers[j] > numbers[i]) {\n                result[i] = numbers[j];\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (max_so_far.size() == 0 || numbers[i] > max_so_far[max_so_far.size() - 1]) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            max_so_far[max_so_far.size() - 1] = numbers[i];\n        }\n        result.push_back(max_so_far[max_so_far.size() - 1]);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> max_so_far;\n    for (auto n : numbers) {\n        if (max_so_far.empty()) {\n            max_so_far.push_back(n);\n        } else {\n            if (n > max_so_far.back()) {\n                max_so_far.push_back(n);\n            } else {\n                max_so_far.pop_back();\n                max_so_far.push_back(n);\n            }\n        }\n        result.push_back(max_so_far.back());\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    long max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;",
    "    std::vector<long> result;\n    result.reserve(numbers.size());\n    std::vector<long> max_so_far;\n    max_so_far.reserve(numbers.size());\n    for (auto i = 0; i < numbers.size(); i++) {\n        if (i == 0) {\n            max_so_far.push_back(numbers[i]);\n        } else {\n            if (numbers[i] > max_so_far[i - 1]) {\n                max_so_far[i] = numbers[i];\n            } else {\n                max_so_far[i] = max_so_far[i - 1];\n            }\n        }\n        result.push_back(max_so_far[i]);\n    }\n    return result;",
    "    std::vector<long> max_numbers(numbers.size());\n    for (int i = 0; i < numbers.size(); i++) {\n        max_numbers[i] = std::max(numbers[i], max_numbers[i]);\n    }\n    return max_numbers;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n        for (int j = i + 1; j < numbers.size(); ++j) {\n            if (numbers[j] > numbers[i]) {\n                result[i] = numbers[j];\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > result.back()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    result.reserve(numbers.size());\n    for (auto i = 0; i < numbers.size(); ++i) {\n        result.push_back(std::max(numbers[i], result.back()));\n    }\n    return result;",
    "    std::vector<long> max_numbers;\n    std::vector<long>::iterator it;\n    long max_value = numbers[0];\n    max_numbers.push_back(max_value);\n    for (it = numbers.begin() + 1; it != numbers.end(); it++) {\n        if (*it > max_value) {\n            max_value = *it;\n            max_numbers.clear();\n            max_numbers.push_back(max_value);\n        } else if (*it == max_value) {\n            max_numbers.push_back(*it);\n        }\n    }\n    return max_numbers;",
    "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        result.push_back(std::max(result.back(), numbers[i]));\n    }\n    return result;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}