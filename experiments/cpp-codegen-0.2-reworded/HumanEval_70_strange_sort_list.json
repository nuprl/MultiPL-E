{
  "name": "HumanEval_70_strange_sort_list",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers, return vector in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n",
  "tests": "}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0, (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5, (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111}))) == (std::vector<long>({(long)111111})));\n}\n",
  "completions": [
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        long min = *it;\n        long max = *it;\n        it++;\n        for (; it != lst.end(); it++) {\n            if (*it < min) {\n                min = *it;\n            }\n            if (*it > max) {\n                max = *it;\n            }\n        }\n        result.push_back(max);\n        result.push_back(min);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::vector<long>::iterator min_it = std::min_element(lst.begin(), lst.end());\n    std::vector<long>::iterator max_it = std::max_element(lst.begin(), lst.end());\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it == *min_it) {\n            result.push_back(*max_it);\n        } else if (*it == *max_it) {\n            result.push_back(*min_it);\n        } else {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_back(*it);\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < lst[i - 1]) {\n            std::swap(lst[i], lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_back(*it);\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (i + 1 < lst.size()) {\n            result.push_back(lst[i + 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    for (it = lst.begin() + 1; it != lst.end(); it++) {\n        long min = *it;\n        long max = *it;\n        for (std::vector<long>::iterator it2 = it + 1; it2 != lst.end(); it2++) {\n            if (*it2 < min) {\n                min = *it2;\n            }\n            if (*it2 > max) {\n                max = *it2;\n            }\n        }\n        result.push_back(max);\n        result.push_back(min);\n    }\n    for (it = lst.begin() + 2; it != lst.end(); it++) {\n        result.push_back(*it);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    result.push_back(lst[lst.size() - 1]);\n    for (int i = 1; i < lst.size() - 1; i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] == lst[i - 1]) {\n            std::vector<long>::iterator it = lst.begin();\n            it++;\n            it++;\n            lst[i] = *it;\n        }\n    }\n    result.push_back(lst[lst.size() - 1]);\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) continue;\n        result.push_back(lst[i]);\n    }\n    result.push_back(lst[lst.size() - 1]);\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator min_it = lst.begin();\n    std::vector<long>::iterator max_it = lst.begin();\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    std::vector<long>::iterator it = min_it;\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (it == max_it) {\n            it = lst.end() - 1;\n        }\n        if (it != min_it) {\n            result.push_back(*it);\n        }\n        it = it - 1;\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        long min = *it;\n        long max = *it;\n        it++;\n        for (; it != lst.end(); it++) {\n            if (*it < min) min = *it;\n            if (*it > max) max = *it;\n        }\n        result.push_back(max);\n        result.push_back(min);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::vector<long>::iterator min_it = std::min_element(lst.begin(), lst.end());\n    result.push_back(*min_it);\n    lst.erase(min_it);\n    std::vector<long>::iterator max_it = std::max_element(lst.begin(), lst.end());\n    lst.erase(max_it);\n    std::vector<long>::iterator it = lst.begin();\n    while (it != lst.end()) {\n        result.push_back(*it);\n        it = lst.erase(it);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (it = lst.begin() + 1; it != lst.end(); it++) {\n        if (*it < result[result.size() - 1]) {\n            result.push_back(*it);\n        } else {\n            result.push_back(result[result.size() - 1]);\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < result[0]) {\n            result[0] = lst[i];\n        } else if (lst[i] > result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            int j = 0;\n            for (j = 0; j < result.size(); j++) {\n                if (lst[i] < result[j]) {\n                    result[j] = lst[i];\n                    break;\n                }\n            }\n            if (j == result.size()) {\n                result.push_back(lst[i]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n            i++;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > result[0]) {\n            result.push_back(lst[i]);\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    result.push_back(lst[lst.size() - 1]);\n    for (int i = 1; i < lst.size() - 1; i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        std::swap(lst[i], lst[lst.size() - 1 - i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > lst[i - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    for (int i = lst.size() - 2; i >= 0; i--) {\n        if (lst[i] > lst[i + 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        result.push_back(*it);\n        std::vector<long>::iterator it2 = it;\n        it2++;\n        for (; it2 != lst.end(); it2++) {\n            if (*it2 < *it) {\n                std::swap(*it, *it2);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); ++i) {\n        result.push_back(lst[i]);\n        if (i + 1 < lst.size()) {\n            result.push_back(lst[i + 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            int j = result.size() - 1;\n            while (j >= 0 && lst[i] < result[j]) {\n                j--;\n            }\n            result.insert(result.begin() + j + 1, lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    while (it != lst.end()) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n            it = lst.erase(it);\n        } else {\n            it++;\n        }\n    }\n    std::vector<long>::iterator it2 = lst.begin();\n    while (it2 != lst.end()) {\n        result.push_back(*it2);\n        it2++;\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_back(result.back());\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (i != 0 && i != lst.size() - 1) {\n            std::swap(lst[i], lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            int j = result.size() - 1;\n            while (lst[i] < result[j]) {\n                j--;\n            }\n            result.insert(result.begin() + j + 1, lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    result.push_back(lst[lst.size() - 1]);\n    for (int i = 1; i < lst.size() - 1; i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_back(*it);\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > lst[i - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    result.push_back(lst[lst.size() - 1]);\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > result.back()) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        for (int j = i + 1; j < lst.size(); j++) {\n            if (lst[i] > lst[j]) {\n                lst[i] = lst[i] + lst[j];\n                lst[j] = lst[i] - lst[j];\n                lst[i] = lst[i] - lst[j];\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (i + 1 < lst.size()) {\n            result.push_back(lst[i + 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::vector<long>::iterator min_it = lst.begin();\n    std::vector<long>::iterator max_it = lst.begin();\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) min_it = it;\n        if (*it > *max_it) max_it = it;\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it == *min_it) continue;\n        if (*it == *max_it) continue;\n        result.push_back(*it);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (it = lst.begin() + 1; it != lst.end(); it++) {\n        result.push_back(*it);\n        result.push_back(*it);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > lst[i - 1]) {\n            std::reverse(result.begin(), result.end());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::vector<long>::iterator min_it = lst.begin();\n    std::vector<long>::iterator max_it = lst.begin();\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (it = lst.begin() + 1; it != lst.end(); it++) {\n        result.push_back(*it);\n        result.push_back(*it);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_back(result.back());\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    if (lst.size() == 0) return result;\n    result.push_back(lst[0]);\n    for (it = lst.begin() + 1; it != lst.end(); it++) {\n        if (*it < result[0]) {\n            result[0] = *it;\n        }\n        if (*it > result[result.size() - 1]) {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    for (it++; it != lst.end(); it++) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_back(*it);\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (i < lst.size() - 1) {\n            result.push_back(lst[lst.size() - 1 - i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        result.push_back(*it);\n        std::vector<long>::iterator it2 = it;\n        it2++;\n        for (; it2 != lst.end(); it2++) {\n            if (*it2 < *it) {\n                result.push_back(*it2);\n                result.push_back(*it);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    for (it++; it != lst.end(); it++) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_back(result.back());\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (i < lst.size() - 1) {\n            result.push_back(lst[lst.size() - 1 - i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    for (; it != lst.end(); ++it) {\n        if (*it > result.back()) {\n            result.push_back(*it);\n        } else {\n            result.insert(result.begin(), *it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    result.push_back(lst[lst.size() - 1]);\n    for (int i = 1; i < lst.size() - 1; i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    result.push_back(lst[lst.size() - 1]);\n    for (int i = 1; i < lst.size() - 1; i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > result.back()) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(result.back());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    for (it++; it != lst.end(); it++) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_front(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_front(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::vector<long>::iterator min_it = std::min_element(lst.begin(), lst.end());\n    std::vector<long>::iterator max_it = std::max_element(lst.begin(), lst.end());\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it == *min_it) {\n            min_it++;\n        }\n        if (*it == *max_it) {\n            max_it--;\n        }\n        result.push_back(*it);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    for (it++; it != lst.end(); it++) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_back(result.back());\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] == lst[i - 1]) {\n            std::vector<long>::iterator it = lst.begin();\n            it += i;\n            result.push_back(*it);\n            lst.erase(it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator min_it = lst.begin();\n    std::vector<long>::iterator max_it = lst.begin();\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); it++) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); it++) {\n        if (*it < *min_it) {\n            result.push_back(*it);\n        }\n    }\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); it++) {\n        if (*it > *max_it) {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    for (it++; it != lst.end(); it++) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_back(result.back());\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > result.back()) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(result.back());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] == lst[i - 1]) {\n            continue;\n        }\n        int j = i - 1;\n        while (j >= 0 && lst[i] < lst[j]) {\n            std::swap(lst[i], lst[j]);\n            j--;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > lst[i - 1]) {\n            std::swap(lst[i], lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_front(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    for (it = lst.begin(); it != lst.end(); it++) {\n        if (*it > result.back()) {\n            result.push_back(*it);\n        }\n    }\n    for (it = lst.begin(); it != lst.end(); it++) {\n        if (*it < result.front()) {\n            result.push_front(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator min_it = lst.begin();\n    std::vector<long>::iterator max_it = lst.begin();\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); it++) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    std::vector<long>::iterator it = lst.begin();\n    while (it != lst.end()) {\n        if (*it < *min_it) {\n            it = lst.erase(it);\n        } else if (*it > *max_it) {\n            it = lst.erase(it);\n        } else {\n            it++;\n        }\n    }\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); it++) {\n        result.push_back(*it);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator min_it = lst.begin();\n    std::vector<long>::iterator max_it = lst.begin();\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    result.push_back(lst[lst.size() - 1]);\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_back(*it);\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (it = lst.begin() + 1; it != lst.end(); it++) {\n        result.push_back(*it);\n        result.push_back(*it);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        std::vector<long>::iterator it = lst.begin();\n        std::advance(it, i);\n        std::swap(*it, lst[0]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    int size = lst.size();\n    int i = 0;\n    int j = size - 1;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n            std::swap(lst[i], lst[j]);\n        }\n        i++;\n        j--;\n    }\n    for (int k = 0; k < size; k++) {\n        result.push_back(lst[k]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    if (lst.size() == 0)\n        return result;\n    it = lst.begin();\n    result.push_back(*it);\n    lst.erase(it);\n    while (lst.size() > 0) {\n        it = lst.begin();\n        long min = *it;\n        lst.erase(it);\n        it = lst.begin();\n        long max = *it;\n        lst.erase(it);\n        it = lst.begin();\n        long min2 = *it;\n        lst.erase(it);\n        it = lst.begin();\n        long max2 = *it;\n        lst.erase(it);\n        result.push_back(min);\n        result.push_back(max);\n        result.push_back(min2);\n        result.push_back(max2);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (it = lst.begin() + 1; it != lst.end(); it++) {\n        result.push_back(*it);\n        result.push_back(*it);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(result[result.size() - 1]);\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) continue;\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    result.push_back(lst[lst.size() - 1]);\n    for (int i = 1; i < lst.size() - 1; i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    result.push_back(lst[lst.size() - 1]);\n    for (int i = 1; i < lst.size() - 1; i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::vector<long>::iterator min_it = lst.begin();\n    std::vector<long>::iterator max_it = lst.begin();\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it)",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > lst[i - 1]) {\n            std::reverse(result.begin(), result.end());\n            return result;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > lst[i - 1]) {\n            std::swap(lst[i], lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        long min = *it;\n        long max = result.back();\n        result.pop_back();\n        result.push_back(max);\n        result.push_back(min);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > lst[i - 1]) {\n            std::reverse(result.begin(), result.end());\n            return result;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (i + 1 < lst.size()) {\n            result.push_back(lst[i + 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < result[0]) {\n            result.push_back(lst[i]);\n        } else if (lst[i] > result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > result.back()) {\n            result.push_back(lst[i]);\n        }\n    }\n    for (int i = lst.size() - 1; i >= 0; i--) {\n        if (lst[i] < result.front()) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    result.push_back(lst[lst.size() - 1]);\n    for (int i = 1; i < lst.size() - 1; i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > result.back()) result.push_back(lst[i]);\n        else {\n            int j = i;\n            while (lst[j] < result.back()) {\n                result.push_back(lst[j]);\n                j++;\n            }\n            result.push_back(lst[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator min_it = std::min_element(lst.begin(), lst.end());\n    result.push_back(*min_it);\n    lst.erase(min_it);\n    std::vector<long>::iterator max_it = std::max_element(lst.begin(), lst.end());\n    lst.erase(max_it);\n    std::vector<long>::iterator it = lst.begin();\n    while (it != lst.end()) {\n        result.push_back(*it);\n        it = lst.erase(it);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(result[result.size() - 1]);\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    while (it != lst.end()) {\n        long min = *it;\n        long max = *it;\n        it++;\n        while (it != lst.end()) {\n            if (*it < min) {\n                min = *it;\n            }\n            if (*it > max) {\n                max = *it;\n            }\n            it++;\n        }\n        result.push_back(max);\n        result.push_back(min);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (i % 2 == 0) {\n            result.push_back(lst[lst.size() - i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (i < lst.size() - 1) {\n            result.push_back(lst[lst.size() - 1 - i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    for (it = lst.begin() + 1; it != lst.end(); it++) {\n        if (*it < *(it - 1)) {\n            result.push_back(*it);\n            result.push_back(*(it - 1));\n        }\n    }\n    for (it = lst.begin(); it != lst.end(); it++) {\n        if (*it < *(it + 1)) {\n            result.push_back(*it);\n            result.push_back(*(it + 1));\n        }\n    }\n    for (it = lst.begin(); it != lst.end(); it++) {\n        if (*it < *(it - 1)) {\n            result.push_back(*it);\n            result.push_back(*(it - 1));\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::vector<long>::iterator min_it = lst.begin();\n    std::vector<long>::iterator max_it = lst.begin();\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        ",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    while (it != lst.end()) {\n        result.push_back(*it);\n        it++;\n        if (it != lst.end()) {\n            result.push_back(*it);\n            it++;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        long min = *it;\n        long max = *it;\n        it++;\n        for (; it != lst.end(); it++) {\n            if (*it < min) {\n                min = *it;\n            }\n            if (*it > max) {\n                max = *it;\n            }\n        }\n        result.push_back(min);\n        result.push_back(max);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    result.push_back(lst[lst.size() - 1]);\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    for (++it; it != lst.end(); ++it) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_back(*it);\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    for (++it; it != lst.end(); ++it) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_back(result.back());\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::vector<long>::iterator min_it = std::min_element(lst.begin(), lst.end());\n    std::vector<long>::iterator max_it = std::max_element(lst.begin(), lst.end());\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            result.push_back(*it);\n        } else if (*it > *max_it) {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > result.back()) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (it = lst.begin() + 1; it != lst.end(); it++) {\n        if (*it < result[result.size() - 1]) {\n            result.push_back(*it);\n        } else {\n            result.push_back(result[result.size() - 1]);\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > lst[i - 1]) {\n            std::swap(lst[i], lst[i - 1]);\n        }\n    }\n    result.push_back(lst[lst.size() - 1]);\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::vector<long>::iterator min_it = lst.begin();\n    std::vector<long>::iterator max_it = lst.begin();\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < *min_it) {\n            min_it = it;\n        }\n        if (*it > *max_it) {\n            max_it = it;\n        }\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); ++it) {\n        ",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        std::vector<long>::iterator it = lst.begin();\n        std::advance(it, i);\n        result.push_back(*it);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    for (++it; it != lst.end(); ++it) {\n        if (*it < result.back()) {\n            result.push_back(*it);\n        } else {\n            result.push_back(*it);\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        } else if (lst[i] < result[0]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        long max = *it;\n        long min = *it;\n        for (std::vector<long>::iterator it2 = it; it2 != lst.end(); it2++) {\n            if (*it2 > max) max = *it2;\n            if (*it2 < min) min = *it2;\n        }\n        result.push_back(max);\n        result.push_back(min);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        std::vector<long>::iterator it = lst.begin();\n        std::advance(it, i);\n        std::swap(*it, lst[0]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        long min = *it;\n        long max = *it;\n        it++;\n        for (; it != lst.end(); it++) {\n            if (*it < min) min = *it;\n            if (*it > max) max = *it;\n        }\n        result.push_back(max);\n        result.push_back(min);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] == lst[i - 1]) {\n            std::vector<long>::iterator it = lst.begin();\n            std::advance(it, i);\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > lst[i - 1]) {\n            result.push_back(lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    it++;\n    for (; it != lst.end(); it++) {\n        result.push_back(*it);\n        std::vector<long>::iterator it2 = it;\n        it2++;\n        for (; it2 != lst.end(); it2++) {\n            if (*it2 < *it) {\n                result.push_back(*it2);\n                result.push_back(*it);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > result.back()) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(result.back());\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    result.push_back(lst[lst.size() - 1]);\n    for (int i = 1; i < lst.size() - 1; i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > lst[i - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    result.push_back(lst[lst.size() - 1]);\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > result[result.size() - 2]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator min_it = lst.begin();\n    std::vector<long>::iterator max_it = lst.begin();\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); it++) {\n        if (*it < *min_it) min_it = it;\n        if (*it > *max_it) max_it = it;\n    }\n    result.push_back(*min_it);\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); it++) {\n        if (*it < *min_it) min_it = it;\n        if (*it > *max_it) max_it = it;\n    }\n    result.push_back(*min_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); it++) {\n        if (*it < *min_it) min_it = it;\n        if (*it > *max_it) max_it = it;\n    }\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); it++) {\n        if (*it < *min_it) min_it = it;\n        if (*it > *max_it) max_it = it;\n    }\n    result.push_back(*min_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); it++) {\n        if (*it < *min_it) min_it = it;\n        if (*it > *max_it) max_it = it;\n    }\n    result.push_back(*max_it);\n    for (std::vector<long>::iterator it = lst.begin(); it != lst.end(); it++) {\n        if (*it < *min_it) min_it = it;\n        ",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        int min_index = 0;\n        for (int j = 1; j < lst.size(); j++) {\n            if (lst[j] < lst[min_index]) min_index = j;\n        }\n        result.push_back(lst[min_index]);\n        lst[min_index] = lst[i];\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] > lst[i-1]) {\n            result.push_back(lst[i-1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long>::iterator it = lst.begin();\n    result.push_back(*it);\n    for (it++; it != lst.end(); it++) {\n        result.push_back(*it);\n        if (*it > result.back()) {\n            result.pop_back();\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    result.push_back(lst[lst.size() - 1]);\n    for (int i = 1; i < lst.size() - 1; i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            continue;\n        }\n        result.push_back(lst[i]);\n    }\n    result.push_back(lst[lst.size() - 1]);\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i - 1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (i > 1 && lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n            i++;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] == lst[i-1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        std::sort(lst.begin() + i, lst.end());\n        std::reverse(lst.begin() + i, lst.end());\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < result[result.size() - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        if (lst[i] < lst[i - 1]) {\n            std::reverse(result.begin(), result.end());\n            return result;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it_end = lst.end();\n    if (lst.empty()) return result;\n    it = lst.begin();\n    result.push_back(*it);\n    it++;\n    while (it != it_end) {\n        if (*it < *result.rbegin()) {\n            result.push_back(*it);\n            it++;\n        } else {\n            it = lst.erase(it);\n        }\n    }\n    result.push_back(*result.rbegin());\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > result.back()) {\n            result.push_back(lst[i]);\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > result.back()) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (it = lst.begin() + 1; it != lst.end(); it++) {\n        result.push_back(*it);\n        result.push_back(*it);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    result.push_back(lst[lst.size() - 1]);\n    for (int i = 1; i < lst.size() - 1; i++) {\n        result.push_back(lst[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n        for (int j = 0; j < i; j++) {\n            if (lst[j] > lst[i]) {\n                result.push_back(lst[j]);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > result.back()) {\n            result.push_back(lst[i]);\n        }\n    }\n    for (int i = lst.size() - 1; i >= 0; i--) {\n        if (lst[i] < result.front()) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            result.push_back(lst[i]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i - 1]);\n        }\n    }\n    return result;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}