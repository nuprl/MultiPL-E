name: HumanEval_47_median
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
  \ in the vector l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
  \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
  \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
  \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
  \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
  \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
completions: ["    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \ std::sort(l.begin(), l.end());\n  if (l.size() % 2 == 1)\n    return l[l.size()\
    \ / 2];\n  else\n    return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "  std::sort(l.begin(), l.end());\n  if (l.size() % 2 == 0) {\n    return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n  }\n  return l[l.size() / 2];",
  "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\n\
    \        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    else\n        return l[n\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "  std::sort(l.begin(),\
    \ l.end());\n  if (l.size() % 2 == 0) {\n    return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n  } else {\n    return l[l.size() / 2];\n  }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 1) {\n        return l[n\
    \ / 2];\n    } else {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }",
  "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 1) {\n        return l[l.size() / 2];\n \
    \   } else {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    }", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n \
    \       return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 1) {\n        return l[l.size() / 2];\n    } else {\n        return (l[l.size()\
    \ / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 1) {\n        return l[l.size() / 2];\n    } else {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "  std::sort(l.begin(),\
    \ l.end());\n  if (l.size() % 2 == 0) {\n    return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n  }\n  return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 1)\n        return l[n /\
    \ 2];\n    else\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ }\n    return l[l.size() / 2];", "    if (l.size() == 0) {\n        return 0;\n\
    \    }\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n   \
    \     return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ }\n    return l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1])\
    \ / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "   \
    \ std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ }\n    return l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1])\
    \ / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 1) {\n        return l[l.size() / 2];\n \
    \   } else {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    }", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n \
    \       return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    if (l.size() ==\
    \ 0) return 0;\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0)\
    \ {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    } else {\n\
    \        return l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n == 0) return 0;\n    if (n % 2 ==\
    \ 1) return l[n / 2];\n    else return (l[n / 2] + l[n / 2 - 1]) / 2.0;", "  \
    \  std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[l.size() / 2];\n    }", "  std::sort(l.begin(), l.end());\n\
    \  if (l.size() % 2 == 0) {\n    return (l[l.size() / 2] + l[l.size() / 2 - 1])\
    \ / 2.0;\n  } else {\n    return l[l.size() / 2];\n  }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "  std::sort(l.begin(),\
    \ l.end());\n  if (l.size() % 2 == 0) {\n    return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n  }\n  return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    }\n    return l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n  \
    \  if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2\
    \ - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 1)\n        return\
    \ l[l.size() / 2];\n    else\n        return (l[l.size() / 2] + l[l.size() / 2\
    \ - 1]) / 2.0;", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 ==\
    \ 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "   \
    \ std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "  std::sort(l.begin(), l.end());\n  if (l.size() % 2 ==\
    \ 0) {\n    return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n  }\n  return\
    \ l[l.size() / 2];", "  std::sort(l.begin(), l.end());\n  if (l.size() % 2 ==\
    \ 0) {\n    return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n  } else {\n\
    \    return l[l.size() / 2];\n  }", "    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 1)\n        return l[l.size() / 2];\n    else\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "   \
    \ std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 1)\n        return l[l.size()\
    \ / 2];\n    else\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;",
  "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ } else {\n        return l[l.size() / 2];\n    }", "  std::sort(l.begin(), l.end());\n\
    \  if (l.size() % 2 == 1)\n    return l[l.size() / 2];\n  else\n    return (l[l.size()\
    \ / 2] + l[l.size() / 2 - 1]) / 2.0;", "    std::sort(l.begin(), l.end());\n \
    \   if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2\
    \ - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "  std::sort(l.begin(), l.end());\n  if (l.size() % 2 ==\
    \ 0) {\n    return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n  }\n  return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 1) {\n        return l[l.size() / 2];\n    } else {\n        return (l[l.size()\
    \ / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "   \
    \ std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 1)\n  \
    \      return l[l.size() / 2];\n    else\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    }\n    return l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n  \
    \  if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2\
    \ - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 1) {\n        return l[l.size() / 2];\n \
    \   } else {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    }", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n \
    \       return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 1)\n        return l[l.size() / 2];\n    else\n        return (l[l.size()\
    \ / 2] + l[l.size() / 2 - 1]) / 2.0;", "    std::sort(l.begin(), l.end());\n \
    \   if (l.size() % 2 == 1) {\n        return l[l.size() / 2];\n    } else {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 1)\n        return l[n /\
    \ 2];\n    else\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \ std::sort(l.begin(), l.end());\n  if (l.size() % 2 == 0) {\n    return (l[l.size()\
    \ / 2] + l[l.size() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.size() / 2];\n\
    \  }", "    if (l.size() == 0) {\n        return 0;\n    }\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n == 0)\n        return 0;\n    if\
    \ (n % 2 == 1)\n        return l[n / 2];\n    else\n        return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;", "  std::sort(l.begin(), l.end());\n  if (l.size() % 2\
    \ == 0) {\n    return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n  } else\
    \ {\n    return l[l.size() / 2];\n  }", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "   \
    \ std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ }\n    return l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    if (n % 2 == 1)\n        return l[n / 2];\n    else\n   \
    \     return (l[n / 2 - 1] + l[n / 2]) / 2.0;", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \ std::sort(l.begin(), l.end());\n  if (l.size() % 2 == 0) {\n    return (l[l.size()\
    \ / 2] + l[l.size() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.size() / 2];\n\
    \  }", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 1)\n     \
    \   return l[l.size() / 2];\n    else\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 1)\n        return l[l.size() / 2];\n    else\n        return (l[l.size()\
    \ / 2] + l[l.size() / 2 - 1]) / 2;", "    std::sort(l.begin(), l.end());\n   \
    \ if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 -\
    \ 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 1)\n        return l[l.size() / 2];\n   \
    \ else\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;", "  assert(l.size()\
    \ > 0);\n  std::sort(l.begin(), l.end());\n  if (l.size() % 2 == 0) {\n    return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n  }\n  return l[l.size() / 2];",
  "  assert(!l.empty());\n  std::sort(l.begin(), l.end());\n  if (l.size() % 2 ==\
    \ 0) {\n    return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n  }\n  return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 1) {\n        return l[l.size() / 2];\n    } else {\n        return (l[l.size()\
    \ / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 1)\n        return l[l.size() / 2];\n   \
    \ else\n        return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 1) {\n\
    \        return l[l.size() / 2];\n    } else {\n        return (l[l.size() / 2]\
    \ + l[l.size() / 2 - 1]) / 2.0;\n    }", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "  std::sort(l.begin(),\
    \ l.end());\n  if (l.size() % 2 == 0) {\n    return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n  } else {\n    return l[l.size() / 2];\n  }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 1) {\n        return l[l.size() / 2];\n \
    \   } else {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    }", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n \
    \       return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    }\n    return l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n  \
    \  if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2\
    \ - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 1)\n        return l[l.size() / 2];\n    else\n        return (l[l.size()\
    \ / 2] + l[l.size() / 2 - 1]) / 2.0;", "    std::sort(l.begin(), l.end());\n \
    \   if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2\
    \ - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "  std::sort(l.begin(),\
    \ l.end());\n  if (l.size() % 2 == 0) {\n    return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n  }\n  return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 1)\n  \
    \      return l[l.size() / 2];\n    else\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ }\n    return l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1])\
    \ / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "  std::sort(l.begin(),\
    \ l.end());\n  if (l.size() % 2 == 0) {\n    return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n  }\n  return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 1)\n        return l[l.size() / 2];\n   \
    \ else\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 1)\n        return l[l.size() / 2];\n   \
    \ else\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return l[l.size()\
    \ / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n\
    \        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    }\n    return l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n  \
    \  if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2\
    \ - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "  std::sort(l.begin(),\
    \ l.end());\n  if (l.size() % 2 == 0) {\n    return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n  } else {\n    return l[l.size() / 2];\n  }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 1) {\n        return l[l.size() / 2];\n \
    \   } else {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    }", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n \
    \       return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[l.size() / 2];", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    }\n    return l[l.size() / 2];"]
stop_tokens:
- "\n}"
