name: HumanEval_22_filter_integers
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any\
  \ cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n\
  // >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long>\
  \ filter_integers(std::vector<std::any> values) {\n"
tests: "}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(),\
  \ std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n\
  \    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) ==\
  \ (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n"
completions: ["    std::vector<long> result;\n    for (auto value : values) {\n  \
    \      if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto v : values)\
    \ {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto it = values.begin(); it != values.end(); ++it) {\n        if (std::is_integral(*it))\
    \ {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (std::any value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "  std::vector<long> result;\n  for (auto value : values) {\n    if\
    \ (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n\
    \    }\n  }\n  return result;", "    std::vector<long> result;\n    for (auto&\
    \ value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (std::any value\
    \ : values) {\n        if (std::is_integral<std::any>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "  std::vector<long> result;\n  for (auto value : values)\
    \ {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n\
    \    }\n  }\n  return result;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (std::any value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (std::any value\
    \ : values) {\n        if (std::is_integral<std::any>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "  std::vector<long> result;\n  for (auto\
    \ value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n   \
    \   result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;",
  "    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> filtered;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       filtered.push_back(std::any_cast<long>(value));\n        }\n    }\n  \
    \  return filtered;", "    std::vector<long> result;\n    for (auto v : values)\
    \ {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto it = values.begin();\
    \ it != values.end(); ++it) {\n        if (std::is_integral<decltype(*it)>())\
    \ {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (std::any value\
    \ : values) {\n        if (std::is_integral<std::any>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto &value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "  std::vector<long> result;\n  for (auto\
    \ value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n   \
    \   result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;",
  "    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto v : values)\
    \ {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n \
    \           result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "  std::vector<long> result;\n  for (auto value : values)\
    \ {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n\
    \    }\n  }\n  return result;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (std::any value : values)\
    \ {\n        if (std::is_integral<std::any>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> filtered_values;\n\
    \    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            filtered_values.push_back(std::any_cast<long>(value));\n    \
    \    }\n    }\n    return filtered_values;", "    std::vector<long> result;\n\
    \    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n \
    \           result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "  std::vector<long> result;\n  for (auto value : values)\
    \ {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n\
    \    }\n  }\n  return result;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "  std::vector<long> result;\n  for (auto value : values)\
    \ {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n\
    \    }\n  }\n  return result;", "    std::vector<long> result;\n    for (auto\
    \ v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n       \
    \     result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "  std::vector<long> result;\n  for (auto value : values)\
    \ {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n\
    \    }\n  }\n  return result;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "  std::vector<long> result;\n  for (auto&\
    \ value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n   \
    \   result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;",
  "    std::vector<long> result;\n    for (std::any value : values) {\n        if\
    \ (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n \
    \           result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "  std::vector<long> filtered;\n  for (auto &value : values) {\n \
    \   if (std::is_integral<decltype(value)>::value) {\n      filtered.push_back(std::any_cast<long>(value));\n\
    \    }\n  }\n  return filtered;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (std::any value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto v : values) {\n    \
    \    if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (std::any value : values)\
    \ {\n        if (std::is_integral<std::any>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (std::any value : values) {\n        if (std::is_integral<std::any>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto it = values.begin();\
    \ it != values.end(); ++it) {\n        if (std::is_integral<decltype(*it)>())\
    \ {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "  std::vector<long> filtered;\n  for (auto value : values) {\n  \
    \  if (std::is_integral<decltype(value)>::value) {\n      filtered.push_back(std::any_cast<long>(value));\n\
    \    }\n  }\n  return filtered;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (std::any value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> filtered_values;\n    for (std::any\
    \ value : values) {\n        if (std::is_integral<std::any>::value) {\n      \
    \      filtered_values.push_back(std::any_cast<long>(value));\n        }\n   \
    \ }\n    return filtered_values;", "  std::vector<long> result;\n  for (auto value\
    \ : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n\
    \    }\n  }\n  return result;", "  std::vector<long> result;\n  for (auto& value\
    \ : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n\
    \    }\n  }\n  return result;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "  std::vector<long> result;\n  for (auto v : values)\
    \ {\n    if (std::is_integral<decltype(v)>::value) {\n      result.push_back(std::any_cast<long>(v));\n\
    \    }\n  }\n  return result;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> filtered_values;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            filtered_values.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return filtered_values;", "    std::vector<long> result;\n\
    \    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto it =\
    \ values.begin(); it != values.end(); ++it) {\n        if (std::is_integral<decltype(*it)>())\
    \ {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto it = values.begin();\
    \ it != values.end(); ++it) {\n        if (std::is_integral(*it)) {\n        \
    \    result.push_back(std::any_cast<long>(*it));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto v : values) {\n    \
    \    if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "  std::vector<long> result;\n  for (std::any value\
    \ : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n\
    \    }\n  }\n  return result;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (std::any value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> filtered_values;\n    for (std::any value :\
    \ values) {\n        if (std::is_integral<std::any>::value) {\n            filtered_values.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return filtered_values;", "    std::vector<long> result;\n\
    \    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "  std::vector<long> result;\n  for (auto value : values) {\n    if\
    \ (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n\
    \    }\n  }\n  return result;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto v : values) {\n    \
    \    if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "  std::vector<long> result;\n  for (auto\
    \ v : values) {\n    if (std::is_integral<decltype(v)>::value) {\n      result.push_back(std::any_cast<long>(v));\n\
    \    }\n  }\n  return result;", "    std::vector<long> result;\n    for (std::any\
    \ value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n \
    \           result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto &v : values) {\n   \
    \     if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "  std::vector<long> filtered;\n  for (auto value :\
    \ values) {\n    if (std::is_integral<decltype(value)>::value) {\n      filtered.push_back(std::any_cast<long>(value));\n\
    \    }\n  }\n  return filtered;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (std::any value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (std::any value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "  std::vector<long> result;\n  for (auto\
    \ value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n   \
    \   result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;",
  "    std::vector<long> result;\n    for (std::any value : values) {\n        if\
    \ (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto it = values.begin(); it != values.end(); ++it) {\n        if (std::any_cast<long>(*it))\
    \ {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto &v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n\
    \            result.push_back(std::any_cast<long>(v));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    for (auto it = values.begin();\
    \ it != values.end(); ++it) {\n        if (std::is_integral<decltype(*it)>())\
    \ {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (std::any value\
    \ : values) {\n        if (std::is_integral<std::any>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (std::any value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n \
    \           result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto it =\
    \ values.begin(); it != values.end(); ++it) {\n        if (std::is_integral<decltype(*it)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (std::any value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "  std::vector<long> result;\n  for (auto\
    \ value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n   \
    \   result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;",
  "  std::vector<long> result;\n  for (auto &value : values) {\n    if (std::is_integral<decltype(value)>::value)\
    \ {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto &value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> filtered_values;\n    for (auto value : values)\
    \ {\n        if (std::is_integral<decltype(value)>::value) {\n            filtered_values.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return filtered_values;", "    std::vector<long> result;\n\
    \    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (std::any value\
    \ : values) {\n        if (std::is_integral<std::any>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> filtered;\n   \
    \ for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            filtered.push_back(std::any_cast<long>(value));\n        }\n\
    \    }\n    return filtered;", "    std::vector<long> result;\n    for (auto v\
    \ : values) {\n        if (std::is_integral<decltype(v)>::value) {\n         \
    \   result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto v : values)\
    \ {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto& value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto v : values)\
    \ {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::is_integral<decltype(value)>::value) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto v : values)\
    \ {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "  std::vector<long> result;\n  for (std::any\
    \ value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n   \
    \   result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;",
  "  std::vector<long> result;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value)\
    \ {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for (auto v : values)\
    \ {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::is_integral<decltype(value)>::value)\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;"]
stop_tokens:
- "\n}"
