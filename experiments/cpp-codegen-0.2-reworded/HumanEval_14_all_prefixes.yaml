name: HumanEval_14_all_prefixes
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
  \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a',\
  \ 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string) {\n"
tests: "}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
  \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
  a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
  asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
  W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
completions: ["    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ ++i) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.length(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i+1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    if (string.empty()) return prefixes;\n\
    \    std::string curr_prefix = string.substr(0, 1);\n    prefixes.push_back(curr_prefix);\n\
    \    for (int i = 1; i < string.size(); i++) {\n        curr_prefix = curr_prefix\
    \ + string[i];\n        prefixes.push_back(curr_prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    if\
    \ (string.empty()) return prefixes;\n    std::string curr = string.substr(0, 1);\n\
    \    prefixes.push_back(curr);\n    for (int i = 1; i < string.size(); i++) {\n\
    \        curr = string.substr(0, i + 1);\n        if (curr != string) {\n    \
    \        prefixes.push_back(curr);\n        }\n    }\n    return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i+1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.length(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        if (prefixes.size() == 0 || prefixes.back() != prefix) {\n\
    \            prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int i\
    \ = 0; i < string.size(); ++i) {\n        prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int i\
    \ = 0; i < string.size(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.length(); i++) {\n        std::string\
    \ prefix = string.substr(0, i+1);\n        prefixes.push_back(prefix);\n    }\n\
    \    return prefixes;", "    std::vector<std::string> prefixes;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int i\
    \ = 0; i < string.size(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for (int\
    \ i = 0; i < string.length(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    if (string.empty()) {\n        return\
    \ prefixes;\n    }\n    std::string prefix = string.substr(0, 1);\n    prefixes.push_back(prefix);\n\
    \    for (int i = 1; i < string.size(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix;\n    for (int i = 0; i < string.size(); i++)\
    \ {\n        prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    if (string.empty()) return prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int i\
    \ = 0; i < string.size(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int i\
    \ = 0; i < string.size(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    if (string.empty()) return prefixes;\n    std::string curr =\
    \ string.substr(0, 1);\n    for (int i = 1; i < string.size(); i++) {\n      \
    \  prefixes.push_back(curr);\n        curr = string.substr(0, i + 1);\n    }\n\
    \    prefixes.push_back(curr);\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int i\
    \ = 0; i < string.size(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.length(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int i\
    \ = 0; i < string.length(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        if (prefixes.size() == 0 || prefixes.back() != prefix) {\n          \
    \  prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;", "   \
    \ std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size(); i++)\
    \ {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.length(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i+1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); ++i) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        if (prefixes.size()\
    \ == 0 || prefixes.back() != prefix) {\n            prefixes.push_back(prefix);\n\
    \        }\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ ++i) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i+1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i+1);\n        prefixes.push_back(prefix);\n    }\n\
    \    return prefixes;", "    std::vector<std::string> prefixes;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    if\
    \ (string.empty()) return prefixes;\n    for (int i = 0; i < string.size(); ++i)\
    \ {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    for (int i = 0; i <\
    \ string.size(); i++) {\n        std::string prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        if (prefixes.size() == 0 || prefixes.back() != prefix) {\n\
    \            prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.length(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        if (prefixes.size() == 0 || prefixes.back() != prefix) {\n\
    \            prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    if\
    \ (string.empty()) {\n        return prefixes;\n    }\n    std::string prefix;\n\
    \    for (int i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        if (prefixes.size() == 0 || prefixes.back() != prefix) {\n\
    \            prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int i\
    \ = 0; i < string.size(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    if (string.empty()) return prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i+1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        if (prefixes.size() == 0 || prefixes.back() != prefix) {\n\
    \            prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int i\
    \ = 0; i < string.size(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    if (string.empty())\
    \ return prefixes;\n    prefixes.push_back(string);\n    for (int i = 1; i < string.size();\
    \ ++i) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    for (int i = 0; i <\
    \ string.size(); i++) {\n        std::string prefix = string.substr(0, i + 1);\n\
    \        if (prefixes.size() == 0 || prefixes.back() != prefix) {\n          \
    \  prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;", "   \
    \ std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size(); i++)\
    \ {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        if (prefixes.size()\
    \ == 0 || prefixes.back() != prefix) {\n            prefixes.push_back(prefix);\n\
    \        }\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        if (prefixes.size() == 0 || prefixes.back() != prefix) {\n\
    \            prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i+1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int i\
    \ = 0; i < string.size(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        if (prefixes.size() == 0 || prefixes.back() != prefix) {\n          \
    \  prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;", "   \
    \ std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int i\
    \ = 0; i < string.size(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix;\n    for (int i = 0; i < string.size(); i++)\
    \ {\n        prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i+1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); ++i) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        if (prefixes.size()\
    \ == 0 || prefixes.back() != prefix) {\n            prefixes.push_back(prefix);\n\
    \        }\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    if\
    \ (string.empty()) return prefixes;\n    prefixes.push_back(string);\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        if (prefixes.find(prefix) == prefixes.end()) {\n          \
    \  prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;", "   \
    \ std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int i\
    \ = 0; i < string.size(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i+1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        if (prefixes.size() == 0 || prefixes.back() != prefix) {\n\
    \            prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i+1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.length(); i++) {\n        std::string prefix = string.substr(0,\
    \ i+1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i+1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i+1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.length(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ ++i) {\n        std::string prefix = string.substr(0, i+1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    if\
    \ (string.empty()) return prefixes;\n    std::string curr_prefix = string.substr(0,\
    \ 1);\n    prefixes.push_back(curr_prefix);\n    for (int i = 1; i < string.size();\
    \ ++i) {\n        curr_prefix = curr_prefix + string[i];\n        prefixes.push_back(curr_prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.length(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ ++i) {\n        std::string prefix = string.substr(0, i + 1);\n        if (prefixes.size()\
    \ == 0 || prefixes.back() != prefix) {\n            prefixes.push_back(prefix);\n\
    \        }\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    std::string prefix;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int i\
    \ = 0; i < string.size(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        if (prefixes.size() == 0 || prefixes.back() != prefix) {\n          \
    \  prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;", "   \
    \ std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size(); i++)\
    \ {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ ++i) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.length(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        if (prefixes.size() == 0 || prefixes.back() != prefix) {\n\
    \            prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i+1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    if (string.empty()) return prefixes;\n    std::string curr_prefix = string.substr(0,\
    \ 1);\n    prefixes.push_back(curr_prefix);\n    for (int i = 1; i < string.size();\
    \ i++) {\n        std::string new_prefix = string.substr(0, i + 1);\n        if\
    \ (new_prefix != curr_prefix) {\n            prefixes.push_back(new_prefix);\n\
    \            curr_prefix = new_prefix;\n        }\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i+1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    if (string.empty()) {\n        return prefixes;\n    }\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        std::string prefix = string.substr(0, i+1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix;\n    for (int i = 0; i < string.size(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.length(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    if (string.size() == 0) {\n       \
    \ return prefixes;\n    }\n    for (int i = 0; i < string.size(); i++) {\n   \
    \     prefixes.push_back(string.substr(0, i+1));\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i+1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int\
    \ i = 0; i < string.size(); ++i) {\n        prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); ++i) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for (int\
    \ i = 0; i < string.length(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix;\n    for (int i\
    \ = 0; i < string.size(); i++) {\n        prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.length(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    for (int i = 0; i <\
    \ string.size(); i++) {\n        std::string prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;"]
stop_tokens:
- "\n}"
