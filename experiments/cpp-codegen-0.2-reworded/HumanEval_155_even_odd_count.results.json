{
  "name": "HumanEval_155_even_odd_count",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n",
  "tests": "}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num % 2) odd++;\n        else even++;\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp_29njrro: /tmp/tmp_29njrro.cpp:20: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0;\n    long even = 0;\n    while (num != 0) {\n        odd += num % 10;\n        num /= 10;\n    }\n    while (num != 0) {\n        even += num % 10;\n        num /= 10;\n    }\n    return std::make_tuple(odd, even);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0nbq14b_: /tmp/tmp0nbq14b_.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0;\n    long odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpnp5b1rc7: /tmp/tmpnp5b1rc7.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0;\n    long even = 0;\n    while (num > 0) {\n        odd += num % 2;\n        num /= 2;\n    }\n    while (num > 0) {\n        even += num % 2;\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmps5rr_ks3: /tmp/tmps5rr_ks3.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0;\n    long even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpfdm5d17i: /tmp/tmpfdm5d17i.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num != 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpiz24070w: /tmp/tmpiz24070w.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num != 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpiz24070w: /tmp/tmpiz24070w.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpn7y5qr3o: /tmp/tmpn7y5qr3o.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num % 2) odd++;\n        else even++;\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp_29njrro: /tmp/tmp_29njrro.cpp:20: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num > 0) {\n        odd += num % 2;\n        even += num / 2;\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmppyr5cgva: /tmp/tmppyr5cgva.cpp:20: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpsp8jolo6: /tmp/tmpsp8jolo6.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpn7y5qr3o: /tmp/tmpn7y5qr3o.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpqi3hk6ob: /tmp/tmpqi3hk6ob.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpt4tu33xf: /tmp/tmpt4tu33xf.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpt4tu33xf: /tmp/tmpt4tu33xf.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num != 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpiz24070w: /tmp/tmpiz24070w.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0;\n    long even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp4u8bvbot: /tmp/tmp4u8bvbot.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num != 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpiz24070w: /tmp/tmpiz24070w.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0;\n    long even = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp4qj3g3d9: /tmp/tmp4qj3g3d9.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpqi3hk6ob: /tmp/tmpqi3hk6ob.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpn7y5qr3o: /tmp/tmpn7y5qr3o.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpn7y5qr3o: /tmp/tmpn7y5qr3o.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpqi3hk6ob: /tmp/tmpqi3hk6ob.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpt4tu33xf: /tmp/tmpt4tu33xf.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpqi3hk6ob: /tmp/tmpqi3hk6ob.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0;\n    long even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp4u8bvbot: /tmp/tmp4u8bvbot.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num != 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpiz24070w: /tmp/tmpiz24070w.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpt4tu33xf: /tmp/tmpt4tu33xf.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0;\n    long odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpkzpgfg3s: /tmp/tmpkzpgfg3s.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpt4tu33xf: /tmp/tmpt4tu33xf.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0;\n    long even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpfdm5d17i: /tmp/tmpfdm5d17i.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(odd, even);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpjbkf8bco: /tmp/tmpjbkf8bco.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpn7y5qr3o: /tmp/tmpn7y5qr3o.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpqi3hk6ob: /tmp/tmpqi3hk6ob.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpqi3hk6ob: /tmp/tmpqi3hk6ob.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpqi3hk6ob: /tmp/tmpqi3hk6ob.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpn7y5qr3o: /tmp/tmpn7y5qr3o.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0;\n    long even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp4u8bvbot: /tmp/tmp4u8bvbot.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0;\n    long odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpnp5b1rc7: /tmp/tmpnp5b1rc7.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpqi3hk6ob: /tmp/tmpqi3hk6ob.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpn7y5qr3o: /tmp/tmpn7y5qr3o.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num != 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpiz24070w: /tmp/tmpiz24070w.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpt4tu33xf: /tmp/tmpt4tu33xf.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0;\n    long odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpnp5b1rc7: /tmp/tmpnp5b1rc7.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpn7y5qr3o: /tmp/tmpn7y5qr3o.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0;\n    long odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpkzpgfg3s: /tmp/tmpkzpgfg3s.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpqi3hk6ob: /tmp/tmpqi3hk6ob.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpqi3hk6ob: /tmp/tmpqi3hk6ob.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpn7y5qr3o: /tmp/tmpn7y5qr3o.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0;\n    long even = 0;\n    while (num > 0) {\n        odd += num % 2;\n        even += num / 2;\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpuax62rop: /tmp/tmpuax62rop.cpp:21: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0;\n    long even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp4u8bvbot: /tmp/tmp4u8bvbot.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num != 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpiz24070w: /tmp/tmpiz24070w.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpqi3hk6ob: /tmp/tmpqi3hk6ob.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpn7y5qr3o: /tmp/tmpn7y5qr3o.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num != 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpiz24070w: /tmp/tmpiz24070w.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpt4tu33xf: /tmp/tmpt4tu33xf.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpqi3hk6ob: /tmp/tmpqi3hk6ob.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpt4tu33xf: /tmp/tmpt4tu33xf.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num != 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpiz24070w: /tmp/tmpiz24070w.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpn7y5qr3o: /tmp/tmpn7y5qr3o.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0;\n    long odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpg8i7mxu8: /tmp/tmpg8i7mxu8.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpqi3hk6ob: /tmp/tmpqi3hk6ob.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpqi3hk6ob: /tmp/tmpqi3hk6ob.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0;\n    long even = 0;\n    while (num) {\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpzqfug8z6: /tmp/tmpzqfug8z6.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(odd, even);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpjbkf8bco: /tmp/tmpjbkf8bco.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0;\n    long odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpnp5b1rc7: /tmp/tmpnp5b1rc7.cpp:24: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpt4tu33xf: /tmp/tmpt4tu33xf.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(odd, even);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpjbkf8bco: /tmp/tmpjbkf8bco.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpt4tu33xf: /tmp/tmpt4tu33xf.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpqi3hk6ob: /tmp/tmpqi3hk6ob.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpt4tu33xf: /tmp/tmpt4tu33xf.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpt4tu33xf: /tmp/tmpt4tu33xf.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpn7y5qr3o: /tmp/tmpn7y5qr3o.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpt4tu33xf: /tmp/tmpt4tu33xf.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmpn7y5qr3o: /tmp/tmpn7y5qr3o.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmphy6qpipl: /tmp/tmphy6qpipl.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp622kjh53: /tmp/tmp622kjh53.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12) \n// (1, 1)\n// >>> even_odd_count(123) \n// (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while (num) {\n        if (num & 1) {\n            odd++;\n        } else {\n            even++;\n        }\n        num >>= 1;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n",
      "timestamp": 1664292534,
      "stdout": "",
      "stderr": "tmp0qnsy8d7: /tmp/tmp0qnsy8d7.cpp:23: int main(): Assertion `candidate((7)) == (std::make_tuple(0, 1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}