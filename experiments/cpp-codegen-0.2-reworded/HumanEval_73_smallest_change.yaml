name: HumanEval_73_smallest_change
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers,\
  \ find the minimum number of elements that\n// need to be changed to make the vector\
  \ palindromic. A palindromic vector is a vector that\n// is read the same backwards\
  \ and forwards. In one change, you can change one element to any other element.\n\
  // For example:\n// >>> smallest_change([1,2,3,5,4,7,9,6])\n// 4\n// >>> smallest_change([1,\
  \ 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nlong\
  \ smallest_change(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = smallest_change;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));\n \
  \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3,\
  \ (long)2, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)4, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)2, (long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)1, (long)1, (long)3}))) == (0));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (0));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n\
  }\n"
completions: ["    long n = arr.size();\n    long min_change = 0;\n    for (long i\
    \ = 0; i < n; i++) {\n        long j = i;\n        while (j < n && arr[i] == arr[j])\
    \ {\n            j++;\n        }\n        min_change = std::min(min_change, j\
    \ - i);\n    }\n    return min_change;", "    long n = arr.size();\n    long min_change\
    \ = n;\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n;\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long min_change = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for\
    \ (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n\
    \                min_change = std::min(min_change, std::abs(i - j));\n       \
    \     }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = n;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            if (arr[i] != arr[j]) {\n            \
    \    min_change = std::min(min_change, std::abs(arr[i] - arr[j]));\n         \
    \   }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    std::vector<long> dp(n, 0);\n    dp[0] = arr[0];\n    for (int i = 1; i <\
    \ n; i++) {\n        dp[i] = std::min(arr[i], arr[i-1]);\n    }\n    long ans\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] != dp[i]) {\n  \
    \          ans++;\n        }\n    }\n    return ans;", "    long n = arr.size();\n\
    \    long min_changes = n;\n    for (long i = 0; i < n; ++i) {\n        for (long\
    \ j = i + 1; j < n; ++j) {\n            if (arr[i] != arr[j]) {\n            \
    \    min_changes = std::min(min_changes, std::abs(arr[i] - arr[j]));\n       \
    \     }\n        }\n    }\n    return min_changes;", "    long n = arr.size();\n\
    \    if (n == 1) return 0;\n    long min_change = n;\n    std::vector<long> dp(n,\
    \ 0);\n    for (long i = 0; i < n; ++i) {\n        for (long j = 0; j < i; ++j)\
    \ {\n            if (arr[i] == arr[j]) {\n                dp[i] = std::min(dp[i],\
    \ dp[j] + 1);\n            }\n        }\n        min_change = std::min(min_change,\
    \ dp[i]);\n    }\n    return min_change;", "    long min_change = 0;\n    long\
    \ max_val = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n        }\n    }\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        long diff = arr[i] - max_val;\n     \
    \   if (diff > 0) {\n            min_change += diff;\n        }\n    }\n    return\
    \ min_change;", "    long min_change = arr.size();\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i]\
    \ == arr[j]) {\n                min_change = std::min(min_change, std::abs(i -\
    \ j));\n            }\n        }\n    }\n    return min_change;", "    long n\
    \ = arr.size();\n    long min_change = n;\n    for (long i = 0; i < n; i++) {\n\
    \        for (long j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j])\
    \ {\n                min_change = std::min(min_change, j - i);\n            }\n\
    \        }\n    }\n    return min_change;", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long n = arr.size();\n    long min_change = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        long j = i + 1;\n        while (j < n && arr[i] == arr[j]) {\n\
    \            j++;\n        }\n        min_change = std::min(min_change, j - i);\n\
    \    }\n    return min_change;", "    std::vector<long> dp(arr.size(), 0);\n \
    \   for (int i = 0; i < arr.size(); i++) {\n        for (int j = 0; j < i; j++)\
    \ {\n            if (arr[i] == arr[j]) {\n                dp[i] = std::min(dp[i],\
    \ dp[j] + 1);\n            }\n        }\n    }\n    return arr.size() - dp.back();",
  "    std::sort(arr.begin(), arr.end());\n    long min_changes = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[i] != arr[j]) {\n                min_changes++;\n   \
    \             arr[i] = arr[j];\n                break;\n            }\n      \
    \  }\n    }\n    return min_changes;", "    long n = arr.size();\n    long min_change\
    \ = n;\n    std::vector<long> dp(n, 0);\n    for (long i = 0; i < n; i++) {\n\
    \        dp[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n           \
    \ if (arr[i] == arr[j]) {\n                dp[i] = std::min(dp[i], dp[j] + 1);\n\
    \            }\n        }\n        min_change = std::min(min_change, dp[i]);\n\
    \    }\n    return min_change;", "    long min_change = arr.size();\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ j - i);\n            }\n        }\n    }\n    return min_change;", "    long\
    \ min_change = 0;\n    long max_val = *std::max_element(arr.begin(), arr.end());\n\
    \    for (long i = 0; i < max_val; i++) {\n        long count = 0;\n        for\
    \ (long j = 0; j < arr.size(); j++) {\n            if (arr[j] == i) {\n      \
    \          count++;\n            }\n        }\n        if (count == arr.size()\
    \ / 2) {\n            min_change = std::min(min_change, count);\n        }\n \
    \   }\n    return min_change;", "    long min_change = 0;\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        for (int j = 0; j < arr.size(); j++) {\n   \
    \         if (i != j && arr[i] == arr[j]) {\n                min_change++;\n \
    \           }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = 0;\n    long n = arr.size();\n    std::sort(arr.begin(), arr.end());\n   \
    \ for (long i = 0; i < n; i++) {\n        long j = i + 1;\n        while (j <\
    \ n && arr[i] == arr[j]) {\n            j++;\n        }\n        min_change =\
    \ std::min(min_change, j - i);\n    }\n    return min_change;", "    long min_change\
    \ = 0;\n    long max_val = 0;\n    for (int i = 0; i < arr.size(); i++) {\n  \
    \      if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n   \
    \ }\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j\
    \ < arr.size(); j++) {\n            if (arr[i] + arr[j] == max_val) {\n      \
    \          min_change = std::min(min_change, abs(i - j));\n            }\n   \
    \     }\n    }\n    return min_change;", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ j - i);\n            }\n        }\n    }\n    return min_change;", "    long\
    \ n = arr.size();\n    long min_change = n;\n    for (long i = 0; i < n; i++)\
    \ {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j])\
    \ {\n                min_change = std::min(min_change, j - i);\n            }\n\
    \        }\n    }\n    return min_change;", "    long n = arr.size();\n    long\
    \ min_changes = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                min_changes++;\n\
    \                std::swap(arr[i], arr[j]);\n            }\n        }\n    }\n\
    \    return min_changes;", "    long n = arr.size();\n    long min_change = n;\n\
    \    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++)\
    \ {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ j - i);\n            }\n        }\n    }\n    return min_change;", "    long\
    \ min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n     \
    \   for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] != arr[j])\
    \ {\n                min_change = std::min(min_change, abs(arr[i] - arr[j]));\n\
    \            }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1;\
    \ j < arr.size(); j++) {\n            if (arr[i] != arr[j]) {\n              \
    \  min_change = std::min(min_change, abs(arr[i] - arr[j]));\n            }\n \
    \       }\n    }\n    return min_change;", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long min_change = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for\
    \ (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n\
    \                min_change = std::min(min_change, abs(i - j));\n            }\n\
    \        }\n    }\n    return min_change;", "    long n = arr.size();\n    long\
    \ min_change = n;\n    for (long i = 0; i < n; ++i) {\n        for (long j = 0;\
    \ j < n; ++j) {\n            if (i != j && arr[i] == arr[j]) {\n             \
    \   min_change = std::min(min_change, std::abs(i - j));\n            }\n     \
    \   }\n    }\n    return min_change;", "    long min_change = 0;\n    long max_val\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        max_val = std::max(max_val,\
    \ arr[i]);\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        long diff\
    \ = arr[i] - max_val;\n        if (diff > 0) {\n            min_change += diff;\n\
    \        }\n    }\n    return min_change;", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ std::vector<long> dp(arr.size(), 0);\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] == arr[j])\
    \ {\n                dp[i] = std::min(dp[i], dp[j] + 1);\n            }\n    \
    \    }\n    }\n    return dp[arr.size() - 1];", "    long n = arr.size();\n  \
    \  long min_change = n;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n            \
    \    min_change = std::min(min_change, j - i);\n            }\n        }\n   \
    \ }\n    return min_change;", "    long n = arr.size();\n    long min_change =\
    \ n;\n    std::sort(arr.begin(), arr.end());\n    for (long i = 0; i < n; i++)\
    \ {\n        if (arr[i] != arr[n - i - 1]) {\n            min_change = std::min(min_change,\
    \ i);\n        }\n    }\n    return min_change;", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long n = arr.size();\n    long min_change = n;\n    for (long i = 0; i < n;\
    \ i++) {\n        long j = i + 1;\n        while (j < n && arr[i] == arr[j]) {\n\
    \            j++;\n        }\n        min_change = std::min(min_change, j - i);\n\
    \    }\n    return min_change;", "    long min_change = 0;\n    long min_change_index\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long curr_min_change\
    \ = arr[i] - arr[i + 1];\n        if (curr_min_change < min_change) {\n      \
    \      min_change = curr_min_change;\n            min_change_index = i;\n    \
    \    }\n    }\n    return min_change_index;", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long n = arr.size();\n    std::vector<long> dp(n, 0);\n    dp[0] = 0;\n   \
    \ for (long i = 1; i < n; i++) {\n        dp[i] = std::min(dp[i - 1], std::min(arr[i\
    \ - 1], arr[i]));\n    }\n    return dp[n - 1];", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                min_change = std::min(min_change, j - i);\n     \
    \       }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = 0;\n    for (long i = 0; i < n; i++) {\n        long j\
    \ = n - 1 - i;\n        if (arr[i] != arr[j]) {\n            min_change++;\n \
    \           arr[i] = arr[j];\n        }\n    }\n    return min_change;", "   \
    \ long n = arr.size();\n    long min_change = n;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(i - j));\n\
    \            }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = n;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n            \
    \    min_change = std::min(min_change, j - i);\n            }\n        }\n   \
    \ }\n    return min_change;", "    long n = arr.size();\n    long min_change =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        long j = i;\n        while (j\
    \ < n && arr[j] == arr[i]) {\n            j++;\n        }\n        min_change\
    \ = std::min(min_change, j - i);\n    }\n    return min_change;", "    long min_change\
    \ = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n        for (int\
    \ j = i + 1; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n   \
    \             min_change = std::min(min_change, j - i);\n            }\n     \
    \   }\n    }\n    return min_change;", "    std::sort(arr.begin(), arr.end());\n\
    \    long min_change = 0;\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] != arr[j])\
    \ {\n                min_change++;\n                if (i + 1 < j) {\n       \
    \             arr[i] = arr[j];\n                    arr[j] = arr[i];\n       \
    \         }\n                break;\n            }\n        }\n    }\n    return\
    \ min_change;", "    long min_change = arr.size();\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i]\
    \ == arr[j]) {\n                min_change = std::min(min_change, j - i);\n  \
    \          }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = 0;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            long diff = arr[i] - arr[j];\n       \
    \     if (diff == 0) {\n                min_change = std::min(min_change, j -\
    \ i);\n            } else if (diff < 0) {\n                min_change = std::min(min_change,\
    \ j - i + 1);\n            } else {\n                min_change = std::min(min_change,\
    \ i - j + 1);\n            }\n        }\n    }\n    return min_change;", "   \
    \ long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                min_change = std::min(min_change, j - i);\n     \
    \       }\n        }\n    }\n    return min_change;", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long min_change = 0;\n    long min_diff = arr[0] - arr[1];\n    for (int i\
    \ = 1; i < arr.size(); i++) {\n        long diff = arr[i] - arr[i - 1];\n    \
    \    if (diff < min_diff) {\n            min_diff = diff;\n            min_change\
    \ = i - 1;\n        }\n    }\n    return min_change;", "    long min_change =\
    \ arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j\
    \ = i + 1; j < arr.size(); j++) {\n            if (arr[i] != arr[j]) {\n     \
    \           min_change = std::min(min_change, std::abs(arr[i] - arr[j]));\n  \
    \          }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n        for (int\
    \ j = i + 1; j < arr.size(); j++) {\n            if (arr[i] != arr[j]) {\n   \
    \             min_change = std::min(min_change, std::abs(arr[i] - arr[j]));\n\
    \            }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = n;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n            \
    \    min_change = std::min(min_change, j - i);\n            }\n        }\n   \
    \ }\n    return min_change;", "    long min_change = 0;\n    for (int i = 0; i\
    \ < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n \
    \           if (arr[i] != arr[j]) {\n                min_change++;\n         \
    \       arr[i] = arr[j];\n                break;\n            }\n        }\n \
    \   }\n    return min_change;", "    long n = arr.size();\n    long min_change\
    \ = n;\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n;\
    \ j++) {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(i - j));\n            }\n        }\n    }\n    return min_change;",
  "    long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long n = arr.size();\n    long min_change = n;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                min_change = std::min(min_change, j - i);\n     \
    \       }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    if (n == 1) return 0;\n    std::vector<long> dp(n, 0);\n    dp[0] = arr[0];\n\
    \    for (long i = 1; i < n; i++) {\n        dp[i] = std::min(dp[i - 1], arr[i]\
    \ + dp[i - 1]);\n    }\n    return dp[n - 1];", "    long min_change = 0;\n  \
    \  long n = arr.size();\n    std::vector<long> dp(n, 0);\n    for (long i = 0;\
    \ i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for (long i = 0; i < n; i++)\
    \ {\n        for (long j = i + 1; j < n; j++) {\n            if (dp[i] == dp[j])\
    \ {\n                dp[i] = arr[i] + arr[j];\n                min_change = std::min(min_change,\
    \ dp[i] - arr[i]);\n                min_change = std::min(min_change, dp[j] -\
    \ arr[j]);\n                dp[i] = arr[i];\n                dp[j] = arr[j];\n\
    \            }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n        for (int\
    \ j = i + 1; j < arr.size(); j++) {\n            if (arr[i] != arr[j]) {\n   \
    \             min_change = std::min(min_change, abs(arr[i] - arr[j]));\n     \
    \       }\n        }\n    }\n    return min_change;", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long min_change = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for\
    \ (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] != arr[j]) {\n\
    \                min_change++;\n                arr[i] = arr[j];\n           \
    \     break;\n            }\n        }\n    }\n    return min_change;", "    long\
    \ min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n     \
    \   for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] != arr[j])\
    \ {\n                min_change = std::min(min_change, std::abs(arr[i] - arr[j]));\n\
    \            }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] != arr[arr.size() - 1 - i]) {\n            min_change++;\n\
    \        }\n    }\n    return min_change;", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long n = arr.size();\n    long min_change = n;\n    std::vector<long> dp(n,\
    \ 0);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < i; j++)\
    \ {\n            if (arr[i] == arr[j]) {\n                dp[i] = std::min(dp[i],\
    \ dp[j] + 1);\n            }\n        }\n        min_change = std::min(min_change,\
    \ dp[i]);\n    }\n    return min_change;", "    long min_change = 0;\n    long\
    \ n = arr.size();\n    long i = 0;\n    long j = n - 1;\n    while (i < j) {\n\
    \        if (arr[i] != arr[j]) {\n            min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            if (arr[i] < arr[j]) {\n          \
    \      i++;\n            } else {\n                j--;\n            }\n     \
    \   } else {\n            i++;\n            j--;\n        }\n    }\n    return\
    \ min_change;", "    long min_change = arr.size();\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i]\
    \ != arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long n = arr.size();\n    long min_change = 0;\n    long max_val = *std::max_element(arr.begin(),\
    \ arr.end());\n    long min_val = *std::min_element(arr.begin(), arr.end());\n\
    \    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++)\
    \ {\n            if (arr[i] + arr[j] == max_val) {\n                min_change\
    \ = std::min(min_change, std::abs(i - j));\n            }\n        }\n    }\n\
    \    return min_change;", "    long n = arr.size();\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min_change = 0;\n    for (long i = 0; i < n; i++) {\n\
    \        long j = n - 1 - i;\n        if (arr[i] != arr[j]) {\n            min_change++;\n\
    \            arr[i] = arr[j];\n        }\n    }\n    return min_change;", "  \
    \  long min_change = 0;\n    long n = arr.size();\n    std::vector<long> dp(n,\
    \ 0);\n    for (long i = 0; i < n; ++i) {\n        for (long j = 0; j < i; ++j)\
    \ {\n            if (arr[i] == arr[j]) {\n                dp[i] = std::min(dp[i],\
    \ dp[j] + 1);\n            }\n        }\n    }\n    for (long i = 0; i < n; ++i)\
    \ {\n        min_change = std::min(min_change, dp[i]);\n    }\n    return min_change;",
  "    long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                min_change = std::min(min_change, j - i);\n     \
    \       }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    if (n == 1) return 0;\n    long min_change = n;\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i]\
    \ == arr[j]) {\n                min_change = std::min(min_change, j - i);\n  \
    \          }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = n;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n            \
    \    min_change = std::min(min_change, std::abs(i - j));\n            }\n    \
    \    }\n    }\n    return min_change;", "    long min_change = arr.size();\n \
    \   for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long n = arr.size();\n    if (n == 1) return 0;\n    long min_change = n;\n\
    \    std::vector<long> dp(n, 0);\n    for (long i = 0; i < n; i++) {\n       \
    \ for (long j = i + 1; j < n; j++) {\n            dp[j] = std::min(dp[j], dp[i]\
    \ + std::abs(arr[i] - arr[j]));\n        }\n        min_change = std::min(min_change,\
    \ dp[i]);\n    }\n    return min_change;", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long n = arr.size();\n    long min_changes = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        long j = i + 1;\n        while (j < n && arr[i] == arr[j]) {\n\
    \            j++;\n        }\n        min_changes = std::min(min_changes, j -\
    \ i);\n    }\n    return min_changes;", "    long min_change = arr.size();\n \
    \   for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                min_change = std::min(min_change, j - i);\n     \
    \       }\n        }\n    }\n    return min_change;", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ j - i);\n            }\n        }\n    }\n    return min_change;", "    long\
    \ n = arr.size();\n    long min_changes = n;\n    for (long i = 0; i < n; i++)\
    \ {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] != arr[j])\
    \ {\n                min_changes = std::min(min_changes, std::abs(arr[i] - arr[j]));\n\
    \            }\n        }\n    }\n    return min_changes;", "    long min_change\
    \ = 0;\n    long max_val = 0;\n    for (long i = 0; i < arr.size(); i++) {\n \
    \       max_val = std::max(max_val, arr[i]);\n    }\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        long change = arr[i] - max_val;\n        if (change\
    \ > 0) {\n            min_change += change;\n        }\n    }\n    return min_change;",
  "    long min_change = 0;\n    long max_val = *std::max_element(arr.begin(), arr.end());\n\
    \    for (long i = max_val; i >= 0; i--) {\n        long count = 0;\n        for\
    \ (long j = 0; j < arr.size(); j++) {\n            if (arr[j] == i) {\n      \
    \          count++;\n            }\n        }\n        if (count < arr.size()\
    \ / 2) {\n            min_change = std::max(min_change, count);\n        }\n \
    \   }\n    return min_change;", "    long min_change = arr.size();\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(i - j));\n            }\n        }\n    }\n    return min_change;",
  "    long n = arr.size();\n    long min_changes = n;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_changes = std::min(min_changes, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_changes;", "  \
    \  long min_change = 0;\n    long min_diff = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            long\
    \ diff = abs(arr[i] - arr[j]);\n            if (diff < min_diff || min_diff ==\
    \ 0) {\n                min_diff = diff;\n                min_change = 0;\n  \
    \          }\n            if (diff == min_diff) {\n                min_change++;\n\
    \            }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n        for (int\
    \ j = i + 1; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n   \
    \             min_change = std::min(min_change, j - i);\n            }\n     \
    \   }\n    }\n    return min_change;", "    long min_change = arr.size();\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(i - j));\n            }\n        }\n    }\n    return min_change;",
  "    long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long min_change = 0;\n    long n = arr.size();\n    std::vector<long> dp(n,\
    \ 0);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < i; j++)\
    \ {\n            if (arr[i] == arr[j]) {\n                dp[i] = std::min(dp[i],\
    \ dp[j] + 1);\n            }\n        }\n    }\n    for (long i = 0; i < n; i++)\
    \ {\n        min_change = std::min(min_change, dp[i]);\n    }\n    return min_change;",
  "    long min_change = arr.size();\n    long max_val = *std::max_element(arr.begin(),\
    \ arr.end());\n    for (long i = max_val; i >= 0; i--) {\n        long count =\
    \ 0;\n        for (long j = 0; j < arr.size(); j++) {\n            if (arr[j]\
    \ == i) {\n                count++;\n            }\n        }\n        if (count\
    \ < arr.size() / 2) {\n            min_change = std::min(min_change, count);\n\
    \        }\n    }\n    return min_change;", "    long min_change = 0;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change++;\n\
    \                arr[i] = arr[j];\n                break;\n            }\n   \
    \     }\n    }\n    return min_change;", "    long n = arr.size();\n    if (n\
    \ == 1) return 0;\n    long min_change = n;\n    for (int i = 0; i < n; i++) {\n\
    \        std::vector<long> temp(arr);\n        for (int j = 0; j < n; j++) {\n\
    \            if (i != j) {\n                temp[i] = arr[j];\n              \
    \  if (is_palindromic(temp)) {\n                    min_change = std::min(min_change,\
    \ j - i + 1);\n                }\n            }\n        }\n    }\n    return\
    \ min_change;", "    long n = arr.size();\n    long min_changes = 0;\n    for\
    \ (long i = 0; i < n; i++) {\n        long j = i;\n        while (j < n && arr[j]\
    \ == arr[i]) {\n            j++;\n        }\n        min_changes += j - i;\n \
    \   }\n    return min_changes;", "    long n = arr.size();\n    long min_change\
    \ = 0;\n    long i = 0;\n    while (i < n) {\n        long j = i + 1;\n      \
    \  while (j < n && arr[i] == arr[j]) {\n            j++;\n        }\n        if\
    \ (j - i > min_change) {\n            min_change = j - i;\n        }\n       \
    \ i = j;\n    }\n    return min_change;", "    long min_change = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ j - i);\n            }\n        }\n    }\n    return min_change;", "    long\
    \ min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n     \
    \   for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] != arr[j])\
    \ {\n                min_change = std::min(min_change, std::abs(arr[i] - arr[j]));\n\
    \            }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n        for (int\
    \ j = i + 1; j < arr.size(); j++) {\n            if (arr[i] != arr[j]) {\n   \
    \             min_change = std::min(min_change, std::abs(arr[i] - arr[j]));\n\
    \            }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1;\
    \ j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n              \
    \  min_change++;\n                arr[i] = arr[j] = arr[i] + arr[j];\n       \
    \     }\n        }\n    }\n    return min_change;", "    long min_change = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] == arr[j]) {\n                min_change++;\n\
    \                arr[i] = arr[j] = arr[i] + arr[j];\n                break;\n\
    \            }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    if (n == 1) return 0;\n    long min_change = n;\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i]\
    \ == arr[j]) {\n                min_change = std::min(min_change, j - i);\n  \
    \          }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = n;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n            \
    \    min_change = std::min(min_change, j - i);\n            }\n        }\n   \
    \ }\n    return min_change;", "    long min_change = arr.size();\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long n = arr.size();\n    long min_changes = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                min_changes++;\n                arr[i] = arr[j] =\
    \ arr[i] + arr[j];\n                break;\n            }\n        }\n    }\n\
    \    return min_changes;", "    long min_change = 0;\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        for (int j = 0; j < arr.size(); j++) {\n       \
    \     if (i != j && arr[i] == arr[j]) {\n                min_change++;\n     \
    \       }\n        }\n    }\n    return min_change;", "    long min_change = 0;\n\
    \    long max_val = 0;\n    for (auto i : arr) {\n        max_val = std::max(max_val,\
    \ i);\n    }\n    for (long i = 0; i <= max_val; i++) {\n        long count =\
    \ 0;\n        for (auto j : arr) {\n            if (i != j) {\n              \
    \  count++;\n            }\n        }\n        if (count < arr.size() / 2) {\n\
    \            min_change = std::min(min_change, count);\n        }\n    }\n   \
    \ return min_change;", "    long n = arr.size();\n    if (n == 1) return 0;\n\
    \    std::vector<long> dp(n, 0);\n    dp[0] = arr[0];\n    for (int i = 1; i <\
    \ n; i++) {\n        dp[i] = std::min(arr[i], dp[i - 1]);\n    }\n    for (int\
    \ i = n - 1; i >= 0; i--) {\n        dp[i] = std::min(arr[i], dp[i + 1]);\n  \
    \  }\n    long ans = 0;\n    for (int i = 0; i < n; i++) {\n        ans += std::abs(dp[i]\
    \ - arr[i]);\n    }\n    return ans;", "    long min_change = arr.size();\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long n = arr.size();\n    if (n == 0) return 0;\n    std::vector<long> dp(n,\
    \ 0);\n    dp[0] = arr[0];\n    for (int i = 1; i < n; i++) {\n        dp[i] =\
    \ std::min(arr[i], arr[i-1]) + dp[i-1];\n    }\n    return dp[n-1];", "    long\
    \ n = arr.size();\n    long min_change = n;\n    for (long i = 0; i < n; i++)\
    \ {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j])\
    \ {\n                min_change = std::min(min_change, j - i);\n            }\n\
    \        }\n    }\n    return min_change;", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long n = arr.size();\n    long min_change = n;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, abs(arr[i] - arr[j]));\n\
    \            }\n        }\n    }\n    return min_change;", "    std::sort(arr.begin(),\
    \ arr.end());\n    long min_change = arr.size();\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i]\
    \ == arr[j]) {\n                min_change = std::min(min_change, j - i);\n  \
    \          }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n        for (int\
    \ j = i + 1; j < arr.size(); j++) {\n            if (arr[i] != arr[j]) {\n   \
    \             min_change = std::min(min_change, std::abs(arr[i] - arr[j]));\n\
    \            }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = 0;\n    long max_val = 0;\n    for (int i = 0; i < arr.size(); i++) {\n  \
    \      if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n   \
    \ }\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = 0; j < arr.size();\
    \ j++) {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ abs(i - j));\n            }\n        }\n    }\n    return min_change;", "  \
    \  long n = arr.size();\n    long min_change = n;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                min_change = std::min(min_change, j - i);\n     \
    \       }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = n;\n    for (long i = 0; i < n; i++) {\n        long j\
    \ = i + 1;\n        while (j < n && arr[i] == arr[j]) {\n            j++;\n  \
    \      }\n        min_change = std::min(min_change, j - i);\n    }\n    return\
    \ min_change;", "    long min_change = arr.size();\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i]\
    \ == arr[j]) {\n                min_change = std::min(min_change, j - i);\n  \
    \          }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n        for (int\
    \ j = i + 1; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n   \
    \             min_change = std::min(min_change, j - i);\n            }\n     \
    \   }\n    }\n    return min_change;", "    long min_change = arr.size();\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ j - i);\n            }\n        }\n    }\n    return min_change;", "    std::vector<long>\
    \ dp(arr.size(), 0);\n    long min_change = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] == arr[j])\
    \ {\n                dp[i] = std::min(dp[i], dp[j] + 1);\n            }\n    \
    \    }\n        min_change = std::min(min_change, dp[i]);\n    }\n    return min_change;",
  "    long n = arr.size();\n    long min_change = n;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                min_change = std::min(min_change, j - i);\n     \
    \       }\n        }\n    }\n    return min_change;", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ j - i);\n            }\n        }\n    }\n    return min_change;", "    long\
    \ min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n     \
    \   for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] == arr[j])\
    \ {\n                min_change = std::min(min_change, j - i);\n            }\n\
    \        }\n    }\n    return min_change;", "    std::sort(arr.begin(), arr.end());\n\
    \    long min_change = arr.size() - 1;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i]\
    \ != arr[j]) {\n                min_change = std::min(min_change, j - i);\n  \
    \          }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n        for (int\
    \ j = i + 1; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n   \
    \             min_change = std::min(min_change, j - i);\n            }\n     \
    \   }\n    }\n    return min_change;", "    long n = arr.size();\n    if (n ==\
    \ 1) return 0;\n    long min_change = n;\n    for (long i = 0; i < n; i++) {\n\
    \        std::vector<long> new_arr = arr;\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i != j) {\n                new_arr[i] = arr[j];\n       \
    \         long new_change = smallest_change(new_arr);\n                if (new_change\
    \ < min_change) {\n                    min_change = new_change;\n            \
    \    }\n            }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1;\
    \ j < arr.size(); j++) {\n            if (arr[i] != arr[j]) {\n              \
    \  min_change++;\n                arr[i] = arr[j];\n                break;\n \
    \           }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = n;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n            \
    \    min_change = std::min(min_change, j - i);\n            }\n        }\n   \
    \ }\n    return min_change;", "    long min_change = 0;\n    for (int i = 0; i\
    \ < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n \
    \           if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ abs(i - j));\n            }\n        }\n    }\n    return min_change;", "  \
    \  long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ std::sort(arr.begin(), arr.end());\n    long min_changes = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[i] != arr[j]) {\n                min_changes++;\n   \
    \             arr[i] = arr[j];\n                break;\n            }\n      \
    \  }\n    }\n    return min_changes;", "    long min_change = 0;\n    long max_val\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        max_val = std::max(arr[i],\
    \ max_val);\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        min_change\
    \ = std::min(arr[i], min_change);\n        if (arr[i] == max_val) {\n        \
    \    break;\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = n;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n            \
    \    min_change = std::min(min_change, j - i);\n            }\n        }\n   \
    \ }\n    return min_change;", "    long min_change = 0;\n    long min_val = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ j - i);\n                min_val = std::min(min_val, arr[i]);\n            }\n\
    \        }\n    }\n    return min_change;", "    long min_change = 0;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(i - j));\n            }\n        }\n    }\n    return min_change;",
  "    long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(i - j));\n\
    \            }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n        for (int\
    \ j = i + 1; j < arr.size(); j++) {\n            if (arr[i] != arr[j]) {\n   \
    \             min_change = std::min(min_change, std::abs(arr[i] - arr[j]));\n\
    \            }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    if (n == 1) return 0;\n    long min_change = n;\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i]\
    \ == arr[j]) {\n                min_change = std::min(min_change, j - i);\n  \
    \          }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = n;\n    for (long i = 0; i < n; i++) {\n        long j\
    \ = i;\n        while (j < n && arr[j] == arr[i]) {\n            j++;\n      \
    \  }\n        min_change = std::min(min_change, j - i);\n    }\n    return min_change;",
  "    long n = arr.size();\n    long min_changes = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                min_changes++;\n                arr[i] = arr[j] =\
    \ arr[i] + arr[j];\n            }\n        }\n    }\n    return min_changes;",
  "    long n = arr.size();\n    if (n == 1) return 0;\n    long min_change = n;\n\
    \    std::vector<long> dp(n, 0);\n    for (long i = 0; i < n; i++) {\n       \
    \ dp[i] = arr[i];\n    }\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = 0; j < n; j++) {\n            if (i != j) {\n                dp[i] = std::min(dp[i],\
    \ dp[j] + std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    for\
    \ (long i = 0; i < n; i++) {\n        min_change = std::min(min_change, dp[i]);\n\
    \    }\n    return min_change;", "    long min_change = arr.size();\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ j - i);\n            }\n        }\n    }\n    return min_change;", "    long\
    \ min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n     \
    \   for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] != arr[j])\
    \ {\n                min_change = std::min(min_change, std::abs(arr[i] - arr[j]));\n\
    \            }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1;\
    \ j < arr.size(); j++) {\n            if (arr[i] != arr[j]) {\n              \
    \  min_change++;\n                arr[i] = arr[j];\n                break;\n \
    \           }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = n;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n            \
    \    min_change = std::min(min_change, j - i);\n            }\n        }\n   \
    \ }\n    return min_change;", "    long min_change = 0;\n    long max_val = *std::max_element(arr.begin(),\
    \ arr.end());\n    for (long i = 0; i < max_val; i++) {\n        std::vector<long>\
    \ rev_arr = arr;\n        std::reverse(rev_arr.begin(), rev_arr.end());\n    \
    \    if (std::equal(arr.begin(), arr.end(), rev_arr.begin())) {\n            min_change\
    \ = std::min(min_change, i);\n        }\n    }\n    return min_change;", "   \
    \ long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long n = arr.size();\n    if (n == 1) return 0;\n    std::vector<long> dp(n,\
    \ 0);\n    dp[0] = arr[0];\n    for (int i = 1; i < n; i++) {\n        dp[i] =\
    \ std::min(arr[i], dp[i - 1]);\n    }\n    for (int i = n - 1; i >= 0; i--) {\n\
    \        dp[i] = std::min(arr[i], dp[i + 1]);\n    }\n    long ans = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        if (dp[i] != arr[i]) {\n            ans++;\n\
    \        }\n    }\n    return ans;", "    long n = arr.size();\n    long min_change\
    \ = n;\n    std::vector<long> dp(n, 0);\n    for (long i = 0; i < n; i++) {\n\
    \        for (long j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j])\
    \ {\n                dp[i] = std::min(dp[i], dp[j] + 1);\n            }\n    \
    \    }\n        min_change = std::min(min_change, dp[i]);\n    }\n    return min_change;",
  "    long min_change = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[i] == arr[j]) {\n                min_change++;\n    \
    \            arr[i] = arr[j] = arr[i] + arr[j];\n                break;\n    \
    \        }\n        }\n    }\n    return min_change;", "    std::sort(arr.begin(),\
    \ arr.end());\n    long min_change = 0;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i]\
    \ == arr[j]) {\n                min_change++;\n                arr[i] = arr[j]\
    \ = arr[i] + arr[j];\n                break;\n            }\n        }\n    }\n\
    \    return min_change;", "    long min_change = arr.size();\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long min_change = 0;\n    long n = arr.size();\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (long i = 0; i < n; ++i) {\n        long j = i + 1;\n \
    \       while (j < n && arr[i] == arr[j]) {\n            j++;\n        }\n   \
    \     min_change = std::min(min_change, j - i);\n    }\n    return min_change;",
  "    long n = arr.size();\n    std::vector<long> dp(n, 0);\n    for (long i = 0;\
    \ i < n; ++i) {\n        dp[i] = arr[i];\n    }\n    for (long i = 1; i < n; ++i)\
    \ {\n        for (long j = 0; j < i; ++j) {\n            if (arr[i] == arr[j])\
    \ {\n                dp[i] = std::min(dp[i], dp[j] + 1);\n            }\n    \
    \    }\n    }\n    return dp[n - 1];", "    long min_change = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(i - j));\n            }\n        }\n    }\n    return min_change;",
  "    long n = arr.size();\n    long min_change = n;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                min_change = std::min(min_change, j - i);\n     \
    \       }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = n;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n            \
    \    min_change = std::min(min_change, j - i);\n            }\n        }\n   \
    \ }\n    return min_change;", "    long min_change = arr.size();\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ std::sort(arr.begin(), arr.end());\n    long min_change = arr.size();\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] == arr[j]) {\n                min_change = std::min(min_change,\
    \ j - i);\n            }\n        }\n    }\n    return min_change;", "    long\
    \ min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n     \
    \   for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] != arr[j])\
    \ {\n                min_change = std::min(min_change, std::abs(arr[i] - arr[j]));\n\
    \            }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = 0;\n    long i = 0;\n    long j = n - 1;\n    while (i\
    \ < j) {\n        if (arr[i] != arr[j]) {\n            min_change += std::abs(arr[i]\
    \ - arr[j]);\n        }\n        i++;\n        j--;\n    }\n    return min_change;",
  "    std::sort(arr.begin(), arr.end());\n    long min_change = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[arr.size() - 1 - i])\
    \ {\n            min_change++;\n        }\n    }\n    return min_change;", " \
    \   long n = arr.size();\n    if (n == 1) return 0;\n    std::vector<long> dp(n,\
    \ 0);\n    dp[0] = arr[0];\n    for (int i = 1; i < n; i++) {\n        dp[i] =\
    \ std::min(arr[i], dp[i - 1]);\n    }\n    long ans = 0;\n    for (int i = 0;\
    \ i < n; i++) {\n        ans = std::min(ans, dp[i] - arr[i]);\n    }\n    return\
    \ ans;", "    long n = arr.size();\n    long min_changes = 0;\n    for (long i\
    \ = 0; i < n; ++i) {\n        long j = i + 1;\n        while (j < n && arr[i]\
    \ == arr[j]) {\n            j += 1;\n        }\n        min_changes = std::min(min_changes,\
    \ j - i);\n    }\n    return min_changes;", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                min_change = std::min(min_change, j - i);\n     \
    \       }\n        }\n    }\n    return min_change;", "    long min_change = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long n = arr.size();\n    long min_change = n;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                min_change = std::min(min_change, j - i);\n     \
    \       }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    if (n == 1) return 0;\n    std::vector<long> dp(n, 0);\n    dp[0] = arr[0];\n\
    \    for (int i = 1; i < n; i++) {\n        dp[i] = std::min(arr[i], arr[i-1])\
    \ + dp[i-1];\n    }\n    long ans = dp[n-1];\n    for (int i = n-2; i >= 0; i--)\
    \ {\n        ans = std::min(ans, dp[i]);\n    }\n    return ans;", "    long min_change\
    \ = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n        for (int\
    \ j = i + 1; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n   \
    \             min_change = std::min(min_change, j - i);\n            }\n     \
    \   }\n    }\n    return min_change;", "    long min_change = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[i] == arr[j]) {\n                min_change++;\n    \
    \            arr[i] = arr[j] = arr[i] + arr[j];\n                break;\n    \
    \        }\n        }\n    }\n    return min_change;", "    std::sort(arr.begin(),\
    \ arr.end());\n    long min_change = arr.size();\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i]\
    \ == arr[j]) {\n                min_change = std::min(min_change, j - i);\n  \
    \          }\n        }\n    }\n    return min_change;", "    long min_change\
    \ = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n        for (int\
    \ j = i + 1; j < arr.size(); j++) {\n            if (arr[i] != arr[j]) {\n   \
    \             min_change = std::min(min_change, std::abs(arr[i] - arr[j]));\n\
    \            }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = n;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n            \
    \    min_change = std::min(min_change, j - i);\n            }\n        }\n   \
    \ }\n    return min_change;", "    long min_change = arr.size();\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++)\
    \ {\n            if (arr[i] != arr[j]) {\n                min_change = std::min(min_change,\
    \ std::abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return min_change;",
  "    long n = arr.size();\n    long min_change = n;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] !=\
    \ arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ std::sort(arr.begin(), arr.end());\n    long min_change = arr.size() - 1;\n\
    \    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] != arr[i +\
    \ 1]) {\n            min_change = std::min(min_change, arr[i] - arr[i + 1]);\n\
    \        }\n    }\n    return min_change;", "    long n = arr.size();\n    long\
    \ min_change = n;\n    for (long i = 0; i < n; i++) {\n        for (long j = i\
    \ + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                min_change\
    \ = std::min(min_change, j - i);\n            }\n        }\n    }\n    return\
    \ min_change;", "    long min_change = arr.size();\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i]\
    \ != arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long min_change = arr.size();\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] ==\
    \ arr[j]) {\n                min_change = std::min(min_change, j - i);\n     \
    \       }\n        }\n    }\n    return min_change;", "    long n = arr.size();\n\
    \    long min_change = n;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n            \
    \    min_change = std::min(min_change, j - i);\n            }\n        }\n   \
    \ }\n    return min_change;", "    long min_change = 0;\n    long n = arr.size();\n\
    \    long i = 0;\n    long j = n - 1;\n    while (i < j) {\n        if (arr[i]\
    \ != arr[j]) {\n            min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            i++;\n            j--;\n        } else {\n        \
    \    i++;\n            j--;\n        }\n    }\n    return min_change;", "    std::sort(arr.begin(),\
    \ arr.end());\n    long min_change = arr.size();\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i]\
    \ != arr[j]) {\n                min_change = std::min(min_change, std::abs(arr[i]\
    \ - arr[j]));\n            }\n        }\n    }\n    return min_change;", "   \
    \ long n = arr.size();\n    long min_change = n;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = 0; j < n; j++) {\n            if (i != j && arr[i]\
    \ == arr[j]) {\n                min_change = std::min(min_change, std::abs(i -\
    \ j));\n            }\n        }\n    }\n    return min_change;"]
stop_tokens:
- "\n}"
