{
  "name": "HumanEval_162_string_to_md5",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n",
  "tests": "}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>()(text);\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpppnij0ab: /tmp/tmpppnij0ab.cpp:15: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << c;\n  }\n  std::string hash = ss.str();\n  return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpuc_8i8qh: /tmp/tmpuc_8i8qh.cpp:21: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) return std::nullopt;\n  std::stringstream ss;\n  ss << std::hex << std::hash<std::string>()(text);\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp8xu7jcvp: /tmp/tmp8xu7jcvp.cpp:15: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) return {};\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpuyuo95cs: /tmp/tmpuyuo95cs.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string hash = md5(text);\n    return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpgko3c2tp.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpgko3c2tp.cpp:11:24: error: \u2018md5\u2019 was not declared in this scope\n   11 |     std::string hash = md5(text);\n      |                        ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string md5_hash = md5(text);\n    return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmp23o2vg19.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmp23o2vg19.cpp:11:28: error: \u2018md5\u2019 was not declared in this scope\n   11 |     std::string md5_hash = md5(text);\n      |                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5_hash = md5(text);\n  return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "/tmp/tmphfskjufa.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmphfskjufa.cpp:11:26: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string md5_hash = md5(text);\n      |                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp2wd1vle5: /tmp/tmp2wd1vle5.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string hash = md5(text);\n  return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpug2kk8yf.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpug2kk8yf.cpp:11:22: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string hash = md5(text);\n      |                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmptaplpgem: /tmp/tmptaplpgem.cpp:17: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string hash = md5(text);\n  return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpug2kk8yf.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpug2kk8yf.cpp:11:22: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string hash = md5(text);\n      |                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string hash = md5(text);\n  return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpug2kk8yf.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpug2kk8yf.cpp:11:22: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string hash = md5(text);\n      |                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string hash = md5(text);\n  return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpug2kk8yf.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpug2kk8yf.cpp:11:22: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string hash = md5(text);\n      |                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5 = md5sum(text);\n  return md5;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmp_zhru_mi.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmp_zhru_mi.cpp:11:21: error: \u2018md5sum\u2019 was not declared in this scope\n   11 |   std::string md5 = md5sum(text);\n      |                     ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    std::string hash = \"\";\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::transform(text.begin(), text.end(), std::back_inserter(hash),\n                   [](char c) { return std::tolower(c); });\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : hash) {\n        ss << std::setw(2) << (int)c;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp1tkklgo3: /tmp/tmp1tkklgo3.cpp:23: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) return {};\n  std::stringstream ss;\n  ss << std::hex << std::hash<std::string>()(text);\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpzjvh_3he: /tmp/tmpzjvh_3he.cpp:15: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5_hash = md5(text);\n  return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "/tmp/tmphfskjufa.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmphfskjufa.cpp:11:26: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string md5_hash = md5(text);\n      |                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string hash = md5(text);\n  return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpug2kk8yf.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpug2kk8yf.cpp:11:22: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string hash = md5(text);\n      |                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string hash = md5(text);\n  return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpug2kk8yf.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpug2kk8yf.cpp:11:22: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string hash = md5(text);\n      |                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << c;\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmplgsax2yy: /tmp/tmplgsax2yy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return {};\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpleja89n4: /tmp/tmpleja89n4.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) return std::nullopt;\n  std::stringstream ss;\n  ss << std::hex << std::hash<std::string>()(text);\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp8xu7jcvp: /tmp/tmp8xu7jcvp.cpp:15: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) return std::nullopt;\n  std::stringstream ss;\n  ss << std::hex << std::hash<std::string>()(text);\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp8xu7jcvp: /tmp/tmp8xu7jcvp.cpp:15: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5_hash = md5(text);\n  return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "/tmp/tmphfskjufa.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmphfskjufa.cpp:11:26: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string md5_hash = md5(text);\n      |                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    std::string hash;\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55;\n    std::stringstream ss56;\n    std\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpt6h8xj3t.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpt6h8xj3t.cpp:66:1: error: expected primary-expression before \u2018}\u2019 token\n   66 | }\n      | ^\n/tmp/tmpt6h8xj3t.cpp:66:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5_hash = md5(text);\n  return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "/tmp/tmphfskjufa.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmphfskjufa.cpp:11:26: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string md5_hash = md5(text);\n      |                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) return std::nullopt;\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpd7kmo205: /tmp/tmpd7kmo205.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp2wd1vle5: /tmp/tmp2wd1vle5.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string hash = md5(text);\n  return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpug2kk8yf.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpug2kk8yf.cpp:11:22: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string hash = md5(text);\n      |                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5 = md5sum(text);\n  return md5;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmp_zhru_mi.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmp_zhru_mi.cpp:11:21: error: \u2018md5sum\u2019 was not declared in this scope\n   11 |   std::string md5 = md5sum(text);\n      |                     ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    std::string md5_hash;\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::hash<std::string> hasher;\n    md5_hash = hasher(text);\n    return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmppqt0cywb: /tmp/tmppqt0cywb.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string md5_hash = md5(text);\n    return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmp23o2vg19.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmp23o2vg19.cpp:11:28: error: \u2018md5\u2019 was not declared in this scope\n   11 |     std::string md5_hash = md5(text);\n      |                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string hash = md5(text);\n  return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpug2kk8yf.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpug2kk8yf.cpp:11:22: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string hash = md5(text);\n      |                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string hash = md5(text);\n  return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpug2kk8yf.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpug2kk8yf.cpp:11:22: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string hash = md5(text);\n      |                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmptaplpgem: /tmp/tmptaplpgem.cpp:17: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp2wd1vle5: /tmp/tmp2wd1vle5.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::hash<std::string>()(text);\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpujohylqw: /tmp/tmpujohylqw.cpp:17: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5 = md5sum(text);\n  return md5;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmp_zhru_mi.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmp_zhru_mi.cpp:11:21: error: \u2018md5sum\u2019 was not declared in this scope\n   11 |   std::string md5 = md5sum(text);\n      |                     ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) return std::nullopt;\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpd7kmo205: /tmp/tmpd7kmo205.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::string hash = md5(text);\n    return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "/tmp/tmpsv3kp5xn.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpsv3kp5xn.cpp:9:24: error: \u2018md5\u2019 was not declared in this scope\n    9 |     std::string hash = md5(text);\n      |                        ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "tmpsnpzzz9p: /tmp/tmpsnpzzz9p.cpp:17: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    std::string md5_hash;\n    md5_state_t state;\n    md5_init(&state);\n    md5_append(&state, (const md5_byte_t *)text.c_str(), text.length());\n    md5_finish(&state, (md5_byte_t *)md5_hash.data());\n    return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "/tmp/tmpf_ra3whm.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpf_ra3whm.cpp:9:5: error: \u2018md5_state_t\u2019 was not declared in this scope; did you mean \u2018mbstate_t\u2019?\n    9 |     md5_state_t state;\n      |     ^~~~~~~~~~~\n      |     mbstate_t\n/tmp/tmpf_ra3whm.cpp:10:15: error: \u2018state\u2019 was not declared in this scope\n   10 |     md5_init(&state);\n      |               ^~~~~\n/tmp/tmpf_ra3whm.cpp:10:5: error: \u2018md5_init\u2019 was not declared in this scope\n   10 |     md5_init(&state);\n      |     ^~~~~~~~\n/tmp/tmpf_ra3whm.cpp:11:31: error: ISO C++ forbids declaration of \u2018type name\u2019 with no type [-fpermissive]\n   11 |     md5_append(&state, (const md5_byte_t *)text.c_str(), text.length());\n      |                               ^~~~~~~~~~\n/tmp/tmpf_ra3whm.cpp:11:25: error: expected primary-expression before \u2018const\u2019\n   11 |     md5_append(&state, (const md5_byte_t *)text.c_str(), text.length());\n      |                         ^~~~~\n/tmp/tmpf_ra3whm.cpp:11:25: error: expected \u2018)\u2019 before \u2018const\u2019\n   11 |     md5_append(&state, (const md5_byte_t *)text.c_str(), text.length());\n      |                        ~^~~~~\n      |                         )\n/tmp/tmpf_ra3whm.cpp:12:25: error: \u2018md5_byte_t\u2019 was not declared in this scope\n   12 |     md5_finish(&state, (md5_byte_t *)md5_hash.data());\n      |                         ^~~~~~~~~~\n/tmp/tmpf_ra3whm.cpp:12:37: error: expected primary-expression before \u2018)\u2019 token\n   12 |     md5_finish(&state, (md5_byte_t *)md5_hash.data());\n      |                                     ^\n/tmp/tmpf_ra3whm.cpp:12:5: error: \u2018md5_finish\u2019 was not declared in this scope; did you mean \u2018md5_hash\u2019?\n   12 |     md5_finish(&state, (md5_byte_t *)md5_hash.data());\n      |     ^~~~~~~~~~\n      |     md5_hash\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "tmpdn1iyggd: /tmp/tmpdn1iyggd.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "tmpdn1iyggd: /tmp/tmpdn1iyggd.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp2wd1vle5: /tmp/tmp2wd1vle5.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string md5_hash = md5(text);\n    return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmp23o2vg19.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmp23o2vg19.cpp:11:28: error: \u2018md5\u2019 was not declared in this scope\n   11 |     std::string md5_hash = md5(text);\n      |                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5 = md5_string(text);\n  return md5;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "/tmp/tmp76d3x18f.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmp76d3x18f.cpp:11:21: error: \u2018md5_string\u2019 was not declared in this scope\n   11 |   std::string md5 = md5_string(text);\n      |                     ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>()(text);\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmpf3v17oh6: /tmp/tmpf3v17oh6.cpp:14: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) return std::nullopt;\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmp4vx3p8c5: /tmp/tmp4vx3p8c5.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmptaplpgem: /tmp/tmptaplpgem.cpp:17: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string hash = md5(text);\n  return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpug2kk8yf.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpug2kk8yf.cpp:11:22: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string hash = md5(text);\n      |                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string hash = md5(text);\n  return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpug2kk8yf.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpug2kk8yf.cpp:11:22: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string hash = md5(text);\n      |                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return {};\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmpvyey3hxl: /tmp/tmpvyey3hxl.cpp:15: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  std::string hash = \"\";\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  for (char c : text) {\n    hash += std::to_string(c);\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : hash) {\n    ss << c;\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmpuj3gd4rd: /tmp/tmpuj3gd4rd.cpp:24: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "tmpsnpzzz9p: /tmp/tmpsnpzzz9p.cpp:17: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp2wd1vle5: /tmp/tmp2wd1vle5.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmptaplpgem: /tmp/tmptaplpgem.cpp:17: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << c;\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmplgsax2yy: /tmp/tmplgsax2yy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return {};\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmpvyey3hxl: /tmp/tmpvyey3hxl.cpp:15: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp2wd1vle5: /tmp/tmp2wd1vle5.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string hash = md5(text);\n    return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpgko3c2tp.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpgko3c2tp.cpp:11:24: error: \u2018md5\u2019 was not declared in this scope\n   11 |     std::string hash = md5(text);\n      |                        ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp2wd1vle5: /tmp/tmp2wd1vle5.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>()(text);\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpppnij0ab: /tmp/tmpppnij0ab.cpp:15: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmpx8q1rqwe: /tmp/tmpx8q1rqwe.cpp:17: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5_hash = md5(text);\n  return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "/tmp/tmphfskjufa.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmphfskjufa.cpp:11:26: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string md5_hash = md5(text);\n      |                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string hash = md5(text);\n  return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpug2kk8yf.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpug2kk8yf.cpp:11:22: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string hash = md5(text);\n      |                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5 = md5sum(text);\n  return md5;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmp_zhru_mi.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmp_zhru_mi.cpp:11:21: error: \u2018md5sum\u2019 was not declared in this scope\n   11 |   std::string md5 = md5sum(text);\n      |                     ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "tmpdn1iyggd: /tmp/tmpdn1iyggd.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string hash = md5(text);\n    return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpgko3c2tp.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpgko3c2tp.cpp:11:24: error: \u2018md5\u2019 was not declared in this scope\n   11 |     std::string hash = md5(text);\n      |                        ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp2wd1vle5: /tmp/tmp2wd1vle5.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::hash<std::string>()(text);\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpujohylqw: /tmp/tmpujohylqw.cpp:17: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string hash = md5(text);\n    return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpgko3c2tp.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpgko3c2tp.cpp:11:24: error: \u2018md5\u2019 was not declared in this scope\n   11 |     std::string hash = md5(text);\n      |                        ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "tmpsnpzzz9p: /tmp/tmpsnpzzz9p.cpp:17: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string hash = \"\";\n  std::stringstream ss;\n  for (auto c : text) {\n    ss << std::hex << std::setw(2) << std::setfill('0') << (int)c;\n  }\n  hash = ss.str();\n  return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmpfza63lk1: /tmp/tmpfza63lk1.cpp:21: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp2wd1vle5: /tmp/tmp2wd1vle5.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>()(text);\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpppnij0ab: /tmp/tmpppnij0ab.cpp:15: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::hash<std::string>{}(text);\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmplozm95au: /tmp/tmplozm95au.cpp:17: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string md5_hash = md5(text);\n    return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmp23o2vg19.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmp23o2vg19.cpp:11:28: error: \u2018md5\u2019 was not declared in this scope\n   11 |     std::string md5_hash = md5(text);\n      |                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string hash = md5(text);\n    return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpgko3c2tp.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpgko3c2tp.cpp:11:24: error: \u2018md5\u2019 was not declared in this scope\n   11 |     std::string hash = md5(text);\n      |                        ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::hash<std::string>()(text);\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpujohylqw: /tmp/tmpujohylqw.cpp:17: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) return std::nullopt;\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmp4vx3p8c5: /tmp/tmp4vx3p8c5.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) return std::nullopt;\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmp4vx3p8c5: /tmp/tmp4vx3p8c5.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string hash = md5(text);\n  return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpug2kk8yf.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpug2kk8yf.cpp:11:22: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string hash = md5(text);\n      |                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    std::string hash = md5(text);\n    if (hash.empty()) {\n        return std::nullopt;\n    }\n    return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "/tmp/tmpwj9hw1fo.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpwj9hw1fo.cpp:8:24: error: \u2018md5\u2019 was not declared in this scope\n    8 |     std::string hash = md5(text);\n      |                        ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5_hash = md5(text);\n  return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "/tmp/tmphfskjufa.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmphfskjufa.cpp:11:26: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string md5_hash = md5(text);\n      |                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    std::string md5_hash = md5(text);\n    if (md5_hash.empty()) {\n        return std::nullopt;\n    }\n    return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "/tmp/tmppijh1lwe.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmppijh1lwe.cpp:8:28: error: \u2018md5\u2019 was not declared in this scope\n    8 |     std::string md5_hash = md5(text);\n      |                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5_hash = md5(text);\n  return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "/tmp/tmphfskjufa.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmphfskjufa.cpp:11:26: error: \u2018md5\u2019 was not declared in this scope\n   11 |   std::string md5_hash = md5(text);\n      |                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>()(text);\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmpeuyl4m6v: /tmp/tmpeuyl4m6v.cpp:17: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::hash<std::string>()(text);\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpujohylqw: /tmp/tmpujohylqw.cpp:17: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string md5_hash = md5(text);\n    return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmp23o2vg19.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmp23o2vg19.cpp:11:28: error: \u2018md5\u2019 was not declared in this scope\n   11 |     std::string md5_hash = md5(text);\n      |                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string md5 = \"\";\n    std::transform(text.begin(), text.end(), std::back_inserter(md5),\n                   [](char c) { return std::tolower(c); });\n    return md5;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmpy7tyvqqq: /tmp/tmpy7tyvqqq.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string md5_hash = md5(text);\n    return md5_hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmp23o2vg19.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmp23o2vg19.cpp:11:28: error: \u2018md5\u2019 was not declared in this scope\n   11 |     std::string md5_hash = md5(text);\n      |                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    std::string md5 = md5_hash(text);\n    if (md5.empty()) {\n        return std::nullopt;\n    }\n    return md5;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "/tmp/tmp_sbmzs54.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmp_sbmzs54.cpp:8:23: error: \u2018md5_hash\u2019 was not declared in this scope\n    8 |     std::string md5 = md5_hash(text);\n      |                       ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>()(text);\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmpeuyl4m6v: /tmp/tmpeuyl4m6v.cpp:17: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string hash = \"\";\n    for (auto c : text) {\n        hash += std::bitset<8>(c).to_string();\n    }\n    return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmptecmwu7n: /tmp/tmptecmwu7n.cpp:19: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string md5 = md5_hash(text);\n    return md5;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "/tmp/tmpf96yiu8o.cpp: In function \u2018std::optional<std::__cxx11::basic_string<char> > string_to_md5(std::string)\u2019:\n/tmp/tmpf96yiu8o.cpp:11:23: error: \u2018md5_hash\u2019 was not declared in this scope\n   11 |     std::string md5 = md5_hash(text);\n      |                       ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpiox8jxld: /tmp/tmpiox8jxld.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpply7ityy: /tmp/tmpply7ityy.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for (auto c : text) {\n        ss << std::setw(2) << static_cast<int>(c);\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp50qo2d1i: /tmp/tmp50qo2d1i.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpl4nfw6zi: /tmp/tmpl4nfw6zi.cpp:20: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world')\n// '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty()) return std::nullopt;\n  std::stringstream ss;\n  ss << std::hex << std::uppercase << std::setfill('0');\n  for (auto c : text) {\n    ss << std::setw(2) << static_cast<int>(c);\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmp4vx3p8c5: /tmp/tmp4vx3p8c5.cpp:18: int main(): Assertion `candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\"' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}