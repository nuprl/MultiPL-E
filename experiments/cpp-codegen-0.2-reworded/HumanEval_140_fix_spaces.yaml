name: HumanEval_140_fix_spaces
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
  \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
  \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\"\
  \ Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\
  \n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example\
  \ 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
  Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"\
  Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) ==\
  \ (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) ==\
  \ (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
  ));\n}\n"
completions: ["    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    if (result.find(\"\
    \  \") != std::string::npos) {\n        result = result.replace(\"  \", \"_\"\
    );\n    }\n    return result;", "    std::string result;\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    while (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"\
    \  \"), 2, \"_\");\n    }\n    return result;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n\
    \            result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    while (result.find(\"  \") != std::string::npos) {\n  \
    \      result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if\
    \ (text[i] == ' ') {\n            result += '_';\n        } else {\n         \
    \   result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0]\
    \ == ' ') {\n        result[0] = '-';\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int\
    \ i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' &&\
    \ result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] =\
    \ '-';\n                result[i + 1] = '-';\n                result[i + 2] =\
    \ '-';\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int\
    \ i = 0; i < result.length() - 1; i++) {\n            if (result[i] == ' ' &&\
    \ result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n \
    \       }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n     \
    \       result += '_';\n        } else {\n            result += text[i];\n   \
    \     }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length();\
    \ i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n      \
    \          result[i] = '-';\n                result[i + 1] = '-';\n          \
    \  }\n        }\n    }\n    return result;", "    std::string result = \"\";\n\
    \    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n\
    \            result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    while (result.find(\"  \") != std::string::npos) {\n  \
    \      result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n \
    \       if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.size() > 2 &&\
    \ result[0] == ' ' && result[1] == ' ') {\n        result[0] = '_';\n        result[1]\
    \ = '-';\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n       \
    \     result += '_';\n        } else {\n            result += text[i];\n     \
    \   }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size();\
    \ i++) {\n            if (result[i] == ' ') {\n                result[i] = '-';\n\
    \            }\n        }\n    }\n    return result;", "    std::string::size_type\
    \ pos = 0;\n    while ((pos = text.find(\" \", pos)) != std::string::npos) {\n\
    \        if (pos > 0 && text[pos - 1] == ' ') {\n            text.erase(pos, 1);\n\
    \            text.insert(pos, \"_\");\n            pos++;\n        }\n    }\n\
    \    pos = 0;\n    while ((pos = text.find(\"  \", pos)) != std::string::npos)\
    \ {\n        if (pos > 0 && text[pos - 1] == ' ') {\n            text.erase(pos,\
    \ 1);\n            text.insert(pos, \"_\");\n            pos++;\n        }\n \
    \   }\n    return text;", "    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.length() > 2) {\n        for (int i = 0; i < result.length();\
    \ i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n      \
    \          result[i] = '-';\n            }\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n \
    \       if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.size() > 2 &&\
    \ result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    while (result.find(\" \
    \ \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2,\
    \ \"__\");\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n          \
    \  result += '_';\n        } else {\n            result += text[i];\n        }\n\
    \    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length()\
    \ - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i\
    \ + 1, 2);\n            }\n        }\n    }\n    return result;", "    int i =\
    \ 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n       \
    \     text[i] = '_';\n        }\n        i++;\n    }\n    i = 0;\n    while (i\
    \ < text.length()) {\n        if (text[i] == ' ' && text[i+1] == ' ') {\n    \
    \        text[i] = '-';\n            text.erase(i+1, 1);\n        }\n        i++;\n\
    \    }\n    return text;", "    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.length() > 2) {\n        for (int i = 0; i < result.length() -\
    \ 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i\
    \ + 1, 2);\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int\
    \ i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' &&\
    \ result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n \
    \       }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n       \
    \     result += '_';\n        } else {\n            result += text[i];\n     \
    \   }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == '\
    \ ') {\n        result[0] = '-';\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == '\
    \ ') {\n        result[0] = '-';\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int\
    \ i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i+1]\
    \ == ' ' && result[i+2] == ' ') {\n                result[i] = '-';\n        \
    \        result[i+1] = '-';\n                result[i+2] = '-';\n            }\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n     \
    \       result += '_';\n        } else {\n            result += text[i];\n   \
    \     }\n    }\n    if (result.length() > 2 && result[0] == ' ') {\n        result[0]\
    \ = '-';\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n     \
    \       result += '_';\n        } else {\n            result += text[i];\n   \
    \     }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length()\
    \ - 1; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n \
    \               result[i] = '-';\n            }\n        }\n    }\n    return\
    \ result;", "    int i = 0;\n    while (i < text.length()) {\n        if (text[i]\
    \ == ' ') {\n            text[i] = '_';\n        }\n        i++;\n    }\n    i\
    \ = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ' && text[i+1]\
    \ == ' ') {\n            text[i] = '-';\n            text[i+1] = '-';\n      \
    \      i++;\n        }\n        i++;\n    }\n    return text;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == '\
    \ ') {\n        result[0] = '-';\n    }\n    return result;", "    std::string::size_type\
    \ pos = 0;\n    while ((pos = text.find(\" \", pos)) != std::string::npos) {\n\
    \        if (pos > 0 && text[pos - 1] == ' ') {\n            text.replace(pos,\
    \ 1, \"_\");\n            pos += 1;\n        } else {\n            text.replace(pos,\
    \ 1, \"_\");\n            pos += 1;\n        }\n    }\n    pos = 0;\n    while\
    \ ((pos = text.find(\"  \", pos)) != std::string::npos) {\n        if (pos > 0\
    \ && text[pos - 1] == ' ') {\n            text.replace(pos, 2, \"_\");\n     \
    \       pos += 1;\n        } else {\n            text.replace(pos, 2, \"_\");\n\
    \            pos += 1;\n        }\n    }\n    return text;", "    std::string::size_type\
    \ pos = 0;\n    while ((pos = text.find(\" \", pos)) != std::string::npos) {\n\
    \        if (pos > 0 && text[pos - 1] == ' ') {\n            text.erase(pos, 1);\n\
    \            text.insert(pos, \"_\");\n            pos += 2;\n        } else {\n\
    \            pos++;\n        }\n    }\n    return text;", "    std::string ret\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            ret += '_';\n        } else {\n            ret += text[i];\n\
    \        }\n    }\n    if (ret.length() > 2) {\n        for (int i = 0; i < ret.length()\
    \ - 2; i++) {\n            if (ret[i] == ' ' && ret[i + 1] == ' ' && ret[i + 2]\
    \ == ' ') {\n                ret[i] = '-';\n                ret.erase(i + 1, 2);\n\
    \            }\n        }\n    }\n    return ret;", "    int i = 0;\n    int j\
    \ = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n     \
    \       text[i] = '_';\n            j = i + 1;\n        } else {\n           \
    \ i++;\n        }\n    }\n    while (j < text.length()) {\n        if (text[j]\
    \ == ' ' && text[j - 1] == ' ') {\n            text[j] = '-';\n            j++;\n\
    \        } else {\n            j++;\n        }\n    }\n    return text;", "  \
    \  std::string result = \"\";\n    for (int i = 0; i < text.size(); ++i) {\n \
    \       if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.size() > 2 &&\
    \ result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.length() > 2)\
    \ {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i]\
    \ = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    while (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"\
    \  \"), 2, \"_\");\n    }\n    return result;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n\
    \            result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size()\
    \ - 2; i++) {\n            if (result[i] == ' ' && result[i+1] == ' ') {\n   \
    \             result[i] = '-';\n                result[i+1] = '-';\n         \
    \   }\n        }\n    }\n    return result;", "    std::string result = \"\";\n\
    \    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n\
    \            result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    if (result.length() > 2 && result[0] == ' ' && result[1]\
    \ == ' ') {\n        result = result.substr(1);\n        for (int i = 0; i < result.length();\
    \ i++) {\n            if (result[i] == ' ') {\n                result[i] = '-';\n\
    \            }\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] ==\
    \ ' ') {\n            result += '_';\n        } else {\n            result +=\
    \ text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' &&\
    \ result[1] == ' ') {\n        result[0] = '-';\n        result[1] = '-';\n  \
    \  }\n    return result;", "    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result +=\
    \ '_';\n        } else {\n            result += text[i];\n        }\n    }\n \
    \   if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; ++i)\
    \ {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2]\
    \ == ' ') {\n                result[i] = '-';\n                result.erase(i\
    \ + 1, 2);\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == '\
    \ ' && result[1] == ' ') {\n        result[0] = '-';\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n \
    \       if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.size() > 2 &&\
    \ result[0] == ' ' && result[1] == ' ') {\n        result = result.substr(2);\n\
    \        for (int i = 0; i < result.size(); i++) {\n            if (result[i]\
    \ == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n\
    \    return result;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ text.length(); i++) {\n        if (text[i] == ' ') {\n            result +=\
    \ '_';\n        } else {\n            result += text[i];\n        }\n    }\n \
    \   if (result.length() > 2) {\n        for (int i = 0; i < result.length() -\
    \ 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result[i +\
    \ 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"\
    \  \"), 2, \"_\");\n    }\n    return result;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ')\
    \ {\n            result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    if (result.find(\"  \") != std::string::npos) {\n     \
    \   result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n \
    \       if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.size() > 2)\
    \ {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i]\
    \ = '-';\n                result[i + 1] = '-';\n                result[i + 2]\
    \ = '-';\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] ==\
    \ ' ') {\n            result += '_';\n        } else {\n            result +=\
    \ text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' &&\
    \ result[1] == ' ') {\n        result[0] = '-';\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.size() > 2)\
    \ {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i]\
    \ = '-';\n                result[i + 1] = '-';\n                result[i + 2]\
    \ = '-';\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += c;\n        }\n    }\n    if\
    \ (result.size() > 2) {\n        auto it = result.begin();\n        while (it\
    \ != result.end()) {\n            if (*it == ' ' && *(it + 1) == ' ') {\n    \
    \            *it = '-';\n                it += 2;\n            } else {\n    \
    \            it++;\n            }\n        }\n    }\n    return result;", "  \
    \  std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n \
    \       if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.size() > 2 &&\
    \ result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.find(\"  \"\
    ) != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\"\
    );\n    }\n    return result;", "    std::string result = \"\";\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n          \
    \  result += '_';\n        } else {\n            result += text[i];\n        }\n\
    \    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length()\
    \ - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i\
    \ + 1, 1);\n            }\n        }\n    }\n    return result;", "    std::string::size_type\
    \ pos = 0;\n    while ((pos = text.find(' ', pos)) != std::string::npos) {\n \
    \       if (pos > 0 && text[pos - 1] == ' ') {\n            text.erase(pos, 1);\n\
    \            text.insert(pos, '_');\n        }\n        pos++;\n    }\n    pos\
    \ = 0;\n    while ((pos = text.find(' ', pos)) != std::string::npos) {\n     \
    \   if (pos > 0 && text[pos - 1] == ' ' && text[pos + 1] == ' ') {\n         \
    \   text.erase(pos, 1);\n            text.insert(pos, '-');\n        }\n     \
    \   pos++;\n    }\n    return text;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n     \
    \       result += '_';\n        } else {\n            result += text[i];\n   \
    \     }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length()\
    \ - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result[i +\
    \ 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.size() > 2) {\n        for (int i = 0; i < result.size(); i++)\
    \ {\n            if (result[i] == ' ' && result[i+1] == ' ') {\n             \
    \   result[i] = '-';\n            }\n        }\n    }\n    return result;", " \
    \   std::string result;\n    for (int i = 0; i < text.size(); i++) {\n       \
    \ if (text[i] == ' ') {\n            result += '_';\n        } else {\n      \
    \      result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n  \
    \      for (int i = 0; i < result.size(); i++) {\n            if (result[i] ==\
    \ ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n\
    \    return result;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ text.length(); i++) {\n        if (text[i] == ' ') {\n            result +=\
    \ '_';\n        } else {\n            result += text[i];\n        }\n    }\n \
    \   if (result.length() > 2) {\n        for (int i = 0; i < result.length() -\
    \ 1; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n   \
    \             result[i] = '-';\n            }\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.length() > 2)\
    \ {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n      \
    \      }\n        }\n    }\n    return result;", "    int i = 0;\n    while (i\
    \ < text.length()) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n\
    \        }\n        i++;\n    }\n    i = 0;\n    while (i < text.length()) {\n\
    \        if (text[i] == ' ' && text[i + 1] == ' ') {\n            text[i] = '-';\n\
    \            text[i + 1] = '-';\n            i++;\n        }\n        i++;\n \
    \   }\n    return text;", "    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result +=\
    \ '_';\n        } else {\n            result += text[i];\n        }\n    }\n \
    \   if (result.size() > 2) {\n        for (int i = 0; i < result.size(); i++)\
    \ {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n           \
    \     result[i] = '-';\n            }\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.length() > 2)\
    \ {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i]\
    \ = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.length() > 2) {\n        for (int i = 0; i < result.length() -\
    \ 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result[i +\
    \ 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2;\
    \ i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result[i +\
    \ 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n\
    \    }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ text.length(); ++i) {\n        if (text[i] == ' ') {\n            result +=\
    \ '_';\n        } else {\n            result += text[i];\n        }\n    }\n \
    \   if (result.length() > 2 && result[0] == ' ') {\n        result[0] = '-';\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.length() > 2) {\n        for (int i = 0; i < result.length() -\
    \ 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i\
    \ + 1, 1);\n            }\n        }\n    }\n    return result;", "    int count\
    \ = 0;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == '\
    \ ') {\n            count++;\n            if (count == 2) {\n                text[i]\
    \ = '_';\n                count = 0;\n            }\n        } else {\n      \
    \      count = 0;\n        }\n    }\n    return text;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == '\
    \ ' && result[1] == ' ') {\n        result[0] = '-';\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if\
    \ (text[i] == ' ') {\n            result += '_';\n        } else {\n         \
    \   result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0]\
    \ == ' ' && result[1] == ' ') {\n        result.erase(0, 1);\n        result[0]\
    \ = '-';\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n     \
    \       result += '_';\n        } else {\n            result += text[i];\n   \
    \     }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length()\
    \ - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i\
    \ + 1, 1);\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int\
    \ i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' &&\
    \ result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] =\
    \ '-';\n                result.erase(i + 1, 2);\n            }\n        }\n  \
    \  }\n    return result;", "    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result +=\
    \ '_';\n        } else {\n            result += text[i];\n        }\n    }\n \
    \   if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++)\
    \ {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2]\
    \ == ' ') {\n                result[i] = '-';\n                result.erase(i\
    \ + 1, 1);\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int\
    \ i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' &&\
    \ result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] =\
    \ '-';\n                result.erase(i + 1, 1);\n            }\n        }\n  \
    \  }\n    return result;", "    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.length() > 2) {\n        for (int i = 0; i < result.length() -\
    \ 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n   \
    \             result[i] = '-';\n            }\n        }\n    }\n    return result;",
  "    std::string ret = \"\";\n    for (int i = 0; i < text.size(); i++) {\n    \
    \    if (text[i] == ' ') {\n            ret += '_';\n        } else {\n      \
    \      ret += text[i];\n        }\n    }\n    if (ret.size() > 2) {\n        for\
    \ (int i = 0; i < ret.size() - 2; i++) {\n            if (ret[i] == ' ' && ret[i\
    \ + 1] == ' ' && ret[i + 2] == ' ') {\n                ret[i] = '-';\n       \
    \         ret[i + 1] = '-';\n                ret[i + 2] = '-';\n            }\n\
    \        }\n    }\n    return ret;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n     \
    \       result += '_';\n        } else {\n            result += text[i];\n   \
    \     }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length();\
    \ i++) {\n            if (result[i] == ' ') {\n                result[i] = '-';\n\
    \            }\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] ==\
    \ ' ') {\n            result += '_';\n        } else {\n            result +=\
    \ text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n\
    \        result[0] = '_';\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int\
    \ i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' &&\
    \ result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] =\
    \ '-';\n                result.erase(i + 1, 2);\n            }\n        }\n  \
    \  }\n    return result;", "    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.length() > 2) {\n        for (int i = 0; i < result.length() -\
    \ 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i\
    \ + 1, 2);\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (auto i = 0; i < text.size(); ++i) {\n        if (text[i] ==\
    \ ' ') {\n            result.push_back('_');\n        } else {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    while (result.size() > 0 && result[0] == ' ') {\n     \
    \   result.erase(0, 1);\n    }\n    while (result.size() > 0 && result[result.size()\
    \ - 1] == ' ') {\n        result.erase(result.size() - 1, 1);\n    }\n    if (result.size()\
    \ > 2 && result[0] == ' ' && result[1] == ' ') {\n        result.erase(0, 1);\n\
    \    }\n    if (result.size() > 2 && result[result.size() - 1] == ' ' && result[result.size()\
    \ - 2] == ' ') {\n        result.erase(result.size() - 1, 1);\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    if (result.length()\
    \ > 2) {\n        for (int i = 0; i < result.length() - 1; i++) {\n          \
    \  if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i]\
    \ = '-';\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos)\
    \ {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    if (result.length()\
    \ > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n          \
    \  if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n \
    \               result[i] = '-';\n                result.erase(i + 1, 2);\n  \
    \          }\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n\
    \            result.push_back('_');\n        } else {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0]\
    \ = '-';\n    }\n    return result;", "    std::string result;\n    for (int i\
    \ = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n      \
    \  result[0] = '-';\n    }\n    return result;", "    int n = text.size();\n \
    \   std::string res = \"\";\n    for (int i = 0; i < n; i++) {\n        if (text[i]\
    \ == ' ') {\n            res += '_';\n        } else {\n            res += text[i];\n\
    \        }\n    }\n    if (res.size() > 2 && res[0] == ' ') {\n        res[0]\
    \ = '-';\n    }\n    return res;", "    std::string result = \"\";\n    for (int\
    \ i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '_';\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.length() > 2 && result.substr(result.length() - 2, 2) == \"  \"\
    ) {\n        result = result.substr(0, result.length() - 2);\n        result +=\
    \ '-';\n    }\n    return result;", "    std::string result;\n    for (int i =\
    \ 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '_';\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.length() > 2) {\n        for (int i = 0; i < result.length() -\
    \ 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i\
    \ + 1, 2);\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.size() > 2 && result.substr(result.size()\
    \ - 2, 2) == \"  \") {\n        result = result.substr(0, result.size() - 2);\n\
    \        result += '-';\n    }\n    return result;", "    std::string result =\
    \ \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] ==\
    \ ' ') {\n            result += '_';\n        } else {\n            result +=\
    \ text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int\
    \ i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' &&\
    \ result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] =\
    \ '-';\n                result.erase(i + 1, 2);\n            }\n        }\n  \
    \  }\n    return result;", "    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result +=\
    \ '_';\n        } else {\n            result += text[i];\n        }\n    }\n \
    \   if (result.size() > 2) {\n        for (int i = 0; i < result.size(); i++)\
    \ {\n            if (result[i] == ' ' && result[i+1] == ' ') {\n             \
    \   result[i] = '-';\n                result.erase(i+1);\n            }\n    \
    \    }\n    }\n    return result;", "    std::string result;\n    for (int i =\
    \ 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n      \
    \  result[0] = '-';\n    }\n    return result;", "    std::string ret = \"\";\n\
    \    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n\
    \            ret += '_';\n        } else {\n            ret += text[i];\n    \
    \    }\n    }\n    if (ret.length() > 2 && ret.find(\"  \") != std::string::npos)\
    \ {\n        ret = ret.replace(\"  \", \"_\");\n    }\n    return ret;", "   \
    \ std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if\
    \ (text[i] == ' ') {\n            result += '_';\n        } else {\n         \
    \   result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0]\
    \ == ' ' && result[1] == ' ') {\n        result[0] = '-';\n    }\n    return result;",
  "    std::string ret = \"\";\n    for (int i = 0; i < text.size(); i++) {\n    \
    \    if (text[i] == ' ') {\n            ret += '_';\n        } else {\n      \
    \      ret += text[i];\n        }\n    }\n    while (ret.find(\"  \") != std::string::npos)\
    \ {\n        ret.replace(ret.find(\"  \"), 2, \"__\");\n    }\n    return ret;",
  "    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if\
    \ (text[i] == ' ') {\n            result.push_back('_');\n        } else {\n \
    \           result.push_back(text[i]);\n        }\n    }\n    if (result.size()\
    \ > 2) {\n        for (int i = 0; i < result.size(); i++) {\n            if (result[i]\
    \ == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            result.push_back('_');\n\
    \        } else {\n            result.push_back(text[i]);\n        }\n    }\n\
    \    while (result.size() > 0 && result[0] == ' ') {\n        result.erase(0,\
    \ 1);\n    }\n    while (result.size() > 0 && result[result.size() - 1] == ' ')\
    \ {\n        result.erase(result.size() - 1, 1);\n    }\n    if (result.size()\
    \ > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if\
    \ (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n     \
    \           result[i] = '-';\n                result.erase(i + 1, 1);\n      \
    \          result.erase(i + 1, 1);\n            }\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    if (result.length()\
    \ > 2 && result[0] == ' ' && result[1] == ' ') {\n        result = result.substr(2);\n\
    \        for (int i = 0; i < result.length(); i++) {\n            if (result[i]\
    \ == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n\
    \    return result;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ text.length(); i++) {\n        if (text[i] == ' ') {\n            result +=\
    \ '_';\n        } else {\n            result += text[i];\n        }\n    }\n \
    \   if (result.length() > 2) {\n        for (int i = 0; i < result.length() -\
    \ 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i\
    \ + 1, 2);\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] ==\
    \ ' ') {\n            result += '_';\n        } else {\n            result +=\
    \ text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n\
    \        result[0] = '-';\n    }\n    return result;", "    std::string result;\n\
    \    for (std::string::size_type i = 0; i < text.size(); ++i) {\n        if (text[i]\
    \ == ' ') {\n            result.push_back('_');\n        } else {\n          \
    \  result.push_back(text[i]);\n        }\n    }\n    while (result.size() > 0\
    \ && result[0] == ' ') {\n        result.erase(result.begin());\n    }\n    while\
    \ (result.size() > 0 && result[result.size() - 1] == ' ') {\n        result.erase(result.end()\
    \ - 1);\n    }\n    if (result.size() > 2) {\n        for (std::string::size_type\
    \ i = 0; i < result.size() - 2; ++i) {\n            if (result[i] == ' ' && result[i\
    \ + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n \
    \               result.erase(i + 1);\n            }\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    if (result.length()\
    \ > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n          \
    \  if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n \
    \               result[i] = '-';\n                result[i + 1] = '-';\n     \
    \           result[i + 2] = '-';\n            }\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    if (result.size()\
    \ > 2) {\n        for (int i = 0; i < result.size(); i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n      \
    \          result[i + 1] = '-';\n            }\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n \
    \       if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.size() > 2 &&\
    \ result[0] == ' ' && result[1] == ' ') {\n        result[0] = '_';\n        result[1]\
    \ = '-';\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n     \
    \       result += '_';\n        } else {\n            result += text[i];\n   \
    \     }\n    }\n    if (result.find(\"  \") != std::string::npos) {\n        result\
    \ = result.replace(\"  \", \"_\");\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.find(\"  \") != std::string::npos)\
    \ {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    if (result.length()\
    \ > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n          \
    \  if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n \
    \               result[i] = '-';\n                result.erase(i + 1, 2);\n  \
    \          }\n        }\n    }\n    return result;", "    std::string result =\
    \ \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] ==\
    \ ' ') {\n            result += '_';\n        } else {\n            result +=\
    \ text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int\
    \ i = 0; i < result.length() - 1; i++) {\n            if (result[i] == ' ' &&\
    \ result[i + 1] == ' ') {\n                result[i] = '-';\n                result[i\
    \ + 1] = '-';\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int\
    \ i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i\
    \ + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n \
    \               result[i + 1] = '-';\n                result[i + 2] = '-';\n \
    \           }\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.find(\"  \") != std::string::npos)\
    \ {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < text.size(); i++)\
    \ {\n        if (text[i] == ' ') {\n            result += '_';\n        } else\
    \ {\n            result += text[i];\n        }\n    }\n    if (result.size() >\
    \ 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if\
    \ (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n     \
    \           result[i] = '-';\n                result.erase(i + 1, 1);\n      \
    \      }\n        }\n    }\n    return result;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n\
    \            result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size()\
    \ - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result[i +\
    \ 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n\
    \    }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ text.size(); ++i) {\n        if (text[i] == ' ') {\n            result.push_back('_');\n\
    \        } else {\n            result.push_back(text[i]);\n        }\n    }\n\
    \    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n      \
    \  result[0] = '-';\n    }\n    return result;", "    std::string result;\n  \
    \  for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n  \
    \          result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0]\
    \ = '-';\n    }\n    return result;", "    std::string result;\n    for (int i\
    \ = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.size() > 2) {\n        for (int i = 0; i < result.size(); i++)\
    \ {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n           \
    \     result[i] = '-';\n            }\n        }\n    }\n    return result;",
  "    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i]\
    \ == ' ') {\n            text[i] = '_';\n            j = i;\n        }\n     \
    \   i++;\n    }\n    while (j < text.length()) {\n        if (text[j] == ' ' &&\
    \ text[j + 1] == ' ') {\n            text[j] = '-';\n            text[j + 1] =\
    \ '-';\n        }\n        j++;\n    }\n    return text;", "    int i = 0;\n \
    \   int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n\
    \            text[i] = '_';\n            j = i;\n        }\n        i++;\n   \
    \ }\n    while (j < text.length()) {\n        if (text[j] == ' ' && text[j+1]\
    \ == ' ') {\n            text[j] = '-';\n            text[j+1] = '-';\n      \
    \  }\n        j++;\n    }\n    return text;", "    std::string result = \"\";\n\
    \    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n\
    \            result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    while (result.find(\"  \") != std::string::npos) {\n  \
    \      result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n \
    \       if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.size() > 2 &&\
    \ result[0] == ' ' && result[1] == ' ') {\n        result = \"_\" + result.substr(2);\n\
    \    }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n\
    \        } else {\n            result += text[i];\n        }\n    }\n    if (result.size()\
    \ > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if\
    \ (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n     \
    \           result[i] = '-';\n                result[i + 1] = '-';\n         \
    \       result[i + 2] = '-';\n            }\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.find(\"  \"\
    ) != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"__\"\
    );\n    }\n    return result;", "    std::string result = \"\";\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n          \
    \  result += '_';\n        } else {\n            result += text[i];\n        }\n\
    \    }\n    if (result.length() > 2 && result.find(\"  \") != std::string::npos)\
    \ {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    if (result.size()\
    \ > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if\
    \ (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n     \
    \           result[i] = '-';\n                result[i + 1] = '-';\n         \
    \       result[i + 2] = '-';\n            }\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.length() > 2)\
    \ {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i]\
    \ = '-';\n                result[i + 1] = '-';\n                result[i + 2]\
    \ = '-';\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.find(\"  \") != std::string::npos)\
    \ {\n        result = result.replace(\"  \", \"_\");\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.length() > 2)\
    \ {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i]\
    \ = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.length() > 2 && result.find(\"  \") != std::string::npos) {\n\
    \        result.replace(result.find(\"  \"), 2, \"__\");\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if\
    \ (text[i] == ' ') {\n            result += '_';\n        } else {\n         \
    \   result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0]\
    \ == ' ' && result[1] == ' ') {\n        result[0] = '-';\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n \
    \       if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.size() > 2)\
    \ {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i]\
    \ = '-';\n                result[i + 1] = '-';\n                result[i + 2]\
    \ = '-';\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ')\
    \ {\n        result[0] = '-';\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int\
    \ i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' &&\
    \ result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] =\
    \ '-';\n                result[i + 1] = '-';\n                result[i + 2] =\
    \ '-';\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int\
    \ i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i\
    \ + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n \
    \               result[i + 1] = '-';\n                result[i + 2] = '-';\n \
    \           }\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.length() > 2 && result.substr(result.length()\
    \ - 2) == \"  \") {\n        result.replace(result.length() - 2, 2, \"_\");\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2;\
    \ i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i\
    \ + 1, 2);\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int\
    \ i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i\
    \ + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n \
    \               result.erase(i + 1, 2);\n            }\n        }\n    }\n   \
    \ return result;", "    std::string result;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    if (result.size()\
    \ > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.length() > 2)\
    \ {\n        for (int i = 0; i < result.length() - 1; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n      \
    \          result[i + 1] = '-';\n            }\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.length() > 2)\
    \ {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i]\
    \ = '-';\n                result[i + 1] = '-';\n                result[i + 2]\
    \ = '-';\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (std::string::size_type i = 0; i < text.size(); ++i) {\n  \
    \      if (text[i] == ' ') {\n            result += '_';\n        } else {\n \
    \           result += text[i];\n        }\n    }\n    if (result.size() > 2 &&\
    \ result[result.size() - 1] == ' ') {\n        result.erase(result.size() - 1);\n\
    \        result += '-';\n    }\n    return result;", "    std::string result =\
    \ \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] ==\
    \ ' ') {\n            result += '_';\n        } else {\n            result +=\
    \ text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos)\
    \ {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    while (result.find(\"\
    \  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2,\
    \ \"_\");\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n       \
    \     result += '_';\n        } else {\n            result += text[i];\n     \
    \   }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0]\
    \ = '-';\n    }\n    return result;", "    std::string::size_type pos = 0;\n \
    \   while ((pos = text.find(' ', pos)) != std::string::npos) {\n        if (pos\
    \ > 0 && text[pos - 1] == ' ') {\n            text.erase(pos, 1);\n          \
    \  text.insert(pos, '_');\n        }\n        pos++;\n    }\n    pos = 0;\n  \
    \  while ((pos = text.find(' ', pos)) != std::string::npos) {\n        if (pos\
    \ > 0 && text[pos - 1] == ' ' && pos < text.size() - 1 && text[pos + 1] == ' ')\
    \ {\n            text.erase(pos, 1);\n            text.insert(pos, '-');\n   \
    \     }\n        pos++;\n    }\n    return text;", "    std::string result = \"\
    \";\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ')\
    \ {\n            result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1]\
    \ == ' ') {\n        result = result.substr(2);\n    }\n    return result;", " \
    \   std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n       \
    \ if (text[i] == ' ') {\n            result += '_';\n        } else {\n      \
    \      result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0]\
    \ == ' ') {\n        result[0] = '-';\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int\
    \ i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' &&\
    \ result[i + 1] == ' ') {\n                result[i] = '-';\n                result[i\
    \ + 1] = '-';\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' '\
    \ && result[1] == ' ') {\n        result.erase(0, 1);\n    }\n    return result;",
  "    std::string::size_type pos = 0;\n    while ((pos = text.find(' ', pos)) !=\
    \ std::string::npos) {\n        if (pos > 0 && text[pos - 1] == ' ') {\n     \
    \       text.replace(pos, 1, \"_\");\n        } else {\n            text.replace(pos,\
    \ 1, \" \");\n        }\n        pos++;\n    }\n    return text;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' '\
    \ && result[1] == ' ') {\n        result.erase(0, 1);\n        result[0] = '-';\n\
    \    }\n    return result;", "    std::string::size_type pos = 0;\n    while ((pos\
    \ = text.find(\" \", pos)) != std::string::npos) {\n        if (pos > 0 && text[pos\
    \ - 1] == ' ') {\n            text.replace(pos, 1, \"_\");\n        } else {\n\
    \            text.replace(pos, 1, \" \");\n        }\n        pos++;\n    }\n\
    \    return text;", "    std::string result;\n    for (auto c : text) {\n    \
    \    if (c == ' ') {\n            result += '_';\n        } else {\n         \
    \   result += c;\n        }\n    }\n    auto pos = result.find(\"  \");\n    while\
    \ (pos != std::string::npos) {\n        result.replace(pos, 2, \"_\");\n     \
    \   pos = result.find(\"  \", pos + 1);\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] ==\
    \ ' ') {\n            result.push_back('_');\n        } else {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size();\
    \ ++i) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n      \
    \          result[i] = '-';\n            }\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.length() > 2)\
    \ {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i]\
    \ = '-';\n                result.erase(i + 1, 1);\n            }\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.length() > 2) {\n        for (int i = 0; i < result.length() -\
    \ 1; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n   \
    \             result[i] = '-';\n            }\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.length() > 2)\
    \ {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i]\
    \ = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n\
    \    }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ text.length(); i++) {\n        if (text[i] == ' ') {\n            result +=\
    \ '_';\n        } else {\n            result += text[i];\n        }\n    }\n \
    \   if (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"\
    \  \"), 2, \"_\");\n    }\n    return result;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ')\
    \ {\n            result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i <\
    \ result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i +\
    \ 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n   \
    \             result.erase(i + 1, 2);\n            }\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < text.size(); i++)\
    \ {\n        if (text[i] == ' ') {\n            result += '_';\n        } else\
    \ {\n            result += text[i];\n        }\n    }\n    if (result.size() >\
    \ 2) {\n        for (int i = 0; i < result.size(); i++) {\n            if (result[i]\
    \ == ' ' && result[i+1] == ' ') {\n                result[i] = '-';\n        \
    \        result.erase(i+1);\n            }\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.length() > 2)\
    \ {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i]\
    \ = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n\
    \    }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ text.size(); i++) {\n        if (text[i] == ' ') {\n            result.push_back('_');\n\
    \        } else {\n            result.push_back(text[i]);\n        }\n    }\n\
    \    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n\
    \    }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n\
    \        } else {\n            result += text[i];\n        }\n    }\n    while\
    \ (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"\
    \  \"), 2, \"_\");\n    }\n    return result;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n\
    \            result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0]\
    \ = '-';\n    }\n    return result;", "    std::string result;\n    for (std::string::size_type\
    \ i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result.push_back('_');\n\
    \        } else {\n            result.push_back(text[i]);\n        }\n    }\n\
    \    if (result.size() > 2) {\n        for (std::string::size_type i = 0; i <\
    \ result.size() - 2; ++i) {\n            if (result[i] == ' ' && result[i + 1]\
    \ == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n      \
    \          result.erase(i + 1, 1);\n            }\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    if (result.size()\
    \ > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if\
    \ (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n     \
    \           result[i] = '-';\n                result.erase(i + 1, 2);\n      \
    \      }\n        }\n    }\n    return result;", "    std::string result;\n  \
    \  for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n  \
    \          result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size()\
    \ - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result[i +\
    \ 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.length() > 2) {\n        for (int i = 0; i < result.length() -\
    \ 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n   \
    \             result[i] = '-';\n            }\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n      \
    \  if (text[i] == ' ') {\n            result += '_';\n        } else {\n     \
    \       result += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0]\
    \ == ' ') {\n        result[0] = '_';\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int\
    \ i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i\
    \ + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n \
    \               result[i + 1] = '-';\n                result[i + 2] = '-';\n \
    \           }\n        }\n    }\n    return result;", "    std::string::size_type\
    \ pos = 0;\n    while ((pos = text.find(\" \", pos)) != std::string::npos) {\n\
    \        if (pos > 0 && text[pos - 1] == ' ') {\n            text.replace(pos,\
    \ 1, \"_\");\n        }\n        pos++;\n    }\n    pos = 0;\n    while ((pos\
    \ = text.find(\"  \", pos)) != std::string::npos) {\n        if (pos > 0 && text[pos\
    \ - 1] == ' ') {\n            text.replace(pos, 2, \"_\");\n        }\n      \
    \  pos++;\n    }\n    return text;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n     \
    \       result += '_';\n        } else {\n            result += text[i];\n   \
    \     }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length()\
    \ - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n \
    \               result[i] = '-';\n                result[i + 1] = '-';\n     \
    \       }\n        }\n    }\n    return result;", "    std::string result;\n \
    \   for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n \
    \           result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size();\
    \ ++i) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n      \
    \          result[i] = '-';\n                result[i + 1] = '-';\n          \
    \  }\n        }\n    }\n    return result;", "    int i = 0;\n    int j = 0;\n\
    \    while (i < text.length()) {\n        if (text[i] == ' ') {\n            text[i]\
    \ = '_';\n            j = i;\n        }\n        i++;\n    }\n    if (j < text.length())\
    \ {\n        while (text[j] == ' ') {\n            text[j] = '_';\n          \
    \  j++;\n        }\n    }\n    return text;", "    std::string result = \"\";\n\
    \    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n\
    \            result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i <\
    \ result.length() - 1; i++) {\n            if (result[i] == ' ' && result[i +\
    \ 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n \
    \   }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.length() > 2 && result[0] == ' ') {\n        result[0] = '-';\n\
    \    }\n    return result;", "    std::string ret = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (text[i] == ' ') {\n            ret +=\
    \ '_';\n        } else {\n            ret += text[i];\n        }\n    }\n    if\
    \ (ret.length() > 2) {\n        for (int i = 0; i < ret.length() - 2; i++) {\n\
    \            if (ret[i] == ' ' && ret[i + 1] == ' ') {\n                ret[i]\
    \ = '-';\n                ret[i + 1] = '-';\n            }\n        }\n    }\n\
    \    return ret;", "    std::string result;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    if (result.size()\
    \ > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if\
    \ (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n     \
    \           result[i] = '-';\n                result.erase(i + 1, 2);\n      \
    \      }\n        }\n    }\n    return result;", "    std::string result;\n  \
    \  for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n  \
    \          result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1]\
    \ == ' ') {\n        result[0] = '-';\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos)\
    \ {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    if (result.find(\"\
    \  \") != std::string::npos) {\n        result = result.replace(\"  \", \"_\"\
    );\n    }\n    return result;", "    std::string ret = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            ret\
    \ += '_';\n        } else {\n            ret += text[i];\n        }\n    }\n \
    \   if (ret.length() > 2 && ret.find(\"  \") != std::string::npos) {\n       \
    \ ret = ret.replace(\"  \", \"-\");\n    }\n    return ret;", "    std::string\
    \ result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] ==\
    \ ' ') {\n            result += '_';\n        } else {\n            result +=\
    \ text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n\
    \        result[0] = '-';\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] ==\
    \ ' ') {\n            result += '_';\n        } else {\n            result +=\
    \ text[i];\n        }\n    }\n    \n    if (result.size() > 2) {\n        for\
    \ (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' '\
    \ && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i]\
    \ = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.size() > 2 && result.find(\"  \") != std::string::npos) {\n  \
    \      result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n \
    \       if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.size() > 2 &&\
    \ result[0] == ' ') {\n        result[0] = '_';\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.size() > 2)\
    \ {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n      \
    \          result[i + 1] = '-';\n            }\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.length() > 2\
    \ && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.length() > 2)\
    \ {\n        for (int i = 0; i < result.length(); i++) {\n            if (result[i]\
    \ == ' ' && result[i+1] == ' ') {\n                result[i] = '-';\n        \
    \        result.erase(i+1);\n            }\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n \
    \       if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.size() > 2)\
    \ {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i]\
    \ = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.length() > 2 && result.find(\"  \") != std::string::npos) {\n\
    \        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n \
    \       if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.size() > 2)\
    \ {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i]\
    \ = '-';\n                result[i + 1] = '-';\n                result[i + 2]\
    \ = '-';\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' '\
    \ && result[1] == ' ') {\n        result = \"_\" + result.substr(2);\n    }\n\
    \    return result;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n\
    \        } else {\n            result += text[i];\n        }\n    }\n    if (result.size()\
    \ > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            result += '_';\n        } else {\n\
    \            result += text[i];\n        }\n    }\n    if (result.length() > 2)\
    \ {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i]\
    \ = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2;\
    \ i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i\
    \ + 1, 2);\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] ==\
    \ ' ') {\n            result += '_';\n        } else {\n            result +=\
    \ text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos)\
    \ {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    if (result.length()\
    \ > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n          \
    \  if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n \
    \               result[i] = '-';\n                result.erase(i + 1, 2);\n  \
    \          }\n        }\n    }\n    return result;", "    std::string result =\
    \ \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] ==\
    \ ' ') {\n            result += '_';\n        } else {\n            result +=\
    \ text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int\
    \ i = 0; i < result.length(); i++) {\n            if (result[i] == ' ' && result[i\
    \ + 1] == ' ') {\n                result[i] = '-';\n                i++;\n   \
    \         }\n        }\n    }\n    return result;", "    std::string result =\
    \ \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '\
    \ ') {\n            result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size()\
    \ - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n \
    \               result[i] = '-';\n            }\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    if (result.length()\
    \ > 2 && result[0] == ' ') {\n        result = result.substr(1);\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        }\
    \ else {\n            result += text[i];\n        }\n    }\n    if (result.size()\
    \ > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if\
    \ (result[i] == ' ' && result[i+1] == ' ') {\n                result[i] = '-';\n\
    \            }\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            result += '_';\n        } else {\n            result\
    \ += text[i];\n        }\n    }\n    if (result.length() > 2 && result.find(\"\
    \  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2,\
    \ \"__\");\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n     \
    \       result += '_';\n        } else {\n            result += text[i];\n   \
    \     }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length()\
    \ - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i\
    \ + 2] == ' ') {\n                result[i] = '-';\n                result[i +\
    \ 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result\
    \ += '_';\n        } else {\n            result += text[i];\n        }\n    }\n\
    \    if (result.length() > 2) {\n        for (int i = 0; i < result.length() -\
    \ 1; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n   \
    \             result[i] = '-';\n            }\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
