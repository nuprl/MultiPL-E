{
  "name": "HumanEval_87_get_row",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional data, as a nested vectors,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the vector,\n// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1)\n// [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n",
  "tests": "}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5, 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2, 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3, 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4, 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5, 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})), (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)})));\n}\n",
  "completions": [
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        for (auto j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                tmp.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(tmp.begin(), tmp.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < tmp.size(); i++) {\n        res.push_back(tmp[i]);\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(col, row));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto& t : sorted_by_row) {\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(t);\n        }\n        else if (row > x) {\n            break;\n        }\n        else {\n            std::vector<std::tuple<long, long>> sorted_by_col = get_row(lst, row);\n            std::sort(sorted_by_col.begin(), sorted_by_col.end(),\n                      [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                          return std::get<1>(a) > std::get<1>(b);\n                      });\n            for (auto& t2 : sorted_by_col) {\n                long row2 = std::get<0>(t2);\n                long col2 = std::get<1>(t2);\n                if (row2 == x) {\n                    res.push_back(t2);\n                    break;\n                }\n                else if (row2 > x) {\n                    break;\n                }\n                else if (col2 > col) {\n                    break;\n                }\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n        [](std::tuple<long, long> a, std::tuple<long, long> b) {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n    for (auto t : sorted_by_row) {\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(t);\n            for (long i = col; i < lst[row].size(); i++) {\n                res.push_back(std::make_tuple(row, i));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                res.push_back({x, row.size() - 1});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long> &a, const std::vector<long> &b) {\n        return a.size() > b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() > x) {\n            res.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long> &a, const std::vector<long> &b) {\n        return a.size() < b.size();\n    });\n    for (auto &row : lst) {\n        std::sort(row.begin(), row.end(), [](const long &a, const long &b) {\n            return a < b;\n        });\n    }\n    for (auto &row : lst) {\n        for (auto &col : row) {\n            if (col == x) {\n                res.push_back({row.size() - 1, col});\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::vector<std::tuple<long, long>> sorted_by_row(lst.size());\n    for (int i = 0; i < lst.size(); ++i) {\n        sorted_by_row[i] = std::make_tuple(i, lst[i].size());\n    }\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(std::get<0>(sorted_by_row[i]), j));\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto& t : sorted_by_row) {\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(t);\n        }\n        else if (row < x) {\n            break;\n        }\n        else {\n            for (long i = 0; i < col; i++) {\n                res.push_back(std::make_tuple(row, i));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) {\n        return res;\n    }\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (long i = 0; i < row.size(); ++i) {\n            if (row[i] == x) {\n                res.push_back(std::make_tuple(i, row.size() - i - 1));\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); it++) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end(), [](std::vector<long> a, std::vector<long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < lst.size(); ++i) {\n        std::vector<std::tuple<long, long>> temp;\n        for (auto j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                temp.push_back(std::make_tuple(i, j));\n            }\n        }\n        std::sort(temp.begin(), temp.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n            return std::get<1>(a) > std::get<1>(b);\n        });\n        result.insert(result.end(), temp.begin(), temp.end());\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > x) {\n            tmp.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(tmp.begin(), tmp.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < tmp.size(); i++) {\n        res.push_back(tmp[i]);\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto &tuple : sorted_by_row) {\n        long row = std::get<0>(tuple);\n        long col = std::get<1>(tuple);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); it++) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(col, row));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) return result;\n    std::vector<std::tuple<long, long>> sorted_by_row(lst.size());\n    for (int i = 0; i < lst.size(); ++i) {\n        std::sort(lst[i].begin(), lst[i].end());\n        sorted_by_row[i] = std::make_tuple(i, lst[i].back());\n    }\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        if (std::get<0>(*it) == x) {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() <= x) {\n            tmp.push_back(std::make_tuple(i, lst[i].size()));\n        }\n        else {\n            tmp.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(tmp.begin(), tmp.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < tmp.size(); ++i) {\n        res.push_back(tmp[i]);\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](std::vector<long> a, std::vector<long> b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() > x) {\n            res.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                res.push_back(std::make_tuple(row.size() - 1, x - 1));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        long sum = 0;\n        for (long i = 0; i < col; ++i) {\n            sum += lst[row][i];\n        }\n        if (sum == x) {\n            res.push_back(*it);\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() > x) {\n            res.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                res.push_back({x, row.size() - 1});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    std::vector<std::tuple<long, long>>::iterator it;\n    std::vector<std::tuple<long, long>>::iterator it2;\n    long i, j;\n    for (i = 0; i < lst.size(); i++) {\n        tmp = lst[i];\n        for (j = 0; j < tmp.size(); j++) {\n            if (tmp[j].get<0>() == x) {\n                res.push_back(tmp[j]);\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                res.push_back(std::make_tuple(row.size() - 1, x));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long> &a, const std::vector<long> &b) {\n        return a.size() < b.size();\n    });\n    for (auto &row : lst) {\n        std::sort(row.begin(), row.end(), [](const long &a, const long &b) {\n            return a < b;\n        });\n    }\n    for (auto &row : lst) {\n        for (auto &x : row) {\n            if (x == x) {\n                res.push_back(std::make_tuple(row.size() - 1, x));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                res.push_back({i, j});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    std::vector<std::tuple<long, long>>::iterator it;\n    std::vector<std::tuple<long, long>>::iterator it2;\n    std::vector<std::tuple<long, long>>::iterator it3;\n    std::vector<std::tuple<long, long>>::iterator it4;\n    std::vector<std::tuple<long, long>>::iterator it5;\n    std::vector<std::tuple<long, long>>::iterator it6;\n    std::vector<std::tuple<long, long>>::iterator it7;\n    std::vector<std::tuple<long, long>>::iterator it8;\n    std::vector<std::tuple<long, long>>::iterator it9;\n    std::vector<std::tuple<long, long>>::iterator it10;\n    std::vector<std::tuple<long, long>>::iterator it11;\n    std::vector<std::tuple<long, long>>::iterator it12;\n    std::vector<std::tuple<long, long>>::iterator it13;\n    std::vector<std::tuple<long, long>>::iterator it14;\n    std::vector<std::tuple<long, long>>::iterator it15;\n    std::vector<std::tuple<long, long>>::iterator it16;\n    std::vector<std::tuple<long, long>>::iterator it17;\n    std::vector<std::tuple<long, long>>::iterator it18;\n    std::vector<std::tuple<long, long>>::iterator it19;\n    std::vector<std::tuple<long, long>>::iterator it20;\n    std::vector<std::tuple<long, long>>::iterator it21;\n    std::vector<std::tuple<long, long>>::iterator it22;\n    std::vector<std::tuple<long, long>>::iterator it23;\n    std::vector<std::tuple<long, long>>::iterator it24;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        for (auto j = 0; j < lst[i].size(); j++) {\n            tmp.push_back(std::make_tuple(i, j));\n        }\n    }\n    std::sort(tmp.begin(), tmp.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < tmp.size(); i++) {\n        auto it = std::find_if(lst.begin(), lst.end(), [&](const std::vector<long>& v) {\n            return std::get<0>(tmp[i]) == v[0];\n        });\n        if (it != lst.end()) {\n            for (auto j = 0; j < it->size(); j++) {\n                if (std::get<1>(tmp[i]) == j) {\n                    res.push_back(std::make_tuple(std::get<0>(tmp[i]), std::get<1>(tmp[i])));\n                }\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end(), [](std::vector<long> a, std::vector<long> b) {\n        return a.size() < b.size();\n    });\n    for (auto i = 0; i < lst.size(); ++i) {\n        std::sort(lst[i].begin(), lst[i].end(), [](long a, long b) {\n            return a < b;\n        });\n    }\n    for (auto i = 0; i < lst.size(); ++i) {\n        for (auto j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> result;\n    std::vector<std::tuple<long, long>> sorted_by_row;\n    std::vector<std::tuple<long, long>> sorted_by_column;\n    for (auto i = 0; i < lst.size(); i++) {\n        for (auto j = 0; j < lst[i].size(); j++) {\n            sorted_by_row.push_back(std::make_tuple(i, lst[i][j]));\n        }\n    }\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto i = 0; i < sorted_by_row.size(); i++) {\n        sorted_by_column.push_back(std::make_tuple(std::get<1>(sorted_by_row[i]), i));\n    }\n    std::sort(sorted_by_column.begin(), sorted_by_column.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) > std::get<0>(b);\n              });\n    for (auto i = 0; i < sorted_by_column.size(); i++) {\n        if (std::get<0>(sorted_by_column[i]) == x) {\n            result.push_back(sorted_by_row[std::get<1>(sorted_by_column[i])]);\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        std::tuple<long, long> t = *it;\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(t);\n            std::vector<std::tuple<long, long>> sorted_by_col = get_row(lst, col);\n            std::sort(sorted_by_col.begin(), sorted_by_col.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                return std::get<1>(a) < std::get<1>(b);\n            });\n            for (auto it2 = sorted_by_col.begin(); it2 != sorted_by_col.end(); ++it2) {\n                std::tuple<long, long> t2 = *it2;\n                long row2 = std::get<0>(t2);\n                long col2 = std::get<1>(t2);\n                res.push_back(std::make_tuple(row2, col2));\n            }\n            break;\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].empty()) continue;\n        for (auto j = 0; j < lst[i].size(); j++) {\n            tmp.push_back(std::make_tuple(i, j));\n        }\n    }\n    std::sort(tmp.begin(), tmp.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < tmp.size(); i++) {\n        if (std::get<0>(tmp[i]) == x) {\n            res.push_back(std::make_tuple(std::get<0>(tmp[i]), std::get<1>(tmp[i])));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n        [](std::tuple<long, long> a, std::tuple<long, long> b) {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n    for (auto t : sorted_by_row) {\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(t);\n        }\n        else if (row > x) {\n            break;\n        }\n        else {\n            std::vector<std::tuple<long, long>> sorted_by_col = get_row(lst, row);\n            std::sort(sorted_by_col.begin(), sorted_by_col.end(),\n                [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                    return std::get<1>(a) > std::get<1>(b);\n                });\n            for (auto t2 : sorted_by_col) {\n                long row2 = std::get<0>(t2);\n                long col2 = std::get<1>(t2);\n                if (row2 == x) {\n                    res.push_back(t2);\n                }\n                else if (row2 > x) {\n                    break;\n                }\n                else {\n                    std::vector<std::tuple<long, long>> sorted_by_col2 = get_row(lst, row2);\n                    std::sort(sorted_by_col2.begin(), sorted_by_col2.end(),\n                        [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                            return std::get<1>(a) < std::get<1>(b);",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() > b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        std::vector<std::tuple<long, long>> tmp;\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                tmp.emplace_back(i, j);\n            }\n        }\n        std::sort(tmp.begin(), tmp.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n            return std::get<1>(a) > std::get<1>(b);\n        });\n        res.insert(res.end(), tmp.begin(), tmp.end());\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto &t : sorted_by_row) {\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(t);\n        } else if (row > x) {\n            break;\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        tmp = get_row(lst[i], x);\n        for (auto j = 0; j < tmp.size(); j++) {\n            res.push_back(tmp[j]);\n        }\n    }\n    std::sort(res.begin(), res.end(),\n        [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                result.push_back(std::make_tuple(row.size() - 1, x));\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    std::vector<std::tuple<long, long>>::iterator it;\n    std::vector<std::tuple<long, long>>::iterator it_end;\n    std::vector<std::tuple<long, long>>::iterator it_begin;\n    std::vector<std::tuple<long, long>>::iterator it_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_end;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_begin;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_end;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_begin;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_end;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_begin;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_tmp_end;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_tmp_begin;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_tmp_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_tmp_tmp_end;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_tmp_tmp_begin;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                res.push_back(std::make_tuple(row.size() - 1, x));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (long i = 0; i < lst.size(); ++i) {\n        tmp.push_back(std::make_tuple(i, lst[i].size()));\n    }\n    std::sort(tmp.begin(), tmp.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto& t : tmp) {\n        long i = std::get<0>(t);\n        long j = std::get<1>(t);\n        if (i == x) {\n            for (long k = 0; k < j; ++k) {\n                res.push_back(std::make_tuple(i, k));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) {\n        return res;\n    }\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                res.push_back({x, row.size() - 1});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_lst.begin(); it != sorted_lst.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto &row : lst) {\n        tmp.clear();\n        for (auto &elem : row) {\n            tmp.push_back(std::make_tuple(elem, x));\n        }\n        std::sort(tmp.begin(), tmp.end(), [](auto &a, auto &b) {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n        for (auto &elem : tmp) {\n            res.push_back(elem);\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto &a, auto &b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        std::tuple<long, long> t = *it;\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long column = std::get<1>(*it);\n        if (row == x) {\n            result.push_back(std::make_tuple(row, column));\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n        if (row < x) continue;\n        std::vector<std::tuple<long, long>> sorted_by_col = get_row(lst, row);\n        std::sort(sorted_by_col.begin(), sorted_by_col.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n            return std::get<1>(a) > std::get<1>(b);\n        });\n        for (auto it2 = sorted_by_col.begin(); it2 != sorted_by_col.end(); ++it2) {\n            long row2 = std::get<0>(*it2);\n            long col2 = std::get<1>(*it2);\n            if (row2 == x) {\n                res.push_back(std::make_tuple(row2, col2));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        tmp.clear();\n        for (auto j = 0; j < lst[i].size(); j++) {\n            tmp.push_back(std::make_tuple(lst[i][j], i));\n        }\n        std::sort(tmp.begin(), tmp.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n        for (auto j = 0; j < tmp.size(); j++) {\n            if (std::get<0>(tmp[j]) == x) {\n                res.push_back(std::make_tuple(std::get<1>(tmp[j]), j));\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) {\n        return res;\n    }\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (long i = 0; i < row.size(); ++i) {\n            if (row[i] == x) {\n                res.push_back(std::make_tuple(i, row.size() - i - 1));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    std::vector<std::tuple<long, long>> sorted_result;\n    std::vector<std::tuple<long, long>>::iterator it;\n    std::vector<std::tuple<long, long>>::iterator it_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_sorted_end;\n    std::vector<std::tuple<long, long>>::iterator it_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_sorted_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_sorted_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_end_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_end_sorted_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_end_end_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_end_end_sorted",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (long i = 0; i < lst.size(); i++) {\n        std::vector<std::tuple<long, long>> temp;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                temp.push_back(std::make_tuple(i, j));\n            }\n        }\n        std::sort(temp.begin(), temp.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n        res.insert(res.end(), temp.begin(), temp.end());\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > x) {\n            res.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row(lst.size());\n    for (int i = 0; i < lst.size(); ++i) {\n        std::sort(lst[i].begin(), lst[i].end());\n        sorted_by_row[i] = std::make_tuple(i, lst[i].back());\n    }\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (int i = 0; i < sorted_by_row.size(); ++i) {\n        if (std::get<0>(sorted_by_row[i]) == x) {\n            res.push_back(std::make_tuple(std::get<0>(sorted_by_row[i]), std::get<1>(sorted_by_row[i])));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    std::vector<std::tuple<long, long>>::iterator it;\n    std::vector<std::tuple<long, long>>::iterator it2;\n    std::vector<std::tuple<long, long>>::iterator it3;\n    std::vector<std::tuple<long, long>>::iterator it4;\n    std::vector<std::tuple<long, long>>::iterator it5;\n    std::vector<std::tuple<long, long>>::iterator it6;\n    std::vector<std::tuple<long, long>>::iterator it7;\n    std::vector<std::tuple<long, long>>::iterator it8;\n    std::vector<std::tuple<long, long>>::iterator it9;\n    std::vector<std::tuple<long, long>>::iterator it10;\n    std::vector<std::tuple<long, long>>::iterator it11;\n    std::vector<std::tuple<long, long>>::iterator it12;\n    std::vector<std::tuple<long, long>>::iterator it13;\n    std::vector<std::tuple<long, long>>::iterator it14;\n    std::vector<std::tuple<long, long>>::iterator it15;\n    std::vector<std::tuple<long, long>>::iterator it16;\n    std::vector<std::tuple<long, long>>::iterator it17;\n    std::vector<std::tuple<long, long>>::iterator it18;\n    std::vector<std::tuple<long, long>>::iterator it19;\n    std::vector<std::tuple<long, long>>::iterator it20;\n    std::vector<std::tuple<long, long>>::iterator it21;\n    std::vector<std::tuple<long, long>>::iterator it22;\n    std::vector<std::tuple<long, long>>::iterator it23;\n    std::vector<std::tuple<long, long>>::iterator it24;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long> &a, const std::vector<long> &b) {\n        return a.size() > b.size();\n    });\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > x) {\n            res.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() > x) {\n            res.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                res.push_back(std::make_tuple(row.size() - 1, x));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row: lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row: lst) {\n        for (auto& x: row) {\n            if (x == x) {\n                res.push_back(std::make_tuple(row.size() - 1, x));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row(lst.size());\n    for (int i = 0; i < lst.size(); ++i) {\n        std::sort(lst[i].begin(), lst[i].end());\n        sorted_by_row[i] = std::make_tuple(i, lst[i].back());\n    }\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto& t : sorted_by_row) {\n        if (std::get<0>(t) == x) {\n            res.push_back(std::make_tuple(std::get<0>(t), std::get<1>(t)));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > x) {\n            tmp = get_row(lst, x);\n            for (auto j = 0; j < tmp.size(); j++) {\n                res.push_back(std::make_tuple(i, std::get<1>(tmp[j])));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); it++) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); it++) {\n        std::tuple<long, long> t = *it;\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() > x) {\n            res.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto t : sorted_by_row) {\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(t);\n        }\n        if (col < lst[row].size() - 1) {\n            std::vector<std::tuple<long, long>> sorted_by_col = get_row(lst, col + 1);\n            std::sort(sorted_by_col.begin(), sorted_by_col.end(),\n                      [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                          return std::get<1>(a) > std::get<1>(b);\n                      });\n            for (auto t2 : sorted_by_col) {\n                long row2 = std::get<0>(t2);\n                long col2 = std::get<1>(t2);\n                if (row2 == x) {\n                    res.push_back(t2);\n                }\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n        [](std::tuple<long, long> a, std::tuple<long, long> b) {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n    for (auto& t : sorted_by_row) {\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (long i = 0; i < lst.size(); ++i) {\n        tmp.clear();\n        for (long j = 0; j < lst[i].size(); ++j) {\n            tmp.push_back(std::make_tuple(lst[i][j], i));\n        }\n        std::sort(tmp.begin(), tmp.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n        for (auto it = tmp.begin(); it != tmp.end(); ++it) {\n            if (std::get<0>(*it) == x) {\n                res.push_back(*it);\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::vector<std::tuple<long, long>> sorted_by_row = get_sorted_by_row(lst);\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            result.push_back(std::make_tuple(row, col));\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                res.push_back(std::make_tuple(row.size() - 1, x));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < sorted_by_row.size(); i++) {\n        if (std::get<0>(sorted_by_row[i]) == x) {\n            res.push_back(sorted_by_row[i]);\n            break;\n        }\n    }\n    for (auto i = 0; i < sorted_by_row.size(); i++) {\n        if (std::get<0>(sorted_by_row[i]) == x) {\n            res.push_back(sorted_by_row[i]);\n            break;\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                res.push_back({x, row.size() - 1});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        std::tuple<long, long> coord = *it;\n        long row = std::get<0>(coord);\n        long col = std::get<1>(coord);\n        if (row == x) {\n            res.push_back(coord);\n            continue;\n        }\n        if (row > x) break;\n        std::vector<std::tuple<long, long>> sorted_by_col = get_row(lst, row);\n        std::sort(sorted_by_col.begin(), sorted_by_col.end(),\n                  [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                      return std::get<1>(a) > std::get<1>(b);\n                  });\n        for (auto it2 = sorted_by_col.begin(); it2 != sorted_by_col.end(); ++it2) {\n            std::tuple<long, long> coord2 = *it2;\n            long row2 = std::get<0>(coord2);\n            long col2 = std::get<1>(coord2);\n            if (col2 == x) {\n                res.push_back(coord2);\n                break;\n            }\n            if (col2 > x) break;\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](std::vector<long> a, std::vector<long> b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() > x) {\n            res.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() < x) continue;\n        std::sort(lst[i].begin(), lst[i].end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n        for (int j = 0; j < lst[i].size(); ++j) {\n            res.push_back({i, lst[i][j]});\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long column = std::get<1>(*it);\n        if (row == x) {\n            result.push_back(std::make_tuple(row, column));\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    std::vector<std::tuple<long, long>>::iterator it;\n    std::vector<std::tuple<long, long>>::iterator it_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_res;\n    std::vector<std::tuple<long, long>>::iterator it_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_end_res;\n    std::vector<std::tuple<long, long>>::iterator it_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_res;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_res;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_end_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_end_res;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_end_end_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_end_end_end_res;\n    std::vector<std::tuple<long, long>>::iterator it_end_end_",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) {\n        return res;\n    }\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& l, const std::vector<long>& r) {\n        return l.size() < r.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& l, const long& r) {\n            return l < r;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& col : row) {\n            if (col == x) {\n                res.push_back(std::make_tuple(row.size() - 1, col));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                res.push_back({x, row.size() - 1});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    std::vector<std::tuple<long, long>> tmp2;\n    std::vector<std::tuple<long, long>> tmp3;\n    std::vector<std::tuple<long, long>> tmp4;\n    std::vector<std::tuple<long, long>> tmp5;\n    std::vector<std::tuple<long, long>> tmp6;\n    std::vector<std::tuple<long, long>> tmp7;\n    std::vector<std::tuple<long, long>> tmp8;\n    std::vector<std::tuple<long, long>> tmp9;\n    std::vector<std::tuple<long, long>> tmp10;\n    std::vector<std::tuple<long, long>> tmp11;\n    std::vector<std::tuple<long, long>> tmp12;\n    std::vector<std::tuple<long, long>> tmp13;\n    std::vector<std::tuple<long, long>> tmp14;\n    std::vector<std::tuple<long, long>> tmp15;\n    std::vector<std::tuple<long, long>> tmp16;\n    std::vector<std::tuple<long, long>> tmp17;\n    std::vector<std::tuple<long, long>> tmp18;\n    std::vector<std::tuple<long, long>> tmp19;\n    std::vector<std::tuple<long, long>> tmp20;\n    std::vector<std::tuple<long, long>> tmp21;\n    std::vector<std::tuple<long, long>> tmp22;\n    std::vector<std::tuple<long, long>> tmp23;\n    std::vector<std::tuple<long, long>> tmp24;\n    std::vector<std::tuple<long, long>> tmp25;\n    std::vector<std::tuple<long, long>> tmp26;\n    std::vector<std::tuple<long, long>> tmp27;\n    std::vector<std::tuple<",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto t : sorted_by_row) {\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        for (long i = 0; i < lst[row].size(); i++) {\n            if (lst[row][i] == x) {\n                res.push_back(std::make_tuple(row, col));\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        std::vector<std::tuple<long, long>> tmp;\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                tmp.emplace_back(i, j);\n            }\n        }\n        std::sort(tmp.begin(), tmp.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n        res.insert(res.end(), tmp.begin(), tmp.end());\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> sorted_by_row;\n    std::vector<std::tuple<long, long>> sorted_by_col;\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), std::greater<long>());\n        sorted_by_row.push_back(std::make_tuple(row.size(), &row[0]));\n    }\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), std::greater<std::tuple<long, long>>());\n    for (auto& row : sorted_by_row) {\n        std::sort(row.get<1>(), row.get<1>() + row.get<0>(), std::greater<long>());\n        sorted_by_col.push_back(std::make_tuple(row.get<0>(), &row.get<1>()[0]));\n    }\n    std::sort(sorted_by_col.begin(), sorted_by_col.end(), std::greater<std::tuple<long, long>>());\n    for (auto& row : sorted_by_col) {\n        if (row.get<0>() == x) {\n            res.push_back(row);\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) return result;\n    std::vector<std::tuple<long, long>> sorted_by_row(lst.size());\n    for (int i = 0; i < lst.size(); ++i) {\n        sorted_by_row[i] = std::make_tuple(i, lst[i].size());\n    }\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (int i = 0; i < sorted_by_row.size(); ++i) {\n        std::vector<std::tuple<long, long>> sorted_by_column(lst[i].size());\n        for (int j = 0; j < lst[i].size(); ++j) {\n            sorted_by_column[j] = std::make_tuple(lst[i][j], j);\n        }\n        std::sort(sorted_by_column.begin(), sorted_by_column.end(),\n                  [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                      return std::get<1>(a) < std::get<1>(b);\n                  });\n        for (int j = 0; j < sorted_by_column.size(); ++j) {\n            result.push_back(std::make_tuple(std::get<0>(sorted_by_row[i]), std::get<1>(sorted_by_column[j])));\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        std::vector<std::tuple<long, long>> tmp;\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                tmp.push_back(std::make_tuple(i, j));\n            }\n        }\n        std::sort(tmp.begin(), tmp.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n        res.insert(res.end(), tmp.begin(), tmp.end());\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() > b.size();\n    });\n    for (auto i = 0; i < lst.size(); ++i) {\n        for (auto j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                res.emplace_back(i, j);\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end(),\n              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto& t : sorted_lst) {\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_lst.begin(); it != sorted_lst.end(); it++) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > x) {\n            result.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(result.begin(), result.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        std::sort(lst[i].begin(), lst[i].end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                res.push_back({i, j});\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) {\n        return res;\n    }\n    std::vector<std::tuple<long, long>> sorted_by_row(lst.size());\n    for (int i = 0; i < lst.size(); ++i) {\n        std::sort(lst[i].begin(), lst[i].end());\n        sorted_by_row[i] = std::make_tuple(i, lst[i].back());\n    }\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto& t : sorted_by_row) {\n        if (std::get<0>(t) == x) {\n            res.push_back(t);\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end(), [](std::vector<long> a, std::vector<long> b) {\n        return a.size() < b.size();\n    });\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > x) {\n            result.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_lst.begin(); it != sorted_lst.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n        if (col == 0) {\n            std::sort(sorted_lst.begin(), sorted_lst.end(),\n                      [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                          return std::get<1>(a) > std::get<1>(b);\n                      });\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (long i = 0; i < lst.size(); ++i) {\n        for (long j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                res.push_back({i, j});\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    std::vector<std::tuple<long, long>> tmp2;\n    std::vector<std::tuple<long, long>>::iterator it;\n    std::vector<std::tuple<long, long>>::iterator it2;\n    std::vector<std::tuple<long, long>>::iterator it3;\n    std::vector<std::tuple<long, long>>::iterator it4;\n    std::vector<std::tuple<long, long>>::iterator it5;\n    std::vector<std::tuple<long, long>>::iterator it6;\n    std::vector<std::tuple<long, long>>::iterator it7;\n    std::vector<std::tuple<long, long>>::iterator it8;\n    std::vector<std::tuple<long, long>>::iterator it9;\n    std::vector<std::tuple<long, long>>::iterator it10;\n    std::vector<std::tuple<long, long>>::iterator it11;\n    std::vector<std::tuple<long, long>>::iterator it12;\n    std::vector<std::tuple<long, long>>::iterator it13;\n    std::vector<std::tuple<long, long>>::iterator it14;\n    std::vector<std::tuple<long, long>>::iterator it15;\n    std::vector<std::tuple<long, long>>::iterator it16;\n    std::vector<std::tuple<long, long>>::iterator it17;\n    std::vector<std::tuple<long, long>>::iterator it18;\n    std::vector<std::tuple<long, long>>::iterator it19;\n    std::vector<std::tuple<long, long>>::iterator it20;\n    std::vector<std::tuple<long, long>>::iterator it21;\n    std::vector<std::tuple<long, long>>::iterator it22;\n    std::vector<std::tuple<long, long>>::iterator it23;\n    ",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); it++) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto i = 0; i < sorted_by_row.size(); ++i) {\n        long row = std::get<0>(sorted_by_row[i]);\n        long col = std::get<1>(sorted_by_row[i]);\n        if (row == x) {\n            for (long j = 0; j < col; ++j) {\n                res.push_back(std::make_tuple(row, j));\n            }\n            break;\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) return result;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); it++) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            result.push_back(std::make_tuple(row, col));\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() > x) {\n            res.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto t : sorted_by_row) {\n        res.push_back(t);\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > 0) {\n            std::vector<std::tuple<long, long>> sorted_by_col = get_row(lst[i], 0);\n            std::sort(sorted_by_col.begin(), sorted_by_col.end(),\n                      [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                          return std::get<1>(a) > std::get<1>(b);\n                      });\n            for (auto t : sorted_by_col) {\n                res.push_back(t);\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (long i = 0; i < lst.size(); i++) {\n        tmp = get_row(lst[i], x);\n        for (auto t : tmp) {\n            res.push_back(t);\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (long i = 0; i < row.size(); i++) {\n            if (row[i] == x) {\n                res.push_back(std::make_tuple(i, row.size() - i - 1));\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto i = 0; i < lst.size(); i++) {\n        for (auto j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > x) {\n            tmp = get_row(lst, x);\n            for (auto j = 0; j < tmp.size(); j++) {\n                res.push_back(std::make_tuple(i, std::get<1>(tmp[j])));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long column = std::get<1>(*it);\n        if (row == x) {\n            result.push_back(std::make_tuple(row, column));\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() > b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a > b;\n        });\n    }\n    for (auto& row : lst) {\n        for (long i = 0; i < row.size(); ++i) {\n            if (row[i] == x) {\n                res.push_back({i, row.size() - i - 1});\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long> &a, const std::vector<long> &b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() < x) continue;\n        std::sort(lst[i].begin(), lst[i].end(), [](const long &a, const long &b) {\n            return a < b;\n        });\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > x) {\n            tmp.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(tmp.begin(), tmp.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < tmp.size(); i++) {\n        res.push_back(tmp[i]);\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long> &a, const std::vector<long> &b) {\n        return a.size() < b.size();\n    });\n    for (auto it = lst.begin(); it != lst.end(); ++it) {\n        std::sort(it->begin(), it->end(), [](const long &a, const long &b) {\n            return a < b;\n        });\n    }\n    for (auto it = lst.begin(); it != lst.end(); ++it) {\n        if (it->size() > x) {\n            res.push_back(std::make_tuple(it - lst.begin(), x));\n            x = 0;\n        } else {\n            x -= it->size();\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) {\n        return res;\n    }\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& l1, const std::vector<long>& l2) {\n        return l1.size() < l2.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& l1, const long& l2) {\n            return l1 < l2;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& l : row) {\n            if (l == x) {\n                res.push_back(std::make_tuple(row.size() - 1, lst.size() - 1));\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto t : sorted_by_row) {\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(t);\n        }\n        else if (row > x) {\n            break;\n        }\n        else {\n            std::vector<std::tuple<long, long>> sorted_by_col = get_row(lst, row);\n            std::sort(sorted_by_col.begin(), sorted_by_col.end(),\n                      [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                          return std::get<1>(a) > std::get<1>(b);\n                      });\n            for (auto t2 : sorted_by_col) {\n                long row2 = std::get<0>(t2);\n                long col2 = std::get<1>(t2);\n                if (row2 == x) {\n                    res.push_back(t2);\n                    break;\n                }\n                else if (row2 > x) {\n                    break;\n                }\n                else {\n                    res.push_back(t2);\n                }\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        tmp.clear();\n        for (auto j = 0; j < lst[i].size(); j++) {\n            tmp.push_back(std::make_tuple(lst[i][j], i));\n        }\n        std::sort(tmp.begin(), tmp.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n        for (auto j = 0; j < tmp.size(); j++) {\n            if (std::get<0>(tmp[j]) == x) {\n                res.push_back(std::make_tuple(std::get<1>(tmp[j]), j));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> row;\n    for (auto i = 0; i < lst.size(); ++i) {\n        row.push_back(std::make_tuple(i, lst[i].size()));\n    }\n    std::sort(row.begin(), row.end(), [](auto a, auto b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < row.size(); ++i) {\n        auto j = std::get<1>(row[i]);\n        for (auto k = 0; k < j; ++k) {\n            res.push_back(std::make_tuple(std::get<0>(row[i]), k));\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto a, auto b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < res.size(); ++i) {\n        if (std::get<0>(res[i]) == x) {\n            return res;\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long> &a, const std::vector<long> &b) {\n        return a.size() < b.size();\n    });\n    for (auto &row : lst) {\n        std::sort(row.begin(), row.end(), [](const long &a, const long &b) {\n            return a < b;\n        });\n    }\n    for (auto &row : lst) {\n        for (auto &x : row) {\n            if (x == x) {\n                res.push_back({x, row.size() - 1});\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) return result;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            result.push_back(std::make_tuple(row, col));\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](std::vector<long> a, std::vector<long> b) {\n        return a.size() < b.size();\n    });\n    for (auto i = 0; i < lst.size(); i++) {\n        for (auto j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row: lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row: lst) {\n        for (auto& col: row) {\n            if (col == x) {\n                res.push_back({row.size() - 1, col});\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    std::vector<std::tuple<long, long>>::iterator it;\n    std::vector<std::tuple<long, long>>::iterator it2;\n    std::vector<std::tuple<long, long>>::iterator it3;\n    std::vector<std::tuple<long, long>>::iterator it4;\n    std::vector<std::tuple<long, long>>::iterator it5;\n    std::vector<std::tuple<long, long>>::iterator it6;\n    std::vector<std::tuple<long, long>>::iterator it7;\n    std::vector<std::tuple<long, long>>::iterator it8;\n    std::vector<std::tuple<long, long>>::iterator it9;\n    std::vector<std::tuple<long, long>>::iterator it10;\n    std::vector<std::tuple<long, long>>::iterator it11;\n    std::vector<std::tuple<long, long>>::iterator it12;\n    std::vector<std::tuple<long, long>>::iterator it13;\n    std::vector<std::tuple<long, long>>::iterator it14;\n    std::vector<std::tuple<long, long>>::iterator it15;\n    std::vector<std::tuple<long, long>>::iterator it16;\n    std::vector<std::tuple<long, long>>::iterator it17;\n    std::vector<std::tuple<long, long>>::iterator it18;\n    std::vector<std::tuple<long, long>>::iterator it19;\n    std::vector<std::tuple<long, long>>::iterator it20;\n    std::vector<std::tuple<long, long>>::iterator it21;\n    std::vector<std::tuple<long, long>>::iterator it22;\n    std::vector<std::tuple<long, long>>::iterator it23;\n    std::vector<std::tuple<long, long>>::iterator it24;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (long i = 0; i < row.size(); i++) {\n            if (row[i] == x) {\n                res.push_back(std::make_tuple(i, row.size() - i - 1));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                res.push_back({x, row.size() - 1});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() > b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() > x) {\n            result.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(result.begin(), result.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> row;\n    for (auto i = 0; i < lst.size(); ++i) {\n        row.push_back(std::make_tuple(i, lst[i].size()));\n    }\n    std::sort(row.begin(), row.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < row.size(); ++i) {\n        long row_idx = std::get<0>(row[i]);\n        long col_idx = std::get<1>(row[i]);\n        long col_size = lst[row_idx].size();\n        for (long j = 0; j < col_size; ++j) {\n            if (lst[row_idx][j] == x) {\n                res.push_back(std::make_tuple(row_idx, j));\n            }\n        }\n        std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n            return std::get<1>(a) < std::get<1>(b);\n        });\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) return result;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto& t : sorted_by_row) {\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            result.push_back(t);\n        }\n        else if (row > x) {\n            break;\n        }\n        else {\n            std::vector<std::tuple<long, long>> sorted_by_col = get_row(lst, row);\n            std::sort(sorted_by_col.begin(), sorted_by_col.end(),\n                      [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                          return std::get<1>(a) > std::get<1>(b);\n                      });\n            for (auto& t2 : sorted_by_col) {\n                long row2 = std::get<0>(t2);\n                long col2 = std::get<1>(t2);\n                if (row2 == x) {\n                    result.push_back(t2);\n                }\n                else if (row2 > x) {\n                    break;\n                }\n                else {\n                    std::vector<std::tuple<long, long>> sorted_by_col2 = get_row(lst, row2);\n                    std::sort(sorted_by_col2.begin(), sorted_by_col2.end(),\n                              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                                  return std",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() > b.size();\n    });\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > x) {\n            res.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto& row: lst) {\n        tmp.clear();\n        for (auto& x: row) {\n            tmp.push_back(std::make_tuple(x, 0));\n        }\n        std::sort(tmp.begin(), tmp.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n        for (auto& x: tmp) {\n            if (std::get<0>(x) == x) {\n                if (std::get<1>(x) == 0) {\n                    res.push_back(x);\n                }\n                std::get<1>(x)++;\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); ++i) {\n        for (auto j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                tmp.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(tmp.begin(), tmp.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < tmp.size(); ++i) {\n        res.push_back(tmp[i]);\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); it++) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end(),\n        [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n    for (auto& t : sorted_lst) {\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                result.push_back(std::make_tuple(row.size() - 1, x - 1));\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        tmp.clear();\n        for (auto j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                tmp.push_back(std::make_tuple(i, j));\n            }\n        }\n        if (tmp.size() > 0) {\n            std::sort(tmp.begin(), tmp.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                return std::get<0>(a) < std::get<0>(b);\n            });\n            res.push_back(tmp[0]);\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > x) {\n            tmp = get_row(lst, x);\n            for (auto j = 0; j < tmp.size(); j++) {\n                res.push_back(std::make_tuple(i, std::get<1>(tmp[j])));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) {\n        return res;\n    }\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto& t : sorted_by_row) {\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(t);\n        }\n        if (col < lst[row].size() - 1) {\n            std::vector<std::tuple<long, long>> sorted_by_col = get_row(lst, col + 1);\n            std::sort(sorted_by_col.begin(), sorted_by_col.end(),\n                      [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                          return std::get<1>(a) > std::get<1>(b);\n                      });\n            for (auto& t2 : sorted_by_col) {\n                long row2 = std::get<0>(t2);\n                long col2 = std::get<1>(t2);\n                if (row2 == x) {\n                    res.push_back(t2);\n                }\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() > b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() > x) {\n            res.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) {\n        return res;\n    }\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                res.push_back(std::make_tuple(row.size() - 1, x - 1));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> sorted_res;\n    std::vector<std::tuple<long, long>>::iterator it;\n    std::vector<std::tuple<long, long>>::iterator it_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_end_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_end_end_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_end_end_end_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_end_end_end_end_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_end_end_end_end_end_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_end_end_end_end_end_end_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_end_end_end_end_end_end_end_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_end_end_end_end_end_end_end_end_end_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_end_end_end_end_end_end_end_end_end",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) return result;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& l1, const std::vector<long>& l2) {\n        return l1.size() < l2.size();\n    });\n    for (auto i = 0; i < lst.size(); ++i) {\n        for (auto j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(), [](const std::tuple<long, long>& t1, const std::tuple<long, long>& t2) {\n        return std::get<0>(t1) < std::get<0>(t2);\n    });\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    if (lst.empty()) {\n        return res;\n    }\n    std::sort(lst.begin(), lst.end(), [](std::vector<long> a, std::vector<long> b) {\n        return a.size() > b.size();\n    });\n    for (auto i = 0; i < lst.size(); ++i) {\n        tmp.clear();\n        for (auto j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                tmp.push_back(std::make_tuple(i, j));\n            }\n        }\n        if (tmp.empty()) {\n            continue;\n        }\n        std::sort(tmp.begin(), tmp.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n        res.insert(res.end(), tmp.begin(), tmp.end());\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > x) {\n            tmp = get_row(lst, x);\n            for (auto j = 0; j < tmp.size(); j++) {\n                res.push_back(std::make_tuple(i, std::get<1>(tmp[j])));\n            }\n        }\n        else {\n            for (auto j = 0; j < lst[i].size(); j++) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long> &a, const std::vector<long> &b) {\n        return a.size() < b.size();\n    });\n    for (auto &row : lst) {\n        std::sort(row.begin(), row.end(), [](const long &a, const long &b) {\n            return a < b;\n        });\n    }\n    for (auto &row : lst) {\n        for (auto &col : row) {\n            if (col == x) {\n                res.push_back(std::make_tuple(row.size() - 1, col));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    std::vector<std::tuple<long, long>> tmp2;\n    std::vector<std::tuple<long, long>> tmp3;\n    std::vector<std::tuple<long, long>> tmp4;\n    std::vector<std::tuple<long, long>> tmp5;\n    std::vector<std::tuple<long, long>> tmp6;\n    std::vector<std::tuple<long, long>> tmp7;\n    std::vector<std::tuple<long, long>> tmp8;\n    std::vector<std::tuple<long, long>> tmp9;\n    std::vector<std::tuple<long, long>> tmp10;\n    std::vector<std::tuple<long, long>> tmp11;\n    std::vector<std::tuple<long, long>> tmp12;\n    std::vector<std::tuple<long, long>> tmp13;\n    std::vector<std::tuple<long, long>> tmp14;\n    std::vector<std::tuple<long, long>> tmp15;\n    std::vector<std::tuple<long, long>> tmp16;\n    std::vector<std::tuple<long, long>> tmp17;\n    std::vector<std::tuple<long, long>> tmp18;\n    std::vector<std::tuple<long, long>> tmp19;\n    std::vector<std::tuple<long, long>> tmp20;\n    std::vector<std::tuple<long, long>> tmp21;\n    std::vector<std::tuple<long, long>> tmp22;\n    std::vector<std::tuple<long, long>> tmp23;\n    std::vector<std::tuple<long, long>> tmp24;\n    std::vector<std::tuple<long, long>> tmp25;\n    std::vector<std::tuple<long, long>> tmp26;\n    std::vector<std::tuple<long, long>> tmp27;\n    std::vector<std::tuple<",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        if (std::get<0>(*it) == x) {\n            res.push_back(*it);\n            std::vector<std::tuple<long, long>> sorted_by_column = get_row(lst, std::get<1>(*it));\n            std::sort(sorted_by_column.begin(), sorted_by_column.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                return std::get<1>(a) > std::get<1>(b);\n            });\n            for (auto it2 = sorted_by_column.begin(); it2 != sorted_by_column.end(); ++it2) {\n                res.push_back(*it2);\n            }\n            return res;\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) {\n        return res;\n    }\n    std::vector<std::tuple<long, long>> sorted_by_row(lst.size());\n    for (int i = 0; i < lst.size(); i++) {\n        sorted_by_row[i] = std::make_tuple(i, lst[i].size() - 1);\n    }\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n            [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                return std::get<0>(a) < std::get<0>(b);\n            });\n    for (int i = 0; i < sorted_by_row.size(); i++) {\n        long row = std::get<0>(sorted_by_row[i]);\n        long col = std::get<1>(sorted_by_row[i]);\n        if (row == x) {\n            for (int j = 0; j <= col; j++) {\n                res.push_back(std::make_tuple(row, j));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (long i = 0; i < row.size(); i++) {\n            if (row[i] == x) {\n                res.push_back({i, row.size() - i - 1});\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > x) {\n            tmp = get_row(lst, x);\n            for (auto j = 0; j < tmp.size(); j++) {\n                res.push_back(std::make_tuple(i, std::get<0>(tmp[j])));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) return result;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        std::vector<std::tuple<long, long>> sorted_by_column = get_row(lst, std::get<1>(*it));\n        std::sort(sorted_by_column.begin(), sorted_by_column.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n            return std::get<1>(a) > std::get<1>(b);\n        });\n        for (auto it2 = sorted_by_column.begin(); it2 != sorted_by_column.end(); ++it2) {\n            if (std::get<0>(*it2) == x) {\n                result.push_back(*it2);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    std::vector<std::tuple<long, long>>::iterator it;\n    std::vector<std::tuple<long, long>>::iterator it_end;\n    std::vector<std::tuple<long, long>>::iterator it_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_end;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_end;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_end;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_tmp_end;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_tmp_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_tmp_tmp_end;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_tmp_tmp_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_tmp_tmp_tmp_end;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_tmp_tmp_tmp_tmp;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_tmp_tmp_tmp_tmp_end;\n    std::vector<std::tuple<long, long>>::iterator it_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp;\n    std::vector<std::tuple<long",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > x) {\n            tmp.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(tmp.begin(), tmp.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < tmp.size(); i++) {\n        res.push_back(tmp[i]);\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](std::vector<long> a, std::vector<long> b) {\n        return a.size() > b.size();\n    });\n    for (auto it = lst.begin(); it != lst.end(); ++it) {\n        std::sort(it->begin(), it->end());\n        for (auto it2 = it->begin(); it2 != it->end(); ++it2) {\n            if (*it2 == x) {\n                res.push_back(std::make_tuple(it - lst.begin(), *it2));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() > x) {\n            res.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        tmp.clear();\n        for (auto j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                tmp.emplace_back(i, j);\n            }\n        }\n        if (tmp.size() > 0) {\n            std::sort(tmp.begin(), tmp.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                return std::get<0>(a) < std::get<0>(b);\n            });\n            for (auto t : tmp) {\n                res.emplace_back(std::get<0>(t), std::get<1>(t));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() > x) {\n            tmp.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(tmp.begin(), tmp.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < tmp.size(); ++i) {\n        res.push_back(tmp[i]);\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    std::vector<std::tuple<long, long>> sorted_by_row;\n    std::vector<std::tuple<long, long>> sorted_by_column;\n    for (auto i = 0; i < lst.size(); i++) {\n        for (auto j = 0; j < lst[i].size(); j++) {\n            sorted_by_row.push_back(std::make_tuple(i, lst[i][j]));\n        }\n    }\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    std::sort(sorted_by_column.begin(), sorted_by_column.end(),\n              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                  return std::get<1>(a) > std::get<1>(b);\n              });\n    for (auto i = 0; i < sorted_by_row.size(); i++) {\n        if (std::get<0>(sorted_by_row[i]) == x) {\n            result.push_back(sorted_by_row[i]);\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](std::vector<long> a, std::vector<long> b) {\n        return a.size() < b.size();\n    });\n    for (long i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() < x) continue;\n        for (long j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < sorted_by_row.size(); ++i) {\n        auto it = std::find_if(lst.begin(), lst.end(), [=](std::vector<long> v) {\n            return std::get<0>(sorted_by_row[i]) == v[0];\n        });\n        if (it != lst.end()) {\n            for (auto j = 0; j < std::get<1>(sorted_by_row[i]); ++j) {\n                res.push_back(std::make_tuple(std::get<0>(sorted_by_row[i]), j));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto& coord : sorted_by_row) {\n        if (std::get<0>(coord) == x) {\n            result.push_back(coord);\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) {\n        return res;\n    }\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); it++) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> row;\n    for (auto i = 0; i < lst.size(); ++i) {\n        for (auto j = 0; j < lst[i].size(); ++j) {\n            row.push_back(std::make_tuple(i, lst[i][j]));\n        }\n    }\n    std::sort(row.begin(), row.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < row.size(); ++i) {\n        if (std::get<0>(row[i]) == x) {\n            res.push_back(std::make_tuple(std::get<1>(row[i]), i));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) {\n        return res;\n    }\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() > b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a > b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                res.push_back(std::make_tuple(row.size() - 1, x));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); it++) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (col >= x) {\n            res.push_back(*it);\n            continue;\n        }\n        std::vector<std::tuple<long, long>> sorted_by_col = get_row(lst, col);\n        std::sort(sorted_by_col.begin(), sorted_by_col.end(),\n                  [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                      return std::get<1>(a) > std::get<1>(b);\n                  });\n        for (auto it2 = sorted_by_col.begin(); it2 != sorted_by_col.end(); it2++) {\n            long row2 = std::get<0>(*it2);\n            long col2 = std::get<1>(*it2);\n            if (row2 == row && col2 >= x) {\n                res.push_back(*it2);\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() > b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a > b;\n        });\n    }\n    for (auto& row : lst) {\n        for (long i = 0; i < row.size(); i++) {\n            if (row[i] == x) {\n                res.push_back(std::make_tuple(i, row.size() - i - 1));\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(col, row));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        long val = lst[row][col];\n        if (val == x) {\n            res.push_back(*it);\n            std::vector<std::tuple<long, long>> sorted_by_col = get_row(lst, row);\n            std::sort(sorted_by_col.begin(), sorted_by_col.end(),\n                      [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n                          return std::get<1>(a) > std::get<1>(b);\n                      });\n            for (auto it2 = sorted_by_col.begin(); it2 != sorted_by_col.end(); ++it2) {\n                long row2 = std::get<0>(*it2);\n                long col2 = std::get<1>(*it2);\n                res.push_back(std::make_tuple(row2, col2));\n            }\n            break;\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        std::vector<std::tuple<long, long>> tmp;\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                tmp.push_back({i, j});\n            }\n        }\n        std::sort(tmp.begin(), tmp.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n            return std::get<1>(a) < std::get<1>(b);\n        });\n        res.insert(res.end(), tmp.begin(), tmp.end());\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    std::vector<std::tuple<long, long>> tmp2;\n    std::vector<std::tuple<long, long>>::iterator it;\n    std::vector<std::tuple<long, long>>::iterator it2;\n    std::vector<std::tuple<long, long>>::iterator it3;\n    std::vector<std::tuple<long, long>>::iterator it4;\n    std::vector<std::tuple<long, long>>::iterator it5;\n    std::vector<std::tuple<long, long>>::iterator it6;\n    std::vector<std::tuple<long, long>>::iterator it7;\n    std::vector<std::tuple<long, long>>::iterator it8;\n    std::vector<std::tuple<long, long>>::iterator it9;\n    std::vector<std::tuple<long, long>>::iterator it10;\n    std::vector<std::tuple<long, long>>::iterator it11;\n    std::vector<std::tuple<long, long>>::iterator it12;\n    std::vector<std::tuple<long, long>>::iterator it13;\n    std::vector<std::tuple<long, long>>::iterator it14;\n    std::vector<std::tuple<long, long>>::iterator it15;\n    std::vector<std::tuple<long, long>>::iterator it16;\n    std::vector<std::tuple<long, long>>::iterator it17;\n    std::vector<std::tuple<long, long>>::iterator it18;\n    std::vector<std::tuple<long, long>>::iterator it19;\n    std::vector<std::tuple<long, long>>::iterator it20;\n    std::vector<std::tuple<long, long>>::iterator it21;\n    std::vector<std::tuple<long, long>>::iterator it22;\n    std::vector<std::tuple<long, long>>::iterator it23;\n    ",
    "    std::vector<std::tuple<long, long>> result;\n    std::vector<std::tuple<long, long>> sorted_result;\n    std::vector<std::tuple<long, long>>::iterator it;\n    std::vector<std::tuple<long, long>>::iterator it_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_end;\n    std::vector<std::tuple<long, long>>::iterator it_sorted_end;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_sorted_end_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_sorted_end_sorted_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_sorted_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_sorted_end_sorted_sorted_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_sorted_sorted_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_sorted_end_sorted_sorted_sorted_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_sorted_sorted_sorted_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_sorted_end_sorted_sorted_sorted_sorted_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_end_sorted_sorted_sorted_sorted_sorted_sorted;\n    std::vector<std::tuple<long, long>>::iterator it_sorted_end_sorted_sorted_sorted_sorted_s",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > x) {\n            tmp = get_row(lst, x);\n            for (auto j = 0; j < tmp.size(); j++) {\n                res.push_back(std::make_tuple(i, std::get<1>(tmp[j])));\n            }\n        }\n        else {\n            for (auto j = 0; j < lst[i].size(); j++) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) {\n        return res;\n    }\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (long i = 0; i < row.size(); i++) {\n            if (row[i] == x) {\n                res.push_back(std::make_tuple(i, row.size() - i - 1));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); i++) {\n        for (auto j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                tmp.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(tmp.begin(), tmp.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < tmp.size(); i++) {\n        res.push_back(tmp[i]);\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    std::vector<std::tuple<long, long>> sorted_by_row;\n    std::vector<std::tuple<long, long>> sorted_by_col;\n    std::sort(lst.begin(), lst.end(),\n              [](std::vector<long> a, std::vector<long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto i = 0; i < lst.size(); i++) {\n        std::sort(lst[i].begin(), lst[i].end(),\n                  [](long a, long b) {\n                      return a < b;\n                  });\n        sorted_by_row.push_back(std::make_tuple(i, lst[i].size()));\n    }\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto i = 0; i < sorted_by_row.size(); i++) {\n        std::sort(std::get<1>(sorted_by_row[i])\n                  .begin(), std::get<1>(sorted_by_row[i])\n                  .end(),\n                  [](long a, long b) {\n                      return a > b;\n                  });\n        sorted_by_col.push_back(std::make_tuple(std::get<0>(sorted_by_row[i]),\n                                                std::get<1>(sorted_by_row[i])));\n    }\n    for (auto i = 0; i < sorted_by_col.size(); i++) {\n        if (std::get<0>(sorted_by_col[i]) == x) {\n            result.push_back(std::make_tuple(std::get<0>(sorted_by_col[i]),\n                                            ",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto t : sorted_by_row) {\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(t);\n            for (long i = col; i < lst[row].size(); i++) {\n                res.push_back(std::make_tuple(row, i));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() > x) {\n            tmp = get_row(lst, x);\n            for (auto j = 0; j < tmp.size(); ++j) {\n                res.push_back(std::make_tuple(i, std::get<1>(tmp[j])));\n            }\n        }\n        else {\n            for (auto j = 0; j < lst[i].size(); ++j) {\n                if (lst[i][j] == x) {\n                    res.push_back(std::make_tuple(i, j));\n                }\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n        [](std::tuple<long, long> a, std::tuple<long, long> b) {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < sorted_by_row.size(); ++i) {\n        auto row = std::get<0>(sorted_by_row[i]);\n        auto col = std::get<1>(sorted_by_row[i]);\n        if (row == x) {\n            result.push_back(std::make_tuple(row, col));\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](std::vector<long> a, std::vector<long> b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > x) {\n            res.push_back(std::make_tuple(i, lst[i][x]));\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < sorted_by_row.size(); i++) {\n        long row = std::get<0>(sorted_by_row[i]);\n        long col = std::get<1>(sorted_by_row[i]);\n        for (long j = 0; j < lst[row].size(); j++) {\n            if (lst[row][j] == x) {\n                res.push_back(std::make_tuple(row, j));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() > x) {\n            std::sort(lst[i].begin(), lst[i].end(), [](const long& a, const long& b) {\n                return a > b;\n            });\n            for (int j = 0; j < lst[i].size(); ++j) {\n                if (lst[i][j] == x) {\n                    res.push_back(std::make_tuple(i, j));\n                }\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); it++) {\n        std::tuple<long, long> t = *it;\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(t);\n            continue;\n        }\n        std::vector<std::tuple<long, long>> sorted_by_col = get_row(lst, row);\n        std::sort(sorted_by_col.begin(), sorted_by_col.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n            return std::get<1>(a) > std::get<1>(b);\n        });\n        for (auto it2 = sorted_by_col.begin(); it2 != sorted_by_col.end(); it2++) {\n            std::tuple<long, long> t2 = *it2;\n            long row2 = std::get<0>(t2);\n            long col2 = std::get<1>(t2);\n            if (col2 == col) {\n                res.push_back(t2);\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); it++) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); it++) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) return result;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            result.push_back(std::make_tuple(row, col));\n        }\n    }\n    return result;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i].size() < x) continue;\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                res.push_back({i, j});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto t : sorted_by_row) {\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) {\n        return res;\n    }\n    std::vector<std::tuple<long, long>> tmp;\n    for (auto i = 0; i < lst.size(); ++i) {\n        tmp.push_back(std::make_tuple(i, lst[i].size() - 1));\n    }\n    std::sort(tmp.begin(), tmp.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < tmp.size(); ++i) {\n        auto& t = tmp[i];\n        long row = std::get<0>(t);\n        long col = std::get<1>(t);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n        if (col == 0) {\n            continue;\n        }\n        for (auto j = 0; j < lst[row].size(); ++j) {\n            if (lst[row][j] == x) {\n                res.push_back(std::make_tuple(row, j));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = sort_by_row(lst);\n    for (auto i = 0; i < sorted_by_row.size(); i++) {\n        long row = std::get<0>(sorted_by_row[i]);\n        long col = std::get<1>(sorted_by_row[i]);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](std::vector<long> a, std::vector<long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto i = 0; i < lst.size(); i++) {\n        for (auto j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (auto& row : lst) {\n        std::sort(row.begin(), row.end(), [](const long& a, const long& b) {\n            return a < b;\n        });\n    }\n    for (auto& row : lst) {\n        for (auto& x : row) {\n            if (x == x) {\n                res.push_back({x, row.size() - 1});\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return std::get<0>(a) < std::get<0>(b);\n              });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); ++it) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < x) continue;\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long, long>> tmp;\n    std::vector<std::tuple<long, long>>::iterator it;\n    std::vector<std::tuple<long, long>>::iterator it2;\n    std::vector<std::tuple<long, long>>::iterator it3;\n    std::vector<std::tuple<long, long>>::iterator it4;\n    std::vector<std::tuple<long, long>>::iterator it5;\n    std::vector<std::tuple<long, long>>::iterator it6;\n    std::vector<std::tuple<long, long>>::iterator it7;\n    std::vector<std::tuple<long, long>>::iterator it8;\n    std::vector<std::tuple<long, long>>::iterator it9;\n    std::vector<std::tuple<long, long>>::iterator it10;\n    std::vector<std::tuple<long, long>>::iterator it11;\n    std::vector<std::tuple<long, long>>::iterator it12;\n    std::vector<std::tuple<long, long>>::iterator it13;\n    std::vector<std::tuple<long, long>>::iterator it14;\n    std::vector<std::tuple<long, long>>::iterator it15;\n    std::vector<std::tuple<long, long>>::iterator it16;\n    std::vector<std::tuple<long, long>>::iterator it17;\n    std::vector<std::tuple<long, long>>::iterator it18;\n    std::vector<std::tuple<long, long>>::iterator it19;\n    std::vector<std::tuple<long, long>>::iterator it20;\n    std::vector<std::tuple<long, long>>::iterator it21;\n    std::vector<std::tuple<long, long>>::iterator it22;\n    std::vector<std::tuple<long, long>>::iterator it23;\n    std::vector<std::tuple<long, long>>::iterator it24;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::vector<std::tuple<long, long>> sorted_by_row = get_row(lst, 0);\n    std::sort(sorted_by_row.begin(), sorted_by_row.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto it = sorted_by_row.begin(); it != sorted_by_row.end(); it++) {\n        long row = std::get<0>(*it);\n        long col = std::get<1>(*it);\n        if (row == x) {\n            res.push_back(std::make_tuple(row, col));\n        }\n    }\n    return res;",
    "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) return res;\n    std::sort(lst.begin(), lst.end(), [](const std::vector<long>& a, const std::vector<long>& b) {\n        return a.size() < b.size();\n    });\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}