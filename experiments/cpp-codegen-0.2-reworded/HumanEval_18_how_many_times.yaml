name: HumanEval_18_how_many_times
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given\
  \ substring can be found in the original string. Count overlaping cases.\n// >>>\
  \ how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>>\
  \ how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string, std::string\
  \ substring) {\n"
tests: "}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
  \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
  \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
  john doe\"), (\"john\")) == (1));\n}\n"
completions: ["    long count = 0;\n    long len_substring = substring.length();\n\
    \    long len_string = string.length();\n    long i = 0;\n    while (i < len_string\
    \ - len_substring + 1) {\n        if (string.substr(i, len_substring) == substring)\
    \ {\n            count++;\n            i += len_substring;\n        } else {\n\
    \            i++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long len_substring = substring.length();\n    long len_string = string.length();\n\
    \    long i = 0;\n    while (i < len_string - len_substring + 1) {\n        if\
    \ (string.substr(i, len_substring) == substring) {\n            count++;\n   \
    \     }\n        i++;\n    }\n    return count;", "    long count = 0;\n    long\
    \ len = string.length();\n    long sublen = substring.length();\n    if (sublen\
    \ > len) {\n        return 0;\n    }\n    for (long i = 0; i <= len - sublen;\
    \ i++) {\n        if (string.substr(i, sublen) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_substring\
    \ = substring.length();\n    long len_string = string.length();\n    long i =\
    \ 0;\n    while (i < len_string) {\n        long j = 0;\n        while (j < len_substring\
    \ && i + j < len_string) {\n            if (string[i + j] != substring[j]) {\n\
    \                break;\n            }\n            j++;\n        }\n        if\
    \ (j == len_substring) {\n            count++;\n            i += len_substring;\n\
    \        } else {\n            i++;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        if\
    \ (string.substr(i, substring.size()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (int i =\
    \ 0; i < string.size(); i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long len_substring = substring.length();\n    long len_string\
    \ = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < len_string)\
    \ {\n        j = 0;\n        while (j < len_substring && i < len_string) {\n \
    \           if (string[i] == substring[j]) {\n                i++;\n         \
    \       j++;\n            } else {\n                j = 0;\n            }\n  \
    \      }\n        if (j == len_substring) {\n            count++;\n          \
    \  i += len_substring;\n        } else {\n            i++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (int i = 0; i < string.length()\
    \ - substring.length() + 1; i++) {\n        if (string.substr(i, substring.length())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long len_string = string.length();\n    long len_substring\
    \ = substring.length();\n    if (len_substring > len_string) {\n        return\
    \ 0;\n    }\n    for (long i = 0; i < len_string - len_substring + 1; i++) {\n\
    \        if (string.substr(i, len_substring) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    if (sublen > len) {\n        return\
    \ 0;\n    }\n    for (long i = 0; i <= len - sublen; i++) {\n        if (string.substr(i,\
    \ sublen) == substring) {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n\
    \        if (string.substr(i, substring.size()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (int i =\
    \ 0; i < string.size(); i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long len_substring = substring.length();\n    long len_string\
    \ = string.length();\n    if (len_substring > len_string) {\n        return 0;\n\
    \    }\n    for (long i = 0; i <= len_string - len_substring; i++) {\n       \
    \ if (string.substr(i, len_substring) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long substring_length\
    \ = substring.length();\n    long string_length = string.length();\n    long i\
    \ = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length\
    \ && string[i] == substring[j]) {\n            j++;\n            i++;\n      \
    \      if (i == string_length) {\n                count++;\n                break;\n\
    \            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;",
  "    long count = 0;\n    long len_substring = substring.length();\n    long len_string\
    \ = string.length();\n    long i = 0;\n    while (i < len_string) {\n        long\
    \ j = 0;\n        while (j < len_substring && i + j < len_string) {\n        \
    \    if (string[i + j] != substring[j]) {\n                break;\n          \
    \  }\n            j++;\n        }\n        if (j == len_substring) {\n       \
    \     count++;\n            i += len_substring;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return count;", "    long count = 0;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long len_substring = substring.length();\n    long len_string\
    \ = string.length();\n    if (len_string < len_substring) return 0;\n    for (long\
    \ i = 0; i < len_string - len_substring + 1; i++) {\n        if (string.substr(i,\
    \ len_substring) == substring) {\n            count++;\n        }\n    }\n   \
    \ return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        if (string.substr(i, substring.size()) == substring) {\n   \
    \         count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long substring_length = substring.length();\n    long string_length = string.length();\n\
    \    long i = 0, j = 0;\n    while (i < string_length && j < substring_length)\
    \ {\n        if (string[i] == substring[j]) {\n            count++;\n        \
    \    i++;\n            j++;\n        } else {\n            i = i - j + 1;\n  \
    \          j = 0;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long substring_size = substring.size();\n    long string_size = string.size();\n\
    \    long i = 0;\n    while (i < string_size - substring_size + 1) {\n       \
    \ if (string.substr(i, substring_size) == substring) {\n            count++;\n\
    \            i += substring_size;\n        } else {\n            i++;\n      \
    \  }\n    }\n    return count;", "    long count = 0;\n    for (int i = 0; i <\
    \ string.size() - substring.size() + 1; i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.size() - substring.size() +\
    \ 1; ++i) {\n        if (string.substr(i, substring.size()) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (long i = 0; i < string.size() - substring.size() + 1; i++) {\n\
    \        if (string.substr(i, substring.size()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_substring\
    \ = substring.length();\n    long len_string = string.length();\n    if (len_substring\
    \ > len_string) {\n        return 0;\n    }\n    for (long i = 0; i < len_string\
    \ - len_substring + 1; i++) {\n        if (string.substr(i, len_substring) ==\
    \ substring) {\n            count++;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    long substring_length = substring.length();\n    long\
    \ string_length = string.length();\n    long i = 0, j = 0;\n    while (i < string_length\
    \ && j < substring_length) {\n        if (string[i] == substring[j]) {\n     \
    \       count++;\n            i++;\n            j++;\n        } else {\n     \
    \       i++;\n        }\n    }\n    return count;", "    long count = 0;\n   \
    \ for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n     \
    \   if (string.substr(i, substring.length()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (int i =\
    \ 0; i < string.size() - substring.size() + 1; i++) {\n        if (string.substr(i,\
    \ substring.size()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    long len_substring = substring.length();\n\
    \    long len_string = string.length();\n    long i = 0;\n    while (i < len_string\
    \ - len_substring + 1) {\n        if (string.substr(i, len_substring) == substring)\
    \ {\n            count++;\n        }\n        i++;\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.size() - substring.size() +\
    \ 1; ++i) {\n        if (string.substr(i, substring.size()) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long substring_length = substring.length();\n    long string_length\
    \ = string.length();\n    long i = 0;\n    while (i < string_length) {\n     \
    \   long j = 0;\n        while (j < substring_length && string[i + j] == substring[j])\
    \ {\n            j++;\n        }\n        if (j == substring_length) {\n     \
    \       count++;\n            i += j;\n        } else {\n            i++;\n  \
    \      }\n    }\n    return count;", "    long count = 0;\n    long len_string\
    \ = string.length();\n    long len_substring = substring.length();\n    long i\
    \ = 0;\n    long j = 0;\n    while (i < len_string) {\n        if (j < len_substring\
    \ && string[i] == substring[j]) {\n            i++;\n            j++;\n      \
    \  } else {\n            j = 0;\n        }\n        if (j == len_substring) {\n\
    \            count++;\n            j = 0;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long len_substring = substring.size();\n    long len_string\
    \ = string.size();\n    long i = 0;\n    long j = 0;\n    while (i < len_string)\
    \ {\n        j = 0;\n        while (j < len_substring && i < len_string) {\n \
    \           if (string[i] == substring[j]) {\n                count++;\n     \
    \           i++;\n                j++;\n            } else {\n               \
    \ j = 0;\n            }\n        }\n        i++;\n    }\n    return count;", " \
    \   long count = 0;\n    for (int i = 0; i < string.size() - substring.size()\
    \ + 1; i++) {\n        if (string.substr(i, substring.size()) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len_string) {\n        if (j\
    \ < len_substring && string[i] == substring[j]) {\n            j++;\n        \
    \    i++;\n        } else {\n            j = 0;\n            i++;\n        }\n\
    \        if (j == len_substring) {\n            count++;\n            j = 0;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    if (sublen > len) return 0;\n    for\
    \ (long i = 0; i <= len - sublen; i++) {\n        if (string.substr(i, sublen)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long substring_length = substring.length();\n    long\
    \ string_length = string.length();\n    if (string_length < substring_length)\
    \ {\n        return 0;\n    }\n    for (long i = 0; i <= string_length - substring_length;\
    \ i++) {\n        if (string.substr(i, substring_length) == substring) {\n   \
    \         count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (long i = 0; i < string.length() - substring.length() + 1; i++) {\n \
    \       if (string.substr(i, substring.length()) == substring) {\n           \
    \ count++;\n        }\n    }\n    return count;", "    long count = 0;\n    long\
    \ len_substring = substring.length();\n    long len_string = string.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len_string) {\n        j = 0;\n\
    \        while (j < len_substring && i < len_string) {\n            if (string[i]\
    \ == substring[j]) {\n                count++;\n                i++;\n       \
    \         j++;\n            } else {\n                i++;\n                j\
    \ = 0;\n            }\n        }\n        i++;\n    }\n    return count;", " \
    \   long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        if\
    \ (string.substr(i, substring.size()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_substring\
    \ = substring.length();\n    long len_string = string.length();\n    long i =\
    \ 0;\n    while (i < len_string - len_substring + 1) {\n        if (string.substr(i,\
    \ len_substring) == substring) {\n            count++;\n        }\n        i++;\n\
    \    }\n    return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        if (string.substr(i, substring.size()) == substring) {\n   \
    \         count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (int i = 0; i < string.size() - substring.size() + 1; i++) {\n      \
    \  if (string.substr(i, substring.size()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_string\
    \ = string.length();\n    long len_substring = substring.length();\n    long i\
    \ = 0;\n    long j = 0;\n    while (i < len_string) {\n        while (j < len_substring\
    \ && string[i] == substring[j]) {\n            j++;\n            i++;\n      \
    \  }\n        if (j == len_substring) {\n            count++;\n            j =\
    \ 0;\n            i++;\n        }\n        else {\n            j = 0;\n      \
    \  }\n    }\n    return count;", "    long count = 0;\n    long len_substring\
    \ = substring.length();\n    long len_string = string.length();\n    long i =\
    \ 0;\n    while (i < len_string - len_substring + 1) {\n        if (string.substr(i,\
    \ len_substring) == substring) {\n            count++;\n        }\n        i++;\n\
    \    }\n    return count;", "    long count = 0;\n    long len_string = string.length();\n\
    \    long len_substring = substring.length();\n    long i = 0;\n    long j = 0;\n\
    \    while (i < len_string) {\n        j = 0;\n        while (j < len_substring\
    \ && i < len_string) {\n            if (string[i] == substring[j]) {\n       \
    \         count++;\n                i++;\n                j++;\n            }\
    \ else {\n                i++;\n                j = 0;\n            }\n      \
    \  }\n    }\n    return count;", "    long count = 0;\n    long len_string = string.length();\n\
    \    long len_substring = substring.length();\n    long i = 0;\n    long j = 0;\n\
    \    while (i < len_string) {\n        j = 0;\n        while (j < len_substring\
    \ && i < len_string) {\n            if (string[i] == substring[j]) {\n       \
    \         count++;\n                i++;\n                j++;\n            }\
    \ else {\n                j = 0;\n            }\n        }\n        i++;\n   \
    \ }\n    return count;", "    long count = 0;\n    long substring_length = substring.length();\n\
    \    long string_length = string.length();\n    long i = 0;\n    while (i < string_length\
    \ - substring_length + 1) {\n        if (string.substr(i, substring_length) ==\
    \ substring) {\n            count++;\n            i += substring_length;\n   \
    \     } else {\n            i++;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    long substring_length = substring.length();\n    long string_length\
    \ = string.length();\n    long i = 0;\n    while (i < string_length) {\n     \
    \   long j = 0;\n        while (j < substring_length && string[i + j] == substring[j])\
    \ {\n            j++;\n        }\n        if (j == substring_length) {\n     \
    \       count++;\n            i += j;\n        } else {\n            i++;\n  \
    \      }\n    }\n    return count;", "    long count = 0;\n    long len = substring.length();\n\
    \    long len_string = string.length();\n    long i = 0;\n    while (i < len_string)\
    \ {\n        long j = 0;\n        while (j < len) {\n            if (string[i\
    \ + j] != substring[j]) {\n                break;\n            }\n           \
    \ j++;\n        }\n        if (j == len) {\n            count++;\n           \
    \ i += len;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    long len_substring = substring.length();\n\
    \    long len_string = string.length();\n    if (len_string < len_substring) {\n\
    \        return 0;\n    }\n    for (long i = 0; i < len_string - len_substring\
    \ + 1; i++) {\n        if (string.substr(i, len_substring) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (int i = 0; i < string.size(); i++) {\n        if (string.substr(i,\
    \ substring.size()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    long len = string.length();\n \
    \   long sublen = substring.length();\n    if (sublen > len) {\n        return\
    \ 0;\n    }\n    for (long i = 0; i <= len - sublen; i++) {\n        if (string.substr(i,\
    \ sublen) == substring) {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (int i = 0; i < string.length() - substring.length()\
    \ + 1; i++) {\n        if (string.substr(i, substring.length()) == substring)\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for (int i = 0; i < string.size() - substring.size() + 1; i++) {\n\
    \        if (string.substr(i, substring.size()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (int i =\
    \ 0; i < string.size(); i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n            i += substring.size() - 1;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (int i =\
    \ 0; i < string.size() - substring.size() + 1; i++) {\n        if (string.substr(i,\
    \ substring.size()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        if (string.substr(i, substring.size()) == substring) {\n   \
    \         count++;\n            i += substring.size() - 1;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    long len_substring = substring.length();\n\
    \    long len_string = string.length();\n    if (len_string < len_substring) {\n\
    \        return 0;\n    }\n    for (long i = 0; i <= len_string - len_substring;\
    \ i++) {\n        if (string.substr(i, len_substring) == substring) {\n      \
    \      count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long substring_length = substring.length();\n    long string_length = string.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        if\
    \ (j < substring_length && string[i] == substring[j]) {\n            j++;\n  \
    \          i++;\n        } else {\n            j = 0;\n            i++;\n    \
    \    }\n        if (j == substring_length) {\n            count++;\n         \
    \   j = 0;\n        }\n    }\n    return count;", "    long count = 0;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n            i += substring.size() - 1;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_substring\
    \ = substring.size();\n    long len_string = string.size();\n    long i = 0;\n\
    \    while (i < len_string - len_substring + 1) {\n        if (string.substr(i,\
    \ len_substring) == substring) {\n            count++;\n        }\n        i++;\n\
    \    }\n    return count;", "    long count = 0;\n    long substring_size = substring.size();\n\
    \    long string_size = string.size();\n    if (string_size < substring_size)\
    \ return 0;\n    for (long i = 0; i <= string_size - substring_size; i++) {\n\
    \        if (string.substr(i, substring_size) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_substring\
    \ = substring.length();\n    long len_string = string.length();\n    long i =\
    \ 0;\n    long j = 0;\n    while (i < len_string) {\n        while (j < len_substring\
    \ && string[i] == substring[j]) {\n            j++;\n            i++;\n      \
    \      if (j == len_substring) {\n                count++;\n                j\
    \ = 0;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return\
    \ count;", "    long count = 0;\n    long len_substring = substring.length();\n\
    \    long len_string = string.length();\n    long i = 0;\n    while (i < len_string\
    \ - len_substring + 1) {\n        if (string.substr(i, len_substring) == substring)\
    \ {\n            count++;\n        }\n        i++;\n    }\n    return count;",
  "    long count = 0;\n    long len_string = string.length();\n    long len_substring\
    \ = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len_string)\
    \ {\n        if (j < len_substring && string[i] == substring[j]) {\n         \
    \   i++;\n            j++;\n        } else {\n            j = 0;\n        }\n\
    \        if (j == len_substring) {\n            count++;\n            j = 0;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_string\
    \ = string.length();\n    long len_substring = substring.length();\n    long i\
    \ = 0;\n    long j = 0;\n    while (i < len_string) {\n        if (j < len_substring\
    \ && string[i] == substring[j]) {\n            j++;\n            i++;\n      \
    \  } else {\n            j = 0;\n            i++;\n        }\n        if (j ==\
    \ len_substring) {\n            count++;\n            j = 0;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (int i = 0; i < string.size()\
    \ - substring.size() + 1; ++i) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long len_string = string.length();\n    long len_substring\
    \ = substring.length();\n    if (len_string < len_substring) {\n        return\
    \ 0;\n    }\n    for (long i = 0; i < len_string - len_substring + 1; i++) {\n\
    \        if (string.substr(i, len_substring) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (long i =\
    \ 0; i < string.length() - substring.length() + 1; i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    long substring_length = substring.length();\n\
    \    long string_length = string.length();\n    for (long i = 0; i <= string_length\
    \ - substring_length; i++) {\n        if (string.substr(i, substring_length) ==\
    \ substring) {\n            count++;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    long substring_length = substring.length();\n    long\
    \ string_length = string.length();\n    if (substring_length > string_length)\
    \ {\n        return 0;\n    }\n    for (long i = 0; i < string_length - substring_length\
    \ + 1; i++) {\n        if (string.substr(i, substring_length) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (int i = 0; i < string.size() - substring.size() + 1; i++) {\n \
    \       if (string.substr(i, substring.size()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_substring\
    \ = substring.size();\n    long len_string = string.size();\n    long i = 0;\n\
    \    while (i < len_string - len_substring + 1) {\n        if (string.substr(i,\
    \ len_substring) == substring) {\n            count++;\n        }\n        i++;\n\
    \    }\n    return count;", "    long count = 0;\n    long substring_size = substring.size();\n\
    \    long string_size = string.size();\n    if (substring_size > string_size)\
    \ {\n        return 0;\n    }\n    for (long i = 0; i < string_size - substring_size\
    \ + 1; i++) {\n        if (string.substr(i, substring_size) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    if (sublen > len) {\n        return 0;\n    }\n    for (long i = 0; i < len\
    \ - sublen + 1; i++) {\n        if (string.substr(i, sublen) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n\
    \    long len_overlap = len_substring - 1;\n    for (long i = 0; i < len_string\
    \ - len_overlap; ++i) {\n        if (string.substr(i, len_substring) == substring)\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    long substring_size = substring.size();\n    long string_size = string.size();\n\
    \    if (substring_size > string_size) {\n        return 0;\n    }\n    for (long\
    \ i = 0; i < string_size - substring_size + 1; i++) {\n        if (string.substr(i,\
    \ substring_size) == substring) {\n            count++;\n        }\n    }\n  \
    \  return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        if (string.substr(i, substring.size()) == substring) {\n   \
    \         count++;\n            i += substring.size() - 1;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    long len_string = string.length();\n\
    \    long len_substring = substring.length();\n    long i = 0;\n    while (i <\
    \ len_string - len_substring + 1) {\n        if (string.substr(i, len_substring)\
    \ == substring) {\n            count++;\n        }\n        i++;\n    }\n    return\
    \ count;", "    long count = 0;\n    long substring_size = substring.size();\n\
    \    long string_size = string.size();\n    if (string_size < substring_size)\
    \ {\n        return 0;\n    }\n    for (long i = 0; i < string_size - substring_size\
    \ + 1; i++) {\n        if (string.substr(i, substring_size) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n\
    \    long i = 0;\n    while (i < len_string - len_substring + 1) {\n        if\
    \ (string.substr(i, len_substring) == substring) {\n            count++;\n   \
    \         i += len_substring;\n        } else {\n            i++;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    for (int i = 0; i < string.size()\
    \ - substring.size() + 1; i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        if\
    \ (string.substr(i, substring.size()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_substring\
    \ = substring.length();\n    long len_string = string.length();\n    long i =\
    \ 0;\n    while (i < len_string) {\n        if (string.substr(i, len_substring)\
    \ == substring) {\n            count++;\n            i += len_substring;\n   \
    \     } else {\n            i++;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    for (int i = 0; i < string.length() - substring.length() + 1;\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n\
    \        if (string.substr(i, substring.length()) == substring) {\n          \
    \  count++;\n        }\n    }\n    return count;", "    long count = 0;\n    for\
    \ (int i = 0; i < string.size() - substring.size() + 1; i++) {\n        if (string.substr(i,\
    \ substring.size()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (int i = 0; i < string.size()\
    \ - substring.size() + 1; ++i) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long len_substring = substring.length();\n    long len_string\
    \ = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < len_string)\
    \ {\n        if (string[i] == substring[j]) {\n            count++;\n        \
    \    j++;\n            if (j == len_substring) {\n                j = 0;\n   \
    \             i++;\n            }\n        } else {\n            j = 0;\n    \
    \        i++;\n        }\n    }\n    return count;", "    long count = 0;\n  \
    \  for (int i = 0; i < string.size(); i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long len_substring = substring.length();\n    long len_string\
    \ = string.length();\n    long i = 0;\n    while (i < len_string - len_substring\
    \ + 1) {\n        if (string.substr(i, len_substring) == substring) {\n      \
    \      count++;\n            i += len_substring;\n        } else {\n         \
    \   i++;\n        }\n    }\n    return count;", "    long count = 0;\n    long\
    \ substring_length = substring.length();\n    long string_length = string.length();\n\
    \    if (substring_length > string_length) {\n        return 0;\n    }\n    for\
    \ (long i = 0; i < string_length - substring_length + 1; i++) {\n        if (string.substr(i,\
    \ substring_length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    long substring_length = substring.length();\n\
    \    long string_length = string.length();\n    if (substring_length > string_length)\
    \ {\n        return 0;\n    }\n    for (long i = 0; i <= string_length - substring_length;\
    \ i++) {\n        if (string.substr(i, substring_length) == substring) {\n   \
    \         count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long len_substring = substring.length();\n    long len_string = string.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len_string) {\n        j = 0;\n\
    \        while (j < len_substring && i < len_string) {\n            if (string[i]\
    \ == substring[j]) {\n                count++;\n                i++;\n       \
    \         j++;\n            } else {\n                i++;\n                j\
    \ = 0;\n            }\n        }\n        i++;\n    }\n    return count;", " \
    \   long count = 0;\n    for (long i = 0; i < string.size() - substring.size()\
    \ + 1; i++) {\n        if (string.substr(i, substring.size()) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long substring_length = substring.length();\n    long string_length\
    \ = string.length();\n    long i = 0;\n    while (i < string_length) {\n     \
    \   long j = 0;\n        while (j < substring_length) {\n            if (string[i\
    \ + j] != substring[j]) {\n                break;\n            }\n           \
    \ j++;\n        }\n        if (j == substring_length) {\n            count++;\n\
    \            i += substring_length;\n        } else {\n            i++;\n    \
    \    }\n    }\n    return count;", "    long count = 0;\n    long len_substring\
    \ = substring.length();\n    long len_string = string.length();\n    long i =\
    \ 0;\n    while (i < len_string) {\n        long j = 0;\n        while (j < len_substring\
    \ && i + j < len_string) {\n            if (string[i + j] != substring[j]) {\n\
    \                break;\n            }\n            j++;\n        }\n        if\
    \ (j == len_substring) {\n            count++;\n            i += len_substring;\n\
    \        } else {\n            i++;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    long len_string = string.length();\n    long len_substring\
    \ = substring.length();\n    if (len_string < len_substring) return 0;\n    for\
    \ (long i = 0; i < len_string - len_substring + 1; i++) {\n        if (string.substr(i,\
    \ len_substring) == substring) {\n            count++;\n        }\n    }\n   \
    \ return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        if (string.substr(i, substring.size()) == substring) {\n   \
    \         count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long len_substring = substring.length();\n    long len_string = string.length();\n\
    \    long i = 0;\n    while (i < len_string - len_substring + 1) {\n        if\
    \ (string.substr(i, len_substring) == substring) {\n            count++;\n   \
    \     }\n        i++;\n    }\n    return count;", "    long count = 0;\n    for\
    \ (int i = 0; i < string.length() - substring.length() + 1; i++) {\n        if\
    \ (string.substr(i, substring.length()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_string\
    \ = string.length();\n    long len_substring = substring.length();\n    long i\
    \ = 0;\n    long j = 0;\n    while (i < len_string) {\n        j = 0;\n      \
    \  while (j < len_substring && i < len_string) {\n            if (string[i] ==\
    \ substring[j]) {\n                count++;\n                i++;\n          \
    \      j++;\n            } else {\n                i++;\n                j = 0;\n\
    \            }\n        }\n    }\n    return count;", "    long count = 0;\n \
    \   long len_string = string.length();\n    long len_substring = substring.length();\n\
    \    if (len_substring > len_string) {\n        return 0;\n    }\n    for (long\
    \ i = 0; i < len_string - len_substring + 1; i++) {\n        if (string.substr(i,\
    \ len_substring) == substring) {\n            count++;\n        }\n    }\n   \
    \ return count;", "    long count = 0;\n    long substring_length = substring.length();\n\
    \    long string_length = string.length();\n    long i = 0;\n    while (i < string_length)\
    \ {\n        long j = 0;\n        while (j < substring_length && string[i + j]\
    \ == substring[j]) {\n            j++;\n        }\n        if (j == substring_length)\
    \ {\n            count++;\n            i += j;\n        } else {\n           \
    \ i++;\n        }\n    }\n    return count;", "    long count = 0;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    if (sublen > len) return 0;\n    for (long i = 0; i < len - sublen + 1; ++i)\
    \ {\n        if (string.substr(i, sublen) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_string\
    \ = string.length();\n    long len_substring = substring.length();\n    long i\
    \ = 0;\n    long j = 0;\n    while (i < len_string) {\n        j = 0;\n      \
    \  while (j < len_substring && i < len_string) {\n            if (string[i] ==\
    \ substring[j]) {\n                count++;\n                i++;\n          \
    \      j++;\n            } else {\n                j = 0;\n            }\n   \
    \     }\n        i++;\n    }\n    return count;", "    long count = 0;\n    long\
    \ len_substring = substring.length();\n    long len_string = string.length();\n\
    \    if (len_string < len_substring) {\n        return 0;\n    }\n    for (long\
    \ i = 0; i < len_string - len_substring + 1; i++) {\n        if (string.substr(i,\
    \ len_substring) == substring) {\n            count++;\n        }\n    }\n   \
    \ return count;", "    long count = 0;\n    for (long i = 0; i < string.size()\
    \ - substring.size() + 1; i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.size() - substring.size() +\
    \ 1; ++i) {\n        if (string.substr(i, substring.size()) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (int i = 0; i < string.size() - substring.size() + 1; ++i) {\n \
    \       if (string.substr(i, substring.size()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long substring_length\
    \ = substring.length();\n    long string_length = string.length();\n    if (substring_length\
    \ > string_length) {\n        return 0;\n    }\n    for (long i = 0; i <= string_length\
    \ - substring_length; i++) {\n        if (string.substr(i, substring_length) ==\
    \ substring) {\n            count++;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    long len = substring.length();\n    long i = 0;\n   \
    \ while (i < string.length() - len + 1) {\n        if (string.substr(i, len) ==\
    \ substring) {\n            count++;\n            i += len - 1;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (int i = 0; i < string.size() - substring.size() + 1; i++) {\n \
    \       if (string.substr(i, substring.size()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long substring_length\
    \ = substring.length();\n    long string_length = string.length();\n    if (substring_length\
    \ > string_length) {\n        return 0;\n    }\n    for (long i = 0; i <= string_length\
    \ - substring_length; i++) {\n        if (string.substr(i, substring_length) ==\
    \ substring) {\n            count++;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    long substring_length = substring.length();\n    long\
    \ string_length = string.length();\n    long i = 0;\n    while (i < string_length\
    \ - substring_length + 1) {\n        if (string.substr(i, substring_length) ==\
    \ substring) {\n            count++;\n        }\n        i++;\n    }\n    return\
    \ count;", "    long count = 0;\n    long substring_size = substring.size();\n\
    \    long string_size = string.size();\n    long i = 0;\n    while (i < string_size\
    \ - substring_size + 1) {\n        if (string.substr(i, substring_size) == substring)\
    \ {\n            count++;\n            i += substring_size;\n        } else {\n\
    \            i++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long len_substring = substring.length();\n    long len_string = string.length();\n\
    \    long len_string_substring = len_string - len_substring + 1;\n    for (long\
    \ i = 0; i < len_string_substring; i++) {\n        if (string.substr(i, len_substring)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long substring_length = substring.length();\n    long\
    \ string_length = string.length();\n    if (substring_length > string_length)\
    \ {\n        return 0;\n    }\n    for (long i = 0; i < string_length - substring_length\
    \ + 1; i++) {\n        if (string.substr(i, substring_length) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long substring_length = substring.length();\n    long string_length\
    \ = string.length();\n    if (substring_length > string_length) {\n        return\
    \ 0;\n    }\n    for (long i = 0; i < string_length - substring_length + 1; i++)\
    \ {\n        if (string.substr(i, substring_length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;", "    long count = 0;\n  \
    \  for (int i = 0; i < string.size(); i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.size() - substring.size() +\
    \ 1; i++) {\n        if (string.substr(i, substring.size()) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long len_string = string.length();\n    long len_substring = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len_string) {\n        if (j\
    \ < len_substring && string[i] == substring[j]) {\n            j++;\n        \
    \    i++;\n        } else {\n            i++;\n        }\n        if (j == len_substring)\
    \ {\n            count++;\n            j = 0;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.size() - substring.size() +\
    \ 1; i++) {\n        if (string.substr(i, substring.size()) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n\
    \    long i = 0;\n    while (i < len_string) {\n        if (string.substr(i, len_substring)\
    \ == substring) {\n            count++;\n            i += len_substring;\n   \
    \     } else {\n            i++;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    long len_string = string.length();\n    long len_substring =\
    \ substring.length();\n    if (len_string < len_substring) {\n        return 0;\n\
    \    }\n    for (long i = 0; i < len_string - len_substring + 1; i++) {\n    \
    \    if (string.substr(i, len_substring) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (int i =\
    \ 0; i < string.size() - substring.size() + 1; i++) {\n        if (string.substr(i,\
    \ substring.size()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    long substring_length = substring.length();\n\
    \    long string_length = string.length();\n    if (substring_length > string_length)\
    \ {\n        return 0;\n    }\n    for (long i = 0; i < string_length - substring_length\
    \ + 1; i++) {\n        if (string.substr(i, substring_length) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (int i = 0; i < string.size(); i++) {\n        if (string.substr(i,\
    \ substring.size()) == substring) {\n            count++;\n            i += substring.size()\
    \ - 1;\n        }\n    }\n    return count;", "    long count = 0;\n    long len_string\
    \ = string.length();\n    long len_substring = substring.length();\n    long i\
    \ = 0;\n    long j = 0;\n    while (i < len_string) {\n        j = 0;\n      \
    \  while (j < len_substring && i < len_string) {\n            if (string[i] ==\
    \ substring[j]) {\n                count++;\n                i++;\n          \
    \      j++;\n            } else {\n                i++;\n            }\n     \
    \   }\n    }\n    return count;", "    long count = 0;\n    for (int i = 0; i\
    \ < string.size() - substring.size() + 1; i++) {\n        if (string.substr(i,\
    \ substring.size()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (int i = 0; i < string.size()\
    \ - substring.size() + 1; i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long substring_length = substring.length();\n    long\
    \ string_length = string.length();\n    for (long i = 0; i < string_length - substring_length\
    \ + 1; i++) {\n        if (string.substr(i, substring_length) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n\
    \    long i = 0;\n    while (i < len_string - len_substring + 1) {\n        if\
    \ (string.substr(i, len_substring) == substring) {\n            count++;\n   \
    \     }\n        i++;\n    }\n    return count;", "    long count = 0;\n    long\
    \ substring_size = substring.size();\n    long string_size = string.size();\n\
    \    if (substring_size > string_size) {\n        return 0;\n    }\n    if (substring_size\
    \ == 0) {\n        return 1;\n    }\n    for (long i = 0; i < string_size - substring_size\
    \ + 1; i++) {\n        if (string.substr(i, substring_size) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long substring_length = substring.length();\n    long string_length\
    \ = string.length();\n    long i = 0;\n    while (i < string_length) {\n     \
    \   long j = 0;\n        while (j < substring_length) {\n            if (string[i\
    \ + j] != substring[j]) {\n                break;\n            }\n           \
    \ j++;\n        }\n        if (j == substring_length) {\n            count++;\n\
    \            i += substring_length;\n        } else {\n            i++;\n    \
    \    }\n    }\n    return count;", "    long count = 0;\n    for (int i = 0; i\
    \ < string.size(); i++) {\n        if (string.substr(i, substring.size()) == substring)\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for (int i = 0; i < string.size() - substring.size() + 1; i++) {\n\
    \        if (string.substr(i, substring.size()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_substring\
    \ = substring.length();\n    long len_string = string.length();\n    long i =\
    \ 0;\n    while (i < len_string - len_substring + 1) {\n        if (string.substr(i,\
    \ len_substring) == substring) {\n            count++;\n        }\n        i++;\n\
    \    }\n    return count;", "    long count = 0;\n    long len_substring = substring.length();\n\
    \    long len_string = string.length();\n    long i = 0;\n    while (i < len_string)\
    \ {\n        long j = 0;\n        while (j < len_substring && i < len_string)\
    \ {\n            if (string[i] == substring[j]) {\n                count++;\n\
    \                i++;\n                j++;\n            } else {\n          \
    \      j = 0;\n                i++;\n            }\n        }\n        i++;\n\
    \    }\n    return count;", "    long count = 0;\n    long len_string = string.length();\n\
    \    long len_substring = substring.length();\n    if (len_substring > len_string)\
    \ {\n        return 0;\n    }\n    for (long i = 0; i < len_string - len_substring\
    \ + 1; i++) {\n        if (string.substr(i, len_substring) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n\
    \    long i = 0;\n    while (i < len_string - len_substring + 1) {\n        if\
    \ (string.substr(i, len_substring) == substring) {\n            count++;\n   \
    \     }\n        i++;\n    }\n    return count;", "    long count = 0;\n    for\
    \ (int i = 0; i < string.length() - substring.length() + 1; i++) {\n        if\
    \ (string.substr(i, substring.length()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_substring\
    \ = substring.length();\n    long len_string = string.length();\n    long i =\
    \ 0;\n    while (i < len_string - len_substring + 1) {\n        if (string.substr(i,\
    \ len_substring) == substring) {\n            count++;\n        }\n        i++;\n\
    \    }\n    return count;", "    long count = 0;\n    for (long i = 0; i < string.size()\
    \ - substring.size() + 1; i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.length() - substring.length()\
    \ + 1; i++) {\n        if (string.substr(i, substring.length()) == substring)\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len_string) {\n        while\
    \ (j < len_substring && string[i] == substring[j]) {\n            i++;\n     \
    \       j++;\n        }\n        if (j == len_substring) {\n            count++;\n\
    \            j = 0;\n        }\n        i++;\n    }\n    return count;", "   \
    \ long count = 0;\n    long substring_length = substring.length();\n    long string_length\
    \ = string.length();\n    long i = 0;\n    while (i < string_length) {\n     \
    \   long j = 0;\n        while (j < substring_length) {\n            if (string[i\
    \ + j] != substring[j]) {\n                break;\n            }\n           \
    \ j++;\n        }\n        if (j == substring_length) {\n            count++;\n\
    \            i += substring_length;\n        } else {\n            i++;\n    \
    \    }\n    }\n    return count;", "    long count = 0;\n    for (int i = 0; i\
    \ < string.size(); i++) {\n        if (string.substr(i, substring.size()) == substring)\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    long substring_length = substring.length();\n    long string_length\
    \ = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length\
    \ && j < substring_length) {\n        if (string[i] == substring[j]) {\n     \
    \       count++;\n            i++;\n            j++;\n        } else {\n     \
    \       i++;\n        }\n    }\n    return count;", "    long count = 0;\n   \
    \ for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n     \
    \   if (string.substr(i, substring.length()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_string\
    \ = string.length();\n    long len_substring = substring.length();\n    long i\
    \ = 0;\n    long j = 0;\n    while (i < len_string) {\n        j = 0;\n      \
    \  while (j < len_substring && i < len_string) {\n            if (string[i] ==\
    \ substring[j]) {\n                count++;\n                i++;\n          \
    \      j++;\n            } else {\n                j = 0;\n            }\n   \
    \     }\n        i++;\n    }\n    return count;", "    long count = 0;\n    for\
    \ (int i = 0; i < string.size() - substring.size() + 1; i++) {\n        if (string.substr(i,\
    \ substring.size()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (int i = 0; i < string.size()\
    \ - substring.size() + 1; i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.length() - substring.length()\
    \ + 1; i++) {\n        if (string.substr(i, substring.length()) == substring)\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    long len_string = string.length();\n    long len_substring = substring.length();\n\
    \    long len_overlap = len_substring - 1;\n    long i = 0;\n    long j = 0;\n\
    \    while (i < len_string) {\n        while (j < len_overlap && string[i] ==\
    \ substring[j]) {\n            j++;\n            i++;\n        }\n        if (j\
    \ == len_overlap) {\n            count++;\n            i += len_substring;\n \
    \           j = 0;\n        } else {\n            j = 0;\n            i++;\n \
    \       }\n    }\n    return count;", "    long count = 0;\n    long len_substring\
    \ = substring.length();\n    long len_string = string.length();\n    long i =\
    \ 0;\n    long j = 0;\n    while (i < len_string) {\n        if (j < len_substring\
    \ && string[i] == substring[j]) {\n            count++;\n            i++;\n  \
    \          j++;\n        } else {\n            j = 0;\n            i++;\n    \
    \    }\n    }\n    return count;", "    long count = 0;\n    for (long i = 0;\
    \ i < string.size() - substring.size() + 1; i++) {\n        if (string.substr(i,\
    \ substring.size()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (int i = 0; i < string.size()\
    \ - substring.size() + 1; i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long substring_size = substring.size();\n    long string_size\
    \ = string.size();\n    if (substring_size > string_size) {\n        return 0;\n\
    \    }\n    for (long i = 0; i < string_size - substring_size + 1; i++) {\n  \
    \      if (string.substr(i, substring_size) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_substring\
    \ = substring.size();\n    long len_string = string.size();\n    long i = 0;\n\
    \    while (i < len_string) {\n        if (string[i] == substring[0]) {\n    \
    \        count++;\n            i++;\n            while (i < len_string && string[i]\
    \ == substring[0]) {\n                count++;\n                i++;\n       \
    \     }\n        } else {\n            i++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.size() - substring.size() +\
    \ 1; i++) {\n        if (string.substr(i, substring.size()) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len_string) {\n        if (string[i]\
    \ == substring[j]) {\n            count++;\n            i++;\n            j++;\n\
    \            if (j == len_substring) {\n                j = 0;\n            }\n\
    \        } else {\n            j = 0;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    for (int i = 0; i < string.size() - substring.size()\
    \ + 1; i++) {\n        if (string.substr(i, substring.size()) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long substring_length = substring.length();\n    long string_length\
    \ = string.length();\n    if (substring_length > string_length) {\n        return\
    \ 0;\n    }\n    for (long i = 0; i < string_length - substring_length + 1; i++)\
    \ {\n        if (string.substr(i, substring_length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;", "    long count = 0;\n  \
    \  for (int i = 0; i < string.size() - substring.size() + 1; i++) {\n        if\
    \ (string.substr(i, substring.size()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_string\
    \ = string.length();\n    long len_substring = substring.length();\n    long i\
    \ = 0;\n    long j = 0;\n    while (i < len_string) {\n        while (j < len_substring\
    \ && string[i] == substring[j]) {\n            count++;\n            i++;\n  \
    \          j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;",
  "    long count = 0;\n    long len_substring = substring.length();\n    long len_string\
    \ = string.length();\n    long i = 0;\n    while (i < len_string - len_substring\
    \ + 1) {\n        long j = 0;\n        while (j < len_substring && string[i +\
    \ j] == substring[j]) {\n            j++;\n        }\n        if (j == len_substring)\
    \ {\n            count++;\n        }\n        i++;\n    }\n    return count;",
  "    long count = 0;\n    long len_substring = substring.length();\n    long len_string\
    \ = string.length();\n    if (len_string < len_substring) return 0;\n    for (long\
    \ i = 0; i < len_string - len_substring + 1; ++i) {\n        if (string.substr(i,\
    \ len_substring) == substring) {\n            count++;\n        }\n    }\n   \
    \ return count;", "    long count = 0;\n    long len_substring = substring.length();\n\
    \    long len_string = string.length();\n    long i = 0;\n    while (i < len_string\
    \ - len_substring + 1) {\n        if (string.substr(i, len_substring) == substring)\
    \ {\n            count++;\n            i += len_substring;\n        } else {\n\
    \            i++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long substring_size = substring.size();\n    long string_size = string.size();\n\
    \    if (substring_size > string_size) {\n        return 0;\n    }\n    for (long\
    \ i = 0; i < string_size - substring_size + 1; i++) {\n        if (string.substr(i,\
    \ substring_size) == substring) {\n            count++;\n        }\n    }\n  \
    \  return count;", "    long count = 0;\n    long substring_length = substring.length();\n\
    \    long string_length = string.length();\n    for (long i = 0; i < string_length\
    \ - substring_length + 1; i++) {\n        if (string.substr(i, substring_length)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long len_substring = substring.length();\n    long len_string\
    \ = string.length();\n    long i = 0;\n    while (i < len_string) {\n        if\
    \ (string.substr(i, len_substring) == substring) {\n            count++;\n   \
    \         i += len_substring;\n        } else {\n            i++;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    long len_substring = substring.length();\n\
    \    long len_string = string.length();\n    long len_string_substring = len_string\
    \ - len_substring + 1;\n    for (long i = 0; i < len_string_substring; i++) {\n\
    \        long j = i;\n        while (j < len_string_substring && substring[j]\
    \ == string[j]) {\n            j++;\n        }\n        if (j - i >= len_substring)\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    long len_substring = substring.size();\n    long len_string = string.size();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len_string) {\n        if (j\
    \ < len_substring && string[i] == substring[j]) {\n            j++;\n        \
    \    i++;\n        } else {\n            j = 0;\n            i++;\n        }\n\
    \        if (j == len_substring) {\n            count++;\n            j = 0;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (int i =\
    \ 0; i < string.length() - substring.length() + 1; i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        if (string.substr(i, substring.size()) == substring) {\n   \
    \         count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long substring_size = substring.size();\n    long string_size = string.size();\n\
    \    if (substring_size > string_size) {\n        return 0;\n    }\n    for (long\
    \ i = 0; i < string_size - substring_size + 1; i++) {\n        if (string.substr(i,\
    \ substring_size) == substring) {\n            count++;\n        }\n    }\n  \
    \  return count;", "    long count = 0;\n    long len = string.length();\n   \
    \ long sublen = substring.length();\n    long i = 0;\n    while (i < len - sublen\
    \ + 1) {\n        if (string.substr(i, sublen) == substring) {\n            count++;\n\
    \            i += sublen;\n        } else {\n            i++;\n        }\n   \
    \ }\n    return count;", "    long count = 0;\n    long len_substring = substring.length();\n\
    \    long len_string = string.length();\n    long i = 0;\n    while (i < len_string\
    \ - len_substring + 1) {\n        if (string.substr(i, len_substring) == substring)\
    \ {\n            count++;\n            i += len_substring;\n        } else {\n\
    \            i++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long len_substring = substring.length();\n    long len_string = string.length();\n\
    \    long i = 0;\n    while (i < len_string - len_substring + 1) {\n        if\
    \ (string.substr(i, len_substring) == substring) {\n            count++;\n   \
    \     }\n        i++;\n    }\n    return count;", "    long count = 0;\n    for\
    \ (int i = 0; i < string.size() - substring.size() + 1; i++) {\n        if (string.substr(i,\
    \ substring.size()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    long substring_length = substring.length();\n\
    \    long string_length = string.length();\n    if (substring_length > string_length)\
    \ {\n        return 0;\n    }\n    for (long i = 0; i < string_length - substring_length\
    \ + 1; i++) {\n        if (string.substr(i, substring_length) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (int i = 0; i < string.size() - substring.size() + 1; i++) {\n \
    \       if (string.substr(i, substring.size()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (int i =\
    \ 0; i < string.size() - substring.size() + 1; i++) {\n        if (string.substr(i,\
    \ substring.size()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    long len = string.length();\n \
    \   long sublen = substring.length();\n    if (sublen > len) return 0;\n    for\
    \ (long i = 0; i < len - sublen + 1; i++) {\n        if (string.substr(i, sublen)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    if (sublen > len) return 0;\n    for (long i = 0; i <= len - sublen; i++)\
    \ {\n        if (string.substr(i, sublen) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long substring_size\
    \ = substring.size();\n    long string_size = string.size();\n    if (substring_size\
    \ > string_size) {\n        return 0;\n    }\n    if (substring_size == 0) {\n\
    \        return 1;\n    }\n    for (long i = 0; i < string_size - substring_size\
    \ + 1; i++) {\n        if (string.substr(i, substring_size) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (int i = 0; i < string.size() - substring.size() + 1; i++) {\n \
    \       if (string.substr(i, substring.size()) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (int i =\
    \ 0; i < string.size() - substring.size() + 1; i++) {\n        if (string.substr(i,\
    \ substring.size()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        if (string.substr(i, substring.size()) == substring) {\n   \
    \         count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long substring_size = substring.size();\n    long string_size = string.size();\n\
    \    if (substring_size > string_size) {\n        return 0;\n    }\n    for (long\
    \ i = 0; i < string_size - substring_size + 1; i++) {\n        if (string.substr(i,\
    \ substring_size) == substring) {\n            count++;\n        }\n    }\n  \
    \  return count;", "    long count = 0;\n    for (int i = 0; i < string.size()\
    \ - substring.size() + 1; i++) {\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long substring_length = substring.length();\n    long\
    \ string_length = string.length();\n    if (substring_length > string_length)\
    \ {\n        return 0;\n    }\n    for (long i = 0; i < string_length - substring_length\
    \ + 1; i++) {\n        if (string.substr(i, substring_length) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    long substring_length = substring.length();\n    long string_length\
    \ = string.length();\n    if (substring_length > string_length) {\n        return\
    \ 0;\n    }\n    for (long i = 0; i < string_length - substring_length + 1; i++)\
    \ {\n        if (string.substr(i, substring_length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;", "    long count = 0;\n  \
    \  long len_substring = substring.length();\n    long len_string = string.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len_string) {\n        while\
    \ (j < len_substring && string[i] == substring[j]) {\n            j++;\n     \
    \       i++;\n        }\n        if (j == len_substring) {\n            count++;\n\
    \            j = 0;\n            i++;\n        } else {\n            j = 0;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long len_substring\
    \ = substring.size();\n    long len_string = string.size();\n    long i = 0;\n\
    \    while (i < len_string) {\n        long j = 0;\n        while (j < len_substring\
    \ && i < len_string) {\n            if (string[i] == substring[j]) {\n       \
    \         count++;\n                i++;\n                j++;\n            }\
    \ else {\n                i++;\n                j = 0;\n            }\n      \
    \  }\n        i++;\n    }\n    return count;", "    long count = 0;\n    long\
    \ len_substring = substring.size();\n    long len_string = string.size();\n  \
    \  long len_string_substring = len_string - len_substring + 1;\n    for (long\
    \ i = 0; i < len_string_substring; i++) {\n        if (string.substr(i, len_substring)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long len_string = string.length();\n    long len_substring\
    \ = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len_string)\
    \ {\n        while (j < len_substring && string[i] == substring[j]) {\n      \
    \      j++;\n            i++;\n            if (j == len_substring) {\n       \
    \         count++;\n                j = 0;\n            }\n        }\n       \
    \ j = 0;\n        i++;\n    }\n    return count;", "    long count = 0;\n    long\
    \ len_substring = substring.length();\n    long len_string = string.length();\n\
    \    if (len_substring > len_string) {\n        return 0;\n    }\n    if (len_substring\
    \ == 0) {\n        return 1;\n    }\n    for (long i = 0; i < len_string - len_substring\
    \ + 1; ++i) {\n        if (string.substr(i, len_substring) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;"]
stop_tokens:
- "\n}"
