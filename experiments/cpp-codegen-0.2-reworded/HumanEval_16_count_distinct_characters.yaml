name: HumanEval_16_count_distinct_characters
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
  \ how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n\
  // 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string\
  \ string) {\n"
tests: "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
  \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
  abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
  \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
completions: ["    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n\
    \        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "  \
    \  long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ?\
    \ 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ? 1 : 0;\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto c : string) {\n\
    \        count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n  \
    \  }\n    return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count\
    \ += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "    std::unordered_map<char,\
    \ int> char_count;\n    for (char c : string) {\n        char_count[c]++;\n  \
    \  }\n    return char_count.size();", "    long count = 0;\n    for (auto c :\
    \ string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count\
    \ += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string),\
    \ std::end(string), c);\n    }\n    return count;", "    std::unordered_map<char,\
    \ long> count;\n    for (auto c : string) {\n        count[c]++;\n    }\n    long\
    \ count_distinct = 0;\n    for (auto c : count) {\n        count_distinct += c.second;\n\
    \    }\n    return count_distinct;", "    long count = 0;\n    for (auto c : string)\
    \ {\n        count += std::count(std::begin(string), std::end(string), c);\n \
    \   }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += std::count(std::begin(string), std::end(string), c);\n    }\n\
    \    return count;", "    std::unordered_map<char, int> map;\n    for (auto c\
    \ : string) {\n        map[c]++;\n    }\n    long count = 0;\n    for (auto it\
    \ = map.begin(); it != map.end(); it++) {\n        if (it->second > 1) {\n   \
    \         count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') || (c >=\
    \ 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto c : string) {\n        count += (c >= 'a' && c <= 'z') || (c >=\
    \ 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto c : string) {\n        count += std::count(std::begin(string),\
    \ std::end(string), c);\n    }\n    return count;", "    std::unordered_map<char,\
    \ int> count;\n    for (char c : string) {\n        count[c]++;\n    }\n    long\
    \ count_ = 0;\n    for (auto it = count.begin(); it != count.end(); it++) {\n\
    \        count_ += it->second;\n    }\n    return count_;", "    long count =\
    \ 0;\n    for (char c : string) {\n        count += std::count(std::begin(string),\
    \ std::end(string), c);\n    }\n    return count;", "    long count = 0;\n   \
    \ for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto c : string) {\n        count +=\
    \ (c == ' ') ? 0 : 1;\n    }\n    return count;", "    std::unordered_map<char,\
    \ int> count;\n    for (auto c : string) {\n        count[c]++;\n    }\n    return\
    \ count.size();", "    long count = 0;\n    for (auto c : string) {\n        count\
    \ += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n  \
    \  for (auto c : string) {\n        count += std::count(std::begin(c), std::end(c),\
    \ c);\n    }\n    return count;", "    std::unordered_map<char, int> count;\n\
    \    for (auto c : string) {\n        count[c]++;\n    }\n    return count.size();",
  "    std::unordered_map<char, long> count;\n    for (auto c : string) {\n      \
    \  count[c]++;\n    }\n    long result = 0;\n    for (auto c : count) {\n    \
    \    result += c.second;\n    }\n    return result;", "    std::unordered_map<char,\
    \ int> char_count;\n    for (char c : string) {\n        char_count[c]++;\n  \
    \  }\n    return char_count.size();", "    long count = 0;\n    for (int i = 0;\
    \ i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n  \
    \  }\n    return count;", "    long count = 0;\n    for (auto c : string) {\n\
    \        count += std::count(std::begin(string), std::end(string), c);\n    }\n\
    \    return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string),\
    \ std::end(string), c);\n    }\n    return count;", "    long count = 0;\n   \
    \ for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string),\
    \ c);\n    }\n    return count;", "    long count = 0;\n    for (int i = 0; i\
    \ < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n\
    \    return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string),\
    \ std::end(string), c);\n    }\n    return count;", "    long count = 0;\n   \
    \ for (char c : string) {\n        count += std::count(std::begin(string), std::end(string),\
    \ c);\n    }\n    return count;", "    long count = 0;\n    for (auto c : string)\
    \ {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n\
    \    }\n    return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ?\
    \ 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for (int i = 0;\
    \ i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n  \
    \  }\n    return count;", "    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;",
  "    std::unordered_map<char, int> count;\n    for (char c : string) {\n       \
    \ count[c]++;\n    }\n    long result = 0;\n    for (auto it = count.begin();\
    \ it != count.end(); it++) {\n        result += it->second;\n    }\n    return\
    \ result;", "    long count = 0;\n    for (auto c : string) {\n        count +=\
    \ (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for\
    \ (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto c : string) {\n        count +=\
    \ (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += std::count(std::begin(string), std::end(string),\
    \ c);\n    }\n    return count;", "    long count = 0;\n    for (int i = 0; i\
    \ < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto c : string) {\n     \
    \   count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count =\
    \ 0;\n    for (char c : string) {\n        count += std::count(std::begin(string),\
    \ std::end(string), c);\n    }\n    return count;", "    std::unordered_map<char,\
    \ int> char_count;\n    for (auto c : string) {\n        char_count[c]++;\n  \
    \  }\n    long count = 0;\n    for (auto c : char_count) {\n        count += c.second;\n\
    \    }\n    return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count\
    \ += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n\
    \    return count;", "    std::unordered_map<char, int> map;\n    for (auto c\
    \ : string) {\n        map[c]++;\n    }\n    long count = 0;\n    for (auto it\
    \ = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n  \
    \          count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (char c : string) {\n        count += std::count(std::begin(string),\
    \ std::end(string), c);\n    }\n    return count;", "    std::unordered_map<char,\
    \ int> map;\n    for (auto c : string) {\n        map[c]++;\n    }\n    long count\
    \ = 0;\n    for (auto it = map.begin(); it != map.end(); it++) {\n        count\
    \ += it->second;\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ c : string) {\n        count += (c >= 'a' && c <= 'z') || (c >= 'A' && c <=\
    \ 'Z') ? 1 : 0;\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;",
  "    std::unordered_map<char, long> count;\n    for (char c : string) {\n      \
    \  count[c]++;\n    }\n    long result = 0;\n    for (auto it = count.begin();\
    \ it != count.end(); it++) {\n        result += it->second;\n    }\n    return\
    \ result;", "    std::unordered_map<char, long> count;\n    for (char c : string)\
    \ {\n        count[c]++;\n    }\n    long count_distinct = 0;\n    for (auto it\
    \ = count.begin(); it != count.end(); it++) {\n        if (it->second > 1) {\n\
    \            count_distinct++;\n        }\n    }\n    return count_distinct;",
  "    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count\
    \ += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "    long count =\
    \ 0;\n    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') ? 1\
    \ : 0;\n        count += (c >= 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count\
    \ += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "    long count =\
    \ 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i]\
    \ == ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for (char\
    \ c : string) {\n        count += std::count(std::begin(string), std::end(string),\
    \ c);\n    }\n    return count;", "    long count = 0;\n    for (int i = 0; i\
    \ < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto c : string) {\n     \
    \   count += std::count(std::begin(string), std::end(string), c);\n    }\n   \
    \ return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ?\
    \ 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += std::count(std::begin(string), std::end(string), c);\n \
    \   }\n    return count;", "    long count = 0;\n    for (auto c : string) {\n\
    \        count += (c >= 'A' && c <= 'Z') ? 1 : 0;\n        count += (c >= 'a'\
    \ && c <= 'z') ? 1 : 0;\n    }\n    return count;", "    long count = 0;\n   \
    \ for (char c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto c : string) {\n        count +=\
    \ (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for\
    \ (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return\
    \ count;", "    std::unordered_map<char, int> char_count;\n    for (auto c : string)\
    \ {\n        char_count[c]++;\n    }\n    long count = 0;\n    for (auto c : char_count)\
    \ {\n        count += char_count[c];\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n  \
    \  }\n    return count;", "    std::unordered_map<char, long> count;\n    for\
    \ (auto c : string) {\n        count[c]++;\n    }\n    long result = 0;\n    for\
    \ (auto it = count.begin(); it != count.end(); it++) {\n        result += it->second;\n\
    \    }\n    return result;", "    long count = 0;\n    for (auto c : string) {\n\
    \        count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto c : string) {\n        count += (c >= 'a' && c <= 'z') ?\
    \ 1 : 0;\n        count += (c >= 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return\
    \ count;", "    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n\
    \        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "  \
    \  long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count\
    \ += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "    long count =\
    \ 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i]\
    \ == ' ') ? 0 : 1;\n    }\n    return count;", "    std::unordered_map<char, int>\
    \ map;\n    for (auto c : string) {\n        map[c]++;\n    }\n    long count\
    \ = 0;\n    for (auto it = map.begin(); it != map.end(); it++) {\n        count\
    \ += it->second;\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count\
    \ += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string),\
    \ std::end(string), c);\n    }\n    return count;", "    long count = 0;\n   \
    \ for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto c : string) {\n        count +=\
    \ std::count(std::begin(string), std::end(string), c);\n    }\n    return count;",
  "    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ?\
    \ 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n\
    \    }\n    return count;", "    std::unordered_map<char, int> count;\n    for\
    \ (auto c : string) {\n        count[c]++;\n    }\n    return count.size();",
  "    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count\
    \ += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto c : string) {\n        count += (c >= 'A' && c <= 'Z') ? 1\
    \ : 0;\n    }\n    return count;", "    long count = 0;\n    for (auto c : string)\
    \ {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long\
    \ count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count +=\
    \ (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n  \
    \  return count;", "    long count = 0;\n    for (auto c : string) {\n       \
    \ count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] ==\
    \ ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 :\
    \ 1;\n    }\n    return count;", "    long count = 0;\n    for (auto c : string)\
    \ {\n        count += std::count(std::islower(c), std::uppercase(c), std::toupper(c));\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto c : string) {\n\
    \        count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n  \
    \  }\n    return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;",
  "    std::unordered_map<char, int> count;\n    for (char c : string) {\n       \
    \ count[c]++;\n    }\n    return count.size();", "    long count = 0;\n    for\
    \ (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ')\
    \ ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for (auto c :\
    \ string) {\n        count += std::count(std::begin(string), std::end(string),\
    \ c);\n    }\n    return count;", "    long count = 0;\n    for (auto c : string)\
    \ {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto c : string) {\n\
    \        count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count\
    \ = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i]\
    \ == ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for (char\
    \ c : string) {\n        count += (c >= 'a' && c <= 'z') ? 1 : 0;\n        count\
    \ += (c >= 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n  \
    \  }\n    return count;", "    long count = 0;\n    for (auto c : string) {\n\
    \        count += std::count(std::begin(c), std::end(c), c);\n    }\n    return\
    \ count;", "    long count = 0;\n    for (char c : string) {\n        count +=\
    \ std::count(std::begin(string), std::end(string), c);\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count\
    \ += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string),\
    \ std::end(string), c);\n    }\n    return count;", "    long count = 0;\n   \
    \ for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return\
    \ count;", "    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n\
    \        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "  \
    \  long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count\
    \ += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "    long count =\
    \ 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i]\
    \ == ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ c : string) {\n        count += std::count(std::begin(string), std::end(string),\
    \ c);\n    }\n    return count;", "    long count = 0;\n    for (auto c : string)\
    \ {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    std::unordered_map<char,\
    \ int> map;\n    for (char c : string) {\n        map[c]++;\n    }\n    long count\
    \ = 0;\n    for (auto& it : map) {\n        count += it.second;\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto c : string) {\n        count +=\
    \ (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : string) {\n        count += std::count(std::begin(string), std::end(string),\
    \ c);\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += std::count(std::begin(string), std::end(string), c);\n \
    \   }\n    return count;", "    std::unordered_map<char, long> count;\n    for\
    \ (auto c : string) {\n        count[c]++;\n    }\n    long count_distinct = 0;\n\
    \    for (auto c : count) {\n        count_distinct += count[c];\n    }\n    return\
    \ count_distinct;", "    std::unordered_map<char, int> char_count;\n    for (auto\
    \ c : string) {\n        char_count[c]++;\n    }\n    long count = 0;\n    for\
    \ (auto c : char_count) {\n        if (c.second > 1) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (auto c :\
    \ string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string),\
    \ std::end(string), c);\n    }\n    return count;", "    long count = 0;\n   \
    \ for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return\
    \ count;", "    long count = 0;\n    for (char c : string) {\n        count +=\
    \ (c >= 'a' && c <= 'z') ? 1 : 0;\n    }\n    return count;", "    std::unordered_map<char,\
    \ int> char_count;\n    for (auto c : string) {\n        char_count[c]++;\n  \
    \  }\n    return char_count.size();", "    long count = 0;\n    for (auto c :\
    \ string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string),\
    \ std::end(string), c);\n    }\n    return count;", "    std::unordered_map<char,\
    \ int> char_count;\n    for (auto c : string) {\n        char_count[c]++;\n  \
    \  }\n    long count = 0;\n    for (auto c : char_count) {\n        count += char_count[c];\n\
    \    }\n    return count;", "    long count = 0;\n    for (char c : string) {\n\
    \        count += std::count(std::begin(string), std::end(string), c);\n    }\n\
    \    return count;", "    std::unordered_map<char, int> count;\n    for (char\
    \ c : string) {\n        count[c]++;\n    }\n    long count_ = 0;\n    for (auto\
    \ it = count.begin(); it != count.end(); it++) {\n        if (it->second > 1)\
    \ {\n            count_++;\n        }\n    }\n    return count_;", "    long count\
    \ = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n  \
    \  }\n    return count;", "    long count = 0;\n    for (auto c : string) {\n\
    \        count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n  \
    \  }\n    return count;", "    long count = 0;\n    for (auto ch : string) {\n\
    \        count += std::count(std::begin(ch), std::end(ch), ch);\n    }\n    return\
    \ count;", "    std::unordered_map<char, int> char_count;\n    for (auto c : string)\
    \ {\n        char_count[c]++;\n    }\n    return char_count.size();", "    long\
    \ count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count +=\
    \ (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] ==\
    \ ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ &c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ?\
    \ 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for (auto c : string)\
    \ {\n        count += std::count(std::begin(c), std::end(c), c);\n    }\n    return\
    \ count;", "    std::unordered_map<char, int> map;\n    for (auto c : string)\
    \ {\n        map[c]++;\n    }\n    long count = 0;\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        if (it->second > 1) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (auto c :\
    \ string) {\n        count += std::count(std::begin(c), std::end(c), c);\n   \
    \ }\n    return count;", "    std::unordered_map<char, int> count;\n    for (auto\
    \ c : string) {\n        count[c]++;\n    }\n    return count.size();", "    long\
    \ count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count +=\
    \ (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n\
    \    for (char c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n  \
    \  return count;", "    std::unordered_map<char, int> count;\n    for (auto c\
    \ : string) {\n        count[c]++;\n    }\n    return count.size();", "    std::unordered_map<char,\
    \ int> count;\n    for (char c : string) {\n        count[c]++;\n    }\n    long\
    \ count_ = 0;\n    for (auto it = count.begin(); it != count.end(); it++) {\n\
    \        if (it->second > 1) {\n            count_++;\n        }\n    }\n    return\
    \ count_;", "    long count = 0;\n    for (auto c : string) {\n        count +=\
    \ (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ?\
    \ 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for (int i = 0;\
    \ i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n  \
    \  }\n    return count;", "    long count = 0;\n    for (auto c : string) {\n\
    \        count += std::count(std::begin(string), std::end(string), c);\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto &c : string) {\n    \
    \    count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n  \
    \  }\n    return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count\
    \ += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;", "    long count =\
    \ 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i]\
    \ == ' ') ? 0 : 1;\n    }\n    return count;", "    std::unordered_map<char, int>\
    \ map;\n    for (auto c : string) {\n        map[c]++;\n    }\n    long count\
    \ = 0;\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second\
    \ > 1) {\n            count++;\n        }\n    }\n    return count;", "    std::unordered_map<char,\
    \ int> count;\n    for (char c : string) {\n        count[c]++;\n    }\n    return\
    \ count.size();", "    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string),\
    \ std::end(string), toupper(c));\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count =\
    \ 0;\n    for (char c : string) {\n        count += std::count(std::begin(string),\
    \ std::end(string), c);\n    }\n    return count;", "    std::unordered_map<char,\
    \ int> char_count;\n    for (auto c : string) {\n        char_count[c]++;\n  \
    \  }\n    long count = 0;\n    for (auto it = char_count.begin(); it != char_count.end();\
    \ it++) {\n        count += it->second;\n    }\n    return count;", "    std::unordered_map<char,\
    \ int> char_count;\n    for (auto c : string) {\n        char_count[c]++;\n  \
    \  }\n    long count = 0;\n    for (auto c : char_count) {\n        count += char_count[c];\n\
    \    }\n    return count;", "    std::unordered_map<char, int> map;\n    for (auto\
    \ c : string) {\n        map[c]++;\n    }\n    long count = 0;\n    for (auto\
    \ it = map.begin(); it != map.end(); it++) {\n        if (it->second > 1) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n\
    \    return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ?\
    \ 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for (int i = 0;\
    \ i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n  \
    \  }\n    return count;", "    long count = 0;\n    for (auto c : string) {\n\
    \        count += (c == ' ') ? 0 : 1;\n    }\n    return count;", "    long count\
    \ = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i]\
    \ == ' ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ c : string) {\n        count += (c >= 'a' && c <= 'z') || (c >= 'A' && c <=\
    \ 'Z') ? 1 : 0;\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ c : string) {\n        count += std::count(std::begin(c), std::end(c), c);\n\
    \    }\n    return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string),\
    \ std::end(string), c);\n    }\n    return count;", "    long count = 0;\n   \
    \ for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == '\
    \ ') ? 0 : 1;\n    }\n    return count;", "    long count = 0;\n    for (char\
    \ c : string) {\n        count += (c >= 'a' && c <= 'z') || (c >= 'A' && c <=\
    \ 'Z') ? 1 : 0;\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ c : string) {\n        count += std::count(std::begin(string), std::end(string),\
    \ c);\n    }\n    return count;", "    long count = 0;\n    for (int i = 0; i\
    \ < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n\
    \    return count;", "    long count = 0;\n    for (char c : string) {\n     \
    \   count += (c >= 'a' && c <= 'z') ? 1 : 0;\n        count += (c >= 'A' && c\
    \ <= 'Z') ? 1 : 0;\n    }\n    return count;", "    long count = 0;\n    for (char\
    \ c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;",
  "    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(c),\
    \ std::end(c), c);\n    }\n    return count;", "    long count = 0;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 :\
    \ 1;\n    }\n    return count;", "    long count = 0;\n    for (char c : string)\
    \ {\n        count += std::count(std::begin(string), std::end(string), c);\n \
    \   }\n    return count;", "    std::unordered_map<char, int> map;\n    for (char\
    \ c : string) {\n        map[c]++;\n    }\n    long count = 0;\n    for (auto\
    \ it = map.begin(); it != map.end(); it++) {\n        if (it->second > 1) {\n\
    \            count++;\n        }\n    }\n    return count;", "    std::unordered_map<char,\
    \ long> map;\n    for (auto c : string) {\n        map[c]++;\n    }\n    long\
    \ count = 0;\n    for (auto it = map.begin(); it != map.end(); it++) {\n     \
    \   if (it->second > 1) {\n            count++;\n        }\n    }\n    return\
    \ count;"]
stop_tokens:
- "\n}"
