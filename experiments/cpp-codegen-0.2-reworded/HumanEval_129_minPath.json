{
  "name": "HumanEval_129_minPath",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered vectors of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered vector of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([ [1,2,3], [4,5,6], [7,8,9]], 3)\n// [1, 2, 1]\n// >>> minPath([ [5,9,3], [4,1,6], [7,8,2]], 1)\n// [1]\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n",
  "tests": "}\nint main() {\n    auto candidate = minPath;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3)) == (std::vector<long>({(long)1, (long)2, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1)) == (std::vector<long>({(long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15, (long)16})})), (4)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)10}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)12, (long)1}), (std::vector<long>)std::vector<long>({(long)3, (long)16, (long)11, (long)15}), (std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2})})), (7)) == (std::vector<long>({(long)1, (long)10, (long)1, (long)10, (long)1, (long)10, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)15}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)1, (long)12}), (std::vector<long>)std::vector<long>({(long)3, (long)10, (long)11, (long)16})})), (5)) == (std::vector<long>({(long)1, (long)7, (long)1, (long)7, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1})})), (9)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2})})), (12)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)8, (long)9})})), (8)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4})})), (8)) == (std::vector<long>({(long)1, (long)5, (long)1, (long)5, (long)1, (long)5, (long)1, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})})), (10)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)2})})), (10)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n}\n",
  "completions": [
    "    std::vector<long> result;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                result.push_back(dp[i][j]);\n            } else if (i == 0) {\n                result.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                result.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                result.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i > 0 && lst[i - 1][j] < lst[i][j]) {\n                lst[i][j] = lst[i - 1][j];\n            }\n            if (j > 0 && lst[i][j - 1] < lst[i][j]) {\n                lst[i][j] = lst[i][j - 1];\n            }\n            if (i > 0 && j > 0 && lst[i - 1][j - 1] < lst[i][j]) {\n                lst[i][j] = lst[i - 1][j - 1];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (lst[i][j] < k) {\n                ans.push_back(lst[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid.size(); j++) {\n            if (i == j) {\n                dp[i][j] = grid[i][j];\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid.size(); j++) {\n            if (i == j) {\n                ans.push_back(dp[i][j]);\n            } else {\n                if (dp[i][j] == dp[i][j - 1] + grid[i][j]) {\n                    ans.push_back(dp[i][j]);\n                }\n                if (dp[i][j] == dp[i - 1][j] + grid[i][j]) {\n                    ans.push_back(dp[i][j]);\n                }\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            dp[i][j] = grid[i][j] + (i == 0 || j == 0 ? 0 : dp[i - 1][j - 1]);\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    if (grid.size() < 2) return ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1] + grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j] + grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == grid[i][j]) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>());\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[i].size(); ++j) {\n            lst[i].push_back(grid[i][j]);\n        }\n    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < k; ++i) {\n        ans.push_back(lst[i][0]);\n        for (int j = 1; j < lst[i].size(); ++j) {\n            if (lst[i][j] < lst[i][j - 1]) {\n                lst[i][j] = lst[i][j - 1];\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid.size(); j++) {\n            if (i == j) {\n                dp[i][j] = grid[i][j];\n            } else {\n                dp[i][j] = std::min(dp[i][j], std::min(dp[i][j - 1], dp[i - 1][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid.size(); j++) {\n            if (i == j) {\n                ans.push_back(dp[i][j]);\n            } else {\n                if (dp[i][j] == dp[i][j - 1]) {\n                    ans.push_back(dp[i][j]);\n                }\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            dp[i][j] = grid[i][j] + (i > 0 && dp[i - 1][j] < dp[i][j]) + (j > 0 && dp[i][j - 1] < dp[i][j]);\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            dp[i][j] = grid[i][j] + std::min(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> result;\n    std::vector<std::vector<long>> visited(grid.size(), std::vector<long>(grid.size(), 0));\n    std::queue<std::pair<int, int>> q;\n    q.push(std::make_pair(0, 0));\n    while (!q.empty()) {\n        auto p = q.front();\n        q.pop();\n        if (visited[p.first][p.second] < k) {\n            result.push_back(grid[p.first][p.second]);\n            visited[p.first][p.second]++;\n            if (p.first > 0) {\n                q.push(std::make_pair(p.first - 1, p.second));\n            }\n            if (p.first < grid.size() - 1) {\n                q.push(std::make_pair(p.first + 1, p.second));\n            }\n            if (p.second > 0) {\n                q.push(std::make_pair(p.first, p.second - 1));\n            }\n            if (p.second < grid[0].size() - 1) {\n                q.push(std::make_pair(p.first, p.second + 1));\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            for (int di = -1; di <= 1; ++di) {\n                for (int dj = -1; dj <= 1; ++dj) {\n                    if (di == 0 && dj == 0) continue;\n                    if (i + di < 0 || i + di >= grid.size() || j + dj < 0 || j + dj >= grid[0].size()) continue;\n                    if (lst[i][j] + 1 < lst[i + di][j + dj]) {\n                        lst[i][j] = lst[i + di][j + dj];\n                    }\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (lst[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1] + grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j] + grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j] + grid[i][j]));\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1] + grid[i",
    "    std::vector<long> result;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                result.push_back(dp[i][j]);\n            } else if (i == 0) {\n                result.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                result.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                result.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>());\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[i].size(); j++) {\n            lst[i].push_back(grid[i][j]);\n        }\n    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < k; i++) {\n        ans.push_back(lst[i][0]);\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i][j], grid[i][j])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            dp[i][j] = std::min(dp[i][j], grid[i][j]);\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]))));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(std::min(dp[i - 1][j], dp[i][j - 1]), grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(std::min(dp[i][j], dp[i - 1][j]), dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>());\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[i].size(); ++j) {\n            lst[i].push_back(grid[i][j]);\n        }\n    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < k; ++i) {\n        ans.push_back(lst[i][0]);\n        for (int j = 1; j < lst[i].size(); ++j) {\n            if (lst[i][j] < lst[i][j - 1]) {\n                lst[i][j] = lst[i][j - 1];\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[i].size(); ++j) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    while (k--) {\n        for (int i = 0; i < grid.size(); ++i) {\n            for (int j = 0; j < grid[i].size(); ++j) {\n                if (i > 0 && j > 0 && lst[i - 1][j] < lst[i][j - 1]) {\n                    lst[i][j] = lst[i - 1][j];\n                } else if (i > 0 && lst[i - 1][j] < lst[i][j]) {\n                    lst[i][j] = lst[i - 1][j];\n                } else if (j > 0 && lst[i][j - 1] < lst[i][j]) {\n                    lst[i][j] = lst[i][j - 1];\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[i].size(); ++j) {\n            ans.push_back(lst[i][j]);\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i][j - 1], dp[i - 1][j])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(dp[i][j] - grid[i][j]);\n            } else if (j == 0) {\n                ans.push_back(dp[i][j] - grid[i][j]);\n            } else {\n                ans.push_back(dp[i][j] - grid[i][j]);\n                ans.push_back(dp[i][j] - grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(dp[i][j] - dp[i][j - 1]);\n            } else if (j == 0) {\n                ans.push_back(dp[i][j] - dp[i - 1][j]);\n            } else {\n                ans.push_back(dp[i][j] - std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> result;\n    if (grid.empty() || k < 1) return result;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]);\n            }\n        }\n    }\n    result.push_back(dp[grid.size() - 1][grid[0].size() - 1]);\n    for (int i = grid.size() - 2; i >= 0; --i) {\n        for (int j = grid[0].size() - 2; j >= 0; --j) {\n            if (i == 0 && j == 0) continue;\n            dp[i][j] = std::min(dp[i][j], dp[i][j + 1] + grid[i][j]);\n        }\n    }\n    for (int i = grid.size() - 2; i >= 0; --i) {\n        for (int j = grid[0].size() - 2; j >= 0; --j) {\n            if (i == 0 && j == 0) continue;\n            dp[i][j] = std::min(dp[i][j], dp[i + 1][j] + grid[i][j]);\n        }\n    }\n    for (int",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i > 0 && j > 0) {\n                if (lst[i][j] < lst[i - 1][j] && lst[i][j] < lst[i][j - 1]) {\n                    lst[i][j] = lst[i - 1][j] < lst[i][j - 1] ? lst[i - 1][j] : lst[i][j - 1];\n                }\n            }\n            if (i > 0) {\n                if (lst[i][j] < lst[i - 1][j]) {\n                    lst[i][j] = lst[i - 1][j];\n                }\n            }\n            if (j > 0) {\n                if (lst[i][j] < lst[i][j - 1]) {\n                    lst[i][j] = lst[i][j - 1];\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (lst[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            dp[i][j] = grid[i][j] + std::min(dp[i][j - 1], dp[i - 1][j]);\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            for (int di = -1; di <= 1; di++) {\n                for (int dj = -1; dj <= 1; dj++) {\n                    if (di == 0 && dj == 0) continue;\n                    int n_i = i + di;\n                    int n_j = j + dj;\n                    if (n_i < 0 || n_i >= grid.size() || n_j < 0 || n_j >= grid[0].size()) continue;\n                    dp[n_i][n_j] = std::min(dp[i][j], dp[n_i][n_j]);\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == 0) continue;\n            if (k == 1) {\n                ans.push_back(dp[i][j]);\n                break;\n            }\n            for (int di = -1; di <= 1; di++) {\n                for (int dj = -1; dj <= 1; dj++) {\n                    if (di == 0 && dj == 0) continue;\n                    int n_i = i + di;\n                    int n_j = j + dj;\n                    if (n_i < 0 || n_i >= grid.size() || n_j < 0 || n_j >= grid[0].size()) continue;\n                    if (dp[n_i][n_j] == 0) continue;\n                    if (dp[i][j] +",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    if (grid.size() == 0) return ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    dp[0][0] = grid[0][0];\n    for (int i = 1; i < grid.size(); ++i) {\n        dp[i][0] = dp[i - 1][0] + grid[i][0];\n    }\n    for (int i = 1; i < grid.size(); ++i) {\n        for (int j = 1; j < grid.size(); ++j) {\n            dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (dp[i][j] == dp[i][j + 1] + grid[i][j]) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    if (ans.size() < k) {\n        return ans;\n    }\n    std::sort(ans.begin(), ans.end());\n    ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[i].size(); ++j) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            for (int di = -1; di <= 1; ++di) {\n                for (int dj = -1; dj <= 1; ++dj) {\n                    if (di == 0 && dj == 0) continue;\n                    lst[i][j] = std::min(lst[i][j], lst[i + di][j + dj] + 1);\n                }\n            }\n        }\n    }\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == k) {\n                ans = std::vector<long>(lst[i].begin(), lst[i].end());\n                break;\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            for (int di = -1; di <= 1; ++di) {\n                for (int dj = -1; dj <= 1; ++dj) {\n                    if (di == 0 && dj == 0) continue;\n                    int ri = i + di;\n                    int rj = j + dj;\n                    if (ri < 0 || ri >= grid.size() || rj < 0 || rj >= grid[0].size()) continue;\n                    dp[ri][rj] = std::min(dp[ri][rj], dp[i][j] + 1);\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> result;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                result.push_back(dp[i][j]);\n            } else if (i == 0) {\n                result.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                result.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                result.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid.size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid.size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1] + grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j] + grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j] + grid[i][j]));\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            for (int jj = 0; jj < grid[0].size(); jj++) {\n                if (i - 1 >= 0 && j - 1 >= 0) {\n                    dp[i][j] = std::min(dp[i][j], dp[i - 1][j - 1] + grid[i][j]);\n                }\n                if (i - 1 >= 0 && j + 1 < grid[0].size()) {\n                    dp[i][j] = std::min(dp[i][j], dp[i - 1][j + 1] + grid[i][j]);\n                }\n                if (i + 1 < grid.size() && j - 1 >= 0) {\n                    dp[i][j] = std::min(dp[i][j], dp[i + 1][j - 1] + grid[i][j]);\n                }\n                if (i + 1 < grid.size() && j + 1 < grid[0].size()) {\n                    dp[i][j] = std::min(dp[i][j], dp[i + 1][j + 1] + grid[i][j]);\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            ans.push_back(dp[i][j]);\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            for (int ii = 0; ii < grid.size(); ii++) {\n                for (int jj = 0; jj < grid[0].size(); jj++) {\n                    if (i != ii && j != jj) {\n                        if (lst[i][j] < lst[ii][jj]) {\n                            lst[i][j] = lst[ii][jj];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (lst[i][j] == k) {\n                ans.push_back(lst[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    if (grid.size() < 2) return ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] = grid[i][j];\n            } else {\n                dp[i][j] = std::min(dp[i][j - 1], std::min(dp[i - 1][j], dp[i - 1][j - 1])) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (dp[i][j] == dp[i - 1][j]) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    if (k > ans.size()) return ans;\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (dp[i][j] == dp[i - 1][j]) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            for (int di = -1; di <= 1; ++di) {\n                for (int dj = -1; dj <= 1; ++dj) {\n                    if (di == 0 && dj == 0) continue;\n                    int ri = i + di;\n                    int rj = j + dj;\n                    if (ri < 0 || ri >= grid.size() || rj < 0 || rj >= grid[0].size()) continue;\n                    lst[ri][rj] = std::min(lst[ri][rj], lst[i][j] + 1);\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (lst[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]) + dp[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    if (grid.empty()) return ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], dp[i][j]) + grid[i][j];\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j]) + grid[i][j];\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]) + dp[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i > 0 && j > 0 && lst[i][j] < lst[i - 1][j - 1]) {\n                lst[i][j] = lst[i - 1][j - 1];\n            }\n            if (i > 0 && j < grid[0].size() - 1 && lst[i][j] < lst[i - 1][j + 1]) {\n                lst[i][j] = lst[i - 1][j + 1];\n            }\n            if (i < grid.size() - 1 && j > 0 && lst[i][j] < lst[i + 1][j - 1]) {\n                lst[i][j] = lst[i + 1][j - 1];\n            }\n            if (i < grid.size() - 1 && j < grid[0].size() - 1 && lst[i][j] < lst[i + 1][j + 1]) {\n                lst[i][j] = lst[i + 1][j + 1];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (lst[i][j] == k) {\n                ans.push_back(lst[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i][j - 1], std::min(dp[i - 1][j], grid[i][j]))));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            for (int dir = 0; dir < 4; ++dir) {\n                int nx = i + dir % 2;\n                int ny = j + dir / 2;\n                if (nx >= 0 && nx < grid.size() && ny >= 0 && ny < grid[0].size()) {\n                    dp[i][j] = std::min(dp[i][j], dp[nx][ny] + grid[i][j]);\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            ans.push_back(dp[i][j]);\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid.size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid.size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid.size(); j++) {\n            if (i == j) {\n                dp[i][j] = grid[i][j];\n            } else {\n                dp[i][j] = std::min(dp[i][j - 1], std::min(dp[i - 1][j], dp[i - 1][j - 1])) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid.size(); j++) {\n            if (i == j) {\n                ans.push_back(dp[i][j]);\n            } else {\n                if (dp[i][j] == dp[i - 1][j] && dp[i][j] == dp[i][j - 1]) {\n                    ans.push_back(dp[i][j]);\n                }\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            dp[i][j] = grid[i][j] + (i > 0 && j > 0 ? dp[i - 1][j - 1] : 0);\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    if (grid.size() < 2) return ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    dp[0][0] = grid[0][0];\n    for (int i = 1; i < grid.size(); ++i) {\n        dp[i][0] = grid[i][0] + dp[i - 1][0];\n        for (int j = 1; j < grid.size(); ++j) {\n            dp[i][j] = grid[i][j] + std::min(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n                break;\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1] + grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j] + grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j] + grid[i][j]));\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[i].size(); ++j) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    while (k--) {\n        for (int i = 0; i < lst.size(); ++i) {\n            for (int j = 0; j < lst[i].size(); ++j) {\n                if (i > 0 && j > 0 && lst[i][j] < lst[i - 1][j - 1]) {\n                    lst[i][j] = lst[i - 1][j - 1];\n                }\n                if (i > 0 && lst[i][j] < lst[i - 1][j]) {\n                    lst[i][j] = lst[i - 1][j];\n                }\n                if (j > 0 && lst[i][j] < lst[i][j - 1]) {\n                    lst[i][j] = lst[i][j - 1];\n                }\n            }\n        }\n        ans.push_back(lst[lst.size() - 1][lst[0].size() - 1]);\n    }\n    return ans;",
    "    std::vector<long> result;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] = grid[i][j];\n            } else {\n                dp[i][j] = std::min(dp[i][j - 1], dp[i - 1][j]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                result.push_back(dp[i][j]);\n            } else {\n                if (dp[i][j] == dp[i - 1][j]) {\n                    result.push_back(dp[i][j]);\n                } else {\n                    result.push_back(dp[i][j]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            for (int di = -1; di <= 1; di++) {\n                for (int dj = -1; dj <= 1; dj++) {\n                    if (di == 0 && dj == 0) continue;\n                    if (i + di < 0 || i + di >= grid.size()) continue;\n                    if (j + dj < 0 || j + dj >= grid[0].size()) continue;\n                    lst[i + di][j + dj] = std::min(lst[i + di][j + dj], lst[i][j] + 1);\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (lst[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]))));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    if (grid.empty()) return ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], dp[i][j]) + grid[i][j];\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j]) + grid[i][j];\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] = grid[i][j];\n            } else {\n                dp[i][j] = std::min(dp[i][j], grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] += grid[i][j];\n            } else {\n                dp[i][j] += std::min(dp[i][j - 1], dp[i - 1][j]);\n                dp[i][j] += std::min(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] += grid[i][j];\n            } else {\n                dp[i][j] += std::min(dp[i][j - 1], dp[i - 1][j]);\n                dp[i][j] += std::min(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] += grid[i][j];\n            } else {\n                dp[i][j] += std::min(dp[i][j - 1], dp[i - 1][j]);\n                ",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(dp[i][j] + grid[i][j]);\n            } else if (j == 0) {\n                ans.push_back(dp[i][j] + grid[i][j]);\n            } else {\n                ans.push_back(dp[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]))));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    if (grid.size() == 0) return ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid.size(); j++) {\n            if (i == j) {\n                dp[i][j] = grid[i][j];\n            } else {\n                dp[i][j] = std::min(dp[i][j], grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid.size(); j++) {\n            if (i == j) {\n                dp[i][j] = std::min(dp[i][j], k);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid.size(); j++) {\n            if (i == j) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j + 1] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid.size(); j++) {\n            if (i == j) {\n                dp[i][j] = std::min(dp[i][j], dp[i + 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            for (int jj = 0; jj < grid[0].size(); jj++) {\n                if (i > 0 && j > 0 && grid[i][j] < grid[i - 1][j] && grid[i][j] < grid[i][jj]) {\n                    dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n                }\n                if (i > 0 && j < grid[0].size() - 1 && grid[i][j] < grid[i - 1][j + 1] && grid[i][j] < grid[i][jj]) {\n                    dp[i][j] = std::min(dp[i][j], dp[i - 1][j + 1] + grid[i][j]);\n                }\n                if (i < grid.size() - 1 && j > 0 && grid[i][j] < grid[i + 1][j] && grid[i][j] < grid[i][jj]) {\n                    dp[i][j] = std::min(dp[i][j], dp[i + 1][j] + grid[i][j]);\n                }\n                if (i < grid.size() - 1 && j < grid[0].size() - 1 && grid[i][j] < grid[i + 1][j + 1] && grid[i][j] < grid[i][jj]) {\n                    dp[i][j] = std::min(dp[i][j], dp[i + 1][j + 1] + grid[i][j]);\n",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            dp[i][j] = grid[i][j] + std::min(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    while (k > 0) {\n        std::vector<std::vector<long>> next(grid.size(), std::vector<long>(grid[0].size()));\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid[0].size(); j++) {\n                if (i > 0 && j > 0) {\n                    next[i][j] = std::min(lst[i - 1][j], lst[i][j - 1]);\n                } else if (i > 0) {\n                    next[i][j] = lst[i - 1][j];\n                } else if (j > 0) {\n                    next[i][j] = lst[i][j - 1];\n                } else {\n                    next[i][j] = lst[i][j];\n                }\n            }\n        }\n        lst = next;\n        k--;\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            ans.push_back(lst[i][j]);\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(std::min(dp[i][j], dp[i - 1][j]), std::min(dp[i][j - 1], dp[i - 1][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]))));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> result;\n    if (grid.size() < 2 || k < 1) return result;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) continue;\n            dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) continue;\n            if (dp[i][j] == dp[i - 1][j] + grid[i][j]) {\n                result.push_back(grid[i][j]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            dp[i][j] = grid[i][j] + std::min(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(dp[i][j] - grid[i][j]);\n            } else if (j == 0) {\n                ans.push_back(dp[i][j] - grid[i][j]);\n            } else {\n                ans.push_back(dp[i][j] - grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i > 0 && j > 0) {\n                if (lst[i][j] < lst[i - 1][j] && lst[i][j] < lst[i][j - 1]) {\n                    lst[i][j] = lst[i - 1][j] < lst[i][j - 1] ? lst[i - 1][j] : lst[i][j - 1];\n                }\n            }\n            if (i > 0 && j < grid[0].size() - 1) {\n                if (lst[i][j] < lst[i - 1][j + 1] && lst[i][j] < lst[i][j + 1]) {\n                    lst[i][j] = lst[i - 1][j + 1] < lst[i][j + 1] ? lst[i - 1][j + 1] : lst[i][j + 1];\n                }\n            }\n            if (i < grid.size() - 1 && j > 0) {\n                if (lst[i][j] < lst[i + 1][j - 1] && lst[i][j] < lst[i][j - 1]) {\n                    lst[i][j] = lst[i + 1][j - 1] < lst[i][j - 1] ? lst[i + 1][j - 1] : lst[i][j - 1];\n                }\n            }\n            if (i < grid.size() - 1 && j < grid[0].size() - 1)",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    if (grid.size() < 2) return ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] = grid[i][j];\n            } else {\n                dp[i][j] = std::min(dp[i][j], grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] += k;\n            } else {\n                dp[i][j] += std::min(dp[i][j - 1], dp[i - 1][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] += k;\n            } else {\n                dp[i][j] += std::min(dp[i][j - 1], dp[i - 1][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] += k;\n            } else {\n                dp[i][j] += std::min(dp[i][j - 1], dp[i - 1][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]))));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            for (int dir = 0; dir < 4; ++dir) {\n                int nx = i + dir % 2;\n                int ny = j + dir / 2;\n                if (nx >= 0 && nx < grid.size() && ny >= 0 && ny < grid[0].size() && lst[i][j] + 1 < lst[nx][ny]) {\n                    lst[i][j] = lst[nx][ny];\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            ans.push_back(lst[i][j]);\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[i].size(); ++j) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    while (k--) {\n        for (int i = 0; i < lst.size(); ++i) {\n            for (int j = 0; j < lst[i].size(); ++j) {\n                if (i > 0 && j > 0 && lst[i][j] < lst[i - 1][j] && lst[i][j] < lst[i][j - 1]) {\n                    lst[i][j] = lst[i - 1][j];\n                } else if (i > 0 && j < lst[i].size() - 1 && lst[i][j] < lst[i - 1][j + 1] && lst[i][j] < lst[i][j + 1]) {\n                    lst[i][j] = lst[i - 1][j + 1];\n                } else if (i < lst.size() - 1 && j > 0 && lst[i][j] < lst[i + 1][j - 1] && lst[i][j] < lst[i][j - 1]) {\n                    lst[i][j] = lst[i + 1][j - 1];\n                } else if (i < lst.size() - 1 && j < lst[i].size() - 1 && lst[i][j] < lst[i + 1][j + 1] && lst[i][j] < lst[i][j + 1]) {\n                    lst[i][j] = lst[i + 1][j + 1];\n                }\n            }\n        }\n        ans.push_back(lst[lst.size() - 1][lst[lst.size() - 1].size() - 1]);\n",
    "    std::vector<long> result;\n    if (grid.empty()) return result;\n    int n = grid.size();\n    int m = grid[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            if (dp[i][j] == k) {\n                result.push_back(grid[i][j]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1] + grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j] + grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size(), 0));\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (grid[i][j] == 0) continue;\n            lst[i][j] = grid[i][j];\n            dp[i][j] = 0;\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (grid[i][j] == 0) continue;\n            for (int di = -1; di <= 1; ++di) {\n                for (int dj = -1; dj <= 1; ++dj) {\n                    if (di == 0 && dj == 0) continue;\n                    if (i + di < 0 || i + di >= grid.size()) continue;\n                    if (j + dj < 0 || j + dj >= grid[0].size()) continue;\n                    if (grid[i + di][j + dj] == 0) continue;\n                    lst[i + di][j + dj] = std::min(lst[i + di][j + dj], lst[i][j] + 1);\n                    dp[i + di][j + dj] = std::min(dp[i + di][j + dj], dp[i][j] + 1);\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (grid[i][j] == 0) continue;\n            if (lst[i][j] == k) {\n                ans.push_back(grid[i][j]);\n                break;\n            }\n        }\n",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]) + dp[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[i].size(); ++j) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[i].size(); ++j) {\n            for (int di = -1; di <= 1; ++di) {\n                for (int dj = -1; dj <= 1; ++dj) {\n                    if (di == 0 && dj == 0) continue;\n                    if (i + di < 0 || i + di >= grid.size()) continue;\n                    if (j + dj < 0 || j + dj >= grid[i].size()) continue;\n                    lst[i + di][j + dj] = std::min(lst[i + di][j + dj], lst[i][j] + 1);\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[i].size(); ++j) {\n            if (lst[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    if (grid.size() < 2) return ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == dp[i][j + 1] + grid[i][j]) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (lst[i][j] == 0) continue;\n            for (int di = -1; di <= 1; ++di) {\n                for (int dj = -1; dj <= 1; ++dj) {\n                    if (di == 0 && dj == 0) continue;\n                    int r = i + di;\n                    int c = j + dj;\n                    if (r < 0 || r >= grid.size() || c < 0 || c >= grid[0].size()) continue;\n                    lst[r][c] = std::min(lst[r][c], lst[i][j] + 1);\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (lst[i][j] == 0) continue;\n            if (lst[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(std::min(dp[i - 1][j], dp[i][j - 1]), grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(std::min(dp[i][j], dp[i - 1][j]), dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            for (int jj = 0; jj < grid[0].size(); jj++) {\n                if (i > 0 && j > 0 && grid[i - 1][j - 1] < grid[i][j]) {\n                    dp[i][j] = std::min(dp[i][j], dp[i - 1][j - 1] + grid[i][j]);\n                }\n                if (i > 0 && j < grid[0].size() - 1 && grid[i - 1][j + 1] < grid[i][j]) {\n                    dp[i][j] = std::min(dp[i][j], dp[i - 1][j + 1] + grid[i][j]);\n                }\n                if (j > 0 && i < grid.size() - 1 && grid[i + 1][j - 1] < grid[i][j]) {\n                    dp[i][j] = std::min(dp[i][j], dp[i + 1][j - 1] + grid[i][j]);\n                }\n                if (j < grid[0].size() - 1 && i < grid.size() - 1 && grid[i + 1][j + 1] < grid[i][j]) {\n                    dp[i][j] = std::min(dp[i][j], dp[i + 1][j + 1] + grid[i][j]);\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]))));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    if (grid.size() < 2) return ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] = grid[i][j];\n            } else {\n                dp[i][j] = std::min(dp[i][j], grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] = std::min(dp[i][j], k);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j + 1]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] = std::min(dp[i][j], dp[i + 1][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    if (grid.size() == 0 || k == 0) return ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] = grid[i][j];\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] = grid[i][j];\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] = grid[i][j];\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i][j + 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == j) {\n                dp[i][j] = grid[i][j];\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i + 1][j]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            dp[i][j] = std::min(dp[i][j], grid[i][j]);\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            for (int di = -1; di <= 1; ++di) {\n                for (int dj = -1; dj <= 1; ++dj) {\n                    if (di == 0 && dj == 0) continue;\n                    if (i + di < 0 || i + di >= grid.size()) continue;\n                    if (j + dj < 0 || j + dj >= grid[0].size()) continue;\n                    lst[i + di][j + dj] = std::min(lst[i + di][j + dj], lst[i][j] + 1);\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (lst[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]) + dp[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i][j], grid[i][j])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    if (grid.size() < 2) return ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    dp[0][0] = grid[0][0];\n    for (int i = 1; i < grid.size(); ++i) {\n        dp[i][0] = dp[i - 1][0] + grid[i][0];\n    }\n    for (int i = 1; i < grid.size(); ++i) {\n        dp[i][i] = grid[i][i];\n        for (int j = 0; j < i; ++j) {\n            dp[i][j] = std::min(dp[i - 1][j], dp[i - 1][j + 1]) + grid[i][j];\n        }\n    }\n    for (int i = grid.size() - 1; i >= 0; --i) {\n        for (int j = i + 1; j < grid.size(); ++j) {\n            dp[i][j] = std::min(dp[i + 1][j], dp[i + 1][j - 1]) + grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], grid[i][j])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            for (int di = -1; di <= 1; ++di) {\n                for (int dj = -1; dj <= 1; ++dj) {\n                    if (di == 0 && dj == 0) continue;\n                    if (i + di < 0 || i + di >= grid.size() || j + dj < 0 || j + dj >= grid[0].size()) continue;\n                    dp[i + di][j + dj] = std::min(dp[i + di][j + dj], dp[i][j] + grid[i + di][j + dj]);\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == dp[i][j] + grid[i][j]) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    if (k == 1) {\n        return ans;\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            for (int di = -1; di <= 1; ++di) {\n                for (int dj = -1; dj <= 1; ++dj) {\n                    if (di == 0 && dj == 0) continue;\n                    if (i + di < 0 || i + di >= grid.size() || j + dj < 0 || j + dj >= grid",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], std::min(dp[i][j - 1], dp[i - 1][j])));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> result;\n    if (grid.empty() || k < 1) return result;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                result.push_back(dp[i][j]);\n            } else if (i == 0) {\n                result.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                result.push_back(std::min(dp[i][j], dp[i - 1][j]));\n            } else {\n                result.push_back(std::min(dp[i][j], std::min(dp[i - 1][j], dp[i][j - 1])));\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1] + grid[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j] + grid[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i][j], dp[i - 1][j] + grid[i][j]));\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1] + grid[i",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j], dp[i][j - 1]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n                dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == dp[i][j - 1] + grid[i][j]) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], grid[i][j]));\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(std::min(dp[i - 1][j], dp[i][j - 1]), dp[i][j]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    if (grid.size() == 0 || k == 0) return ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid.size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = grid[i][j];\n            } else if (i == 0) {\n                dp[i][j] = std::min(dp[i][j - 1], grid[i][j]);\n            } else if (j == 0) {\n                dp[i][j] = std::min(dp[i - 1][j], grid[i][j]);\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            if (i == 0 && j == 0) {\n                ans.push_back(dp[i][j]);\n            } else if (i == 0) {\n                ans.push_back(std::min(dp[i][j - 1], dp[i][j]));\n            } else if (j == 0) {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j]));\n            } else {\n                ans.push_back(std::min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            for (int jj = 0; jj < grid[0].size(); jj++) {\n                if (i > 0 && j > 0 && grid[i - 1][j - 1] < grid[i][j]) {\n                    dp[i][j] = std::min(dp[i][j], dp[i - 1][j - 1] + grid[i][j]);\n                }\n                if (i > 0 && j < grid[0].size() - 1 && grid[i - 1][j + 1] < grid[i][j]) {\n                    dp[i][j] = std::min(dp[i][j], dp[i - 1][j + 1] + grid[i][j]);\n                }\n                if (i < grid.size() - 1 && j > 0 && grid[i + 1][j - 1] < grid[i][j]) {\n                    dp[i][j] = std::min(dp[i][j], dp[i + 1][j - 1] + grid[i][j]);\n                }\n                if (i < grid.size() - 1 && j < grid[0].size() - 1 && grid[i + 1][j + 1] < grid[i][j]) {\n                    dp[i][j] = std::min(dp[i][j], dp[i + 1][j + 1] + grid[i][j]);\n                }\n            }\n        }\n    }\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(grid.size(), std::vector<long>(grid[0].size(), 0));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            dp[i][j] = grid[i][j] + std::min(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (dp[i][j] == k) {\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;",
    "    std::vector<long> ans;\n    std::vector<std::vector<long>> lst(grid.size(), std::vector<long>(grid[0].size()));\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[i].size(); ++j) {\n            lst[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            for (int di = -1; di <= 1; ++di) {\n                for (int dj = -1; dj <= 1; ++dj) {\n                    if (di != 0 || dj != 0) {\n                        lst[i][j] = std::min(lst[i][j], lst[i + di][j + dj]);\n                    }\n                }\n            }\n        }\n    }\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            ans.push_back(lst[i][j]);\n        }\n    }\n    return ans;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}