{
  "name": "HumanEval_128_prod_signs",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n",
  "tests": "}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n        ans += std::abs(i);\n    }\n    long prod = 1;\n    for (auto i : arr) {\n        prod *= (i < 0 ? -1 : 1);\n    }\n    return ans * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpxii3uqxr: /tmp/tmpxii3uqxr.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1}))) == 0' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        prod *= i;\n        if (i < 0) {\n            sign = -sign;\n        }\n    }\n    return prod * sign;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpxn1di_56: /tmp/tmpxn1di_56.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp3ln_t0er: /tmp/tmp3ln_t0er.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n        } else if (x < 0) {\n            prod *= -x;\n        }\n    }\n    for (auto x : arr) {\n        if (x > 0) {\n            sum += x;\n        } else if (x < 0) {\n            sum -= x;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp9wc4ukmb: /tmp/tmp9wc4ukmb.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n        } else if (x < 0) {\n            prod *= -x;\n        }\n        sum += x;\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpqw0ilily: /tmp/tmpqw0ilily.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        prod *= i;\n        sum += i;\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpvtv83rs1: /tmp/tmpvtv83rs1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long res = 0;\n    for (auto i : arr) {\n        res *= i;\n    }\n    return res;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpo6pau1f7: /tmp/tmpo6pau1f7.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n        prod *= i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpauu2_fi_: /tmp/tmpauu2_fi_.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n        } else if (i < 0) {\n            prod *= -1;\n        }\n        sum += i;\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpc776onez: /tmp/tmpc776onez.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return std::nullopt;\n    long sum = 0;\n    for (auto i : arr) {\n        sum += std::abs(i);\n    }\n    long prod = 1;\n    for (auto i : arr) {\n        prod *= (i > 0 ? 1 : -1);\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmppunregyz: /tmp/tmppunregyz.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1}))) == 0' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp4fe6sixu: /tmp/tmp4fe6sixu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp19ss9tau: /tmp/tmp19ss9tau.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp19ss9tau: /tmp/tmp19ss9tau.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n            sum += x;\n        } else if (x < 0) {\n            prod *= -x;\n            sum -= x;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp2_9092py: /tmp/tmp2_9092py.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i == 0) {\n            return std::nullopt;\n        }\n        prod *= i;\n        if (i < 0) {\n            sum -= prod;\n        } else {\n            sum += prod;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpenbyanj5: /tmp/tmpenbyanj5.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            sum += i;\n        } else if (i > 0) {\n            prod *= i;\n        }\n    }\n    if (sum == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpyga_rc6t: /tmp/tmpyga_rc6t.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long ret = 1;\n    for (auto i : arr) {\n        ret *= (i > 0 ? 1 : -1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmphccu_3v3: /tmp/tmphccu_3v3.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x < 0) {\n            sum += x;\n            prod *= -1;\n        } else {\n            sum += x;\n        }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpawa0669_: /tmp/tmpawa0669_.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto &x : arr) {\n        if (x > 0) {\n            prod *= x;\n            sum += x;\n        } else if (x < 0) {\n            prod *= -x;\n            sum -= x;\n        }\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpn_odcg60: /tmp/tmpn_odcg60.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long ret = 1;\n    for (auto i : arr) {\n        ret *= (i > 0 ? 1 : -1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmphccu_3v3: /tmp/tmphccu_3v3.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            sum += i;\n            prod *= -1;\n        } else if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else {\n            // i == 0\n            // nothing to do\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmplkqo1p12: /tmp/tmplkqo1p12.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp4fe6sixu: /tmp/tmp4fe6sixu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n            sum += x;\n        } else if (x < 0) {\n            prod *= -x;\n            sum -= x;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp2_9092py: /tmp/tmp2_9092py.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        prod *= i;\n        if (i < 0) {\n            sign = -sign;\n        }\n    }\n    return prod * sign;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpxn1di_56: /tmp/tmpxn1di_56.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long ret = 1;\n    for (auto i : arr) {\n        ret *= (i > 0) - (i < 0);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpsovznq0q: /tmp/tmpsovznq0q.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n        prod *= (i > 0 ? 1 : -1);\n    }\n    return prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpnepva2jl: /tmp/tmpnepva2jl.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n        } else if (i < 0) {\n            prod *= -i;\n        }\n        sum += std::abs(i);\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpo51czcoc: /tmp/tmpo51czcoc.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        } else if (i > 0) {\n            prod *= i;\n        }\n    }\n    for (auto i : arr) {\n        if (i < 0) {\n            sum += i;\n        } else if (i > 0) {\n            sum += i * prod;\n        }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpepxj7yqs: /tmp/tmpepxj7yqs.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i < 0) {\n            sum += i;\n            prod *= -1;\n        } else if (i > 0) {\n            sum += i;\n        }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293168,
      "stdout": "",
      "stderr": "tmp52wvbncs: /tmp/tmp52wvbncs.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n        prod *= (i > 0) - (i < 0);\n    }\n    return prod * arr.size();\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpdxnfiw2b: /tmp/tmpdxnfiw2b.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        prod *= i;\n        if (i < 0) {\n            sign = -sign;\n        }\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293168,
      "stdout": "",
      "stderr": "tmpi_oyov8e: /tmp/tmpi_oyov8e.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        prod *= i;\n        if (i < 0) {\n            sign = -sign;\n        }\n    }\n    return prod * sign;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpxn1di_56: /tmp/tmpxn1di_56.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n    long prod = 1;\n    for (auto x : arr) {\n        sum += abs(x);\n        prod *= (x > 0) - (x < 0);\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293168,
      "stdout": "",
      "stderr": "tmpl101djwy: /tmp/tmpl101djwy.cpp:28: int main(): Assertion `candidate((std::vector<long>())) == std::nullopt' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp3ln_t0er: /tmp/tmp3ln_t0er.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        prod *= i;\n        if (i < 0) {\n            sign = -sign;\n        }\n    }\n    return prod * sign;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpxn1di_56: /tmp/tmpxn1di_56.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (long x : arr) {\n        if (x > 0) {\n            prod *= x;\n            sum += x;\n        } else if (x < 0) {\n            prod *= -x;\n            sum += x;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpfooshfsf: /tmp/tmpfooshfsf.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n    long product = 1;\n    for (auto i : arr) {\n        if (i < 0) {\n            product *= -1;\n        }\n        sum += i * product;\n        product *= i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmp3xwsne_e: /tmp/tmp3xwsne_e.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto x : arr) {\n        prod *= x;\n        if (x < 0) {\n            sign = -sign;\n        }\n    }\n    return prod * sign;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpw2vmgx2i: /tmp/tmpw2vmgx2i.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        prod *= i;\n        sum += i;\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpvtv83rs1: /tmp/tmpvtv83rs1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n        } else if (x < 0) {\n            prod *= -x;\n        }\n    }\n    for (auto x : arr) {\n        if (x > 0) {\n            sum += x;\n        } else if (x < 0) {\n            sum -= x;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp9wc4ukmb: /tmp/tmp9wc4ukmb.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp4fe6sixu: /tmp/tmp4fe6sixu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp4fe6sixu: /tmp/tmp4fe6sixu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum += i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpzy_zhvu2: /tmp/tmpzy_zhvu2.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        prod *= i;\n        if (i < 0) {\n            sign = -sign;\n        }\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpi8bobh2m: /tmp/tmpi8bobh2m.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            sum += i;\n            prod *= -1;\n        } else if (i > 0) {\n            sum += i;\n            prod *= 1;\n        }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpwqoycsw6: /tmp/tmpwqoycsw6.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n        } else if (x < 0) {\n            prod *= -x;\n        }\n        sum += x;\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmp1lmqmqt5: /tmp/tmp1lmqmqt5.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long ret = 1;\n    for (auto i : arr) {\n        ret *= (i > 0 ? 1 : -1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmphccu_3v3: /tmp/tmphccu_3v3.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp19ss9tau: /tmp/tmp19ss9tau.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        prod *= i;\n        if (i < 0) {\n            sign = -sign;\n        }\n    }\n    return prod * sign;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpxn1di_56: /tmp/tmpxn1di_56.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpat5i14gy: /tmp/tmpat5i14gy.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp3ln_t0er: /tmp/tmp3ln_t0er.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto &x : arr) {\n        if (x < 0) {\n            prod *= -1;\n        }\n        sum += x * prod;\n        prod *= x < 0 ? -1 : 1;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmp8qp_rhaf: /tmp/tmp8qp_rhaf.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n        } else if (i < 0) {\n            prod *= -1;\n        }\n        sum += i;\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpc776onez: /tmp/tmpc776onez.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp4fe6sixu: /tmp/tmp4fe6sixu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n    long prod = 1;\n    for (auto &i : arr) {\n        if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else if (i < 0) {\n            sum -= i;\n            prod *= -1;\n        }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpn6i6nbhf: /tmp/tmpn6i6nbhf.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1}))) == 0' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        if (i == 0) {\n            return std::nullopt;\n        }\n        prod *= i;\n        if (i < 0) {\n            sign = -sign;\n        }\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmplzgxk8c7: /tmp/tmplzgxk8c7.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long ret = 1;\n    for (auto i : arr) {\n        ret *= (i < 0 ? -1 : 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmp8_l6xizu: /tmp/tmp8_l6xizu.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp3ln_t0er: /tmp/tmp3ln_t0er.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpat5i14gy: /tmp/tmpat5i14gy.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        prod *= i;\n        if (i < 0) {\n            sign = -sign;\n        }\n    }\n    return prod * sign;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpxn1di_56: /tmp/tmpxn1di_56.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long ret = 1;\n    for (auto i : arr) {\n        ret *= (i > 0) ? 1 : -1;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmprr1svsti: /tmp/tmprr1svsti.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp19ss9tau: /tmp/tmp19ss9tau.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long ret = 1;\n    for (auto i : arr) {\n        ret *= (i > 0) - (i < 0);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpsovznq0q: /tmp/tmpsovznq0q.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        prod *= i;\n        if (i < 0) sign = -sign;\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpevzprovy: /tmp/tmpevzprovy.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpat5i14gy: /tmp/tmpat5i14gy.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n        } else if (x < 0) {\n            prod *= -x;\n        }\n        sum += std::abs(x);\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmp8mifyd_z: /tmp/tmp8mifyd_z.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n        } else if (x < 0) {\n            prod *= -x;\n        }\n    }\n    for (auto x : arr) {\n        if (x > 0) {\n            sum += x;\n        } else if (x < 0) {\n            sum -= x;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp9wc4ukmb: /tmp/tmp9wc4ukmb.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n        } else if (i < 0) {\n            prod *= -i;\n        }\n        sum += i;\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpd5vtb__i: /tmp/tmpd5vtb__i.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (long x : arr) {\n        if (x < 0) {\n            sum += x;\n            prod *= -1;\n        } else {\n            sum += x;\n        }\n    }\n    if (sum == 0) return std::nullopt;\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293168,
      "stdout": "",
      "stderr": "tmptvfcatgj: /tmp/tmptvfcatgj.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else if (i < 0) {\n            sum -= i;\n            prod *= -1;\n        }\n    }\n    if (sum == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293168,
      "stdout": "",
      "stderr": "tmpzh2axh8u: /tmp/tmpzh2axh8u.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1}))) == 0' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n        } else if (x < 0) {\n            prod *= -x;\n        }\n        sum += x;\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpqw0ilily: /tmp/tmpqw0ilily.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        sum += i;\n        prod *= (i > 0) - (i < 0);\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpem3lbu0d: /tmp/tmpem3lbu0d.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n        } else if (i < 0) {\n            prod *= -i;\n        }\n    }\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i * prod;\n        } else if (i < 0) {\n            sum -= i * prod;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmps2bt2583: /tmp/tmps2bt2583.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i == 0) {\n            return std::nullopt;\n        }\n        if (i > 0) {\n            prod *= i;\n        } else {\n            prod *= -i;\n        }\n        sum += i;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpz3rsuijq: /tmp/tmpz3rsuijq.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n        } else if (x < 0) {\n            prod *= -x;\n        }\n        sum += x;\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmp1lmqmqt5: /tmp/tmp1lmqmqt5.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp4fe6sixu: /tmp/tmp4fe6sixu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n        } else if (x < 0) {\n            prod *= -x;\n        }\n        sum += x;\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmp1lmqmqt5: /tmp/tmp1lmqmqt5.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (long i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n        prod *= i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpj_p13h6o: /tmp/tmpj_p13h6o.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp3ln_t0er: /tmp/tmp3ln_t0er.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (long num : arr) {\n        prod *= (num < 0 ? -1 : 1);\n        sign *= (num < 0 ? -1 : 1);\n    }\n    return prod * sign;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmps_fgvil7: /tmp/tmps_fgvil7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        prod *= i;\n        if (i < 0) {\n            sign = -sign;\n        }\n    }\n    return prod * sign;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpxn1di_56: /tmp/tmpxn1di_56.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n        } else if (x < 0) {\n            prod *= -x;\n        }\n        sum += x;\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmp1lmqmqt5: /tmp/tmp1lmqmqt5.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        prod *= i;\n        if (i < 0) {\n            sign = -sign;\n        }\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpi8bobh2m: /tmp/tmpi8bobh2m.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        prod *= i;\n        sum += i;\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpvtv83rs1: /tmp/tmpvtv83rs1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp3ln_t0er: /tmp/tmp3ln_t0er.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp4fe6sixu: /tmp/tmp4fe6sixu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n        } else if (i < 0) {\n            prod *= -i;\n        }\n    }\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i * prod;\n        } else if (i < 0) {\n            sum -= i * prod;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmps2bt2583: /tmp/tmps2bt2583.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto x : arr) {\n        prod *= x;\n        if (x < 0) {\n            sign = -sign;\n        }\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpbdvey7m6: /tmp/tmpbdvey7m6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sign = 1;\n    for (auto &x : arr) {\n        if (x < 0) {\n            sign = -sign;\n        }\n        prod *= sign;\n    }\n    return prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmp3ty1u8ve: /tmp/tmp3ty1u8ve.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else if (i < 0) {\n            sum -= i;\n            prod *= -1;\n        }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpzdetgmcq: /tmp/tmpzdetgmcq.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1}))) == 0' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmp92qp8qtg: /tmp/tmp92qp8qtg.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto &x: arr) {\n        if (x > 0) {\n            prod *= x;\n            sum += x;\n        } else if (x < 0) {\n            prod *= -x;\n            sum -= x;\n        }\n    }\n    if (prod == 0)\n        return std::nullopt;\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpy_3f0kx0: /tmp/tmpy_3f0kx0.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (long i : arr) {\n        if (i < 0) {\n            prod *= -1;\n            sign *= -1;\n        }\n        prod *= i;\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpdu0jf2yd: /tmp/tmpdu0jf2yd.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (long i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n        prod *= i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpj_p13h6o: /tmp/tmpj_p13h6o.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp4fe6sixu: /tmp/tmp4fe6sixu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp19ss9tau: /tmp/tmp19ss9tau.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long res = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            res *= i;\n        } else if (i < 0) {\n            res *= -i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpbtpqtmp5: /tmp/tmpbtpqtmp5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long ret = 1;\n    for (auto i : arr) {\n        ret *= (i < 0 ? -1 : 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmp8_l6xizu: /tmp/tmp8_l6xizu.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i == 0) {\n            return std::nullopt;\n        }\n        if (i > 0) {\n            prod *= 1;\n        } else if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpif8zlzlg: /tmp/tmpif8zlzlg.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            sum += i;\n            prod *= -1;\n        } else if (i > 0) {\n            sum += i;\n            prod *= 1;\n        }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpy3o7stsm: /tmp/tmpy3o7stsm.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (long i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum += i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmp96lpbvhe: /tmp/tmp96lpbvhe.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            sum += i;\n            prod *= -1;\n        } else if (i > 0) {\n            sum += i;\n            prod *= 1;\n        }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpwqoycsw6: /tmp/tmpwqoycsw6.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n            sign *= -1;\n        }\n        prod *= i;\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmp21ymtxad: /tmp/tmp21ymtxad.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto &x : arr) {\n        if (x > 0) {\n            prod *= x;\n            sum += x;\n        } else if (x < 0) {\n            prod *= -x;\n            sum += x;\n        }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmphnn34w34: /tmp/tmphnn34w34.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (long i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n        prod *= i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpj_p13h6o: /tmp/tmpj_p13h6o.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp19ss9tau: /tmp/tmp19ss9tau.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i == 0) {\n            return std::nullopt;\n        }\n        prod *= i;\n        sum += i;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmp2encgrsu: /tmp/tmp2encgrsu.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp3ln_t0er: /tmp/tmp3ln_t0er.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    if (prod == 0) return std::nullopt;\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpx1o15f49: /tmp/tmpx1o15f49.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp3ln_t0er: /tmp/tmp3ln_t0er.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x < 0) {\n            prod *= -1;\n        }\n        sum += x * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmp2zvpxiib: /tmp/tmp2zvpxiib.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    if (prod == 0) return std::nullopt;\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpx1o15f49: /tmp/tmpx1o15f49.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        prod *= i;\n        sum += i;\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpvtv83rs1: /tmp/tmpvtv83rs1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long ret = 1;\n    for (auto i : arr) {\n        ret *= (i > 0 ? 1 : -1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmphccu_3v3: /tmp/tmphccu_3v3.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i == 0) {\n            return std::nullopt;\n        }\n        if (i > 0) {\n            sum += i;\n        } else {\n            sum -= i;\n        }\n        prod *= i;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmp375re3ye: /tmp/tmp375re3ye.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            sum += i;\n            prod *= -1;\n        } else if (i > 0) {\n            sum += i;\n            prod *= 1;\n        }\n    }\n    if (sum == 0) return std::nullopt;\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpfk3o47oy: /tmp/tmpfk3o47oy.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto &x : arr) {\n        if (x > 0) {\n            prod *= x;\n        } else if (x < 0) {\n            prod *= -x;\n        }\n        sum += x;\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmp00xbiwds: /tmp/tmp00xbiwds.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp3ln_t0er: /tmp/tmp3ln_t0er.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp3ln_t0er: /tmp/tmp3ln_t0er.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        if (i > 0) {\n            sum += i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmps38hwgci: /tmp/tmps38hwgci.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n        prod *= i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293173,
      "stdout": "",
      "stderr": "tmpdxzy7_d_: /tmp/tmpdxzy7_d_.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        prod *= i;\n        if (i < 0) {\n            sign = -sign;\n        }\n    }\n    return prod * sign;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpxn1di_56: /tmp/tmpxn1di_56.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto &x : arr) {\n        if (x > 0) {\n            prod *= x;\n            sum += x;\n        } else if (x < 0) {\n            prod *= -x;\n            sum += x;\n        }\n    }\n    if (prod == 0)\n        return std::nullopt;\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpcce34rtw: /tmp/tmpcce34rtw.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp4fe6sixu: /tmp/tmp4fe6sixu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n        } else if (i < 0) {\n            prod *= -i;\n        }\n        sum += i;\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpd5vtb__i: /tmp/tmpd5vtb__i.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n        } else if (i < 0) {\n            prod *= -i;\n        }\n    }\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n        } else if (i < 0) {\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmp2_l2u71p: /tmp/tmp2_l2u71p.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x < 0) {\n            prod *= -1;\n        }\n        sum += abs(x) * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmp6xk8k86h: /tmp/tmp6xk8k86h.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long res = 1;\n    for (auto i : arr) {\n        res *= i;\n    }\n    return res;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmp6u_kynfm: /tmp/tmp6u_kynfm.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (long i : arr) {\n        prod *= i;\n        if (i < 0) {\n            sign *= -1;\n        }\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpr33fw9qn: /tmp/tmpr33fw9qn.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n            sum += x;\n        } else if (x < 0) {\n            prod *= -x;\n            sum -= x;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp2_9092py: /tmp/tmp2_9092py.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        prod *= i;\n        if (i < 0) {\n            sign = -sign;\n        }\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmpi8bobh2m: /tmp/tmpi8bobh2m.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            sum += i;\n            prod *= -1;\n        } else if (i > 0) {\n            sum += i;\n            prod *= 1;\n        }\n    }\n    if (sum == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpqqrd1se9: /tmp/tmpqqrd1se9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp4fe6sixu: /tmp/tmp4fe6sixu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n    for (auto i : arr) {\n        sum += i * (i > 0 ? 1 : -1);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpyljmb9hs: /tmp/tmpyljmb9hs.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            sum += i;\n            prod *= -1;\n        } else if (i > 0) {\n            sum += i;\n            prod *= 1;\n        }\n    }\n    if (sum == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpqqrd1se9: /tmp/tmpqqrd1se9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long ret = 1;\n    for (auto i : arr) {\n        ret *= (i > 0 ? 1 : -1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmphccu_3v3: /tmp/tmphccu_3v3.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto &x : arr) {\n        if (x > 0) {\n            prod *= x;\n        } else if (x < 0) {\n            prod *= -1;\n        }\n        sum += x;\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmp_sv6_1ii: /tmp/tmp_sv6_1ii.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            sum += i;\n            prod *= -1;\n        } else {\n            sum += i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpoud4nwpo: /tmp/tmpoud4nwpo.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp19ss9tau: /tmp/tmp19ss9tau.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto &x : arr) {\n        if (x > 0) {\n            prod *= x;\n        } else if (x < 0) {\n            prod *= -x;\n        }\n    }\n    for (auto &x : arr) {\n        if (x > 0) {\n            sum += x;\n        } else if (x < 0) {\n            sum -= x;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpalvnapqq: /tmp/tmpalvnapqq.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long ret = 1;\n    for (auto i : arr) {\n        ret *= (i > 0) - (i < 0);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpsovznq0q: /tmp/tmpsovznq0q.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        prod *= i;\n        if (i < 0) {\n            sum -= prod;\n        } else if (i > 0) {\n            sum += prod;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmp1labu1se: /tmp/tmp1labu1se.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        if (i == 0) {\n            return std::nullopt;\n        }\n        prod *= i;\n        if (i < 0) {\n            sign = -sign;\n        }\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "tmplzgxk8c7: /tmp/tmplzgxk8c7.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum += i;\n        }\n    }\n    if (prod == 0) return std::nullopt;\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpzj_5kg6c: /tmp/tmpzj_5kg6c.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x < 0) {\n            prod *= -1;\n        }\n        sum += x * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmp2zvpxiib: /tmp/tmp2zvpxiib.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp4fe6sixu: /tmp/tmp4fe6sixu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto &i : arr) {\n        prod *= (i > 0) ? 1 : -1;\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpbgr23k4y: /tmp/tmpbgr23k4y.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        if (i > 0) {\n            sum += i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmps38hwgci: /tmp/tmps38hwgci.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp3ln_t0er: /tmp/tmp3ln_t0er.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x < 0) {\n            prod *= -1;\n        }\n        sum += x * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmp2zvpxiib: /tmp/tmp2zvpxiib.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n            sum += x;\n        } else if (x < 0) {\n            prod *= -x;\n            sum -= x;\n        }\n    }\n    if (prod == 0) return std::nullopt;\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpl0ig0e65: /tmp/tmpl0ig0e65.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            sum += i;\n            prod *= -1;\n        } else if (i > 0) {\n            sum += i;\n            prod *= 1;\n        }\n    }\n    if (sum == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpqqrd1se9: /tmp/tmpqqrd1se9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i == 0) {\n            return std::nullopt;\n        }\n        if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else {\n            sum -= i;\n            prod *= -1;\n        }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpnkn04ugv: /tmp/tmpnkn04ugv.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1}))) == 0' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto &x : arr) {\n        if (x > 0) {\n            prod *= x;\n        } else if (x < 0) {\n            prod *= -x;\n        }\n        sum += x;\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmp00xbiwds: /tmp/tmp00xbiwds.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n            sum += x;\n        } else if (x < 0) {\n            prod *= -x;\n            sum -= x;\n        }\n    }\n    if (prod == 0) return std::nullopt;\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpl0ig0e65: /tmp/tmpl0ig0e65.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (long i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmppu_rzbnp: /tmp/tmppu_rzbnp.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n        prod *= i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293173,
      "stdout": "",
      "stderr": "tmpdxzy7_d_: /tmp/tmpdxzy7_d_.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long ret = 1;\n    for (auto x : arr) {\n        ret *= (x < 0 ? -1 : 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpk3zyxcng: /tmp/tmpk3zyxcng.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (long i : arr) {\n        if (i == 0) {\n            return std::nullopt;\n        }\n        prod *= i;\n        sum += i;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmp2s39w9md: /tmp/tmp2s39w9md.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp19ss9tau: /tmp/tmp19ss9tau.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i == 0) {\n            return std::nullopt;\n        }\n        if (i > 0) {\n            prod *= i;\n        } else {\n            prod *= -i;\n        }\n        sum += std::abs(i);\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpl29qjwqr: /tmp/tmpl29qjwqr.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i == 0) {\n            return std::nullopt;\n        }\n        if (i > 0) {\n            prod *= i;\n        } else {\n            prod *= -i;\n        }\n        sum += i;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpz3rsuijq: /tmp/tmpz3rsuijq.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n        } else if (i < 0) {\n            prod *= -i;\n        }\n    }\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i * prod;\n        } else if (i < 0) {\n            sum -= i * prod;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmps2bt2583: /tmp/tmps2bt2583.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp4fe6sixu: /tmp/tmp4fe6sixu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum += i;\n        }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpiafq3x4u: /tmp/tmpiafq3x4u.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    long sign = 1;\n    long product = 1;\n    for (auto &x: arr) {\n        product *= (x < 0 ? -1 : 1);\n        sign *= (x < 0 ? -1 : 1);\n    }\n    return sign * product;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmp4m6g7mmq: /tmp/tmp4m6g7mmq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto &x : arr) {\n        if (x > 0) {\n            prod *= x;\n            sum += x;\n        } else if (x < 0) {\n            prod *= -x;\n            sum -= x;\n        }\n    }\n    if (prod == 0)\n        return std::nullopt;\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpiytzn4hd: /tmp/tmpiytzn4hd.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp19ss9tau: /tmp/tmp19ss9tau.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n            sum += x;\n        } else if (x < 0) {\n            prod *= -x;\n            sum -= x;\n        }\n    }\n    if (prod == 0) return std::nullopt;\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpl0ig0e65: /tmp/tmpl0ig0e65.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            sum += i;\n            prod *= -1;\n        } else if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else {\n            // i == 0\n        }\n    }\n    if (sum == 0) {\n        return std::nullopt;\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "tmptp3rdabd: /tmp/tmptp3rdabd.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto &x : arr) {\n        if (x < 0) {\n            prod *= -1;\n        }\n        sum += x * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "tmp2t62_o3i: /tmp/tmp2t62_o3i.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    if (prod == 0) return std::nullopt;\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpx1o15f49: /tmp/tmpx1o15f49.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x < 0) {\n            sum += x;\n            prod *= -1;\n        } else if (x > 0) {\n            sum += x;\n            prod *= 1;\n        }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "tmpdgt1avdk: /tmp/tmpdgt1avdk.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return std::nullopt;\n    long ret = 0;\n    for (auto x : arr) {\n        ret = ret * (x > 0 ? 1 : -1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "tmpi2nft80b: /tmp/tmpi2nft80b.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else if (i < 0) {\n            sum -= i;\n            prod *= -1;\n        }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpzdetgmcq: /tmp/tmpzdetgmcq.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1}))) == 0' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x > 0) {\n            prod *= x;\n        } else if (x < 0) {\n            prod *= -x;\n        }\n        sum += std::abs(x);\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "tmp0j7w6h0p: /tmp/tmp0j7w6h0p.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp19ss9tau: /tmp/tmp19ss9tau.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i == 0) {\n            return std::nullopt;\n        }\n        if (i > 0) {\n            prod *= i;\n        } else {\n            prod *= -i;\n        }\n        sum += i;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmpz3rsuijq: /tmp/tmpz3rsuijq.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long ret = 1;\n    for (auto x : arr) {\n        ret *= (x < 0 ? -1 : 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "tmpk3zyxcng: /tmp/tmpk3zyxcng.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum += i;\n        }\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "tmpqqb8ifxy: /tmp/tmpqqb8ifxy.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        if (i > 0) {\n            prod *= i;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "tmp3tduiv82: /tmp/tmp3tduiv82.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp4fe6sixu: /tmp/tmp4fe6sixu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        if (i > 0) {\n            prod *= i;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "tmp3tduiv82: /tmp/tmp3tduiv82.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= i;\n            sum -= i;\n        }\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "tmpv3wej5sb: /tmp/tmpv3wej5sb.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n        } else if (i < 0) {\n            prod *= -i;\n        }\n        sum += i;\n    }\n    if (prod == 0) {\n        return std::nullopt;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "tmpk17bfv97: /tmp/tmpk17bfv97.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else if (i < 0) {\n            sum -= i;\n            prod *= -1;\n        }\n    }\n    if (sum == 0) return std::nullopt;\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "tmpluu8da2i: /tmp/tmpluu8da2i.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1}))) == 0' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        sum += x * prod;\n        prod *= (x > 0 ? 1 : -1);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "tmplba5qps1: /tmp/tmplba5qps1.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i == 0) {\n            return std::nullopt;\n        }\n        prod *= i;\n        sum += i;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmp2encgrsu: /tmp/tmp2encgrsu.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i == 0) {\n            return std::nullopt;\n        }\n        prod *= i;\n        sum += i;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "tmp2encgrsu: /tmp/tmp2encgrsu.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= i;\n            sum += i;\n        } else if (i < 0) {\n            prod *= -i;\n            sum -= i;\n        }\n    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp3ln_t0er: /tmp/tmp3ln_t0er.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) {\n        return std::nullopt;\n    }\n    long prod = 1;\n    for (auto i : arr) {\n        prod *= (i > 0 ? 1 : -1);\n    }\n    return prod * arr.size();\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "tmpcim0gx70: /tmp/tmpcim0gx70.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        sum += i * prod;\n        prod *= i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "tmp_ea_9f4y: /tmp/tmp_ea_9f4y.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n        prod *= i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpauu2_fi_: /tmp/tmpauu2_fi_.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp4fe6sixu: /tmp/tmp4fe6sixu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long ret = 1;\n    for (auto i : arr) {\n        ret *= (i > 0) - (i < 0);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmpsovznq0q: /tmp/tmpsovznq0q.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return std::nullopt;\n    long prod = 1, sign = 1;\n    for (auto i : arr) {\n        prod *= i;\n        if (i < 0) sign = -sign;\n    }\n    return prod * sign;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "tmpd5y_0u4a: /tmp/tmpd5y_0u4a.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        if (i > 0) {\n            prod *= i;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "tmp3tduiv82: /tmp/tmp3tduiv82.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sign = 1;\n    for (auto& i : arr) {\n        prod *= i;\n        if (i < 0) {\n            sign = -sign;\n        }\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "tmps67fpmiu: /tmp/tmps67fpmiu.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long ret = 1;\n    for (auto &x : arr) {\n        ret *= (x > 0 ? 1 : -1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "tmprg3gku7c: /tmp/tmprg3gku7c.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) \n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "tmp4fe6sixu: /tmp/tmp4fe6sixu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}