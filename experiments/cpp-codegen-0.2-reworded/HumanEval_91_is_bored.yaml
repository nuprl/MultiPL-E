name: HumanEval_91_is_bored
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
  \ of words, and your task is to count the number\n// of boredoms. A boredom is a\
  \ sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
  \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"\
  The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string\
  \ S) {\n"
tests: "}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
  Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
  \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
  )) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will\
  \ kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\"\
  )) == (0));\n}\n"
completions: ["    long count = 0;\n    for(auto i = 0; i < S.size(); i++) {\n   \
    \     if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i]\
    \ == 'I') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n\
    \    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n\
    \            count++;\n            it++;\n        } else {\n            it++;\n\
    \        }\n    }\n    return count;", "    std::string::iterator it = S.begin();\n\
    \    std::string::iterator it_end = S.end();\n    std::string::iterator it_start\
    \ = it;\n    while (it != it_end) {\n        if (*it == 'I') {\n            it_start\
    \ = it;\n            break;\n        }\n        it++;\n    }\n    if (it_start\
    \ == it_end) {\n        return 0;\n    }\n    it = it_start;\n    while (it !=\
    \ it_end) {\n        if (*it == '.' || *it == '?' || *it == '!') {\n         \
    \   it++;\n            continue;\n        }\n        if (*it == 'I') {\n     \
    \       return 1;\n        }\n        it++;\n    }\n    return 0;", "    long\
    \ count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I')\
    \ {\n            ++count;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n\
    \            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n\
    \                ++count;\n            }\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            ++count;\n        }\n        if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            count = 0;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n \
    \       if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1]\
    \ == '?' || S[i-1] == '!') {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0; i\
    \ < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n     \
    \   }\n    }\n    return count;", "    long count = 0;\n    for (int i = 0; i\
    \ < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n   \
    \     }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0;\
    \ i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 ||\
    \ S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "    long count = 0;\n \
    \   for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I') {\n         \
    \   count++;\n        }\n    }\n    return count;", "    long count = 0;\n   \
    \ for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n        \
    \    if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n      \
    \          count++;\n            }\n        }\n    }\n    return count;", "  \
    \  long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n   \
    \     if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            if (i > 0 && S[i-1] == '.') continue;\n            if\
    \ (i > 0 && S[i-1] == '?') continue;\n            if (i > 0 && S[i-1] == '!')\
    \ continue;\n            count++;\n        }\n    }\n    return count;", "   \
    \ std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n\
    \    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n\
    \            count++;\n        }\n        it++;\n    }\n    return count;", " \
    \   long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n  \
    \      if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i]\
    \ == 'I') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            if (i > 0 && S[i-1] == '.' || S[i-1] == '?' || S[i-1]\
    \ == '!')\n                count++;\n        }\n    }\n    return count;", " \
    \   std::string::size_type i = 0, j = 0;\n    while (i < S.size()) {\n       \
    \ if (S[i] == 'I') {\n            j = i + 1;\n            while (j < S.size()\
    \ && S[j] != '.' && S[j] != '?' && S[j] != '!')\n                j++;\n      \
    \      if (j - i >= 3) return j - i;\n        }\n        i++;\n    }\n    return\
    \ 0;", "    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n     \
    \   if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?'\
    \ || S[i-1] == '!') {\n                count++;\n            }\n        }\n  \
    \  }\n    return count;", "    long count = 0;\n    for (auto i = 0; i < S.size();\
    \ ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto i = 0; i < S.size();\
    \ ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.'\
    \ || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n           \
    \ }\n        }\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i ==\
    \ 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I')\
    \ {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!')\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;",
  "    std::string::iterator it = S.begin();\n    std::string::iterator it2 = S.begin();\n\
    \    std::string::iterator it3 = S.begin();\n    std::string::iterator it4 = S.begin();\n\
    \    std::string::iterator it5 = S.begin();\n    std::string::iterator it6 = S.begin();\n\
    \    std::string::iterator it7 = S.begin();\n    std::string::iterator it8 = S.begin();\n\
    \    std::string::iterator it9 = S.begin();\n    std::string::iterator it10 =\
    \ S.begin();\n    std::string::iterator it11 = S.begin();\n    std::string::iterator\
    \ it12 = S.begin();\n    std::string::iterator it13 = S.begin();\n    std::string::iterator\
    \ it14 = S.begin();\n    std::string::iterator it15 = S.begin();\n    std::string::iterator\
    \ it16 = S.begin();\n    std::string::iterator it17 = S.begin();\n    std::string::iterator\
    \ it18 = S.begin();\n    std::string::iterator it19 = S.begin();\n    std::string::iterator\
    \ it20 = S.begin();\n    std::string::iterator it21 = S.begin();\n    std::string::iterator\
    \ it22 = S.begin();\n    std::string::iterator it23 = S.begin();\n    std::string::iterator\
    \ it24 = S.begin();\n    std::string::iterator it25 = S.begin();\n    std::string::iterator\
    \ it26 = S.begin();\n    std::string::iterator it27 = S.begin();\n    std::string::iterator\
    \ it28 = S.begin();\n    std::string::iterator it29 = S.begin();\n    std::string::iterator\
    \ it30 = S.begin();\n    std::string::iterator it31 = S.begin();\n    std::string::iterator\
    \ it32 = S.begin();\n    std::string::iterator it33 = S.begin();\n    std::string::iterator\
    \ it34 = S.begin();\n    std::string::iterator it35 = S.begin();\n    std::string::iterator\
    \ it36 = S.begin();\n    std::string::iterator it37 =", "    long count = 0;\n\
    \    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n     \
    \       if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!')\n     \
    \           ++count;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (int i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n \
    \           if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n\
    \                count++;\n            }\n        }\n    }\n    return count;",
  "    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n\
    \    std::string::iterator it_begin = S.begin();\n    std::string::iterator it_begin_end\
    \ = S.begin();\n    std::string::iterator it_end_begin = S.end();\n    std::string::iterator\
    \ it_end_end = S.end();\n    std::string::iterator it_begin_end_begin = S.begin();\n\
    \    std::string::iterator it_end_begin_end = S.end();\n    std::string::iterator\
    \ it_end_end_begin = S.end();\n    std::string::iterator it_end_end_end = S.end();\n\
    \    std::string::iterator it_end_end_end_begin = S.end();\n    std::string::iterator\
    \ it_end_end_end_end = S.end();\n    std::string::iterator it_end_end_end_end_begin\
    \ = S.end();\n    std::string::iterator it_end_end_end_end_end = S.end();\n  \
    \  std::string::iterator it_end_end_end_end_end_begin = S.end();\n    std::string::iterator\
    \ it_end_end_end_end_end_end = S.end();\n    std::string::iterator it_end_end_end_end_end_end_begin\
    \ = S.end();\n    std::string::iterator it_end_end_end_end_end_end_end = S.end();\n\
    \    std::string::iterator it_end_end_end_end_end_end_end_begin = S.end();\n \
    \   std::string::iterator it_end_end_end_end_end_end_end_end = S.end();\n    std::string::iterator\
    \ it_end_end_end_end_end_end_end_end_begin = S.end();\n    std::string::iterator\
    \ it_end_end_end_end_end_end_end_end_end = S.end();\n    std::string::iterator\
    \ it_end_end_end_end_end_end_end_end_end_begin = S.", "    long count = 0;\n \
    \   for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n      \
    \      count++;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            count = 0;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I')\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it\
    \ == 'I') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i]\
    \ == 'I') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            ++count;\n        }\n        if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            S = S.substr(i + 1);\n            i =\
    \ -1;\n        }\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            if (i ==\
    \ 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I')\
    \ {\n            ++count;\n            if (i + 1 < S.size() && S[i + 1] == '.')\
    \ {\n                ++count;\n            }\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1]\
    \ == '!') {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n \
    \       if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1]\
    \ == '?' || S[i-1] == '!') {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0; i\
    \ < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n     \
    \   }\n    }\n    return count;", "    std::string::iterator it = S.begin();\n\
    \    while (it != S.end()) {\n        if (*it == 'I') {\n            return 0;\n\
    \        }\n        if (*it == '.' || *it == '?' || *it == '!') {\n          \
    \  it = S.erase(it);\n        } else {\n            ++it;\n        }\n    }\n\
    \    return 1;", "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i)\
    \ {\n        if (S[i] == 'I') {\n            ++count;\n        }\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            S = S.substr(i + 1);\n\
    \            i = -1;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it ==\
    \ 'I') {\n            ++count;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I')\
    \ {\n            ++count;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n\
    \            ++count;\n        }\n        else if (S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!') {\n            i = S.size() - 1;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n \
    \       if (S[i] == 'I') {\n            ++count;\n            if (i + 1 < S.size()\
    \ && S[i + 1] == '.') {\n                i += 2;\n            }\n        }\n \
    \   }\n    return count;", "    long count = 0;\n    for (auto i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto it = S.begin(); it !=\
    \ S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto i = 0; i < S.size();\
    \ ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n      \
    \  if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (auto i =\
    \ 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (auto i =\
    \ 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n\
    \        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n       \
    \     S = S.substr(i);\n            break;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i]\
    \ == 'I') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n    \
    \    if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n   \
    \     if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n   \
    \     if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1]\
    \ == '!') {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n \
    \       if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto it = S.begin(); it != S.end();\
    \ ++it) {\n        if (*it == 'I') {\n            ++count;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto i = 0; i < S.size();\
    \ ++i) {\n        if (S[i] == 'I') {\n            ++count;\n            if (i\
    \ + 1 < S.size() && S[i + 1] == '.') {\n                ++count;\n           \
    \ }\n        }\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i >\
    \ 0 && S[i - 1] != '.' && S[i - 1] != '?' && S[i - 1] != '!') {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;", "    std::string::iterator\
    \ it = S.begin();\n    long count = 0;\n    while (it != S.end()) {\n        if\
    \ (*it == 'I') {\n            count++;\n        }\n        it++;\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n \
    \       if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1]\
    \ == '?' || S[i-1] == '!') {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;", "    std::string::iterator it = S.begin();\n\
    \    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it\
    \ != it_end) {\n        if (*it == 'I') {\n            count++;\n        }\n \
    \       it++;\n    }\n    return count;", "    std::string::iterator it = S.begin();\n\
    \    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it\
    \ != it_end) {\n        if (*it == 'I') {\n            count++;\n        }\n \
    \       it++;\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n\
    \        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n       \
    \     count = 0;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n     \
    \       count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for(auto it = S.begin(); it != S.end(); ++it) {\n        if(*it == 'I') {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto it = S.begin(); it != S.end(); it++) {\n        if (*it ==\
    \ 'I') {\n            count++;\n        }\n    }\n    return count;", "    std::string::iterator\
    \ it = S.begin();\n    while (it != S.end()) {\n        if (*it == 'I') {\n  \
    \          return 0;\n        }\n        it++;\n    }\n    return 1;", "    std::string::iterator\
    \ it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count\
    \ = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n\
    \        }\n        it++;\n    }\n    return count;", "    long count = 0;\n \
    \   for(auto c : S) {\n        if(c == 'I') {\n            count++;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto i = 0; i < S.size();\
    \ ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n\
    \    return count;", "    std::string::iterator it = S.begin();\n    std::string::iterator\
    \ it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n       \
    \ if (*it == 'I') {\n            count++;\n        }\n        it++;\n    }\n \
    \   return count;", "    long count = 0;\n    for(int i = 0; i < S.size(); ++i)\
    \ {\n        if(S[i] == 'I') {\n            if(i > 0 && S[i-1] == '.') {\n   \
    \             count++;\n            }\n            if(i > 0 && S[i-1] == '?')\
    \ {\n                count++;\n            }\n            if(i > 0 && S[i-1] ==\
    \ '!') {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n \
    \       if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n \
    \       if (S[i] == 'I') {\n            ++count;\n            if (i + 1 < S.size()\
    \ && S[i + 1] == ' ') {\n                ++count;\n            }\n        }\n\
    \    }\n    return count;", "    std::string::iterator it = S.begin();\n    std::string::iterator\
    \ it2 = S.begin();\n    std::string::iterator it3 = S.begin();\n    std::string::iterator\
    \ it4 = S.begin();\n    std::string::iterator it5 = S.begin();\n    std::string::iterator\
    \ it6 = S.begin();\n    std::string::iterator it7 = S.begin();\n    std::string::iterator\
    \ it8 = S.begin();\n    std::string::iterator it9 = S.begin();\n    std::string::iterator\
    \ it10 = S.begin();\n    std::string::iterator it11 = S.begin();\n    std::string::iterator\
    \ it12 = S.begin();\n    std::string::iterator it13 = S.begin();\n    std::string::iterator\
    \ it14 = S.begin();\n    std::string::iterator it15 = S.begin();\n    std::string::iterator\
    \ it16 = S.begin();\n    std::string::iterator it17 = S.begin();\n    std::string::iterator\
    \ it18 = S.begin();\n    std::string::iterator it19 = S.begin();\n    std::string::iterator\
    \ it20 = S.begin();\n    std::string::iterator it21 = S.begin();\n    std::string::iterator\
    \ it22 = S.begin();\n    std::string::iterator it23 = S.begin();\n    std::string::iterator\
    \ it24 = S.begin();\n    std::string::iterator it25 = S.begin();\n    std::string::iterator\
    \ it26 = S.begin();\n    std::string::iterator it27 = S.begin();\n    std::string::iterator\
    \ it28 = S.begin();\n    std::string::iterator it29 = S.begin();\n    std::string::iterator\
    \ it30 = S.begin();\n    std::string::iterator it31 = S.begin();\n    std::string::iterator\
    \ it32 = S.begin();\n    std::string::iterator it33 = S.begin();\n    std::string::iterator\
    \ it34 = S.begin();\n    std::string::iterator it35 = S.begin();\n    std::string::iterator\
    \ it36 = S.begin();\n    std::string::iterator it37 =", "    long count = 0;\n\
    \    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n     \
    \       count++;\n        }\n    }\n    return count;", "    std::string::iterator\
    \ it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count\
    \ = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n\
    \            it++;\n        } else {\n            it++;\n        }\n    }\n  \
    \  return count;", "    long count = 0;\n    for (auto it = S.begin(); it != S.end();\
    \ ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto i = 0; i < S.size();\
    \ ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n      \
    \  if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n\
    \        }\n    }\n    return count;", "    std::string::iterator it = S.begin();\n\
    \    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it\
    \ != it_end) {\n        if (*it == 'I') {\n            count++;\n        }\n \
    \       ++it;\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == 'I') {\n            count++;\n    \
    \    }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0;\
    \ i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n   \
    \     }\n    }\n    return count;", "    long count = 0;\n    for (auto it = S.begin();\
    \ it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n  \
    \      }\n    }\n    return count;", "    std::string::iterator it = S.begin();\n\
    \    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it\
    \ != it_end) {\n        if (*it == 'I') {\n            count++;\n        }\n \
    \       it++;\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (auto i =\
    \ 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (auto i =\
    \ 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n\
    \        }\n    }\n    return count;", "    std::string::iterator it = S.begin();\n\
    \    while (it != S.end()) {\n        if (*it == 'I') {\n            break;\n\
    \        }\n        ++it;\n    }\n    return it == S.end();", "    long count\
    \ = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n\
    \            count++;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!') {\n            count = 0;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            ++count;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            ++count;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ std::string::size_type i = 0;\n    while (i < S.size() && S[i] != '.' && S[i]\
    \ != '?' && S[i] != '!')\n        i++;\n    return i == S.size();", "    long\
    \ count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I')\
    \ {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!')\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n   \
    \     if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1]\
    \ == '!') {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (int i = 0; i < S.size(); i++) {\n  \
    \      if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n \
    \       if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1]\
    \ == '?' || S[i-1] == '!') {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0; i\
    \ < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n     \
    \   }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count\
    \ = 0;\n        }\n    }\n    return count;", "    long count = 0;\n    for(auto\
    \ i = 0; i < S.size(); i++) {\n        if(S[i] == 'I') {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (auto i =\
    \ 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (auto i =\
    \ 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0\
    \ || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "    long count = 0;\n \
    \   for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n      \
    \      if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n    \
    \            count++;\n            }\n        }\n    }\n    return count;", " \
    \   std::string::iterator it = S.begin();\n    std::string::iterator it_end =\
    \ S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it ==\
    \ 'I') {\n            ++count;\n            ++it;\n        } else {\n        \
    \    ++it;\n        }\n    }\n    return count;", "    long count = 0;\n    for\
    \ (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if\
    \ (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I')\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n\
    \            count++;\n        }\n    }\n    return count;", "    std::string::iterator\
    \ it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count\
    \ = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n\
    \        }\n        it++;\n    }\n    return count;", "    std::string::iterator\
    \ it = S.begin();\n    long count = 0;\n    while (it != S.end()) {\n        if\
    \ (*it == 'I') {\n            count++;\n        }\n        it++;\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n \
    \       if (S[i] == 'I') {\n            count++;\n        }\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto i = 0; i < S.size();\
    \ ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto i = 0; i < S.size();\
    \ ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i - 1] == '.'\
    \ || S[i - 1] == '?' || S[i - 1] == '!') {\n                count++;\n       \
    \     }\n        }\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i +\
    \ 1 < S.size() && S[i + 1] == ' ') {\n                ++count;\n             \
    \   i += 2;\n            } else {\n                i += 1;\n            }\n  \
    \      }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0;\
    \ i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n   \
    \     }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0;\
    \ i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n   \
    \     }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0;\
    \ i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n   \
    \     }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0;\
    \ i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 ||\
    \ S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "    long count = 0;\n \
    \   for(auto it = S.begin(); it != S.end(); ++it) {\n        if(*it == 'I') {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it ==\
    \ 'I') {\n            count++;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I')\
    \ {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!')\n\
    \                count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it\
    \ == 'I') {\n            ++count;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i]\
    \ == 'I') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i]\
    \ == 'I') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            ++count;\n        }\n        if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            count = 0;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n \
    \       if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n \
    \       if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n \
    \       if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1]\
    \ == '?' || S[i-1] == '!') {\n                ++count;\n            }\n      \
    \  }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0; i\
    \ < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n     \
    \   }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0; i\
    \ < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n     \
    \   }\n    }\n    return count;", "    long count = 0;\n    for(int i = 0; i <\
    \ S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n      \
    \  }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0; i\
    \ < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1]\
    \ == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n    \
    \        }\n        }\n    }\n    return count;", "    std::string::iterator it\
    \ = S.begin();\n    while (it != S.end()) {\n        if (*it == 'I') {\n     \
    \       return 0;\n        }\n        if (*it == '.' || *it == '?' || *it == '!')\
    \ {\n            it++;\n            continue;\n        }\n        if (*it == '\
    \ ') {\n            it++;\n            continue;\n        }\n        return 1;\n\
    \    }\n    return 0;", "    long count = 0;\n    for (int i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for(auto i = 0; i < S.size(); i++)\
    \ {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (int i = 0; i < S.size(); i++) {\n  \
    \      if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for(int i = 0; i < S.size(); i++) {\n   \
    \     if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1]\
    \ == '!') {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n \
    \       if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n \
    \       if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto it = S.begin(); it != S.end();\
    \ it++) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n\
    \    return count;", "    std::string::iterator it = S.begin();\n    std::string::iterator\
    \ it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n       \
    \ if (*it == 'I') {\n            count++;\n            it++;\n        } else {\n\
    \            it++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n     \
    \       ++count;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (int i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n      \
    \      if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n    \
    \            count++;\n            }\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == 'I') {\n            ++count;\n        }\n        if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            count = 0;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n \
    \       if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1]\
    \ == '?' || S[i-1] == '!') {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0; i\
    \ < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n     \
    \   }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0; i\
    \ < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n     \
    \   }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0; i\
    \ < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i\
    \ - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "    std::string::iterator\
    \ it = S.begin();\n    std::string::iterator it2 = S.begin();\n    std::string::iterator\
    \ it3 = S.begin();\n    std::string::iterator it4 = S.begin();\n    std::string::iterator\
    \ it5 = S.begin();\n    std::string::iterator it6 = S.begin();\n    std::string::iterator\
    \ it7 = S.begin();\n    std::string::iterator it8 = S.begin();\n    std::string::iterator\
    \ it9 = S.begin();\n    std::string::iterator it10 = S.begin();\n    std::string::iterator\
    \ it11 = S.begin();\n    std::string::iterator it12 = S.begin();\n    std::string::iterator\
    \ it13 = S.begin();\n    std::string::iterator it14 = S.begin();\n    std::string::iterator\
    \ it15 = S.begin();\n    std::string::iterator it16 = S.begin();\n    std::string::iterator\
    \ it17 = S.begin();\n    std::string::iterator it18 = S.begin();\n    std::string::iterator\
    \ it19 = S.begin();\n    std::string::iterator it20 = S.begin();\n    std::string::iterator\
    \ it21 = S.begin();\n    std::string::iterator it22 = S.begin();\n    std::string::iterator\
    \ it23 = S.begin();\n    std::string::iterator it24 = S.begin();\n    std::string::iterator\
    \ it25 = S.begin();\n    std::string::iterator it26 = S.begin();\n    std::string::iterator\
    \ it27 = S.begin();\n    std::string::iterator it28 = S.begin();\n    std::string::iterator\
    \ it29 = S.begin();\n    std::string::iterator it30 = S.begin();\n    std::string::iterator\
    \ it31 = S.begin();\n    std::string::iterator it32 = S.begin();\n    std::string::iterator\
    \ it33 = S.begin();\n    std::string::iterator it34 = S.begin();\n    std::string::iterator\
    \ it35 = S.begin();\n    std::string::iterator it36 = S.begin();\n    std::string::iterator\
    \ it37 =", "    long count = 0;\n    for (int i = 0; i < S.length(); ++i) {\n\
    \        if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n \
    \       if (S[i] == 'I') {\n            ++count;\n        }\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto it = S.begin(); it !=\
    \ S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n\
    \    }\n    return count;", "    std::string::iterator it = S.begin();\n    long\
    \ count = 0;\n    while (it != S.end()) {\n        if (*it == 'I') {\n       \
    \     count++;\n            it++;\n        } else {\n            it++;\n     \
    \   }\n    }\n    return count;", "    long count = 0;\n    for (auto it = S.begin();\
    \ it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n  \
    \      }\n    }\n    return count;", "    long count = 0;\n    for (auto i = 0;\
    \ i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n   \
    \     }\n    }\n    return count;", "    std::string::iterator it = S.begin();\n\
    \    while (it != S.end()) {\n        if (*it == 'I') {\n            return 0;\n\
    \        }\n        if (*it == '.' || *it == '?' || *it == '!') {\n          \
    \  it = S.erase(it);\n        } else {\n            ++it;\n        }\n    }\n\
    \    return 1;", "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i)\
    \ {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i - 1] == '.' ||\
    \ S[i - 1] == '?' || S[i - 1] == '!') {\n                ++count;\n          \
    \  }\n        }\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (auto i =\
    \ 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0\
    \ || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n\
    \            if (i == 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!')\
    \ {\n                ++count;\n            }\n        }\n    }\n    return count;",
  "    std::string::size_type i = 0;\n    while (i < S.size() && S[i] != '.' && S[i]\
    \ != '?' && S[i] != '!')\n        ++i;\n    if (i < S.size())\n        return\
    \ S.substr(i).find(\"I\") == 0;\n    return 0;", "    long count = 0;\n    for\
    \ (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n  \
    \          ++count;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n     \
    \       ++count;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I')\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n\
    \            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n\
    \                count++;\n            }\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i]\
    \ == 'I') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ std::string::iterator it = S.begin();\n    while (it != S.end()) {\n       \
    \ if (*it == 'I') {\n            return 0;\n        }\n        if (*it == '.'\
    \ || *it == '?' || *it == '!') {\n            it = S.erase(it);\n        } else\
    \ {\n            ++it;\n        }\n    }\n    return 1;", "    long count = 0;\n\
    \    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n     \
    \       ++count;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n     \
    \       ++count;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for(auto i = 0; i < S.size(); i++) {\n        if(S[i] == 'I') {\n       \
    \     count++;\n        }\n    }\n    return count;", "    long count = 0;\n \
    \   for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n      \
    \      count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n     \
    \       if (i > 0 && S[i-1] == '.') {\n                count++;\n            }\n\
    \            if (i > 0 && S[i-1] == '?') {\n                count++;\n       \
    \     }\n            if (i > 0 && S[i-1] == '!') {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "    std::string::iterator\
    \ it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count\
    \ = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n\
    \        }\n        ++it;\n    }\n    return count;", "    std::string::iterator\
    \ it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count\
    \ = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n\
    \            it++;\n        } else {\n            it++;\n        }\n    }\n  \
    \  return count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); ++i)\
    \ {\n        if (S[i] == 'I') {\n            ++count;\n        }\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n\
    \    return count;", "    std::string::iterator it = S.begin();\n    std::string::iterator\
    \ it2 = S.begin();\n    while (it2 != S.end()) {\n        if (*it2 == 'I') {\n\
    \            it = it2;\n            break;\n        }\n        it2++;\n    }\n\
    \    if (it == S.end()) return 0;\n    it2 = it;\n    while (it2 != S.end()) {\n\
    \        if (*it2 == '.' || *it2 == '?' || *it2 == '!') {\n            it2++;\n\
    \            continue;\n        }\n        it2++;\n        break;\n    }\n   \
    \ return it2 - it;", "    long count = 0;\n    for (int i = 0; i < S.size(); i++)\
    \ {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return\
    \ count;", "    std::string::iterator it = S.begin();\n    std::string::iterator\
    \ it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n       \
    \ if (*it == 'I') {\n            count++;\n            it++;\n        } else {\n\
    \            it++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n     \
    \       count++;\n        }\n    }\n    return count;", "    std::string::iterator\
    \ it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count\
    \ = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n\
    \        }\n        it++;\n    }\n    return count;", "    long count = 0;\n \
    \   for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n      \
    \      count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I')\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for(auto i = 0; i < S.size(); i++) {\n        if(S[i] == 'I') {\n\
    \            count++;\n        }\n    }\n    return count;", "    std::string::iterator\
    \ it = S.begin();\n    long count = 0;\n    while (it != S.end()) {\n        if\
    \ (*it == 'I') {\n            count++;\n        }\n        it++;\n    }\n    return\
    \ count;", "    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n \
    \       if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return\
    \ count;"]
stop_tokens:
- "\n}"
