name: HumanEval_93_encode
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes\
  \ a message, and encodes in such a \n// way that it swaps case of all letters, replaces\
  \ all vowels in \n// the message with the letter that appears 2 places ahead of\
  \ that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n\
  // >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS\
  \ C MGSSCGG'\nstd::string encode(std::string message) {\n"
tests: "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
  )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n   \
  \ assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a\
  \ message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
  \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
completions: ["    std::string encoded_message;\n    for (int i = 0; i < message.size();\
    \ i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] ==\
    \ 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n    \
    \        encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i\
    \ + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n\
    \        }\n    }\n    return encoded_message;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a'\
    \ || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n            result += message[i];\n            result += message[i\
    \ + 2];\n        } else {\n            result += message[i];\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (auto c : message) {\n\
    \        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A'\
    \ + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            result += c + (c + 2);\n        } else {\n        \
    \    result += c;\n        }\n    }\n    return result;", "    std::string encoded_message;\n\
    \    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a'\
    \ || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i]\
    \ == 'O' || message[i] == 'U') {\n            encoded_message.push_back(message[i]);\n\
    \            encoded_message.push_back(message[i + 2]);\n        } else {\n  \
    \          encoded_message.push_back(message[i]);\n        }\n    }\n    return\
    \ encoded_message;", "    std::string encoded_message;\n    for (int i = 0; i\
    \ < message.size(); ++i) {\n        if (message[i] == 'a' || message[i] == 'e'\
    \ || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n        \
    \    encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i\
    \ + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n\
    \        }\n    }\n    return encoded_message;", "    std::string encoded_message;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (isalpha(message[i]))\
    \ {\n            encoded_message.push_back(tolower(message[i]));\n           \
    \ encoded_message.push_back(toupper(message[i + 2]));\n        } else {\n    \
    \        encoded_message.push_back(message[i]);\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] + (message[i] - 'a' + 2) % 26 + 'a';\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] + (message[i]\
    \ - 'A' + 2) % 26 + 'A';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    return result;", "    std::string encoded_message;\n  \
    \  for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded_message.push_back(message[i] -\
    \ 32);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n       \
    \     encoded_message.push_back(message[i]);\n        } else if (message[i] ==\
    \ 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n            encoded_message.push_back(message[i] + 2);\n        }\
    \ else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n\
    \    return encoded_message;", "    std::string result;\n    for (auto c : message)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' +\
    \ 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c +\
    \ (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            result += c + (c + 2);\n        } else {\n \
    \           result += c;\n        }\n    }\n    return result;", "    std::string\
    \ encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n       \
    \ if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i]\
    \ == 'o' || message[i] == 'u' || message[i] == 'y') {\n            encoded_message.push_back(message[i]);\n\
    \            encoded_message.push_back(message[i+2]);\n        }\n        else\
    \ {\n            encoded_message.push_back(message[i]);\n        }\n    }\n  \
    \  return encoded_message;", "    std::string encoded;\n    for (int i = 0; i\
    \ < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e'\
    \ || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n        \
    \    encoded += message[i];\n            encoded += message[i + 2];\n        }\
    \ else {\n            encoded += message[i];\n        }\n    }\n    return encoded;",
  "    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' &&\
    \ c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c\
    \ >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        }\
    \ else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \       result += c + (c - 'a' + 'A');\n        } else {\n            result +=\
    \ c;\n        }\n    }\n    return result;", "    std::string result;\n    for\
    \ (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result\
    \ += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n      \
    \      result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n\
    \        } else {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n     \
    \   if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ + (message[i] - 'a' + 2) % 26 + 'a';\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            result += message[i] + (message[i] - 'A' +\
    \ 2) % 26 + 'A';\n        } else {\n            result += message[i];\n      \
    \  }\n    }\n    return result;", "    std::string result;\n    for (auto c :\
    \ message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c\
    \ - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result\
    \ += c + (c - 'A' + 'a');\n        } else {\n            result += c;\n      \
    \  }\n    }\n    return result;", "    std::string result;\n    for (int i = 0;\
    \ i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            result += message[i] + 2;\n        } else if (message[i] >= 'A'\
    \ && message[i] <= 'Z') {\n            result += message[i] - 2;\n        } else\
    \ {\n            result += message[i];\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < message.length(); ++i) {\n   \
    \     if (message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i]\
    \ - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result.push_back(message[i]);\n        } else if (message[i] == 'a'\
    \ || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n            result.push_back(message[i] + 2);\n        } else {\n\
    \            result.push_back(message[i]);\n        }\n    }\n    return result;",
  "    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' &&\
    \ c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c\
    \ >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        }\
    \ else if (c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result\
    \ += c + (c - 'a' + 'A');\n        } else {\n            result += c;\n      \
    \  }\n    }\n    return result;", "    std::string encoded_message;\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i]\
    \ == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i]\
    \ == 'U') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i\
    \ + 2]);\n        }\n        else {\n            encoded_message.push_back(message[i]);\n\
    \        }\n    }\n    return encoded_message;", "    std::string result;\n  \
    \  for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' &&\
    \ message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n      \
    \  } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result +=\
    \ message[i] - 'A' + 'a';\n        } else if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n \
    \           result += message[i] + message[i + 2];\n        } else {\n       \
    \     result += message[i];\n        }\n    }\n    return result;", "    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] ==\
    \ 'o' || message[i] == 'u' || message[i] == 'y') {\n            encoded += message[i];\n\
    \            encoded += message[i + 2];\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    return encoded;", "    std::string result;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (isalpha(c)) {\n            if (i + 2 < message.length() && isalpha(message[i\
    \ + 2])) {\n                c = tolower(c);\n                c = toupper(message[i\
    \ + 2]);\n                i += 2;\n            } else {\n                c = tolower(c);\n\
    \            }\n        }\n        result.push_back(c);\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n   \
    \     if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ + (message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] + (message[i] - 'A' + 'a');\n  \
    \      } else if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i'\
    \ || message[i] == 'o' || message[i] == 'u') {\n            result += message[i]\
    \ + message[i + 2];\n        } else {\n            result += message[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (auto c\
    \ : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n   \
    \             result += toupper(c);\n            } else {\n                result\
    \ += c;\n            }\n        } else {\n            result += c;\n        }\n\
    \    }\n    return result;", "    std::string encoded_message;\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i]\
    \ == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i]\
    \ == 'U') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i\
    \ + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n\
    \        }\n    }\n    return encoded_message;", "    std::string result;\n  \
    \  for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result.push_back(message[i] - 'a' + 'A');\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result.push_back(message[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] + 2 * (message[i] - 'a');\n    \
    \    } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 2 * (message[i] - 'A');\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c))\
    \ {\n                result.push_back(toupper(c));\n            } else {\n   \
    \             result.push_back(tolower(c));\n            }\n        } else {\n\
    \            result.push_back(c);\n        }\n    }\n    return result;", "  \
    \  std::string result;\n    for (int i = 0; i < message.length(); i++) {\n   \
    \     if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i]\
    \ == 'o' || message[i] == 'u' || message[i] == 'y') {\n            result.push_back(message[i]);\n\
    \            result.push_back(message[i + 2]);\n        } else {\n           \
    \ result.push_back(message[i]);\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i];\n        } else if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n \
    \           result += message[i] + 2;\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    return result;", "    std::string encoded;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a'\
    \ || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n            encoded += message[i];\n            encoded += message[i\
    \ + 2];\n        } else {\n            encoded += message[i];\n        }\n   \
    \ }\n    return encoded;", "    std::string result;\n    for (auto c : message)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' +\
    \ 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c +\
    \ (c - 'A' + 'a');\n        } else {\n            result += c;\n        }\n  \
    \  }\n    return result;", "    std::string result;\n    for (int i = 0; i < message.size();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] + (message[i] - 'a' + 2) % 26 + 'a';\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] + (message[i]\
    \ - 'A' + 2) % 26 + 'A';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (auto\
    \ c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n \
    \               result += toupper(c);\n            } else {\n                result\
    \ += c;\n            }\n        } else {\n            result += c;\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for(int i =\
    \ 0; i < message.length(); i++) {\n        if(message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n \
    \           result += message[i];\n            result += message[i+2];\n     \
    \   } else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (auto c : message) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n     \
    \   } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n\
    \        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            result += c + (c - 'a' + 'A');\n        } else {\n          \
    \  result += c;\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (char c : message) {\n        if (isalpha(c)) {\n            if (islower(c))\
    \ {\n                result.push_back(toupper(c));\n            } else {\n   \
    \             result.push_back(tolower(c));\n            }\n        } else {\n\
    \            result.push_back(c);\n        }\n    }\n    return result;", "  \
    \  std::string result;\n    for (int i = 0; i < message.size(); i++) {\n     \
    \   if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result += message[i] - 'A' + 'a';\n        } else {\n           \
    \ result += message[i];\n        }\n    }\n    return result;", "    std::string\
    \ encoded_message;\n    for (int i = 0; i < message.size(); ++i) {\n        if\
    \ (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] ==\
    \ 'o' || message[i] == 'u' || message[i] == 'y') {\n            encoded_message\
    \ += message[i] + message[i + 2];\n        } else {\n            encoded_message\
    \ += message[i];\n        }\n    }\n    return encoded_message;", "    std::string\
    \ encoded;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded += message[i] + 2 * (i +\
    \ 1);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n        \
    \    encoded += message[i] + 2 * (i + 1);\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    return encoded;", "    std::string result;\n\
    \    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n         \
    \   result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + (c\
    \ - 'a' + 'A');\n        } else {\n            result += c;\n        }\n    }\n\
    \    return result;", "    std::string encoded_message;\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e'\
    \ || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i]\
    \ == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i]\
    \ == 'U') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i\
    \ + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n\
    \        }\n    }\n    return encoded_message;", "    std::string result;\n  \
    \  for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n           \
    \ result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            result += c + (c - 'A' + 'a');\n        } else if (c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            result += c + (c - 'a' + 'A');\n\
    \        } else {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' ||\
    \ message[i] == 'o' || message[i] == 'u') {\n            encoded_message += message[i];\n\
    \            encoded_message += message[i + 2];\n        } else {\n          \
    \  encoded_message += message[i];\n        }\n    }\n    return encoded_message;",
  "    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n     \
    \   if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i]\
    \ == 'o' || message[i] == 'u') {\n            result += message[i];\n        \
    \    result += message[i + 2];\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for(char\
    \ c : message) {\n        if(isalpha(c)) {\n            if(isupper(c)) {\n   \
    \             result += c;\n            } else {\n                result += (char)((c\
    \ + 2) % 26 + 'A');\n            }\n        } else {\n            result += c;\n\
    \        }\n    }\n    return result;", "    std::string encoded_message;\n  \
    \  for (int i = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' &&\
    \ message[i] <= 'z') {\n            encoded_message.push_back(message[i] - 'a'\
    \ + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n    \
    \        encoded_message.push_back(message[i]);\n        } else {\n          \
    \  encoded_message.push_back(message[i]);\n        }\n    }\n    return encoded_message;",
  "    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n   \
    \     if (message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i]\
    \ - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result.push_back(message[i]);\n        }\n    }\n    return result;",
  "    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' &&\
    \ c <= 'z') {\n            result.push_back(c + 2);\n        } else if (c >= 'A'\
    \ && c <= 'Z') {\n            result.push_back(c);\n        } else {\n       \
    \     result.push_back(c);\n        }\n    }\n    return result;", "    std::string\
    \ encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n       \
    \ if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i]\
    \ == 'o' || message[i] == 'u') {\n            encoded_message += message[i];\n\
    \            encoded_message += message[i + 2];\n        } else {\n          \
    \  encoded_message += message[i];\n        }\n    }\n    return encoded_message;",
  "    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' ||\
    \ message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] ==\
    \ 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n    \
    \        encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i\
    \ + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n\
    \        }\n    }\n    return encoded_message;", "    std::string encoded_message;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded_message += message[i] + (message[i]\
    \ - 'a' + 2) % 26 + 'a';\n        } else if (message[i] >= 'A' && message[i] <=\
    \ 'Z') {\n            encoded_message += message[i] + (message[i] - 'A' + 2) %\
    \ 26 + 'A';\n        } else {\n            encoded_message += message[i];\n  \
    \      }\n    }\n    return encoded_message;", "    std::string result;\n    for\
    \ (auto c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            result += c;\n            result += c;\n       \
    \ } else {\n            result += c;\n        }\n    }\n    return result;", " \
    \   std::string result;\n    for (int i = 0; i < message.size(); ++i) {\n    \
    \    if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result += message[i] + 'a' - 'A';\n        } else {\n           \
    \ result += message[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] + 2;\n    \
    \    } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 2;\n        } else {\n            result += message[i];\n  \
    \      }\n    }\n    return result;", "    std::string result;\n    for (auto\
    \ c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c\
    \ + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n           \
    \ result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n    \
    \    } else {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < message.size(); i++) {\n\
    \        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i]\
    \ == 'o' || message[i] == 'u' || message[i] == 'y') {\n            result += message[i]\
    \ + message[i + 2];\n        } else {\n            result += message[i];\n   \
    \     }\n    }\n    return result;", "    std::string encoded = \"\";\n    for\
    \ (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i]\
    \ == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i]\
    \ == 'U') {\n            encoded += message[i];\n            encoded += message[i\
    \ + 2];\n        }\n        else {\n            encoded += message[i];\n     \
    \   }\n    }\n    return encoded;", "    std::string result;\n    for (int i =\
    \ 0; i < message.length(); i++) {\n        char c = message[i];\n        if (isalpha(c))\
    \ {\n            if (i + 2 < message.length() && isalpha(message[i + 2])) {\n\
    \                c = toupper(c);\n            } else {\n                c = tolower(c);\n\
    \            }\n        }\n        result.push_back(c);\n    }\n    return result;",
  "    std::string encoded;\n    for (int i = 0; i < message.size(); i++) {\n    \
    \    if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i]\
    \ == 'o' || message[i] == 'u') {\n            encoded += message[i];\n       \
    \     encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    return encoded;", "    std::string result;\n    for (auto\
    \ c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c\
    \ + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n           \
    \ result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n    \
    \    } else {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n     \
    \   if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i]\
    \ == 'o' || message[i] == 'u') {\n            result += message[i];\n        \
    \    result += message[i + 2];\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    return result;", "    std::string encoded_message;\n  \
    \  for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' ||\
    \ message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] ==\
    \ 'u') {\n            encoded_message += message[i];\n            encoded_message\
    \ += message[i + 2];\n        }\n        else {\n            encoded_message +=\
    \ message[i];\n        }\n    }\n    return encoded_message;", "    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] ==\
    \ 'o' || message[i] == 'u' || message[i] == 'y') {\n            encoded += message[i];\n\
    \            encoded += message[i + 2];\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    return encoded;", "    std::string result;\n\
    \    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] == 'a'\
    \ || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u' || message[i] == 'y') {\n            result += message[i];\n        \
    \    result += message[i + 2];\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result.push_back(message[i] - 32);\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            result.push_back(message[i]);\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] >= 'a' && result[i] <= 'z') {\n            result[i] += 32;\n   \
    \     } else if (result[i] >= 'A' && result[i] <= 'Z') {\n            result[i]\
    \ -= 32;\n        }\n    }\n    return result;", "    std::string result;\n  \
    \  for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' ||\
    \ message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] ==\
    \ 'u') {\n            result.push_back(message[i]);\n            result.push_back(message[i\
    \ + 2]);\n        }\n        else {\n            result.push_back(message[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (auto\
    \ c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c\
    \ + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n           \
    \ result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n    \
    \    } else {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += message[i] - 32;\n        }\n        else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == ' ') {\n            encoded += ' ';\n        }\n        else if (message[i]\
    \ == '.') {\n            encoded += '.';\n        }\n        else if (message[i]\
    \ == ',') {\n            encoded += ',';\n        }\n        else if (message[i]\
    \ == '!') {\n            encoded += '!';\n        }\n        else if (message[i]\
    \ == '?') {\n            encoded += '?';\n        }\n        else if (message[i]\
    \ == '-') {\n            encoded += '-';\n        }\n        else if (message[i]\
    \ == '_') {\n            encoded += '_';\n        }\n        else if (message[i]\
    \ == '\\'') {\n            encoded += '\\'';\n        }\n        else if (message[i]\
    \ == '\\\"') {\n            encoded += '\\\"';\n        }\n        else if (message[i]\
    \ == '(') {\n            encoded += '(';\n        }\n        else if (message[i]\
    \ == ')') {\n            encoded += ')';\n        }\n        else if (message[i]\
    \ == '=') {\n            encoded += '=';\n        }\n        else if (message[i]\
    \ == '+') {\n            encoded += '+';\n        }\n        else if (message[i]\
    \ == '*') {\n            encoded += '*';\n        }\n        else if (message[i]\
    \ == ':') {\n            encoded += ':';\n        }\n        else if (message[i]\
    \ == ';') {\n            encoded += ';';\n        }\n        else if (message[i]\
    \ == '%')", "    std::string result;\n    for (int i = 0; i < message.size();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i]\
    \ - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result.push_back(message[i] + 'a' - 'A');\n        } else {\n   \
    \         result.push_back(message[i]);\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < message.size(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            result +=\
    \ message[i] + (message[i] - 'a' + 'A') * 2;\n        } else if (message[i] >=\
    \ 'A' && message[i] <= 'Z') {\n            result += message[i] + (message[i]\
    \ - 'A' + 'a') * 2;\n        } else {\n            result += message[i];\n   \
    \     }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] + 2 * (message[i] - 'a');\n    \
    \    } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 2 * (message[i] - 'A');\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (char c : message) {\n        if (isalpha(c)) {\n            if (isupper(c))\
    \ {\n                result += tolower(c);\n            } else {\n           \
    \     result += toupper(c);\n            }\n        } else {\n            result\
    \ += c;\n        }\n    }\n    return result;", "    std::string encoded = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            encoded += message[i] + 2;\n      \
    \  } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded +=\
    \ message[i] - 2;\n        } else {\n            encoded += message[i];\n    \
    \    }\n    }\n    return encoded;", "    std::string encoded;\n    for (int i\
    \ = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i]\
    \ == 'y') {\n            encoded += message[i];\n            encoded += message[i\
    \ + 2];\n        } else {\n            encoded += message[i];\n        }\n   \
    \ }\n    return encoded;", "    std::string result;\n    for (int i = 0; i < message.size();\
    \ ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    return result;", " \
    \   std::string result;\n    for (int i = 0; i < message.size(); i++) {\n    \
    \    if (message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i]\
    \ - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result.push_back(message[i]);\n        } else if (message[i] == '\
    \ ') {\n            result.push_back(' ');\n        } else if (message[i] == '.')\
    \ {\n            result.push_back('.');\n        } else if (message[i] == ',')\
    \ {\n            result.push_back(',');\n        } else if (message[i] == '!')\
    \ {\n            result.push_back('!');\n        } else if (message[i] == '?')\
    \ {\n            result.push_back('?');\n        } else if (message[i] == '-')\
    \ {\n            result.push_back('-');\n        } else if (message[i] == '_')\
    \ {\n            result.push_back('_');\n        } else if (message[i] == '\\\
    '') {\n            result.push_back('\\'');\n        } else if (message[i] ==\
    \ '(') {\n            result.push_back('(');\n        } else if (message[i] ==\
    \ ')') {\n            result.push_back(')');\n        } else if (message[i] ==\
    \ ':') {\n            result.push_back(':');\n        } else if (message[i] ==\
    \ ';') {\n            result.push_back(';');\n        } else if (message[i] ==\
    \ '=') {\n            result.push_back('=');\n        } else if (message[i] ==\
    \ '+') {\n            result.push_back('+');\n        } else if (message[i] ==\
    \ '%') {\n            result.push_back('%');\n        } else if (message[i] ==\
    \ '$') {\n            result.push_back('$');\n        } else if (message[", " \
    \   std::string result;\n    for (auto c : message) {\n        if (isalpha(c))\
    \ {\n            if (islower(c)) {\n                result += toupper(c);\n  \
    \          } else {\n                result += c;\n            }\n        } else\
    \ {\n            result += c;\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] ==\
    \ 'o' || message[i] == 'u' || message[i] == 'y') {\n            result += message[i]\
    \ + message[i + 2];\n        } else {\n            result += message[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (int i\
    \ = 0; i < message.size(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] - 'a' + 'A';\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i]\
    \ + 'a' - 'A';\n        } else {\n            result += message[i];\n        }\n\
    \    }\n    return result;", "    std::string result;\n    for (auto c : message)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' +\
    \ 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c +\
    \ (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            result += c + (c + 2);\n        } else {\n \
    \           result += c;\n        }\n    }\n    return result;", "    std::string\
    \ encoded;\n    for (int i = 0; i < message.size(); ++i) {\n        if (message[i]\
    \ == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n            encoded += message[i];\n            encoded += message[i\
    \ + 2];\n        } else {\n            encoded += message[i];\n        }\n   \
    \ }\n    return encoded;", "    std::string result = \"\";\n    for(int i = 0;\
    \ i < message.size(); i++) {\n        if(message[i] == 'a' || message[i] == 'e'\
    \ || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n        \
    \    result += message[i];\n            result += message[i + 2];\n        }\n\
    \        else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (auto c : message) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' + 'A');\n     \
    \   } else if (c >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n\
    \        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            result += c + (c + 2);\n        } else {\n            result\
    \ += c;\n        }\n    }\n    return result;", "    std::string result;\n   \
    \ for (auto c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n            result += c;\n            result += c;\n\
    \        } else {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' &&\
    \ c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c\
    \ >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        }\
    \ else if (c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result\
    \ += c + (c - 'a' + 'A');\n        } else {\n            result += c;\n      \
    \  }\n    }\n    return result;", "    std::string result;\n    for (int i = 0;\
    \ i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            result.push_back(message[i] - 'a' + 'A');\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            result.push_back(message[i]);\n\
    \        } else if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i'\
    \ || message[i] == 'o' || message[i] == 'u') {\n            result.push_back(message[i]\
    \ + 2);\n        } else {\n            result.push_back(message[i]);\n       \
    \ }\n    }\n    return result;", "    std::string encoded_message;\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n \
    \           encoded_message += message[i];\n            encoded_message += message[i\
    \ + 2];\n        } else {\n            encoded_message += message[i];\n      \
    \  }\n    }\n    return encoded_message;", "    std::string result;\n    for (int\
    \ i = 0; i < message.length(); ++i) {\n        if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n \
    \           result += message[i];\n            result += message[i + 2];\n   \
    \     } else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (auto c : message) {\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result\
    \ += c;\n            result += c;\n        } else {\n            result += c;\n\
    \        }\n    }\n    return result;", "    std::string encoded_message;\n  \
    \  for (int i = 0; i < message.size(); ++i) {\n        if (message[i] == 'a' ||\
    \ message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] ==\
    \ 'u') {\n            encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i\
    \ + 2]);\n        }\n        else {\n            encoded_message.push_back(message[i]);\n\
    \        }\n    }\n    return encoded_message;", "    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i] ==\
    \ 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u' || message[i] == 'y') {\n            encoded += message[i];\n       \
    \     encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    return encoded;", "    std::string result;\n    for (auto\
    \ c : message) {\n        if (isalpha(c)) {\n            if (isupper(c)) {\n \
    \               result += c;\n            } else {\n                result +=\
    \ (char)(c + 'A' - 'a');\n            }\n        } else {\n            result\
    \ += c;\n        }\n    }\n    return result;", "    std::string result;\n   \
    \ for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c))\
    \ {\n                result += c;\n            } else {\n                result\
    \ += std::toupper(c);\n            }\n        } else {\n            result +=\
    \ c;\n        }\n    }\n    return result;", "    std::string encoded_message;\n\
    \    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a'\
    \ || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n            encoded_message += message[i];\n            encoded_message\
    \ += message[i + 2];\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    return encoded_message;", "    std::string result;\n  \
    \  for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' &&\
    \ message[i] <= 'z') {\n            result += message[i] + 2 * (i + 1);\n    \
    \    } else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;", "    std::string encoded;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] ==\
    \ 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded += message[i\
    \ + 2];\n        } else {\n            encoded += message[i];\n        }\n   \
    \ }\n    return encoded;", "    std::string result;\n    for (int i = 0; i < message.size();\
    \ i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] ==\
    \ 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n\
    \            result += message[i+2];\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     }\n        else if (message[i] >= 'A' && message[i] <= 'Z') {\n        \
    \    result += message[i];\n        }\n        else if (message[i] == ' ') {\n\
    \            result += ' ';\n        }\n        else if (message[i] == '.') {\n\
    \            result += '.';\n        }\n        else if (message[i] == ',') {\n\
    \            result += ',';\n        }\n        else if (message[i] == '!') {\n\
    \            result += '!';\n        }\n        else if (message[i] == '?') {\n\
    \            result += '?';\n        }\n        else if (message[i] == '-') {\n\
    \            result += '-';\n        }\n        else if (message[i] == '_') {\n\
    \            result += '_';\n        }\n        else if (message[i] == ':') {\n\
    \            result += ':';\n        }\n        else if (message[i] == ';') {\n\
    \            result += ';';\n        }\n        else if (message[i] == '(') {\n\
    \            result += '(';\n        }\n        else if (message[i] == ')') {\n\
    \            result += ')';\n        }\n        else if (message[i] == '{') {\n\
    \            result += '{';\n        }\n        else if (message[i] == '}') {\n\
    \            result += '}';\n        }\n        else if (message[i] == '[') {\n\
    \            result += '[';\n        }\n        else if (message[i] == ']') {\n\
    \            result += ']';\n        }\n        else if (message[i] == '<') {\n\
    \            result += '<';\n        }\n        else if (message[i] == '>') {\n\
    \            result += '>';\n        }\n        else if (message[i] ==", "   \
    \ std::string result;\n    for (char c : message) {\n        if (isalpha(c)) {\n\
    \            if (islower(c)) {\n                result.push_back(toupper(c));\n\
    \            } else {\n                result.push_back(tolower(c));\n       \
    \     }\n        } else {\n            result.push_back(c);\n        }\n    }\n\
    \    return result;", "    std::string encoded_message;\n    for (int i = 0; i\
    \ < message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e'\
    \ || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n        \
    \    encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i\
    \ + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n\
    \        }\n    }\n    return encoded_message;", "    std::string result;\n  \
    \  for(int i = 0; i < message.size(); i++) {\n        if(message[i] >= 'a' &&\
    \ message[i] <= 'z') {\n            result.push_back(message[i] - 32);\n     \
    \   } else if(message[i] >= 'A' && message[i] <= 'Z') {\n            result.push_back(message[i]);\n\
    \        } else if(message[i] == 'e' || message[i] == 'E') {\n            result.push_back('E');\n\
    \            result.push_back('E');\n        } else if(message[i] == 'i' || message[i]\
    \ == 'I') {\n            result.push_back('I');\n            result.push_back('I');\n\
    \        } else if(message[i] == 'o' || message[i] == 'O') {\n            result.push_back('O');\n\
    \            result.push_back('O');\n        } else if(message[i] == 'u' || message[i]\
    \ == 'U') {\n            result.push_back('U');\n            result.push_back('U');\n\
    \        } else if(message[i] == 'y' || message[i] == 'Y') {\n            result.push_back('Y');\n\
    \            result.push_back('Y');\n        } else {\n            result.push_back(message[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (auto\
    \ c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n \
    \               result += toupper(c);\n            } else {\n                result\
    \ += c;\n            }\n        } else {\n            result += c;\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for(int i =\
    \ 0; i < message.length(); i++) {\n        if(message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] + 2 * (message[i] - 'a');\n    \
    \    } else if(message[i] >= 'A' && message[i] <= 'Z') {\n            result +=\
    \ message[i] + 2 * (message[i] - 'A');\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    return result;", "    std::string encoded;\n\
    \    for (auto c : message) {\n        if (isalpha(c)) {\n            encoded\
    \ += (char)(((c - 'a') + 2) % 26 + 'a');\n        } else {\n            encoded\
    \ += c;\n        }\n    }\n    return encoded;", "    std::string result;\n  \
    \  for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' &&\
    \ message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n      \
    \  } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result +=\
    \ message[i] - 'A' + 'a';\n        } else if (message[i] >= '0' && message[i]\
    \ <= '9') {\n            result += message[i];\n        } else {\n           \
    \ result += message[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n         \
    \   result.push_back(tolower(c));\n            result.push_back(toupper(c));\n\
    \        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            result.push_back(c);\n            result.push_back(c);\n    \
    \        result.push_back(c);\n        } else {\n            result.push_back(c);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (auto\
    \ c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += (c\
    \ + 2) % 26 + 'a';\n        } else if (c >= 'A' && c <= 'Z') {\n            result\
    \ += (c + 2) % 26 + 'A';\n        } else {\n            result += c;\n       \
    \ }\n    }\n    return result;", "    std::string result;\n    for (auto c : message)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            result += c + (c - 'a' +\
    \ 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c +\
    \ (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            result += c + (c + 2);\n        } else {\n \
    \           result += c;\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n            result += message[i + 2];\n        } else {\n       \
    \     result += message[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (auto c : message) {\n        if (isalpha(c)) {\n         \
    \   if (islower(c)) {\n                result += toupper(c);\n            } else\
    \ {\n                result += c;\n            }\n        } else {\n         \
    \   result += c;\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += message[i] + (message[i] - 'a'\
    \ + 2) % 26 + 'a';\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + (message[i] - 'A' + 2) % 26 + 'A';\n \
    \       } else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < message.size();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i]\
    \ - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result.push_back(message[i]);\n        }\n    }\n    return result;",
  "    std::string result;\n    for (auto c : message) {\n        if (isalpha(c))\
    \ {\n            result += ((c >= 'a' && c <= 'z') ? (c - 'a' + 'A') : c);\n \
    \       } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            result += (c + (c == 'a' ? 'A' : 'E'));\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i];\n        } else if (message[i] == ' ')\
    \ {\n            result += ' ';\n        } else if (message[i] == '.') {\n   \
    \         result += '.';\n        } else if (message[i] == ',') {\n          \
    \  result += ',';\n        } else if (message[i] == '!') {\n            result\
    \ += '!';\n        } else if (message[i] == '?') {\n            result += '?';\n\
    \        } else if (message[i] == '-') {\n            result += '-';\n       \
    \ } else if (message[i] == '_') {\n            result += '_';\n        } else\
    \ if (message[i] == '(') {\n            result += '(';\n        } else if (message[i]\
    \ == ')') {\n            result += ')';\n        } else if (message[i] == '=')\
    \ {\n            result += '=';\n        } else if (message[i] == '+') {\n   \
    \         result += '+';\n        } else if (message[i] == '*') {\n          \
    \  result += '*';\n        } else if (message[i] == ':') {\n            result\
    \ += ':';\n        } else if (message[i] == ';') {\n            result += ';';\n\
    \        } else if (message[i] == '&') {\n            result += '&';\n       \
    \ } else if (message[i] == '@') {\n            result += '@';\n        } else\
    \ if (message[i] == '#                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             ", "    std::string result;\n    for (char c : message) {\n    \
    \    if (isalpha(c)) {\n            if (isupper(c)) {\n                result\
    \ += tolower(c);\n            } else {\n                result += toupper(c);\n\
    \            }\n        } else {\n            result += c;\n        }\n    }\n\
    \    return result;", "    std::string encoded;\n    for (int i = 0; i < message.size();\
    \ i++) {\n        encoded += (message[i] == 'a' || message[i] == 'e' || message[i]\
    \ == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') ? message[i]\
    \ + 2 : message[i];\n    }\n    return encoded;", "    std::string result;\n \
    \   for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a'\
    \ || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n            result += message[i];\n            result += message[i\
    \ + 2];\n        } else {\n            result += message[i];\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (int i = 0; i < message.size();\
    \ ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] + 2 * (message[i] - 'a');\n        } else if (message[i] >= 'A'\
    \ && message[i] <= 'Z') {\n            result += message[i] + 2 * (message[i]\
    \ - 'A');\n        } else {\n            result += message[i];\n        }\n  \
    \  }\n    return result;", "    std::string result = \"\";\n    for (int i = 0;\
    \ i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] ==\
    \ 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n    \
    \        result += message[i];\n            result += message[i + 2];\n      \
    \  } else {\n            result += message[i];\n        }\n    }\n    return result;",
  "    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += message[i] - 'A' + 'a';\n        }\
    \ else if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i]\
    \ == 'o' || message[i] == 'u') {\n            encoded_message += message[i] +\
    \ message[i + 2];\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    return encoded_message;", "    std::string encoded_message;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a'\
    \ || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n            encoded_message.push_back(message[i + 2]);\n        }\
    \ else {\n            encoded_message.push_back(message[i]);\n        }\n    }\n\
    \    return encoded_message;", "    std::string result;\n    for (auto c : message)\
    \ {\n        if (isalpha(c)) {\n            if (islower(c)) {\n              \
    \  result.push_back(toupper(c));\n            } else {\n                result.push_back(tolower(c));\n\
    \            }\n        } else {\n            result.push_back(c);\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for(int i =\
    \ 0; i < message.length(); i++) {\n        if(message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] - 32;\n        } else if(message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i];\n        }\
    \ else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i]\
    \ == 'o' || message[i] == 'u') {\n            result += message[i] + 2;\n    \
    \    } else if(message[i] == 'y') {\n            result += message[i] + 2;\n \
    \       } else if(message[i] == ' ') {\n            result += message[i];\n  \
    \      }\n    }\n    return result;", "    std::string result;\n    for (auto\
    \ c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n \
    \               result += toupper(c);\n            } else {\n                result\
    \ += c;\n            }\n        } else {\n            result += c;\n        }\n\
    \    }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' ||\
    \ message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n           \
    \ result += message[i];\n            result += message[i + 2];\n        } else\
    \ {\n            result += message[i];\n        }\n    }\n    return result;",
  "    std::string result;\n    for (auto c : message) {\n        if (isalpha(c))\
    \ {\n            if (isupper(c)) {\n                result += c;\n           \
    \ } else {\n                result += (char)((c - 'a' + 'A') + 2);\n         \
    \   }\n        } else {\n            result += c;\n        }\n    }\n    return\
    \ result;", "    std::string encoded = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        if(message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += message[i] + (message[i] - 'a' + 2) % 26 + 'a';\n        }\n        else\
    \ if(message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += message[i]\
    \ + (message[i] - 'A' + 2) % 26 + 'A';\n        }\n        else {\n          \
    \  encoded += message[i];\n        }\n    }\n    return encoded;", "    std::string\
    \ result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += c;\n        } else if (c >= 'A' && c <= 'Z') {\n      \
    \      result += c;\n        } else if (c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            result += c;\n        } else {\n            result +=\
    \ c;\n            result += c;\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] + (message[i]\
    \ - 'a' + 'A') * 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + (message[i] - 'A' + 'a') * 2;\n      \
    \  } else {\n            result += message[i];\n        }\n    }\n    return result;",
  "    std::string result;\n    for (auto c : message) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result.push_back('2');\n\
    \            result.push_back(c);\n        } else {\n            result.push_back(c);\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] + 2;\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 2;\n    \
    \    } else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;", "    std::string encoded_message;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] ==\
    \ 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded_message.push_back(message[i]);\n\
    \            encoded_message.push_back(message[i + 2]);\n        } else {\n  \
    \          encoded_message.push_back(message[i]);\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result;\n    for (int i = 0; i < message.size();\
    \ ++i) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] ==\
    \ 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n    \
    \        result += message[i];\n            result += message[i + 2];\n      \
    \  } else {\n            result += message[i];\n        }\n    }\n    return result;",
  "    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' ||\
    \ message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] ==\
    \ 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n    \
    \        encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i\
    \ + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n\
    \        }\n    }\n    return encoded_message;", "    std::string result;\n  \
    \  for(int i = 0; i < message.size(); i++) {\n        if(message[i] >= 'a' &&\
    \ message[i] <= 'z') {\n            result += message[i] + (message[i] - 'a' +\
    \ 2) % 26 + 'a';\n        } else if(message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result += message[i] + (message[i] - 'A' + 2) % 26 + 'A';\n     \
    \   } else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;", "    std::string encoded;\n    for (int i = 0; i < message.size();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded += message[i];\n        } else if (message[i] == ' ')\
    \ {\n            encoded += ' ';\n        } else if (message[i] == '.') {\n  \
    \          encoded += '.';\n        } else if (message[i] == ',') {\n        \
    \    encoded += ',';\n        } else if (message[i] == '!') {\n            encoded\
    \ += '!';\n        } else if (message[i] == '?') {\n            encoded += '?';\n\
    \        } else if (message[i] == '-') {\n            encoded += '-';\n      \
    \  } else if (message[i] == '_') {\n            encoded += '_';\n        } else\
    \ if (message[i] == '(') {\n            encoded += '(';\n        } else if (message[i]\
    \ == ')') {\n            encoded += ')';\n        } else if (message[i] == ':')\
    \ {\n            encoded += ':';\n        } else if (message[i] == ';') {\n  \
    \          encoded += ';';\n        } else if (message[i] == '=') {\n        \
    \    encoded += '=';\n        } else if (message[i] == '+') {\n            encoded\
    \ += '+';\n        } else if (message[i] == '*') {\n            encoded += '*';\n\
    \        } else if (message[i] == '%') {\n            encoded += '%';\n      \
    \  } else if (message[i] == '$') {\n            encoded += '$';\n        } else\
    \ if (message[i] == '#                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     ", "    std::string result;\n    for (auto c : message) {\n        if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result\
    \ += c;\n            result += c;\n        } else {\n            result += c;\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (char\
    \ c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n \
    \               result += toupper(c);\n            } else {\n                result\
    \ += c;\n            }\n        } else {\n            result += c;\n        }\n\
    \    }\n    return result;", "    std::string result;\n    for (auto c : message)\
    \ {\n        if (isalpha(c)) {\n            if (islower(c)) {\n              \
    \  result += toupper(c);\n            } else {\n                result += c;\n\
    \            }\n        } else {\n            result += c;\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (auto c : message) {\n\
    \        if (isalpha(c)) {\n            if (islower(c)) {\n                result\
    \ += c;\n            } else {\n                result += toupper(c);\n       \
    \     }\n        } else {\n            result += c;\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < message.size();\
    \ i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] ==\
    \ 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n\
    \            result += message[i + 2];\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += message[i] + 2;\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i]\
    \ - 2;\n        } else {\n            result += message[i];\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for(auto c : message) {\n\
    \        if(isalpha(c)) {\n            if(isupper(c)) {\n                result\
    \ += tolower(c);\n            } else {\n                result += toupper(c);\n\
    \            }\n        } else {\n            result += c;\n        }\n    }\n\
    \    return result;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            result += message[i] + 2 * (message[i] - 'a');\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i]\
    \ + 2 * (message[i] - 'A');\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n \
    \           result += message[i];\n            result += message[i + 2];\n   \
    \     } else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (auto c : message) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            result.push_back(c + 2);\n        } else\
    \ if (c >= 'A' && c <= 'Z') {\n            result.push_back(c - 2);\n        }\
    \ else if (c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result.push_back(c\
    \ + 2);\n        } else {\n            result.push_back(c);\n        }\n    }\n\
    \    return result;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ message.size(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            result += message[i] + 2;\n        } else if (message[i] >= 'A'\
    \ && message[i] <= 'Z') {\n            result += message[i] - 2;\n        } else\
    \ {\n            result += message[i];\n        }\n    }\n    return result;",
  "    std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += message[i] + 2 * (message[i] - 'a');\n        } else if (message[i] >= 'A'\
    \ && message[i] <= 'Z') {\n            encoded += message[i] + 2 * (message[i]\
    \ - 'A');\n        } else {\n            encoded += message[i];\n        }\n \
    \   }\n    return encoded;", "    std::string result;\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        char c = message[i];\n        if (c >= 'a'\
    \ && c <= 'z') {\n            result.push_back(c - 32);\n        } else if (c\
    \ >= 'A' && c <= 'Z') {\n            result.push_back(c);\n        } else if (c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result.push_back(c);\n\
    \            result.push_back(c);\n        } else {\n            result.push_back(c);\n\
    \        }\n    }\n    return result;", "    std::string encoded_message;\n  \
    \  for(int i = 0; i < message.length(); i++) {\n        if(message[i] >= 'a' &&\
    \ message[i] <= 'z') {\n            encoded_message.push_back(message[i] - 32);\n\
    \        }\n        else if(message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      encoded_message.push_back(message[i]);\n        }\n        else if(message[i]\
    \ == ' ') {\n            encoded_message.push_back(message[i]);\n        }\n \
    \       else if(message[i] == '.') {\n            encoded_message.push_back(message[i]);\n\
    \        }\n        else if(message[i] == ',') {\n            encoded_message.push_back(message[i]);\n\
    \        }\n        else if(message[i] == '?') {\n            encoded_message.push_back(message[i]);\n\
    \        }\n        else if(message[i] == '!') {\n            encoded_message.push_back(message[i]);\n\
    \        }\n        else if(message[i] == '-') {\n            encoded_message.push_back(message[i]);\n\
    \        }\n        else if(message[i] == '_') {\n            encoded_message.push_back(message[i]);\n\
    \        }\n        else if(message[i] == '(') {\n            encoded_message.push_back(message[i]);\n\
    \        }\n        else if(message[i] == ')') {\n            encoded_message.push_back(message[i]);\n\
    \        }\n        else if(message[i] == '=') {\n            encoded_message.push_back(message[i]);\n\
    \        }\n        else if(message[i] == '+') {\n            encoded_message.push_back(message[i]);\n\
    \        }\n        else if(message[i] == '@') {\n            encoded_message.push_back(message[i]);\n\
    \        }\n        else if(message[i] == '#                                 \
    \                                                                            \
    \                                                                       ", " \
    \   std::string result = \"\";\n    for (int i = 0; i < message.size(); i++) {\n\
    \        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i]\
    \ == 'o' || message[i] == 'u') {\n            result += message[i] + message[i\
    \ + 2];\n        } else {\n            result += message[i];\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (int i = 0; i < message.size();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] + 2 * (message[i] - 'a');\n        } else if (message[i] >= 'A'\
    \ && message[i] <= 'Z') {\n            result += message[i] + 2 * (message[i]\
    \ - 'A');\n        } else {\n            result += message[i];\n        }\n  \
    \  }\n    return result;", "    std::string result;\n    for (auto c : message)\
    \ {\n        if (isalpha(c)) {\n            if (islower(c)) {\n              \
    \  result.push_back(toupper(c));\n            } else {\n                result.push_back(tolower(c));\n\
    \            }\n        } else {\n            result.push_back(c);\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] + 2;\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 2;\n    \
    \    } else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < message.size();\
    \ ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] + 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] - 2;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (int i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] + message[i + 2];\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i]\
    \ + message[i + 2];\n        } else {\n            result += message[i];\n   \
    \     }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] + 2 * (message[i] - 'a');\n    \
    \    } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 2 * (message[i] - 'A');\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (auto c : message) {\n        if (isalpha(c)) {\n            if (islower(c))\
    \ {\n                result += toupper(c);\n            } else {\n           \
    \     result += c;\n            }\n        } else {\n            result += c;\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (auto\
    \ c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            result += c + c;\n        } else {\n            result\
    \ += c;\n        }\n    }\n    return result;", "    std::string result;\n   \
    \ for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' ||\
    \ message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] ==\
    \ 'u') {\n            result += message[i];\n            result += message[i +\
    \ 2];\n        } else {\n            result += message[i];\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (auto c : message) {\n\
    \        if (c >= 'a' && c <= 'z') {\n            result.push_back(c + 2);\n \
    \       } else if (c >= 'A' && c <= 'Z') {\n            result.push_back(c - 2);\n\
    \        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            result.push_back(c);\n        } else {\n            result.push_back(c);\n\
    \        }\n    }\n    return result;", "    std::string encoded_message;\n  \
    \  for(int i = 0; i < message.size(); i++) {\n        if(message[i] == 'a' ||\
    \ message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] ==\
    \ 'u' || message[i] == 'y') {\n            encoded_message.push_back(message[i]);\n\
    \            encoded_message.push_back(message[i + 2]);\n        }\n        else\
    \ {\n            encoded_message.push_back(message[i]);\n        }\n    }\n  \
    \  return encoded_message;", "    std::string result;\n    for (auto c : message)\
    \ {\n        if (isalpha(c)) {\n            if (islower(c)) {\n              \
    \  result += toupper(c);\n            } else {\n                result += c;\n\
    \            }\n        } else {\n            result += c;\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (int i = 0; i < message.size();\
    \ ++i) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] + 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] - 2;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    return result;", "    std::string encoded\
    \ = \"\";\n    for (int i = 0; i < message.size(); i++) {\n        if (message[i]\
    \ == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u' || message[i] == 'y') {\n            encoded += message[i];\n       \
    \     encoded += message[i + 2];\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    return encoded;", "    std::string result;\n    for (auto\
    \ c : message) {\n        if (c >= 'a' && c <= 'z') {\n            result += c\
    \ + (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n           \
    \ result += c + (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            result += c + (c + 2);\n    \
    \    } else {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' ||\
    \ message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] ==\
    \ 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n    \
    \        encoded += message[i];\n            encoded += message[i+2];\n      \
    \  } else {\n            encoded += message[i];\n        }\n    }\n    return\
    \ encoded;", "    std::string result;\n    for (int i = 0; i < message.size();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' ||\
    \ message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n           \
    \ result += message[i];\n            result += message[i + 2];\n        } else\
    \ {\n            result += message[i];\n        }\n    }\n    return result;",
  "    std::string result;\n    for (auto c : message) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + c;\n\
    \        } else {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n     \
    \   if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i]\
    \ == 'o' || message[i] == 'u') {\n            result.push_back(message[i]);\n\
    \            result.push_back(message[i + 2]);\n        } else {\n           \
    \ result.push_back(message[i]);\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += c + (c - 'a' + 'A');\n        } else if (c >= 'A' && c\
    \ <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        } else if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result\
    \ += c + (c + 2);\n        } else {\n            result += c;\n        }\n   \
    \ }\n    return result;", "    std::string result;\n    for(int i = 0; i < message.size();\
    \ i++) {\n        if(message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i]\
    \ - 'a' + 'A');\n        } else if(message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result.push_back(message[i]);\n        } else if(message[i] == 'a'\
    \ || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n            result.push_back(message[i] + 2);\n        } else {\n\
    \            result.push_back(message[i]);\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < message.size(); i++) {\n     \
    \   if (message[i] >= 'a' && message[i] <= 'z') {\n            result.push_back(message[i]\
    \ - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result.push_back(message[i]);\n        } else {\n            result.push_back(message[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < message.size(); ++i) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] - 'a' + 'A';\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i]\
    \ - 'A' + 'a';\n        } else if (message[i] == 'a' || message[i] == 'e' || message[i]\
    \ == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i]\
    \ + message[i + 2];\n        } else {\n            result += message[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (auto c\
    \ : message) {\n        if (c >= 'a' && c <= 'z') {\n            result.push_back(c\
    \ + 2);\n        } else if (c >= 'A' && c <= 'Z') {\n            result.push_back(c\
    \ - 2);\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            result.push_back(c);\n        } else {\n            result.push_back(c);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (char\
    \ c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n \
    \               result += toupper(c);\n            } else {\n                result\
    \ += c;\n            }\n        } else {\n            result += c;\n        }\n\
    \    }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ message.size(); ++i) {\n        if (message[i] == 'a' || message[i] == 'e' ||\
    \ message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n           \
    \ result.push_back(message[i + 2]);\n        } else {\n            result.push_back(message[i]);\n\
    \        }\n    }\n    return result;", "    std::string encoded;\n    for (int\
    \ i = 0; i < message.size(); i++) {\n        if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n \
    \           encoded += message[i];\n            encoded += message[i + 2];\n \
    \       } else {\n            encoded += message[i];\n        }\n    }\n    return\
    \ encoded;", "    std::string result = \"\";\n    for (int i = 0; i < message.size();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] + 2 * (message[i] - 'a');\n        } else if (message[i] >= 'A'\
    \ && message[i] <= 'Z') {\n            result += message[i] + 2 * (message[i]\
    \ - 'A');\n        } else {\n            result += message[i];\n        }\n  \
    \  }\n    return result;", "    std::string encoded;\n    for (int i = 0; i <\
    \ message.size(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' ||\
    \ message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n           \
    \ encoded += message[i];\n            encoded += message[i + 2];\n        } else\
    \ {\n            encoded += message[i];\n        }\n    }\n    return encoded;",
  "    std::string result;\n    for (auto c : message) {\n        if (isalpha(c))\
    \ {\n            if (islower(c)) {\n                result += toupper(c);\n  \
    \          } else {\n                result += c;\n            }\n        } else\
    \ {\n            result += c;\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result.push_back(c - 32);\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            result.push_back(c);\n        } else if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            result.push_back(c + 2);\n\
    \        } else {\n            result.push_back(c);\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] + 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] - 2;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (auto c : message) {\n        if (isalpha(c)) {\n            result +=\
    \ ((c >= 'a' && c <= 'z') ? (c - 'a' + 'A') : c);\n        }\n        else if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result\
    \ += c;\n            result += c;\n        }\n        else if (c == 'y') {\n \
    \           result += c;\n            result += 'Y';\n        }\n    }\n    return\
    \ result;", "    std::string encoded_message;\n    for(int i = 0; i < message.size();\
    \ i++) {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i'\
    \ || message[i] == 'o' || message[i] == 'u') {\n            encoded_message +=\
    \ message[i];\n            encoded_message += message[i+2];\n        }\n     \
    \   else {\n            encoded_message += message[i];\n        }\n    }\n   \
    \ return encoded_message;", "    std::string encoded_message;\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n \
    \           encoded_message.push_back(message[i]);\n            encoded_message.push_back(message[i\
    \ + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n\
    \        }\n    }\n    return encoded_message;", "    std::string result;\n  \
    \  for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n           \
    \ result += (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z') {\n   \
    \         result += (c - 'A' + 'a');\n        } else if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            result += (c + 2);\n   \
    \     } else {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string result;\n    for (auto c : message) {\n        if (c >= 'a' &&\
    \ c <= 'z') {\n            result += c + (c - 'a' + 'A');\n        } else if (c\
    \ >= 'A' && c <= 'Z') {\n            result += c + (c - 'A' + 'a');\n        }\
    \ else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \       result += c + (c + 2);\n        } else {\n            result += c;\n \
    \       }\n    }\n    return result;", "    std::string encoded;\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n \
    \           encoded += message[i + 2];\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    return encoded;", "    std::string encoded_message;\n\
    \    for (auto c : message) {\n        if (isalpha(c)) {\n            encoded_message\
    \ += (char)((c + 2) % 26 + 'A');\n        } else if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            encoded_message += (char)((c\
    \ + 2) % 26 + 'A');\n        } else {\n            encoded_message += c;\n   \
    \     }\n    }\n    return encoded_message;", "    std::string encoded_message;\n\
    \    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == 'a'\
    \ || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n            encoded_message.push_back(message[i] + message[i + 2]);\n\
    \        } else {\n            encoded_message.push_back(message[i]);\n      \
    \  }\n    }\n    return encoded_message;", "    std::string result;\n    for (auto\
    \ c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            result += c;\n            result += c;\n        } else\
    \ {\n            result += c;\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i];\n        } else if (message[i] == 'e' || message[i]\
    \ == 'E') {\n            result += message[i + 2];\n        } else if (message[i]\
    \ == 'i' || message[i] == 'I') {\n            result += message[i + 2];\n    \
    \    } else if (message[i] == 'o' || message[i] == 'O') {\n            result\
    \ += message[i + 2];\n        } else if (message[i] == 'u' || message[i] == 'U')\
    \ {\n            result += message[i + 2];\n        } else if (message[i] == 'y'\
    \ || message[i] == 'Y') {\n            result += message[i + 2];\n        } else\
    \ {\n            result += message[i];\n        }\n    }\n    return result;",
  "    std::string result;\n    for (auto c : message) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += c + c;\n\
    \        } else {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string encoded_message;\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' ||\
    \ message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n           \
    \ encoded_message += message[i];\n            encoded_message += message[i + 2];\n\
    \        } else {\n            encoded_message += message[i];\n        }\n   \
    \ }\n    return encoded_message;", "    std::string result;\n    for(int i = 0;\
    \ i < message.size(); i++) {\n        if(message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            result += message[i] + 2;\n        } else if(message[i] >= 'A'\
    \ && message[i] <= 'Z') {\n            result += message[i] - 2;\n        } else\
    \ {\n            result += message[i];\n        }\n    }\n    return result;",
  "    std::string encoded_message;\n    for (int i = 0; i < message.size(); i++)\
    \ {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' ||\
    \ message[i] == 'o' || message[i] == 'u') {\n            encoded_message.push_back(message[i\
    \ + 2]);\n        } else {\n            encoded_message.push_back(message[i]);\n\
    \        }\n    }\n    return encoded_message;"]
stop_tokens:
- "\n}"
