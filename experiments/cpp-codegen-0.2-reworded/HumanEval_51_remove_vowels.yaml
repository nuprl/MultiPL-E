name: HumanEval_51_remove_vowels
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function\
  \ that takes string and returns string without vowels.\n// >>> remove_vowels('')\n\
  // ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n\
  // ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\n\
  std::string remove_vowels(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = remove_vowels;\n    assert(candidate((\"\
  \")) == (\"\"));\n    assert(candidate((\"abcdef\\nghijklm\")) == (\"bcdf\\nghjklm\"\
  ));\n    assert(candidate((\"fedcba\")) == (\"fdcb\"));\n    assert(candidate((\"\
  eeeee\")) == (\"\"));\n    assert(candidate((\"acBAA\")) == (\"cB\"));\n    assert(candidate((\"\
  EcBOO\")) == (\"cB\"));\n    assert(candidate((\"ybcd\")) == (\"ybcd\"));\n}\n"
completions: ["    std::string result;\n    for (int i = 0; i < text.size(); ++i)\
    \ {\n        if (std::isalpha(text[i])) {\n            if (std::isalpha(text[i\
    \ + 1]) && std::isalpha(text[i - 1])) {\n                result.push_back(text[i]);\n\
    \            }\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (int i = 0; i < text.size(); ++i) {\n        if (isalpha(text[i])) {\n\
    \            if (text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i]\
    \ == 'o' || text[i] == 'u') {\n                continue;\n            }\n    \
    \        result.push_back(text[i]);\n        }\n    }\n    return result;", " \
    \   std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n       \
    \ if (isalpha(text[i])) {\n            if (text[i] == 'a' || text[i] == 'e' ||\
    \ text[i] == 'i' || text[i] == 'o' || text[i] == 'u') {\n                continue;\n\
    \            }\n            result.push_back(text[i]);\n        }\n    }\n   \
    \ return result;", "    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (auto c\
    \ : text) {\n        if (std::isalpha(c)) {\n            result += std::tolower(c);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (auto\
    \ c : text) {\n        if (std::isalpha(c)) {\n            if (std::tolower(c)\
    \ != 'a' && std::tolower(c) != 'e' && std::tolower(c) != 'i' && std::tolower(c)\
    \ != 'o' && std::tolower(c) != 'u') {\n                result.push_back(c);\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string result;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (vowels.find(text[i]) == std::string::npos) {\n         \
    \   result.push_back(text[i]);\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] !=\
    \ 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.length(); ++i) {\n      \
    \  if (std::isalpha(text[i])) {\n            result.push_back(std::tolower(text[i]));\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (std::isalpha(text[i]))\
    \ {\n            if (std::isalpha(text[i + 1]) && std::isalpha(text[i - 1])) {\n\
    \                result += text[i];\n            }\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n  \
    \      if (vowels.find(text[i]) == std::string::npos) {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (auto\
    \ c : text) {\n        if (std::isalpha(c)) {\n            if (std::isupper(c))\
    \ {\n                result.push_back(c);\n            }\n        }\n    }\n \
    \   return result;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E'\
    \ && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (auto c : text) {\n        if (std::isalpha(c)) {\n            if (std::isupper(c))\
    \ {\n                result.push_back(c);\n            }\n        }\n    }\n \
    \   return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ != std::string::npos) {\n            result.push_back(text[i]);\n        }\n\
    \    }\n    return result;", "    std::string result;\n    for (auto c : text)\
    \ {\n        if (std::isalpha(c)) {\n            if (std::isupper(c)) {\n    \
    \            result += c;\n            }\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result;\n    for (int\
    \ i = 0; i < text.size(); i++) {\n        if (vowels.find(text[i]) != std::string::npos)\
    \ {\n            result.push_back(text[i]);\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result;\n    for (int\
    \ i = 0; i < text.size(); i++) {\n        if (vowels.find(text[i]) != std::string::npos)\
    \ {\n            result.push_back(text[i]);\n        }\n    }\n    return result;",
  "    std::string result;\n    for (auto i = 0; i < text.size(); ++i) {\n       \
    \ if (std::isalpha(text[i]) && !std::isalpha(text[i + 1])) {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n    \
    \    if (vowels.find(text[i]) != std::string::npos) {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.size(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result.push_back(text[i]);\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result;\n\
    \    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ != std::string::npos) {\n            result.push_back(text[i]);\n        }\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ output = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            output += text[i];\n        }\n    }\n\
    \    return output;", "    std::string result;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (int i\
    \ = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result.push_back(text[i]);\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (std::isalpha(text[i]))\
    \ {\n            result += std::tolower(text[i]);\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < text.size(); ++i)\
    \ {\n        if (std::isalpha(text[i])) {\n            if (std::islower(text[i]))\
    \ {\n                result.push_back(text[i]);\n            }\n        }\n  \
    \  }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result;\n    for (auto c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            continue;\n        }\n        result.push_back(c);\n    }\n \
    \   return result;", "    std::string result;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (isalpha(text[i])) {\n            if (text[i] == 'a' || text[i]\
    \ == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u') {\n          \
    \      continue;\n            }\n            result.push_back(text[i]);\n    \
    \    }\n    }\n    return result;", "    std::string result;\n    for (auto c\
    \ : text) {\n        if (std::isalpha(c)) {\n            if (std::islower(c))\
    \ {\n                result += std::tolower(c);\n            } else {\n      \
    \          result += c;\n            }\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if\
    \ (std::isalpha(text[i])) {\n            result += std::tolower(text[i]);\n  \
    \      }\n    }\n    return result;", "    std::string result;\n    for (int i\
    \ = 0; i < text.size(); i++) {\n        if (std::isalpha(text[i])) {\n       \
    \     result.push_back(std::tolower(text[i]));\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (isalpha(text[i])) {\n            if (text[i] == 'a' || text[i] ==\
    \ 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u') {\n             \
    \   continue;\n            }\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n  \
    \      if (vowels.find(text[i]) != std::string::npos) {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n    \
    \    if (vowels.find(text[i]) != std::string::npos) {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n    \
    \    if (vowels.find(text[i]) != std::string::npos) {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (isalpha(text[i])) {\n        \
    \    if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o'\
    \ && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n                result += text[i];\n          \
    \  }\n        }\n    }\n    return result;", "    std::string result = \"\";\n\
    \    for (int i = 0; i < text.length(); i++) {\n        if (std::isalpha(text[i]))\
    \ {\n            result += std::tolower(text[i]);\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < text.length(); ++i)\
    \ {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (auto\
    \ c : text) {\n        if (std::isalpha(c)) {\n            if (std::isupper(c))\
    \ {\n                result += c;\n            }\n        } else {\n         \
    \   result += c;\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (std::isalpha(text[i])) {\n            result += std::tolower(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.size(); ++i) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result.push_back(text[i]);\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); ++i) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result.push_back(text[i]);\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result;\n\
    \    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result.push_back(text[i]);\n        }\n\
    \    }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ text.size(); ++i) {\n        if (isalpha(text[i])) {\n            if (text[i]\
    \ == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u')\
    \ {\n                continue;\n            }\n            result += text[i];\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (isalpha(text[i])) {\n        \
    \    result.push_back(tolower(text[i]));\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result;\n    for (auto\
    \ c : text) {\n        if (vowels.find(c) == std::string::npos) {\n          \
    \  result.push_back(c);\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); ++i) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) != std::string::npos)\
    \ {\n            result.push_back(text[i]);\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n      \
    \  if (isalpha(text[i])) {\n            if (isalpha(text[i + 1])) {\n        \
    \        if (isalpha(text[i + 2])) {\n                    if (isalpha(text[i +\
    \ 3])) {\n                        if (isalpha(text[i + 4])) {\n              \
    \              if (isalpha(text[i + 5])) {\n                                if\
    \ (isalpha(text[i + 6])) {\n                                    if (isalpha(text[i\
    \ + 7])) {\n                                        if (isalpha(text[i + 8]))\
    \ {\n                                            if (isalpha(text[i + 9])) {\n\
    \                                                if (isalpha(text[i + 10])) {\n\
    \                                                    result += text[i];\n    \
    \                                            }\n                             \
    \                   else {\n                                                 \
    \   result += text[i + 1];\n                                                }\n\
    \                                            }\n                             \
    \               else {\n                                                result\
    \ += text[i + 2];\n                                            }\n           \
    \                             }\n                                        else\
    \ {\n                                            result += text[i + 3];\n    \
    \                                    }\n                                    }\n\
    \                                    else {\n                                \
    \        result += text[i + 4];\n                                    }\n     \
    \                           }\n                                else {\n      \
    \                              result += text[i + 5];\n                      \
    \          }\n                            }\n                            else\
    \ {\n                                result += text[i + 6];\n                \
    \            }\n                        }\n                        else {\n  \
    \                          result += text[i + 7];\n                        }\n\
    \                    }\n                    else {\n                        result\
    \ += text[i + 8];\n                    }\n                }\n                else\
    \ {\n                    result += text[i + 9];\n                }\n         \
    \   }\n            else {\n                result += text[i + 1];\n          \
    \  }\n        }\n        else {\n            result += text[i];\n        }\n \
    \   }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ text.size(); ++i) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E'\
    \ && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (std::isalpha(text[i]))\
    \ {\n            if (std::tolower(text[i]) != 'a' && std::tolower(text[i]) !=\
    \ 'e' && std::tolower(text[i]) != 'i' && std::tolower(text[i]) != 'o' && std::tolower(text[i])\
    \ != 'u' && std::tolower(text[i]) != 'y') {\n                result += text[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (int i = 0; i < text.size(); i++) {\n        if (isalpha(text[i])) {\n\
    \            if (isalpha(text[i + 1]) && !isalpha(text[i + 2])) {\n          \
    \      result += text[i];\n            }\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) != std::string::npos)\
    \ {\n            result.push_back(text[i]);\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n  \
    \      if (vowels.find(text[i]) != std::string::npos) {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.size(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result.push_back(text[i]);\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result.push_back(text[i]);\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (isalpha(text[i])) {\n            if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'y')\
    \ {\n                result += text[i];\n            }\n        }\n    }\n   \
    \ return result;", "    std::string result;\n    for (auto c : text) {\n     \
    \   if (std::isalpha(c)) {\n            if (std::isupper(c)) {\n             \
    \   result.push_back(std::tolower(c));\n            } else {\n               \
    \ result.push_back(c);\n            }\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if\
    \ (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i]\
    \ != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O'\
    \ && text[i] != 'U') {\n            result.push_back(text[i]);\n        }\n  \
    \  }\n    return result;", "    std::string result;\n    for (auto &c : text)\
    \ {\n        if (std::isalpha(c)) {\n            if (std::islower(c)) {\n    \
    \            result.push_back(std::toupper(c));\n            } else {\n      \
    \          result.push_back(c);\n            }\n        }\n    }\n    return result;",
  "    std::string result;\n    for (auto c : text) {\n        if (std::isalpha(c))\
    \ {\n            if (std::isupper(c)) {\n                result += std::tolower(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' &&\
    \ text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (std::isalpha(text[i]))\
    \ {\n            if (std::tolower(text[i]) == 'a' || std::tolower(text[i]) ==\
    \ 'e' || std::tolower(text[i]) == 'i' || std::tolower(text[i]) == 'o' || std::tolower(text[i])\
    \ == 'u') {\n                continue;\n            }\n            result += text[i];\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (std::isalpha(text[i])) {\n   \
    \         result += std::tolower(text[i]);\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if\
    \ (std::isalpha(text[i])) {\n            result.push_back(std::tolower(text[i]));\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.size(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result.push_back(text[i]);\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] !=\
    \ 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result.push_back(text[i]);\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (int i\
    \ = 0; i < text.size(); ++i) {\n        if (isalpha(text[i])) {\n            result.push_back(tolower(text[i]));\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.size(); ++i) {\n        if (std::isalpha(text[i])) {\n     \
    \       if (std::tolower(text[i]) != 'a' && std::tolower(text[i]) != 'e' && std::tolower(text[i])\
    \ != 'i' && std::tolower(text[i]) != 'o' && std::tolower(text[i]) != 'u') {\n\
    \                result.push_back(std::tolower(text[i]));\n            }\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (auto i\
    \ = 0; i < text.size(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' &&\
    \ text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result.push_back(text[i]);\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (std::isalpha(text[i]))\
    \ {\n            if (std::tolower(text[i]) != 'a' && std::tolower(text[i]) !=\
    \ 'e' && std::tolower(text[i]) != 'i' && std::tolower(text[i]) != 'o' && std::tolower(text[i])\
    \ != 'u' && std::tolower(text[i]) != 'y') {\n                result += std::tolower(text[i]);\n\
    \            }\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (int i = 0; i < text.size(); i++) {\n        if (std::isalpha(text[i]))\
    \ {\n            result.push_back(std::tolower(text[i]));\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ != std::string::npos) {\n            continue;\n        }\n        result.push_back(text[i]);\n\
    \    }\n    return result;", "    std::string result;\n    for (auto c : text)\
    \ {\n        if (std::isalpha(c)) {\n            if (std::isupper(c)) {\n    \
    \            result += c;\n            }\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if\
    \ (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i]\
    \ != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O'\
    \ && text[i] != 'U') {\n            result += text[i];\n        }\n    }\n   \
    \ return result;", "    std::string result;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (std::isalpha(text[i])) {\n            result.push_back(std::tolower(text[i]));\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.size(); ++i) {\n        if (isalpha(text[i])) {\n          \
    \  if (text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' ||\
    \ text[i] == 'u') {\n                continue;\n            }\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n  \
    \      if (vowels.find(text[i]) == std::string::npos) {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (auto c : text) {\n        if (std::isalpha(c)) {\n       \
    \     if (std::islower(c)) {\n                result += std::tolower(c);\n   \
    \         } else {\n                result += c;\n            }\n        }\n \
    \   }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ text.size(); i++) {\n        if (isalpha(text[i])) {\n            if (isalpha(text[i\
    \ + 1])) {\n                if (text[i] == 'a' && text[i + 1] == 'a') {\n    \
    \                i++;\n                } else if (text[i] == 'e' && text[i + 1]\
    \ == 'e') {\n                    i++;\n                } else if (text[i] == 'i'\
    \ && text[i + 1] == 'i') {\n                    i++;\n                } else if\
    \ (text[i] == 'o' && text[i + 1] == 'o') {\n                    i++;\n       \
    \         } else if (text[i] == 'u' && text[i + 1] == 'u') {\n               \
    \     i++;\n                } else {\n                    result += text[i];\n\
    \                }\n            } else {\n                result += text[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (std::isalpha(text[i])) {\n            result += std::tolower(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] !=\
    \ 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result.push_back(text[i]);\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result;\n    for (auto c : text) {\n        if (vowels.find(c)\
    \ == std::string::npos) {\n            result.push_back(c);\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ output = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ != std::string::npos) {\n            output += text[i];\n        }\n    }\n\
    \    return output;", "    std::string result;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (isalpha(text[i])) {\n            if (text[i] == 'a' || text[i]\
    \ == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u') {\n          \
    \      continue;\n            }\n            result.push_back(text[i]);\n    \
    \    }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n      \
    \  if (vowels.find(text[i]) != std::string::npos) {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (auto\
    \ c : text) {\n        if (std::isalpha(c)) {\n            if (std::islower(c))\
    \ {\n                result += c;\n            }\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (auto c : text) {\n        if (std::isalpha(c))\
    \ {\n            if (std::islower(c)) {\n                result += c;\n      \
    \      }\n        }\n    }\n    return result;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' &&\
    \ text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i]\
    \ != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U')\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string result;\n    for (int i = 0; i < text.length(); i++) {\n     \
    \   if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' &&\
    \ text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            result.push_back(text[i]);\n      \
    \  }\n    }\n    return result;", "    std::string result = \"\";\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (std::isalpha(text[i])) {\n   \
    \         result += std::tolower(text[i]);\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) != std::string::npos)\
    \ {\n            result.push_back(text[i]);\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n      \
    \  if (std::isalpha(text[i])) {\n            if (std::tolower(text[i]) == 'a')\
    \ {\n                result.push_back('a');\n            } else if (std::tolower(text[i])\
    \ == 'e') {\n                result.push_back('e');\n            } else if (std::tolower(text[i])\
    \ == 'i') {\n                result.push_back('i');\n            } else if (std::tolower(text[i])\
    \ == 'o') {\n                result.push_back('o');\n            } else if (std::tolower(text[i])\
    \ == 'u') {\n                result.push_back('u');\n            } else {\n  \
    \              result.push_back(text[i]);\n            }\n        }\n    }\n \
    \   return result;", "    std::string result;\n    for (int i = 0; i < text.size();\
    \ ++i) {\n        if (std::isalpha(text[i])) {\n            if (std::tolower(text[i])\
    \ != 'a' && std::tolower(text[i]) != 'e' && std::tolower(text[i]) != 'i' && std::tolower(text[i])\
    \ != 'o' && std::tolower(text[i]) != 'u') {\n                result.push_back(std::tolower(text[i]));\n\
    \            }\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (int i = 0; i < text.size(); ++i) {\n        if (std::isalpha(text[i]))\
    \ {\n            result.push_back(std::tolower(text[i]));\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ != std::string::npos) {\n            result.push_back(text[i]);\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' &&\
    \ text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result;\n    for (int i = 0; i < text.size();\
    \ ++i) {\n        if (vowels.find(text[i]) == std::string::npos) {\n         \
    \   result.push_back(text[i]);\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (auto c : text) {\n        if (std::isalpha(c)) {\n       \
    \     if (std::islower(c)) {\n                result += c;\n            }\n  \
    \      }\n    }\n    return result;", "    std::string result;\n    for (int i\
    \ = 0; i < text.length(); i++) {\n        if (isalpha(text[i])) {\n          \
    \  if (isalpha(text[i + 1]) && !isalpha(text[i + 2])) {\n                result.push_back(text[i]);\n\
    \            }\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (auto c : text) {\n        if (std::isalpha(c)) {\n            if (std::islower(c))\
    \ {\n                result.push_back(c);\n            }\n        }\n    }\n \
    \   return result;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ text.length(); i++) {\n        if (isalpha(text[i])) {\n            if (isupper(text[i]))\
    \ {\n                result += tolower(text[i]);\n            } else {\n     \
    \           result += text[i];\n            }\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (isalpha(text[i])) {\n            if (text[i] != 'a' && text[i] !=\
    \ 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u') {\n             \
    \   result += text[i];\n            }\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if\
    \ (std::isalpha(text[i]) && !std::isalpha(text[i + 1])) {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for(int\
    \ i = 0; i < text.length(); i++) {\n        if(text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result.push_back(text[i]);\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (isalpha(text[i])) {\n            result.push_back(tolower(text[i]));\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n    \
    \    if (vowels.find(text[i]) == std::string::npos) {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.size(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (std::isalpha(text[i])\
    \ && !std::isalpha(text[i + 1])) {\n            result.push_back(text[i]);\n \
    \       }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.size(); ++i) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (vowels.find(text[i]) != std::string::npos) {\n         \
    \   result.push_back(text[i]);\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result;\n    for (auto c : text) {\n        if (std::isalpha(c))\
    \ {\n            if (std::tolower(c) != 'a' && std::tolower(c) != 'e' && std::tolower(c)\
    \ != 'i' && std::tolower(c) != 'o' && std::tolower(c) != 'u') {\n            \
    \    result += c;\n            }\n        }\n    }\n    return result;", "   \
    \ std::string vowels = \"aeiouAEIOU\";\n    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) != std::string::npos)\
    \ {\n            result.push_back(text[i]);\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n      \
    \  if (isalpha(text[i])) {\n            result.push_back(tolower(text[i]));\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.size(); ++i) {\n        if (std::isalpha(text[i])) {\n     \
    \       if (std::tolower(text[i]) != 'a' && std::tolower(text[i]) != 'e' && std::tolower(text[i])\
    \ != 'i' && std::tolower(text[i]) != 'o' && std::tolower(text[i]) != 'u') {\n\
    \                result += text[i];\n            }\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < text.length(); ++i)\
    \ {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (auto\
    \ c : text) {\n        if (std::isalpha(c)) {\n            if (std::isupper(c))\
    \ {\n                result += c;\n            }\n        } else {\n         \
    \   result += c;\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string result;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (vowels.find(text[i]) != std::string::npos) {\n         \
    \   result.push_back(text[i]);\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (isalpha(text[i]))\
    \ {\n            if (isalpha(text[i + 1]) && isalpha(text[i - 1])) {\n       \
    \         result.push_back(text[i]);\n            }\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (auto c : text) {\n        if (std::isalpha(c))\
    \ {\n            if (std::islower(c)) {\n                result += c;\n      \
    \      }\n        }\n    }\n    return result;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != 'a' &&\
    \ text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i]\
    \ != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U')\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string result;\n    for (int i = 0; i < text.length(); i++) {\n     \
    \   if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' &&\
    \ text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            result.push_back(text[i]);\n      \
    \  }\n    }\n    return result;", "    std::string result;\n    for (int i = 0;\
    \ i < text.size(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E'\
    \ && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (auto\
    \ c : text) {\n        if (std::isalpha(c)) {\n            if (std::isupper(c))\
    \ {\n                result.push_back(c);\n            }\n        }\n    }\n \
    \   return result;", "    std::string result;\n    for (auto c : text) {\n   \
    \     if (std::isalpha(c)) {\n            if (std::isupper(c)) {\n           \
    \     result += c;\n            }\n        } else {\n            result += c;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n  \
    \      if (vowels.find(text[i]) == std::string::npos) {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); ++i) {\n        if (std::isalpha(text[i]))\
    \ {\n            if (std::tolower(text[i]) != 'a' && std::tolower(text[i]) !=\
    \ 'e' && std::tolower(text[i]) != 'i' && std::tolower(text[i]) != 'o' && std::tolower(text[i])\
    \ != 'u') {\n                result.push_back(std::tolower(text[i]));\n      \
    \      }\n        }\n    }\n    return result;", "    std::string result;\n  \
    \  for (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result.push_back(text[i]);\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if\
    \ (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i]\
    \ != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O'\
    \ && text[i] != 'U') {\n            result.push_back(text[i]);\n        }\n  \
    \  }\n    return result;", "    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E'\
    \ && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (int i = 0; i < text.length(); ++i) {\n        if (std::isalpha(text[i])\
    \ && !std::isalpha(text[i + 1])) {\n            result += text[i];\n        }\n\
    \    }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ text.length(); i++) {\n        if (isalpha(text[i])) {\n            result +=\
    \ tolower(text[i]);\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (auto i = 0; i < text.size(); ++i) {\n        if (std::isalpha(text[i]))\
    \ {\n            if (std::tolower(text[i]) != 'a' && std::tolower(text[i]) !=\
    \ 'e' && std::tolower(text[i]) != 'i' && std::tolower(text[i]) != 'o' && std::tolower(text[i])\
    \ != 'u' && std::tolower(text[i]) != 'y') {\n                result.push_back(std::tolower(text[i]));\n\
    \            }\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (auto i = 0; i < text.size(); ++i) {\n        if (isalpha(text[i])) {\n\
    \            if (text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i]\
    \ == 'o' || text[i] == 'u') {\n                continue;\n            }\n    \
    \        result.push_back(text[i]);\n        }\n    }\n    return result;", " \
    \   std::string result;\n    for (int i = 0; i < text.length(); i++) {\n     \
    \   if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' &&\
    \ text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            result.push_back(text[i]);\n      \
    \  }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n\
    \        if (vowels.find(text[i]) == std::string::npos) {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if\
    \ (isalpha(text[i])) {\n            if (text[i] == 'a' || text[i] == 'e' || text[i]\
    \ == 'i' || text[i] == 'o' || text[i] == 'u') {\n                continue;\n \
    \           }\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n      \
    \  if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' &&\
    \ text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            result += text[i];\n        }\n   \
    \ }\n    return result;", "    std::string result;\n    for (auto c : text) {\n\
    \        if (std::isalpha(c)) {\n            if (std::islower(c)) {\n        \
    \        result.push_back(c);\n            }\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n      \
    \  if (isalpha(text[i])) {\n            if (text[i] == 'a' || text[i] == 'e' ||\
    \ text[i] == 'i' || text[i] == 'o' || text[i] == 'u') {\n                continue;\n\
    \            }\n            result.push_back(text[i]);\n        }\n    }\n   \
    \ return result;", "    std::string result;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result.push_back(text[i]);\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (std::isalpha(text[i]))\
    \ {\n            if (std::tolower(text[i]) != 'a' && std::tolower(text[i]) !=\
    \ 'e' && std::tolower(text[i]) != 'i' && std::tolower(text[i]) != 'o' && std::tolower(text[i])\
    \ != 'u') {\n                result += std::tolower(text[i]);\n            }\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (auto\
    \ c : text) {\n        if (std::isalpha(c)) {\n            if (std::isupper(c))\
    \ {\n                result += c;\n            }\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (std::isalpha(text[i])) {\n            if (std::islower(text[i]))\
    \ {\n                result.push_back(std::toupper(text[i]));\n            } else\
    \ {\n                result.push_back(text[i]);\n            }\n        }\n  \
    \  }\n    return result;", "    std::string result;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (isalpha(text[i])) {\n            if (text[i] == 'a' || text[i]\
    \ == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u') {\n          \
    \      continue;\n            }\n            result += text[i];\n        }\n \
    \   }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (std::isalpha(text[i])) {\n       \
    \     result += std::tolower(text[i]);\n        }\n    }\n    return result;",
  "    std::string result;\n    for (auto c : text) {\n        if (std::isalpha(c))\
    \ {\n            if (std::isupper(c)) {\n                result += std::tolower(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (vowels.find(text[i])\
    \ != std::string::npos) {\n            result.push_back(text[i]);\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.size(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' &&\
    \ text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result;\n    for (auto ch : text)\
    \ {\n        if (vowels.find(ch) != std::string::npos) {\n            result.push_back(ch);\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n    \
    \    if (vowels.find(text[i]) != std::string::npos) {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (isalpha(text[i])) {\n        \
    \    if (isalpha(text[i + 1]) && !isalpha(text[i + 2])) {\n                result\
    \ += text[i];\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (auto c : text) {\n        if (std::isalpha(c)) {\n       \
    \     if (std::isupper(c)) {\n                result.push_back(std::tolower(c));\n\
    \            } else {\n                result.push_back(c);\n            }\n \
    \       }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n    \
    \    if (vowels.find(text[i]) != std::string::npos) {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string output = \"\";\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (vowels.find(text[i]) == std::string::npos) {\n            output.push_back(text[i]);\n\
    \        }\n    }\n    return output;", "    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (isalpha(text[i])) {\n        \
    \    if (text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o'\
    \ || text[i] == 'u') {\n                continue;\n            }\n           \
    \ result.push_back(text[i]);\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (vowels.find(text[i]) != std::string::npos) {\n         \
    \   result.push_back(text[i]);\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] !=\
    \ 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result.push_back(text[i]);\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < text.size(); i++)\
    \ {\n        if (std::isalpha(text[i])) {\n            if (std::tolower(text[i])\
    \ == 'a' || std::tolower(text[i]) == 'e' || std::tolower(text[i]) == 'i' || std::tolower(text[i])\
    \ == 'o' || std::tolower(text[i]) == 'u') {\n                continue;\n     \
    \       }\n            result.push_back(text[i]);\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < text.length(); ++i)\
    \ {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result.push_back(text[i]);\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (std::isalpha(text[i]))\
    \ {\n            result.push_back(std::tolower(text[i]));\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (auto c : text) {\n  \
    \      if (std::isalpha(c)) {\n            result += std::tolower(c);\n      \
    \  }\n    }\n    return result;", "    std::string result;\n    for (int i = 0;\
    \ i < text.size(); ++i) {\n        if (std::isalpha(text[i])) {\n            if\
    \ (std::tolower(text[i]) != 'a' && std::tolower(text[i]) != 'e' && std::tolower(text[i])\
    \ != 'i' && std::tolower(text[i]) != 'o' && std::tolower(text[i]) != 'u') {\n\
    \                result.push_back(text[i]);\n            }\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (isalpha(text[i])) {\n            result.push_back(tolower(text[i]));\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result.push_back(text[i]);\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < text.size(); ++i)\
    \ {\n        if (isalpha(text[i])) {\n            if (text[i] == 'a' || text[i]\
    \ == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u') {\n          \
    \      continue;\n            }\n            result.push_back(text[i]);\n    \
    \    }\n    }\n    return result;", "    std::string result = \"\";\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (std::isalpha(text[i]))\
    \ {\n            if (std::tolower(text[i]) != 'a' && std::tolower(text[i]) !=\
    \ 'e' && std::tolower(text[i]) != 'i' && std::tolower(text[i]) != 'o' && std::tolower(text[i])\
    \ != 'u' && std::tolower(text[i]) != 'y') {\n                result += text[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string result;\n    for (auto c : text) {\n    \
    \    if (vowels.find(c) == std::string::npos) {\n            result.push_back(c);\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (vowels.find(text[i]) != std::string::npos) {\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (std::isalpha(text[i])) {\n   \
    \         result += std::tolower(text[i]);\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.length(); ++i) {\n      \
    \  if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' &&\
    \ text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            result.push_back(text[i]);\n      \
    \  }\n    }\n    return result;", "    std::string result;\n    for (auto c :\
    \ text) {\n        if (std::isalpha(c)) {\n            if (std::islower(c)) {\n\
    \                result += c;\n            }\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string output;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            output.push_back(text[i]);\n        }\n    }\n    return output;",
  "    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if\
    \ (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i]\
    \ != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O'\
    \ && text[i] != 'U') {\n            result.push_back(text[i]);\n        }\n  \
    \  }\n    return result;", "    std::string result;\n    for (auto i = 0; i <\
    \ text.size(); i++) {\n        if (std::isalpha(text[i])) {\n            result\
    \ += std::tolower(text[i]);\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (vowels.find(text[i]) == std::string::npos) {\n         \
    \   result.push_back(text[i]);\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
