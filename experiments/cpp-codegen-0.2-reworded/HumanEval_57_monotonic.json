{
  "name": "HumanEval_57_monotonic",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nbool monotonic(std::vector<long> l) {\n",
  "tests": "}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9, (long)9, (long)9, (long)9}))) == (true));\n}\n",
  "completions": [
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) return false;\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (last < l[i]) {\n      last = l[i];\n    } else if (last > l[i]) {\n      return false;\n    }\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) return false;\n    }\n    return true;",
    "  if (l.size() <= 1) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() <= 1) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] <= l[1]) return true;\n  return false;",
    "    if (l.size() <= 1) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] < l[1]) return true;\n  return false;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "  if (l.size() <= 1) return true;\n  std::sort(l.begin(), l.end());\n  return (l[0] < l[1]);",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return (l[0] <= l[1]);\n  if (l[0] > l[1]) return false;\n  for (int i = 1; i < l.size() - 1; ++i) {\n    if (l[i] > l[i + 1]) return false;\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "  if (l.size() <= 1) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] < l[1]) return true;\n  return false;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() <= 1) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); i++) {\n        if (l[i] < l[i-1]) return false;\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); ++i) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] < l[1]) return true;\n  return false;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "  if (l.size() <= 1) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() <= 1) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) return false;\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (last < l[i]) {\n            last = l[i];\n        } else if (last > l[i]) {\n            return false;\n        }\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] < l[1]) return true;\n  return false;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (last > l[i]) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (last > l[i]) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() <= 1) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] < l[1]) return true;\n    return false;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] <= l[1]) return true;\n  return false;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] < l[1]) return true;\n  return false;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); ++i) {\n        if (l[i] < l[i - 1]) return false;\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] < l[1]) return true;\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); ++i) {\n        if (l[i] < l[i - 1]) return false;\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() <= 1) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  std::sort(l.begin(), l.end());\n  return (l[0] <= l[1]);",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() <= 1) return true;\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] > l[j]) return false;\n        if (l[i] < l[j]) return true;\n        i++;\n        j--;\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] < l[1]) return true;\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n    if (l[i] > l[i - 1]) return true;\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() <= 1) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) return false;\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  std::sort(l.begin(), l.end());\n  return l[0] <= l[1];",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); ++i) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); ++i) {\n        if (l[i] < l[i - 1]) return false;\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] <= l[1]) return true;\n    return false;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i-1]) return false;\n  }\n  return true;",
    "    if (l.size() <= 1) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() <= 1) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); i++) {\n        if (l[i] < l[i-1]) return false;\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 1; i < l.size() - 1; i++) {\n    if (l[i] > l[i + 1]) return false;\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); ++i) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) return false;\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] <= l[1]) return true;\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); i++) {\n        if (l[i] <= l[i - 1]) return false;\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (last < l[i]) {\n            last = l[i];\n        } else if (last > l[i]) {\n            return false;\n        }\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return (l[0] <= l[1]);\n    if (l[0] > l[1]) return false;\n    for (int i = 1; i < l.size() - 1; i++) {\n        if (l[i] > l[i + 1]) return false;\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() <= 1) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] < l[1]) return true;\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); ++i) {\n        if (l[i] < l[i - 1]) return false;\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return (l[0] <= l[1]);\n  if (l[0] > l[1]) return false;\n  for (int i = 1; i < l.size() - 1; i++) {\n    if (l[i] > l[i + 1]) return false;\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] < l[1]) return true;\n  return false;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  std::sort(l.begin(), l.end());\n  return l[0] <= l[1];",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (last > l[i]) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] < l[1]) return true;\n  return false;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return (l[0] <= l[1]);\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() <= 1) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (last > l[i]) return false;\n    if (last < l[i]) last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] <= l[1]) return true;\n    return false;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) return false;\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); ++i) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); ++i) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (last > l[i]) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() <= 1) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (last > l[i]) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() <= 1) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l.size() == 3) return l[0] <= l[1] && l[1] <= l[2];\n    if (l.size() == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n    if (l.size() == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n    if (l.size() == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n    if (l.size() == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n    if (l.size() == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n    if (l.size() == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n    if (l.size() == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4]",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return (l[0] <= l[1]);\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) return false;\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] <= l[1]) return true;\n  return false;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (last > l[i]) return false;\n        if (last < l[i]) last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  std::sort(l.begin(), l.end());\n  return l[0] <= l[1];",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] < l[1]) return true;\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  if (l[0] < l[1]) return true;\n  if (l[0] > l[1]) return false;\n  for (int i = 2; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (last > l[i]) return false;\n        if (last < l[i]) last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] > l[1]) return false;\n    for (int i = 1; i < l.size() - 1; i++) {\n        if (l[i] > l[i + 1]) return false;\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (last < l[i]) {\n            last = l[i];\n        } else if (last > l[i]) {\n            return false;\n        }\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); i++) {\n        if (l[i] < l[i-1]) return false;\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (last > l[i]) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return (l[0] <= l[1]);\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); i++) {\n        if (l[i] < l[i-1]) return false;\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); ++i) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    if (l.size() == 2) return l[0] <= l[1];\n    if (l[0] > l[1]) return false;\n    for (int i = 2; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) return false;\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return (l[0] <= l[1]);\n  if (l[0] > l[1]) return false;\n  for (int i = 1; i < l.size() - 1; ++i) {\n    if (l[i] > l[i + 1]) return false;\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  if (l.size() == 2) return l[0] <= l[1];\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;",
    "  if (l.size() < 2) return true;\n  long last = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < last) return false;\n    last = l[i];\n  }\n  return true;",
    "    if (l.size() < 2) return true;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < last) return false;\n        last = l[i];\n    }\n    return true;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}