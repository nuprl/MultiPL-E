{
  "name": "HumanEval_140_fix_spaces",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n",
  "tests": "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.find(\"  \") != std::string::npos) {\n        result = result.replace(\"  \", \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpdp0rpf8b.cpp: In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpdp0rpf8b.cpp:24:42: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(const char [3], const char [2])\u2019\n   24 |         result = result.replace(\"  \", \"_\");\n      |                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpdp0rpf8b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 |       replace(size_type __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7: note:   candidate expects 3 arguments, 2 provided\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp8oc6jf8c: /tmp/tmp8oc6jf8c.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp_bpaudf5: /tmp/tmp_bpaudf5.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp1m1c5ie2: /tmp/tmp1m1c5ie2.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpbgwqiu_d: /tmp/tmpbgwqiu_d.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 1; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpgr_jb5eb: /tmp/tmpgr_jb5eb.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length(); i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp7224ahe8: /tmp/tmp7224ahe8.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpry1xjpet: /tmp/tmpry1xjpet.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result[0] = '_';\n        result[1] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpvjv3fr03: /tmp/tmpvjv3fr03.cpp:34: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size(); i++) {\n            if (result[i] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpm05pbg3x: /tmp/tmpm05pbg3x.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\" \", pos)) != std::string::npos) {\n        if (pos > 0 && text[pos - 1] == ' ') {\n            text.erase(pos, 1);\n            text.insert(pos, \"_\");\n            pos++;\n        }\n    }\n    pos = 0;\n    while ((pos = text.find(\"  \", pos)) != std::string::npos) {\n        if (pos > 0 && text[pos - 1] == ' ') {\n            text.erase(pos, 1);\n            text.insert(pos, \"_\");\n            pos++;\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length(); i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpksl3n4cx: /tmp/tmpksl3n4cx.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpozdysiyd: /tmp/tmpozdysiyd.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"__\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpox5vei6g: /tmp/tmpox5vei6g.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp4hf0rwx0: /tmp/tmp4hf0rwx0.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        }\n        i++;\n    }\n    i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ' && text[i+1] == ' ') {\n            text[i] = '-';\n            text.erase(i+1, 1);\n        }\n        i++;\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpbdh7unzx: /tmp/tmpbdh7unzx.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp6lvf8u71: /tmp/tmp6lvf8u71.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpur9xd_1k: /tmp/tmpur9xd_1k.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp_w8nxa5p: /tmp/tmp_w8nxa5p.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpgad4vkn2: /tmp/tmpgad4vkn2.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp_w8nxa5p: /tmp/tmp_w8nxa5p.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 1; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpgr_jb5eb: /tmp/tmpgr_jb5eb.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        }\n        i++;\n    }\n    i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ' && text[i+1] == ' ') {\n            text[i] = '-';\n            text[i+1] = '-';\n            i++;\n        }\n        i++;\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp9j7sv1vr: /tmp/tmp9j7sv1vr.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp_w8nxa5p: /tmp/tmp_w8nxa5p.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\" \", pos)) != std::string::npos) {\n        if (pos > 0 && text[pos - 1] == ' ') {\n            text.replace(pos, 1, \"_\");\n            pos += 1;\n        } else {\n            text.replace(pos, 1, \"_\");\n            pos += 1;\n        }\n    }\n    pos = 0;\n    while ((pos = text.find(\"  \", pos)) != std::string::npos) {\n        if (pos > 0 && text[pos - 1] == ' ') {\n            text.replace(pos, 2, \"_\");\n            pos += 1;\n        } else {\n            text.replace(pos, 2, \"_\");\n            pos += 1;\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmph7zypjwr: /tmp/tmph7zypjwr.cpp:42: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\" \", pos)) != std::string::npos) {\n        if (pos > 0 && text[pos - 1] == ' ') {\n            text.erase(pos, 1);\n            text.insert(pos, \"_\");\n            pos += 2;\n        } else {\n            pos++;\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpzzcnndb4: /tmp/tmpzzcnndb4.cpp:30: int main(): Assertion `candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string ret = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            ret += '_';\n        } else {\n            ret += text[i];\n        }\n    }\n    if (ret.length() > 2) {\n        for (int i = 0; i < ret.length() - 2; i++) {\n            if (ret[i] == ' ' && ret[i + 1] == ' ' && ret[i + 2] == ' ') {\n                ret[i] = '-';\n                ret.erase(i + 1, 2);\n            }\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmp2kmiwf4u: /tmp/tmp2kmiwf4u.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n            j = i + 1;\n        } else {\n            i++;\n        }\n    }\n    while (j < text.length()) {\n        if (text[j] == ' ' && text[j - 1] == ' ') {\n            text[j] = '-';\n            j++;\n        } else {\n            j++;\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpnfzmmeaf: /tmp/tmpnfzmmeaf.cpp:40: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpca02xn5c: /tmp/tmpca02xn5c.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpopxnsixb: /tmp/tmpopxnsixb.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i+1] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmplm__q8ps: /tmp/tmplm__q8ps.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result = result.substr(1);\n        for (int i = 0; i < result.length(); i++) {\n            if (result[i] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmp3b40qysq: /tmp/tmp3b40qysq.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result[0] = '-';\n        result[1] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmp5epzf0a5: /tmp/tmp5epzf0a5.cpp:34: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; ++i) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpef310itv: /tmp/tmpef310itv.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpjncidt9p: /tmp/tmpjncidt9p.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result = result.substr(2);\n        for (int i = 0; i < result.size(); i++) {\n            if (result[i] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmprq4h3sln: /tmp/tmprq4h3sln.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpbgwqiu_d: /tmp/tmpbgwqiu_d.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpcvipryzb: /tmp/tmpcvipryzb.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpcvipryzb: /tmp/tmpcvipryzb.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpsk4fixme: /tmp/tmpsk4fixme.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpanxyr5qe: /tmp/tmpanxyr5qe.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpsk4fixme: /tmp/tmpsk4fixme.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else {\n            result += c;\n        }\n    }\n    if (result.size() > 2) {\n        auto it = result.begin();\n        while (it != result.end()) {\n            if (*it == ' ' && *(it + 1) == ' ') {\n                *it = '-';\n                it += 2;\n            } else {\n                it++;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmp4e2f58wd: /tmp/tmp4e2f58wd.cpp:41: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpozdysiyd: /tmp/tmpozdysiyd.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpcvipryzb: /tmp/tmpcvipryzb.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpy7639_s8: /tmp/tmpy7639_s8.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string::size_type pos = 0;\n    while ((pos = text.find(' ', pos)) != std::string::npos) {\n        if (pos > 0 && text[pos - 1] == ' ') {\n            text.erase(pos, 1);\n            text.insert(pos, '_');\n        }\n        pos++;\n    }\n    pos = 0;\n    while ((pos = text.find(' ', pos)) != std::string::npos) {\n        if (pos > 0 && text[pos - 1] == ' ' && text[pos + 1] == ' ') {\n            text.erase(pos, 1);\n            text.insert(pos, '-');\n        }\n        pos++;\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "/tmp/tmpfy3thm7t.cpp: In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpfy3thm7t.cpp:19:33: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::size_type&, char)\u2019\n   19 |             text.insert(pos, '_');\n      |                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpfy3thm7t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; ty",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpbgwqiu_d: /tmp/tmpbgwqiu_d.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size(); i++) {\n            if (result[i] == ' ' && result[i+1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmp6sxn900o: /tmp/tmp6sxn900o.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size(); i++) {\n            if (result[i] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmps39allh5: /tmp/tmps39allh5.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 1; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpgr_jb5eb: /tmp/tmpgr_jb5eb.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp6lvf8u71: /tmp/tmp6lvf8u71.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        }\n        i++;\n    }\n    i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ' && text[i + 1] == ' ') {\n            text[i] = '-';\n            text[i + 1] = '-';\n            i++;\n        }\n        i++;\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpza0jeonw: /tmp/tmpza0jeonw.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size(); i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpga5414it: /tmp/tmpga5414it.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpbgwqiu_d: /tmp/tmpbgwqiu_d.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpsk4fixme: /tmp/tmpsk4fixme.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmp3ag3475a: /tmp/tmp3ag3475a.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpy7639_s8: /tmp/tmpy7639_s8.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            count++;\n            if (count == 2) {\n                text[i] = '_';\n                count = 0;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmpc0xceyan: /tmp/tmpc0xceyan.cpp:32: int main(): Assertion `candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpjncidt9p: /tmp/tmpjncidt9p.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result.erase(0, 1);\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmpjgf36fjn: /tmp/tmpjgf36fjn.cpp:34: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpy7639_s8: /tmp/tmpy7639_s8.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmp3mjvq60s: /tmp/tmp3mjvq60s.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpy7639_s8: /tmp/tmpy7639_s8.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp6lvf8u71: /tmp/tmp6lvf8u71.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string ret = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            ret += '_';\n        } else {\n            ret += text[i];\n        }\n    }\n    if (ret.size() > 2) {\n        for (int i = 0; i < ret.size() - 2; i++) {\n            if (ret[i] == ' ' && ret[i + 1] == ' ' && ret[i + 2] == ' ') {\n                ret[i] = '-';\n                ret[i + 1] = '-';\n                ret[i + 2] = '-';\n            }\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmp45t4fd1o: /tmp/tmp45t4fd1o.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length(); i++) {\n            if (result[i] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmpgji9khdq: /tmp/tmpgji9khdq.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '_';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmpj4zgs_e_: /tmp/tmpj4zgs_e_.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (auto i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result.push_back('_');\n        } else {\n            result.push_back(text[i]);\n        }\n    }\n    while (result.size() > 0 && result[0] == ' ') {\n        result.erase(0, 1);\n    }\n    while (result.size() > 0 && result[result.size() - 1] == ' ') {\n        result.erase(result.size() - 1, 1);\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result.erase(0, 1);\n    }\n    if (result.size() > 2 && result[result.size() - 1] == ' ' && result[result.size() - 2] == ' ') {\n        result.erase(result.size() - 1, 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmp_el1mkiy: /tmp/tmp_el1mkiy.cpp:42: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 1; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpgr_jb5eb: /tmp/tmpgr_jb5eb.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpry1xjpet: /tmp/tmpry1xjpet.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result.push_back('_');\n        } else {\n            result.push_back(text[i]);\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmpb8u8lcmd: /tmp/tmpb8u8lcmd.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmprbkzin47: /tmp/tmprbkzin47.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    int n = text.size();\n    std::string res = \"\";\n    for (int i = 0; i < n; i++) {\n        if (text[i] == ' ') {\n            res += '_';\n        } else {\n            res += text[i];\n        }\n    }\n    if (res.size() > 2 && res[0] == ' ') {\n        res[0] = '-';\n    }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmp0fsewsrj: /tmp/tmp0fsewsrj.cpp:34: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '_';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmpsl32sjzg: /tmp/tmpsl32sjzg.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result.substr(result.length() - 2, 2) == \"  \") {\n        result = result.substr(0, result.length() - 2);\n        result += '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmpd2y6m7h9: /tmp/tmpd2y6m7h9.cpp:34: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '_';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmpdiwtjbds: /tmp/tmpdiwtjbds.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result.substr(result.size() - 2, 2) == \"  \") {\n        result = result.substr(0, result.size() - 2);\n        result += '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmp90e6haoy: /tmp/tmp90e6haoy.cpp:34: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size(); i++) {\n            if (result[i] == ' ' && result[i+1] == ' ') {\n                result[i] = '-';\n                result.erase(i+1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmp55yhh9zc: /tmp/tmp55yhh9zc.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpanxyr5qe: /tmp/tmpanxyr5qe.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string ret = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            ret += '_';\n        } else {\n            ret += text[i];\n        }\n    }\n    if (ret.length() > 2 && ret.find(\"  \") != std::string::npos) {\n        ret = ret.replace(\"  \", \"_\");\n    }\n    return ret;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "/tmp/tmpdj7qt4sc.cpp: In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpdj7qt4sc.cpp:24:36: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(const char [3], const char [2])\u2019\n   24 |         ret = ret.replace(\"  \", \"_\");\n      |                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpdj7qt4sc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 |       replace(size_type __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7: note:   candidate expects 3 arguments, 2 provided\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/bas",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmprbkzin47: /tmp/tmprbkzin47.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string ret = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            ret += '_';\n        } else {\n            ret += text[i];\n        }\n    }\n    while (ret.find(\"  \") != std::string::npos) {\n        ret.replace(ret.find(\"  \"), 2, \"__\");\n    }\n    return ret;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmpywa__2pz: /tmp/tmpywa__2pz.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result.push_back('_');\n        } else {\n            result.push_back(text[i]);\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size(); i++) {\n            if (result[i] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmp_c2puz6m: /tmp/tmp_c2puz6m.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result.push_back('_');\n        } else {\n            result.push_back(text[i]);\n        }\n    }\n    while (result.size() > 0 && result[0] == ' ') {\n        result.erase(0, 1);\n    }\n    while (result.size() > 0 && result[result.size() - 1] == ' ') {\n        result.erase(result.size() - 1, 1);\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 1);\n                result.erase(i + 1, 1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmp4c70sgh3: /tmp/tmp4c70sgh3.cpp:45: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result = result.substr(2);\n        for (int i = 0; i < result.length(); i++) {\n            if (result[i] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmpf42wv4p7: /tmp/tmpf42wv4p7.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmp_69k_ngs: /tmp/tmp_69k_ngs.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (std::string::size_type i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result.push_back('_');\n        } else {\n            result.push_back(text[i]);\n        }\n    }\n    while (result.size() > 0 && result[0] == ' ') {\n        result.erase(result.begin());\n    }\n    while (result.size() > 0 && result[result.size() - 1] == ' ') {\n        result.erase(result.end() - 1);\n    }\n    if (result.size() > 2) {\n        for (std::string::size_type i = 0; i < result.size() - 2; ++i) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmp4hz77kpc: /tmp/tmp4hz77kpc.cpp:44: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpbgwqiu_d: /tmp/tmpbgwqiu_d.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size(); i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpjrmzmvi3: /tmp/tmpjrmzmvi3.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result[0] = '_';\n        result[1] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpvjv3fr03: /tmp/tmpvjv3fr03.cpp:34: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.find(\"  \") != std::string::npos) {\n        result = result.replace(\"  \", \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpdp0rpf8b.cpp: In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpdp0rpf8b.cpp:24:42: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(const char [3], const char [2])\u2019\n   24 |         result = result.replace(\"  \", \"_\");\n      |                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpdp0rpf8b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 |       replace(size_type __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7: note:   candidate expects 3 arguments, 2 provided\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpcvipryzb: /tmp/tmpcvipryzb.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 1; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpt2gg125j: /tmp/tmpt2gg125j.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpsk4fixme: /tmp/tmpsk4fixme.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpcvipryzb: /tmp/tmpcvipryzb.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpy3auilfd: /tmp/tmpy3auilfd.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpsk4fixme: /tmp/tmpsk4fixme.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result.push_back('_');\n        } else {\n            result.push_back(text[i]);\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpilymv779: /tmp/tmpilymv779.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp1m1c5ie2: /tmp/tmp1m1c5ie2.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size(); i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpcfy5h7uk: /tmp/tmpcfy5h7uk.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n            j = i;\n        }\n        i++;\n    }\n    while (j < text.length()) {\n        if (text[j] == ' ' && text[j + 1] == ' ') {\n            text[j] = '-';\n            text[j + 1] = '-';\n        }\n        j++;\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpjat75o1s: /tmp/tmpjat75o1s.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n            j = i;\n        }\n        i++;\n    }\n    while (j < text.length()) {\n        if (text[j] == ' ' && text[j+1] == ' ') {\n            text[j] = '-';\n            text[j+1] = '-';\n        }\n        j++;\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpkqiyas_h: /tmp/tmpkqiyas_h.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpopxnsixb: /tmp/tmpopxnsixb.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result = \"_\" + result.substr(2);\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpvb345eja: /tmp/tmpvb345eja.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpevowt9sd: /tmp/tmpevowt9sd.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"__\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmp14hz7g4q: /tmp/tmp14hz7g4q.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmp24vjcqkg: /tmp/tmp24vjcqkg.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpsk4fixme: /tmp/tmpsk4fixme.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpbgwqiu_d: /tmp/tmpbgwqiu_d.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.find(\"  \") != std::string::npos) {\n        result = result.replace(\"  \", \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpdp0rpf8b.cpp: In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpdp0rpf8b.cpp:24:42: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(const char [3], const char [2])\u2019\n   24 |         result = result.replace(\"  \", \"_\");\n      |                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpdp0rpf8b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 |       replace(size_type __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7: note:   candidate expects 3 arguments, 2 provided\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"__\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpi4oimxr1: /tmp/tmpi4oimxr1.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmprbkzin47: /tmp/tmprbkzin47.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpsk4fixme: /tmp/tmpsk4fixme.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpozdysiyd: /tmp/tmpozdysiyd.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpbgwqiu_d: /tmp/tmpbgwqiu_d.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpsk4fixme: /tmp/tmpsk4fixme.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result.substr(result.length() - 2) == \"  \") {\n        result.replace(result.length() - 2, 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpmamb0a3e: /tmp/tmpmamb0a3e.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmp3v2zx8tu: /tmp/tmp3v2zx8tu.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmp3v2zx8tu: /tmp/tmp3v2zx8tu.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmp_69k_ngs: /tmp/tmp_69k_ngs.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 1; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpt2gg125j: /tmp/tmpt2gg125j.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpbgwqiu_d: /tmp/tmpbgwqiu_d.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (std::string::size_type i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[result.size() - 1] == ' ') {\n        result.erase(result.size() - 1);\n        result += '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmppbjpa4u1: /tmp/tmppbjpa4u1.cpp:34: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpry1xjpet: /tmp/tmpry1xjpet.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpry1xjpet: /tmp/tmpry1xjpet.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpozdysiyd: /tmp/tmpozdysiyd.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string::size_type pos = 0;\n    while ((pos = text.find(' ', pos)) != std::string::npos) {\n        if (pos > 0 && text[pos - 1] == ' ') {\n            text.erase(pos, 1);\n            text.insert(pos, '_');\n        }\n        pos++;\n    }\n    pos = 0;\n    while ((pos = text.find(' ', pos)) != std::string::npos) {\n        if (pos > 0 && text[pos - 1] == ' ' && pos < text.size() - 1 && text[pos + 1] == ' ') {\n            text.erase(pos, 1);\n            text.insert(pos, '-');\n        }\n        pos++;\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "/tmp/tmpkv73etnb.cpp: In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpkv73etnb.cpp:19:33: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::size_type&, char)\u2019\n   19 |             text.insert(pos, '_');\n      |                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpkv73etnb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; ty",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result = result.substr(2);\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpcxz9_jf0: /tmp/tmpcxz9_jf0.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp1m1c5ie2: /tmp/tmp1m1c5ie2.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpf6881hkq: /tmp/tmpf6881hkq.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result.erase(0, 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpstt12tnc: /tmp/tmpstt12tnc.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string::size_type pos = 0;\n    while ((pos = text.find(' ', pos)) != std::string::npos) {\n        if (pos > 0 && text[pos - 1] == ' ') {\n            text.replace(pos, 1, \"_\");\n        } else {\n            text.replace(pos, 1, \" \");\n        }\n        pos++;\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpxm8enc32: /tmp/tmpxm8enc32.cpp:29: int main(): Assertion `candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result.erase(0, 1);\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmp8y1l6vsk: /tmp/tmp8y1l6vsk.cpp:34: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\" \", pos)) != std::string::npos) {\n        if (pos > 0 && text[pos - 1] == ' ') {\n            text.replace(pos, 1, \"_\");\n        } else {\n            text.replace(pos, 1, \" \");\n        }\n        pos++;\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpbvt7hwcy: /tmp/tmpbvt7hwcy.cpp:29: int main(): Assertion `candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else {\n            result += c;\n        }\n    }\n    auto pos = result.find(\"  \");\n    while (pos != std::string::npos) {\n        result.replace(pos, 2, \"_\");\n        pos = result.find(\"  \", pos + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmppgpa92he: /tmp/tmppgpa92he.cpp:35: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result.push_back('_');\n        } else {\n            result.push_back(text[i]);\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size(); ++i) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmploxdki0p: /tmp/tmploxdki0p.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpy7639_s8: /tmp/tmpy7639_s8.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 1; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpgr_jb5eb: /tmp/tmpgr_jb5eb.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmpxq1jlv2x: /tmp/tmpxq1jlv2x.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size(); i++) {\n            if (result[i] == ' ' && result[i+1] == ' ') {\n                result[i] = '-';\n                result.erase(i+1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmpae716q4h: /tmp/tmpae716q4h.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result.push_back('_');\n        } else {\n            result.push_back(text[i]);\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmpb8u8lcmd: /tmp/tmpb8u8lcmd.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmprk7lidjo: /tmp/tmprk7lidjo.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpozdysiyd: /tmp/tmpozdysiyd.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (std::string::size_type i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result.push_back('_');\n        } else {\n            result.push_back(text[i]);\n        }\n    }\n    if (result.size() > 2) {\n        for (std::string::size_type i = 0; i < result.size() - 2; ++i) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmpbq4uq5t9: /tmp/tmpbq4uq5t9.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmp3v2zx8tu: /tmp/tmp3v2zx8tu.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpevowt9sd: /tmp/tmpevowt9sd.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp6lvf8u71: /tmp/tmp6lvf8u71.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == ' ') {\n        result[0] = '_';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmph48teaoy: /tmp/tmph48teaoy.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpsk4fixme: /tmp/tmpsk4fixme.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\" \", pos)) != std::string::npos) {\n        if (pos > 0 && text[pos - 1] == ' ') {\n            text.replace(pos, 1, \"_\");\n        }\n        pos++;\n    }\n    pos = 0;\n    while ((pos = text.find(\"  \", pos)) != std::string::npos) {\n        if (pos > 0 && text[pos - 1] == ' ') {\n            text.replace(pos, 2, \"_\");\n        }\n        pos++;\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmpdnic4u2r: /tmp/tmpdnic4u2r.cpp:34: int main(): Assertion `candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpf6881hkq: /tmp/tmpf6881hkq.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size(); ++i) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmpyr3mr3p4: /tmp/tmpyr3mr3p4.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n            j = i;\n        }\n        i++;\n    }\n    if (j < text.length()) {\n        while (text[j] == ' ') {\n            text[j] = '_';\n            j++;\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmpzs52356o: /tmp/tmpzs52356o.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 1; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpgr_jb5eb: /tmp/tmpgr_jb5eb.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp_w8nxa5p: /tmp/tmp_w8nxa5p.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string ret = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            ret += '_';\n        } else {\n            ret += text[i];\n        }\n    }\n    if (ret.length() > 2) {\n        for (int i = 0; i < ret.length() - 2; i++) {\n            if (ret[i] == ' ' && ret[i + 1] == ' ') {\n                ret[i] = '-';\n                ret[i + 1] = '-';\n            }\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmpfwtjsf3b: /tmp/tmpfwtjsf3b.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmpy2iaa2zw: /tmp/tmpy2iaa2zw.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmprbkzin47: /tmp/tmprbkzin47.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpry1xjpet: /tmp/tmpry1xjpet.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.find(\"  \") != std::string::npos) {\n        result = result.replace(\"  \", \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpdp0rpf8b.cpp: In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpdp0rpf8b.cpp:24:42: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(const char [3], const char [2])\u2019\n   24 |         result = result.replace(\"  \", \"_\");\n      |                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpdp0rpf8b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 |       replace(size_type __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7: note:   candidate expects 3 arguments, 2 provided\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string ret = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            ret += '_';\n        } else {\n            ret += text[i];\n        }\n    }\n    if (ret.length() > 2 && ret.find(\"  \") != std::string::npos) {\n        ret = ret.replace(\"  \", \"-\");\n    }\n    return ret;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "/tmp/tmpvgbd7dqy.cpp: In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpvgbd7dqy.cpp:24:36: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(const char [3], const char [2])\u2019\n   24 |         ret = ret.replace(\"  \", \"-\");\n      |                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpvgbd7dqy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 |       replace(size_type __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7: note:   candidate expects 3 arguments, 2 provided\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/bas",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp1m1c5ie2: /tmp/tmp1m1c5ie2.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmpjo96j4eb: /tmp/tmpjo96j4eb.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmppg4v6hqr: /tmp/tmppg4v6hqr.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '_';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "tmpsl32sjzg: /tmp/tmpsl32sjzg.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmpswbi1tt5: /tmp/tmpswbi1tt5.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmp_w8nxa5p: /tmp/tmp_w8nxa5p.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length(); i++) {\n            if (result[i] == ' ' && result[i+1] == ' ') {\n                result[i] = '-';\n                result.erase(i+1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmptzinxgoe: /tmp/tmptzinxgoe.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmp3v2zx8tu: /tmp/tmp3v2zx8tu.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmp24vjcqkg: /tmp/tmp24vjcqkg.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "tmpsk4fixme: /tmp/tmpsk4fixme.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ' && result[1] == ' ') {\n        result = \"_\" + result.substr(2);\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpvb345eja: /tmp/tmpvb345eja.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2 && result[0] == ' ') {\n        result[0] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpozdysiyd: /tmp/tmpozdysiyd.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmp3v2zx8tu: /tmp/tmp3v2zx8tu.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    while (result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmprk7lidjo: /tmp/tmprk7lidjo.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result.erase(i + 1, 2);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpcxeh8lse: /tmp/tmpcxeh8lse.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length(); i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n                i++;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmpc804zeff: /tmp/tmpc804zeff.cpp:38: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmpubxs5h9d: /tmp/tmpubxs5h9d.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result[0] == ' ') {\n        result = result.substr(1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmpj65uv7jp: /tmp/tmpj65uv7jp.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.size() > 2) {\n        for (int i = 0; i < result.size() - 2; i++) {\n            if (result[i] == ' ' && result[i+1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "tmpgb1x7lk_: /tmp/tmpgb1x7lk_.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2 && result.find(\"  \") != std::string::npos) {\n        result.replace(result.find(\"  \"), 2, \"__\");\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "tmpi4oimxr1: /tmp/tmpi4oimxr1.cpp:33: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                result[i] = '-';\n                result[i + 1] = '-';\n                result[i + 2] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpbgwqiu_d: /tmp/tmpbgwqiu_d.cpp:39: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 1; i++) {\n            if (result[i] == ' ' && result[i + 1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "tmpgr_jb5eb: /tmp/tmpgr_jb5eb.cpp:37: int main(): Assertion `candidate((\"Exa   mple\")) == (\"Exa-mple\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}