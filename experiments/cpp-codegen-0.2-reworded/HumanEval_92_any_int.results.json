{
  "name": "HumanEval_92_any_int",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n",
  "tests": "}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || x + z == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpsv1bpfyw: /tmp/tmpsv1bpfyw.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || z + x == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpoevvft5a: /tmp/tmpoevvft5a.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y != z || x + z != y || y + z != x)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp3ezlbsaz: /tmp/tmp3ezlbsaz.cpp:22: int main(): Assertion `candidate((float(2)), (float(3)), (float(1))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y == z || y + z == x || z + x == y) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp2o91rued: /tmp/tmp2o91rued.cpp:25: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y == z || y + z == x || z + x == y) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp2o91rued: /tmp/tmp2o91rued.cpp:25: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n  return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpuxm9gh23: /tmp/tmpuxm9gh23.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y != z) {\n        return false;\n    }\n    if (x < 0 || y < 0 || z < 0) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpm7v_ta1f: /tmp/tmpm7v_ta1f.cpp:26: int main(): Assertion `candidate((float(2)), (float(3)), (float(1))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y == z || y + z == x || z + x == y)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp1mbu0698: /tmp/tmp1mbu0698.cpp:24: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y == z || y + z == x || z + x == y) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp2o91rued: /tmp/tmp2o91rued.cpp:25: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || z + x == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpoevvft5a: /tmp/tmpoevvft5a.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n  return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpuxm9gh23: /tmp/tmpuxm9gh23.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || z + x == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpoevvft5a: /tmp/tmpoevvft5a.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n  return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpuxm9gh23: /tmp/tmpuxm9gh23.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || z + x == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpoevvft5a: /tmp/tmpoevvft5a.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y == z || y + z == x || z + x == y)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp1mbu0698: /tmp/tmp1mbu0698.cpp:24: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n  return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpuxm9gh23: /tmp/tmpuxm9gh23.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n  return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpuxm9gh23: /tmp/tmpuxm9gh23.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y == z || y + z == x || z + x == y) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp2o91rued: /tmp/tmp2o91rued.cpp:25: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y == z || y + z == x || z + x == y) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp2o91rued: /tmp/tmp2o91rued.cpp:25: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y != z)\n        return false;\n    if (x - y != z)\n        return false;\n    if (y - x != z)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpllhrxytk: /tmp/tmpllhrxytk.cpp:26: int main(): Assertion `candidate((float(2)), (float(3)), (float(1))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n  return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpn2qfnpxi: /tmp/tmpn2qfnpxi.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n  return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpuxm9gh23: /tmp/tmpuxm9gh23.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n  return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpuxm9gh23: /tmp/tmpuxm9gh23.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || z + x == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpoevvft5a: /tmp/tmpoevvft5a.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y != z || y + z != x || x + z != y)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp49iwh82t: /tmp/tmp49iwh82t.cpp:22: int main(): Assertion `candidate((float(2)), (float(3)), (float(1))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y == z || y + z == x || z + x == y) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp2o91rued: /tmp/tmp2o91rued.cpp:25: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y != z || x + z != y || y + z != x)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp3ezlbsaz: /tmp/tmp3ezlbsaz.cpp:22: int main(): Assertion `candidate((float(2)), (float(3)), (float(1))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y == z || y + z == x || z + x == y)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp1mbu0698: /tmp/tmp1mbu0698.cpp:24: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || z + x == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpoevvft5a: /tmp/tmpoevvft5a.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || z + x == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpoevvft5a: /tmp/tmpoevvft5a.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y == z || y + z == x || z + x == y) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp2o91rued: /tmp/tmp2o91rued.cpp:25: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || z + x == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpoevvft5a: /tmp/tmpoevvft5a.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n  return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpuxm9gh23: /tmp/tmpuxm9gh23.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || z + x == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpoevvft5a: /tmp/tmpoevvft5a.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n  return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpuxm9gh23: /tmp/tmpuxm9gh23.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || z + x == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpoevvft5a: /tmp/tmpoevvft5a.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || z + x == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpoevvft5a: /tmp/tmpoevvft5a.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y != z) return false;\n    if (x - y != z) return false;\n    if (y - x != z) return false;\n    return true;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmplgphxtbj: /tmp/tmplgphxtbj.cpp:23: int main(): Assertion `candidate((float(2)), (float(3)), (float(1))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n  return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpuxm9gh23: /tmp/tmpuxm9gh23.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y != z || x + z != y || y + z != x) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpyvlzduec: /tmp/tmpyvlzduec.cpp:23: int main(): Assertion `candidate((float(2)), (float(3)), (float(1))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (x + z == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpw8mhwzap: /tmp/tmpw8mhwzap.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp6bomyn8z: /tmp/tmp6bomyn8z.cpp:100: int main(): Assertion `candidate((float(2)), (float(3)), (float(1))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n  return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpuxm9gh23: /tmp/tmpuxm9gh23.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y == z || y + z == x || z + x == y) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp2o91rued: /tmp/tmp2o91rued.cpp:25: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y == z || y + z == x || z + x == y) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp2o91rued: /tmp/tmp2o91rued.cpp:25: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y == z || y + z == x || z + x == y) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp2o91rued: /tmp/tmp2o91rued.cpp:25: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || z + x == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpoevvft5a: /tmp/tmpoevvft5a.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n  return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpuxm9gh23: /tmp/tmpuxm9gh23.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y == z || y + z == x || z + x == y) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp2o91rued: /tmp/tmp2o91rued.cpp:25: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n    if (x + y != z) {\n        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp6bomyn8z: /tmp/tmp6bomyn8z.cpp:100: int main(): Assertion `candidate((float(2)), (float(3)), (float(1))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    if (x + y == z || y + z == x || z + x == y) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmp2o91rued: /tmp/tmp2o91rued.cpp:25: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n  return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpuxm9gh23: /tmp/tmpuxm9gh23.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n  return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpuxm9gh23: /tmp/tmpuxm9gh23.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || x + z == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpsv1bpfyw: /tmp/tmpsv1bpfyw.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || z + x == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpoevvft5a: /tmp/tmpoevvft5a.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return (x + y == z) || (y + z == x) || (z + x == y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpfhlgu1l1: /tmp/tmpfhlgu1l1.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// True\n// >>> any_int(3, 2, 2)\n// False\n// >>> any_int(3, -2, 1)\n// True\n// >>> any_int(3.6, -2.2, 2)\n// False\nbool any_int(float x, float y, float z) {\n    return x + y == z || y + z == x || z + x == y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n}\n",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "tmpoevvft5a: /tmp/tmpoevvft5a.cpp:22: int main(): Assertion `candidate((1.5), (float(5)), (3.5)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}