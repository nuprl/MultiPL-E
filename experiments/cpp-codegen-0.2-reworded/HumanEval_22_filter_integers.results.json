{
  "name": "HumanEval_22_filter_integers",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n",
  "tests": "}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto it = values.begin(); it != values.end(); ++it) {\n        if (std::is_integral(*it)) {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "/tmp/tmpu52u_57w.cpp: In function \u2018std::vector<long int> filter_integers(std::vector<std::any>)\u2019:\n/tmp/tmpu52u_57w.cpp:11:33: error: class template argument deduction failed:\n   11 |         if (std::is_integral(*it)) {\n      |                                 ^\n/tmp/tmpu52u_57w.cpp:11:33: error: no matching function for call to \u2018is_integral(std::any&)\u2019\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/move.h:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_pair.h:59,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:64,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpu52u_57w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/type_traits:324:12: note: candidate: \u2018template<class _Tp> is_integral(std::is_integral<_Tp>)-> std::is_integral<_Tp>\u2019\n  324 |     struct is_integral\n      |            ^~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/type_traits:324:12: note:   template argument deduction/substitution failed:\n/tmp/tmpu52u_57w.cpp:11:33: note:   \u2018std::any\u2019 is not derived from \u2018std::is_integral<_Tp>\u2019\n   11 |         if (std::is_integral(*it)) {\n      |                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp_fqeuwjm: /tmp/tmp_fqeuwjm.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto& value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpctebib5u: /tmp/tmpctebib5u.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<std::any>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpwjv8au6l: /tmp/tmpwjv8au6l.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp_fqeuwjm: /tmp/tmp_fqeuwjm.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<std::any>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpwjv8au6l: /tmp/tmpwjv8au6l.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp_fqeuwjm: /tmp/tmp_fqeuwjm.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> filtered;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            filtered.push_back(std::any_cast<long>(value));\n        }\n    }\n    return filtered;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph3wl_7o6: /tmp/tmph3wl_7o6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto it = values.begin(); it != values.end(); ++it) {\n        if (std::is_integral<decltype(*it)>()) {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp8g85qrt8: /tmp/tmp8g85qrt8.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<std::any>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpwjv8au6l: /tmp/tmpwjv8au6l.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto &value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp1rqseyfd: /tmp/tmp1rqseyfd.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp_fqeuwjm: /tmp/tmp_fqeuwjm.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp_fqeuwjm: /tmp/tmp_fqeuwjm.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<std::any>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpwjv8au6l: /tmp/tmpwjv8au6l.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> filtered_values;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            filtered_values.push_back(std::any_cast<long>(value));\n        }\n    }\n    return filtered_values;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp72od70uu: /tmp/tmp72od70uu.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp_fqeuwjm: /tmp/tmp_fqeuwjm.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp_fqeuwjm: /tmp/tmp_fqeuwjm.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp_fqeuwjm: /tmp/tmp_fqeuwjm.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto& value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmptpr9f25p: /tmp/tmptpr9f25p.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> filtered;\n  for (auto &value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      filtered.push_back(std::any_cast<long>(value));\n    }\n  }\n  return filtered;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmphmn1xn97: /tmp/tmphmn1xn97.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<std::any>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpwjv8au6l: /tmp/tmpwjv8au6l.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<std::any>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpwjv8au6l: /tmp/tmpwjv8au6l.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto it = values.begin(); it != values.end(); ++it) {\n        if (std::is_integral<decltype(*it)>()) {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp8g85qrt8: /tmp/tmp8g85qrt8.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> filtered;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      filtered.push_back(std::any_cast<long>(value));\n    }\n  }\n  return filtered;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp8o4woq7s: /tmp/tmp8o4woq7s.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> filtered_values;\n    for (std::any value : values) {\n        if (std::is_integral<std::any>::value) {\n            filtered_values.push_back(std::any_cast<long>(value));\n        }\n    }\n    return filtered_values;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpfta2e0ru: /tmp/tmpfta2e0ru.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp_fqeuwjm: /tmp/tmp_fqeuwjm.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto& value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmptpr9f25p: /tmp/tmptpr9f25p.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto v : values) {\n    if (std::is_integral<decltype(v)>::value) {\n      result.push_back(std::any_cast<long>(v));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp_oyzp961: /tmp/tmp_oyzp961.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> filtered_values;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            filtered_values.push_back(std::any_cast<long>(value));\n        }\n    }\n    return filtered_values;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmplkqcyqx6: /tmp/tmplkqcyqx6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto it = values.begin(); it != values.end(); ++it) {\n        if (std::is_integral<decltype(*it)>()) {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp8g85qrt8: /tmp/tmp8g85qrt8.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto it = values.begin(); it != values.end(); ++it) {\n        if (std::is_integral(*it)) {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "/tmp/tmpu52u_57w.cpp: In function \u2018std::vector<long int> filter_integers(std::vector<std::any>)\u2019:\n/tmp/tmpu52u_57w.cpp:11:33: error: class template argument deduction failed:\n   11 |         if (std::is_integral(*it)) {\n      |                                 ^\n/tmp/tmpu52u_57w.cpp:11:33: error: no matching function for call to \u2018is_integral(std::any&)\u2019\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/move.h:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_pair.h:59,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:64,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpu52u_57w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/type_traits:324:12: note: candidate: \u2018template<class _Tp> is_integral(std::is_integral<_Tp>)-> std::is_integral<_Tp>\u2019\n  324 |     struct is_integral\n      |            ^~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/type_traits:324:12: note:   template argument deduction/substitution failed:\n/tmp/tmpu52u_57w.cpp:11:33: note:   \u2018std::any\u2019 is not derived from \u2018std::is_integral<_Tp>\u2019\n   11 |         if (std::is_integral(*it)) {\n      |                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (std::any value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp8b6rpkg6: /tmp/tmp8b6rpkg6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> filtered_values;\n    for (std::any value : values) {\n        if (std::is_integral<std::any>::value) {\n            filtered_values.push_back(std::any_cast<long>(value));\n        }\n    }\n    return filtered_values;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpfta2e0ru: /tmp/tmpfta2e0ru.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp_fqeuwjm: /tmp/tmp_fqeuwjm.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto v : values) {\n    if (std::is_integral<decltype(v)>::value) {\n      result.push_back(std::any_cast<long>(v));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp_oyzp961: /tmp/tmp_oyzp961.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto &v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpuqvt1n9q: /tmp/tmpuqvt1n9q.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> filtered;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      filtered.push_back(std::any_cast<long>(value));\n    }\n  }\n  return filtered;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp8o4woq7s: /tmp/tmp8o4woq7s.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp_fqeuwjm: /tmp/tmp_fqeuwjm.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto it = values.begin(); it != values.end(); ++it) {\n        if (std::any_cast<long>(*it)) {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto &v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpuqvt1n9q: /tmp/tmpuqvt1n9q.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto it = values.begin(); it != values.end(); ++it) {\n        if (std::is_integral<decltype(*it)>()) {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp8g85qrt8: /tmp/tmp8g85qrt8.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<std::any>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpwjv8au6l: /tmp/tmpwjv8au6l.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto it = values.begin(); it != values.end(); ++it) {\n        if (std::is_integral<decltype(*it)>::value) {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpv10cda3u: /tmp/tmpv10cda3u.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp_fqeuwjm: /tmp/tmp_fqeuwjm.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto &value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmppwvw5nd4: /tmp/tmppwvw5nd4.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpf5chovz6: /tmp/tmpf5chovz6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto &value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp1rqseyfd: /tmp/tmp1rqseyfd.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> filtered_values;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            filtered_values.push_back(std::any_cast<long>(value));\n        }\n    }\n    return filtered_values;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmplkqcyqx6: /tmp/tmplkqcyqx6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (std::any value : values) {\n        if (std::is_integral<std::any>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpwjv8au6l: /tmp/tmpwjv8au6l.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> filtered;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            filtered.push_back(std::any_cast<long>(value));\n        }\n    }\n    return filtered;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph3wl_7o6: /tmp/tmph3wl_7o6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto& value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmpctebib5u: /tmp/tmpctebib5u.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (std::any value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp8b6rpkg6: /tmp/tmp8b6rpkg6.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n  std::vector<long> result;\n  for (auto value : values) {\n    if (std::is_integral<decltype(value)>::value) {\n      result.push_back(std::any_cast<long>(value));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmp_fqeuwjm: /tmp/tmp_fqeuwjm.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto v : values) {\n        if (std::is_integral<decltype(v)>::value) {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "tmpg6n6ujx3: /tmp/tmpg6n6ujx3.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral<decltype(value)>::value) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "tmph2hx22_r: /tmp/tmph2hx22_r.cpp:20: int main(): Assertion `candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}